
test-virtual-comport.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000066dc  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000100  0800686c  0800686c  0001686c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800696c  0800696c  0002035c  2**0
                  CONTENTS
  4 .ARM          00000008  0800696c  0800696c  0001696c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08006974  08006974  0002035c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006974  08006974  00016974  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08006978  08006978  00016978  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000035c  20000000  0800697c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0002035c  2**0
                  CONTENTS
 10 .bss          00005e1c  2000035c  2000035c  0002035c  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20006178  20006178  0002035c  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0002035c  2**0
                  CONTENTS, READONLY
 13 .debug_info   0002c4b9  00000000  00000000  0002038c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00005b1a  00000000  00000000  0004c845  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_loc    00012435  00000000  00000000  0005235f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 000014f8  00000000  00000000  00064798  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_ranges 00001578  00000000  00000000  00065c90  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  000271f7  00000000  00000000  00067208  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   00022b8d  00000000  00000000  0008e3ff  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    000d1f8c  00000000  00000000  000b0f8c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .comment      00000053  00000000  00000000  00182f18  2**0
                  CONTENTS, READONLY
 22 .debug_frame  00003eac  00000000  00000000  00182f6c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	2000035c 	.word	0x2000035c
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08006854 	.word	0x08006854

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000360 	.word	0x20000360
 80001cc:	08006854 	.word	0x08006854

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_uldivmod>:
 8000280:	b953      	cbnz	r3, 8000298 <__aeabi_uldivmod+0x18>
 8000282:	b94a      	cbnz	r2, 8000298 <__aeabi_uldivmod+0x18>
 8000284:	2900      	cmp	r1, #0
 8000286:	bf08      	it	eq
 8000288:	2800      	cmpeq	r0, #0
 800028a:	bf1c      	itt	ne
 800028c:	f04f 31ff 	movne.w	r1, #4294967295
 8000290:	f04f 30ff 	movne.w	r0, #4294967295
 8000294:	f000 b96e 	b.w	8000574 <__aeabi_idiv0>
 8000298:	f1ad 0c08 	sub.w	ip, sp, #8
 800029c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002a0:	f000 f806 	bl	80002b0 <__udivmoddi4>
 80002a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ac:	b004      	add	sp, #16
 80002ae:	4770      	bx	lr

080002b0 <__udivmoddi4>:
 80002b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002b4:	9d08      	ldr	r5, [sp, #32]
 80002b6:	4604      	mov	r4, r0
 80002b8:	468c      	mov	ip, r1
 80002ba:	2b00      	cmp	r3, #0
 80002bc:	f040 8083 	bne.w	80003c6 <__udivmoddi4+0x116>
 80002c0:	428a      	cmp	r2, r1
 80002c2:	4617      	mov	r7, r2
 80002c4:	d947      	bls.n	8000356 <__udivmoddi4+0xa6>
 80002c6:	fab2 f282 	clz	r2, r2
 80002ca:	b142      	cbz	r2, 80002de <__udivmoddi4+0x2e>
 80002cc:	f1c2 0020 	rsb	r0, r2, #32
 80002d0:	fa24 f000 	lsr.w	r0, r4, r0
 80002d4:	4091      	lsls	r1, r2
 80002d6:	4097      	lsls	r7, r2
 80002d8:	ea40 0c01 	orr.w	ip, r0, r1
 80002dc:	4094      	lsls	r4, r2
 80002de:	ea4f 4817 	mov.w	r8, r7, lsr #16
 80002e2:	0c23      	lsrs	r3, r4, #16
 80002e4:	fbbc f6f8 	udiv	r6, ip, r8
 80002e8:	fa1f fe87 	uxth.w	lr, r7
 80002ec:	fb08 c116 	mls	r1, r8, r6, ip
 80002f0:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002f4:	fb06 f10e 	mul.w	r1, r6, lr
 80002f8:	4299      	cmp	r1, r3
 80002fa:	d909      	bls.n	8000310 <__udivmoddi4+0x60>
 80002fc:	18fb      	adds	r3, r7, r3
 80002fe:	f106 30ff 	add.w	r0, r6, #4294967295
 8000302:	f080 8119 	bcs.w	8000538 <__udivmoddi4+0x288>
 8000306:	4299      	cmp	r1, r3
 8000308:	f240 8116 	bls.w	8000538 <__udivmoddi4+0x288>
 800030c:	3e02      	subs	r6, #2
 800030e:	443b      	add	r3, r7
 8000310:	1a5b      	subs	r3, r3, r1
 8000312:	b2a4      	uxth	r4, r4
 8000314:	fbb3 f0f8 	udiv	r0, r3, r8
 8000318:	fb08 3310 	mls	r3, r8, r0, r3
 800031c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000320:	fb00 fe0e 	mul.w	lr, r0, lr
 8000324:	45a6      	cmp	lr, r4
 8000326:	d909      	bls.n	800033c <__udivmoddi4+0x8c>
 8000328:	193c      	adds	r4, r7, r4
 800032a:	f100 33ff 	add.w	r3, r0, #4294967295
 800032e:	f080 8105 	bcs.w	800053c <__udivmoddi4+0x28c>
 8000332:	45a6      	cmp	lr, r4
 8000334:	f240 8102 	bls.w	800053c <__udivmoddi4+0x28c>
 8000338:	3802      	subs	r0, #2
 800033a:	443c      	add	r4, r7
 800033c:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000340:	eba4 040e 	sub.w	r4, r4, lr
 8000344:	2600      	movs	r6, #0
 8000346:	b11d      	cbz	r5, 8000350 <__udivmoddi4+0xa0>
 8000348:	40d4      	lsrs	r4, r2
 800034a:	2300      	movs	r3, #0
 800034c:	e9c5 4300 	strd	r4, r3, [r5]
 8000350:	4631      	mov	r1, r6
 8000352:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000356:	b902      	cbnz	r2, 800035a <__udivmoddi4+0xaa>
 8000358:	deff      	udf	#255	; 0xff
 800035a:	fab2 f282 	clz	r2, r2
 800035e:	2a00      	cmp	r2, #0
 8000360:	d150      	bne.n	8000404 <__udivmoddi4+0x154>
 8000362:	1bcb      	subs	r3, r1, r7
 8000364:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000368:	fa1f f887 	uxth.w	r8, r7
 800036c:	2601      	movs	r6, #1
 800036e:	fbb3 fcfe 	udiv	ip, r3, lr
 8000372:	0c21      	lsrs	r1, r4, #16
 8000374:	fb0e 331c 	mls	r3, lr, ip, r3
 8000378:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800037c:	fb08 f30c 	mul.w	r3, r8, ip
 8000380:	428b      	cmp	r3, r1
 8000382:	d907      	bls.n	8000394 <__udivmoddi4+0xe4>
 8000384:	1879      	adds	r1, r7, r1
 8000386:	f10c 30ff 	add.w	r0, ip, #4294967295
 800038a:	d202      	bcs.n	8000392 <__udivmoddi4+0xe2>
 800038c:	428b      	cmp	r3, r1
 800038e:	f200 80e9 	bhi.w	8000564 <__udivmoddi4+0x2b4>
 8000392:	4684      	mov	ip, r0
 8000394:	1ac9      	subs	r1, r1, r3
 8000396:	b2a3      	uxth	r3, r4
 8000398:	fbb1 f0fe 	udiv	r0, r1, lr
 800039c:	fb0e 1110 	mls	r1, lr, r0, r1
 80003a0:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 80003a4:	fb08 f800 	mul.w	r8, r8, r0
 80003a8:	45a0      	cmp	r8, r4
 80003aa:	d907      	bls.n	80003bc <__udivmoddi4+0x10c>
 80003ac:	193c      	adds	r4, r7, r4
 80003ae:	f100 33ff 	add.w	r3, r0, #4294967295
 80003b2:	d202      	bcs.n	80003ba <__udivmoddi4+0x10a>
 80003b4:	45a0      	cmp	r8, r4
 80003b6:	f200 80d9 	bhi.w	800056c <__udivmoddi4+0x2bc>
 80003ba:	4618      	mov	r0, r3
 80003bc:	eba4 0408 	sub.w	r4, r4, r8
 80003c0:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 80003c4:	e7bf      	b.n	8000346 <__udivmoddi4+0x96>
 80003c6:	428b      	cmp	r3, r1
 80003c8:	d909      	bls.n	80003de <__udivmoddi4+0x12e>
 80003ca:	2d00      	cmp	r5, #0
 80003cc:	f000 80b1 	beq.w	8000532 <__udivmoddi4+0x282>
 80003d0:	2600      	movs	r6, #0
 80003d2:	e9c5 0100 	strd	r0, r1, [r5]
 80003d6:	4630      	mov	r0, r6
 80003d8:	4631      	mov	r1, r6
 80003da:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003de:	fab3 f683 	clz	r6, r3
 80003e2:	2e00      	cmp	r6, #0
 80003e4:	d14a      	bne.n	800047c <__udivmoddi4+0x1cc>
 80003e6:	428b      	cmp	r3, r1
 80003e8:	d302      	bcc.n	80003f0 <__udivmoddi4+0x140>
 80003ea:	4282      	cmp	r2, r0
 80003ec:	f200 80b8 	bhi.w	8000560 <__udivmoddi4+0x2b0>
 80003f0:	1a84      	subs	r4, r0, r2
 80003f2:	eb61 0103 	sbc.w	r1, r1, r3
 80003f6:	2001      	movs	r0, #1
 80003f8:	468c      	mov	ip, r1
 80003fa:	2d00      	cmp	r5, #0
 80003fc:	d0a8      	beq.n	8000350 <__udivmoddi4+0xa0>
 80003fe:	e9c5 4c00 	strd	r4, ip, [r5]
 8000402:	e7a5      	b.n	8000350 <__udivmoddi4+0xa0>
 8000404:	f1c2 0320 	rsb	r3, r2, #32
 8000408:	fa20 f603 	lsr.w	r6, r0, r3
 800040c:	4097      	lsls	r7, r2
 800040e:	fa01 f002 	lsl.w	r0, r1, r2
 8000412:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000416:	40d9      	lsrs	r1, r3
 8000418:	4330      	orrs	r0, r6
 800041a:	0c03      	lsrs	r3, r0, #16
 800041c:	fbb1 f6fe 	udiv	r6, r1, lr
 8000420:	fa1f f887 	uxth.w	r8, r7
 8000424:	fb0e 1116 	mls	r1, lr, r6, r1
 8000428:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800042c:	fb06 f108 	mul.w	r1, r6, r8
 8000430:	4299      	cmp	r1, r3
 8000432:	fa04 f402 	lsl.w	r4, r4, r2
 8000436:	d909      	bls.n	800044c <__udivmoddi4+0x19c>
 8000438:	18fb      	adds	r3, r7, r3
 800043a:	f106 3cff 	add.w	ip, r6, #4294967295
 800043e:	f080 808d 	bcs.w	800055c <__udivmoddi4+0x2ac>
 8000442:	4299      	cmp	r1, r3
 8000444:	f240 808a 	bls.w	800055c <__udivmoddi4+0x2ac>
 8000448:	3e02      	subs	r6, #2
 800044a:	443b      	add	r3, r7
 800044c:	1a5b      	subs	r3, r3, r1
 800044e:	b281      	uxth	r1, r0
 8000450:	fbb3 f0fe 	udiv	r0, r3, lr
 8000454:	fb0e 3310 	mls	r3, lr, r0, r3
 8000458:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800045c:	fb00 f308 	mul.w	r3, r0, r8
 8000460:	428b      	cmp	r3, r1
 8000462:	d907      	bls.n	8000474 <__udivmoddi4+0x1c4>
 8000464:	1879      	adds	r1, r7, r1
 8000466:	f100 3cff 	add.w	ip, r0, #4294967295
 800046a:	d273      	bcs.n	8000554 <__udivmoddi4+0x2a4>
 800046c:	428b      	cmp	r3, r1
 800046e:	d971      	bls.n	8000554 <__udivmoddi4+0x2a4>
 8000470:	3802      	subs	r0, #2
 8000472:	4439      	add	r1, r7
 8000474:	1acb      	subs	r3, r1, r3
 8000476:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 800047a:	e778      	b.n	800036e <__udivmoddi4+0xbe>
 800047c:	f1c6 0c20 	rsb	ip, r6, #32
 8000480:	fa03 f406 	lsl.w	r4, r3, r6
 8000484:	fa22 f30c 	lsr.w	r3, r2, ip
 8000488:	431c      	orrs	r4, r3
 800048a:	fa20 f70c 	lsr.w	r7, r0, ip
 800048e:	fa01 f306 	lsl.w	r3, r1, r6
 8000492:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000496:	fa21 f10c 	lsr.w	r1, r1, ip
 800049a:	431f      	orrs	r7, r3
 800049c:	0c3b      	lsrs	r3, r7, #16
 800049e:	fbb1 f9fe 	udiv	r9, r1, lr
 80004a2:	fa1f f884 	uxth.w	r8, r4
 80004a6:	fb0e 1119 	mls	r1, lr, r9, r1
 80004aa:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 80004ae:	fb09 fa08 	mul.w	sl, r9, r8
 80004b2:	458a      	cmp	sl, r1
 80004b4:	fa02 f206 	lsl.w	r2, r2, r6
 80004b8:	fa00 f306 	lsl.w	r3, r0, r6
 80004bc:	d908      	bls.n	80004d0 <__udivmoddi4+0x220>
 80004be:	1861      	adds	r1, r4, r1
 80004c0:	f109 30ff 	add.w	r0, r9, #4294967295
 80004c4:	d248      	bcs.n	8000558 <__udivmoddi4+0x2a8>
 80004c6:	458a      	cmp	sl, r1
 80004c8:	d946      	bls.n	8000558 <__udivmoddi4+0x2a8>
 80004ca:	f1a9 0902 	sub.w	r9, r9, #2
 80004ce:	4421      	add	r1, r4
 80004d0:	eba1 010a 	sub.w	r1, r1, sl
 80004d4:	b2bf      	uxth	r7, r7
 80004d6:	fbb1 f0fe 	udiv	r0, r1, lr
 80004da:	fb0e 1110 	mls	r1, lr, r0, r1
 80004de:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 80004e2:	fb00 f808 	mul.w	r8, r0, r8
 80004e6:	45b8      	cmp	r8, r7
 80004e8:	d907      	bls.n	80004fa <__udivmoddi4+0x24a>
 80004ea:	19e7      	adds	r7, r4, r7
 80004ec:	f100 31ff 	add.w	r1, r0, #4294967295
 80004f0:	d22e      	bcs.n	8000550 <__udivmoddi4+0x2a0>
 80004f2:	45b8      	cmp	r8, r7
 80004f4:	d92c      	bls.n	8000550 <__udivmoddi4+0x2a0>
 80004f6:	3802      	subs	r0, #2
 80004f8:	4427      	add	r7, r4
 80004fa:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80004fe:	eba7 0708 	sub.w	r7, r7, r8
 8000502:	fba0 8902 	umull	r8, r9, r0, r2
 8000506:	454f      	cmp	r7, r9
 8000508:	46c6      	mov	lr, r8
 800050a:	4649      	mov	r1, r9
 800050c:	d31a      	bcc.n	8000544 <__udivmoddi4+0x294>
 800050e:	d017      	beq.n	8000540 <__udivmoddi4+0x290>
 8000510:	b15d      	cbz	r5, 800052a <__udivmoddi4+0x27a>
 8000512:	ebb3 020e 	subs.w	r2, r3, lr
 8000516:	eb67 0701 	sbc.w	r7, r7, r1
 800051a:	fa07 fc0c 	lsl.w	ip, r7, ip
 800051e:	40f2      	lsrs	r2, r6
 8000520:	ea4c 0202 	orr.w	r2, ip, r2
 8000524:	40f7      	lsrs	r7, r6
 8000526:	e9c5 2700 	strd	r2, r7, [r5]
 800052a:	2600      	movs	r6, #0
 800052c:	4631      	mov	r1, r6
 800052e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000532:	462e      	mov	r6, r5
 8000534:	4628      	mov	r0, r5
 8000536:	e70b      	b.n	8000350 <__udivmoddi4+0xa0>
 8000538:	4606      	mov	r6, r0
 800053a:	e6e9      	b.n	8000310 <__udivmoddi4+0x60>
 800053c:	4618      	mov	r0, r3
 800053e:	e6fd      	b.n	800033c <__udivmoddi4+0x8c>
 8000540:	4543      	cmp	r3, r8
 8000542:	d2e5      	bcs.n	8000510 <__udivmoddi4+0x260>
 8000544:	ebb8 0e02 	subs.w	lr, r8, r2
 8000548:	eb69 0104 	sbc.w	r1, r9, r4
 800054c:	3801      	subs	r0, #1
 800054e:	e7df      	b.n	8000510 <__udivmoddi4+0x260>
 8000550:	4608      	mov	r0, r1
 8000552:	e7d2      	b.n	80004fa <__udivmoddi4+0x24a>
 8000554:	4660      	mov	r0, ip
 8000556:	e78d      	b.n	8000474 <__udivmoddi4+0x1c4>
 8000558:	4681      	mov	r9, r0
 800055a:	e7b9      	b.n	80004d0 <__udivmoddi4+0x220>
 800055c:	4666      	mov	r6, ip
 800055e:	e775      	b.n	800044c <__udivmoddi4+0x19c>
 8000560:	4630      	mov	r0, r6
 8000562:	e74a      	b.n	80003fa <__udivmoddi4+0x14a>
 8000564:	f1ac 0c02 	sub.w	ip, ip, #2
 8000568:	4439      	add	r1, r7
 800056a:	e713      	b.n	8000394 <__udivmoddi4+0xe4>
 800056c:	3802      	subs	r0, #2
 800056e:	443c      	add	r4, r7
 8000570:	e724      	b.n	80003bc <__udivmoddi4+0x10c>
 8000572:	bf00      	nop

08000574 <__aeabi_idiv0>:
 8000574:	4770      	bx	lr
 8000576:	bf00      	nop

08000578 <isUSBReady>:
  while(!isUSBReady()); //wait for byte to transmit
}


bool isUSBReady() {
	USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*) hUsbDeviceFS.pClassData;
 8000578:	4b04      	ldr	r3, [pc, #16]	; (800058c <isUSBReady+0x14>)
 800057a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc

	return hcdc->TxState == 0;
 800057e:	f8d3 0214 	ldr.w	r0, [r3, #532]	; 0x214
}
 8000582:	fab0 f080 	clz	r0, r0
 8000586:	0940      	lsrs	r0, r0, #5
 8000588:	4770      	bx	lr
 800058a:	bf00      	nop
 800058c:	20004890 	.word	0x20004890

08000590 <waitForPreviousUartByteToBeSent>:
void waitForPreviousUartByteToBeSent() {
 8000590:	b508      	push	{r3, lr}
  while(!isUSBReady()); //wait for byte to transmit
 8000592:	f7ff fff1 	bl	8000578 <isUSBReady>
 8000596:	2800      	cmp	r0, #0
 8000598:	d0fb      	beq.n	8000592 <waitForPreviousUartByteToBeSent+0x2>
}
 800059a:	bd08      	pop	{r3, pc}

0800059c <formatPixelByteGrayscale>:

uint8_t formatPixelByteGrayscale(uint8_t pixelByte) {
  return pixelByte | 0b00000001; // make pixel color always slightly above 0 since zero is end of line marker
}
 800059c:	f040 0001 	orr.w	r0, r0, #1
 80005a0:	4770      	bx	lr
	...

080005a4 <startNewFrame>:

void startNewFrame(uint8_t pixelFormat) {
 80005a4:	b570      	push	{r4, r5, r6, lr}
 80005a6:	b082      	sub	sp, #8
 80005a8:	4605      	mov	r5, r0
  uint8_t buffer = formatPixelByteGrayscale(*lineBufferProcessByte);
 80005aa:	4b26      	ldr	r3, [pc, #152]	; (8000644 <startNewFrame+0xa0>)
 80005ac:	681b      	ldr	r3, [r3, #0]
 80005ae:	7818      	ldrb	r0, [r3, #0]
 80005b0:	f7ff fff4 	bl	800059c <formatPixelByteGrayscale>
 80005b4:	f88d 0007 	strb.w	r0, [sp, #7]

  waitForPreviousUartByteToBeSent();
 80005b8:	f7ff ffea 	bl	8000590 <waitForPreviousUartByteToBeSent>
  buffer = 0x00;
 80005bc:	2600      	movs	r6, #0
 80005be:	f88d 6007 	strb.w	r6, [sp, #7]
  CDC_Transmit_FS(&buffer, 1);
 80005c2:	2101      	movs	r1, #1
 80005c4:	f10d 0007 	add.w	r0, sp, #7
 80005c8:	f005 faa8 	bl	8005b1c <CDC_Transmit_FS>
  waitForPreviousUartByteToBeSent();
 80005cc:	f7ff ffe0 	bl	8000590 <waitForPreviousUartByteToBeSent>
  buffer = COMMAND_NEW_FRAME;
 80005d0:	2401      	movs	r4, #1
 80005d2:	f88d 4007 	strb.w	r4, [sp, #7]
  CDC_Transmit_FS(&buffer, 1);
 80005d6:	4621      	mov	r1, r4
 80005d8:	f10d 0007 	add.w	r0, sp, #7
 80005dc:	f005 fa9e 	bl	8005b1c <CDC_Transmit_FS>


  // frame width
  waitForPreviousUartByteToBeSent();
 80005e0:	f7ff ffd6 	bl	8000590 <waitForPreviousUartByteToBeSent>
  buffer = (lineLength >> 8) & 0xFF;
 80005e4:	f88d 4007 	strb.w	r4, [sp, #7]
  CDC_Transmit_FS(&buffer, 1);
 80005e8:	4621      	mov	r1, r4
 80005ea:	f10d 0007 	add.w	r0, sp, #7
 80005ee:	f005 fa95 	bl	8005b1c <CDC_Transmit_FS>
  waitForPreviousUartByteToBeSent();
 80005f2:	f7ff ffcd 	bl	8000590 <waitForPreviousUartByteToBeSent>
  buffer = lineLength & 0xFF;
 80005f6:	2340      	movs	r3, #64	; 0x40
 80005f8:	f88d 3007 	strb.w	r3, [sp, #7]
  CDC_Transmit_FS(&buffer, 1);
 80005fc:	4621      	mov	r1, r4
 80005fe:	f10d 0007 	add.w	r0, sp, #7
 8000602:	f005 fa8b 	bl	8005b1c <CDC_Transmit_FS>

  // frame height
  waitForPreviousUartByteToBeSent();
 8000606:	f7ff ffc3 	bl	8000590 <waitForPreviousUartByteToBeSent>
  buffer = (lineCount >> 8) & 0xFF;
 800060a:	f88d 6007 	strb.w	r6, [sp, #7]
  CDC_Transmit_FS(&buffer, 1);
 800060e:	4621      	mov	r1, r4
 8000610:	f10d 0007 	add.w	r0, sp, #7
 8000614:	f005 fa82 	bl	8005b1c <CDC_Transmit_FS>
  waitForPreviousUartByteToBeSent();
 8000618:	f7ff ffba 	bl	8000590 <waitForPreviousUartByteToBeSent>
  buffer = lineCount & 0xFF;
 800061c:	23f0      	movs	r3, #240	; 0xf0
 800061e:	f88d 3007 	strb.w	r3, [sp, #7]
  CDC_Transmit_FS(&buffer, 1);
 8000622:	4621      	mov	r1, r4
 8000624:	f10d 0007 	add.w	r0, sp, #7
 8000628:	f005 fa78 	bl	8005b1c <CDC_Transmit_FS>

  // pixel format
  waitForPreviousUartByteToBeSent();
 800062c:	f7ff ffb0 	bl	8000590 <waitForPreviousUartByteToBeSent>
  buffer = (pixelFormat);
 8000630:	f88d 5007 	strb.w	r5, [sp, #7]
  CDC_Transmit_FS(&buffer, 1);
 8000634:	4621      	mov	r1, r4
 8000636:	f10d 0007 	add.w	r0, sp, #7
 800063a:	f005 fa6f 	bl	8005b1c <CDC_Transmit_FS>
}
 800063e:	b002      	add	sp, #8
 8000640:	bd70      	pop	{r4, r5, r6, pc}
 8000642:	bf00      	nop
 8000644:	200047d8 	.word	0x200047d8

08000648 <waitForVsync>:

void waitForVsync() {
	while(!OV7670_VSYNC);
 8000648:	4b02      	ldr	r3, [pc, #8]	; (8000654 <waitForVsync+0xc>)
 800064a:	691b      	ldr	r3, [r3, #16]
 800064c:	f013 0f80 	tst.w	r3, #128	; 0x80
 8000650:	d0fa      	beq.n	8000648 <waitForVsync>
}
 8000652:	4770      	bx	lr
 8000654:	40020400 	.word	0x40020400

08000658 <waitForPixelClockLow>:
  waitForPixelClockLow();
  waitForPixelClockHigh();
}

void waitForPixelClockLow() {
  while(OV7670_PIXEL_CLOCK);
 8000658:	4b02      	ldr	r3, [pc, #8]	; (8000664 <waitForPixelClockLow+0xc>)
 800065a:	691b      	ldr	r3, [r3, #16]
 800065c:	f013 0f40 	tst.w	r3, #64	; 0x40
 8000660:	d1fa      	bne.n	8000658 <waitForPixelClockLow>
}
 8000662:	4770      	bx	lr
 8000664:	40020000 	.word	0x40020000

08000668 <waitForPixelClockHigh>:

void waitForPixelClockHigh() {
  while(!OV7670_PIXEL_CLOCK);
 8000668:	4b02      	ldr	r3, [pc, #8]	; (8000674 <waitForPixelClockHigh+0xc>)
 800066a:	691b      	ldr	r3, [r3, #16]
 800066c:	f013 0f40 	tst.w	r3, #64	; 0x40
 8000670:	d0fa      	beq.n	8000668 <waitForPixelClockHigh>
}
 8000672:	4770      	bx	lr
 8000674:	40020000 	.word	0x40020000

08000678 <waitForPixelClockRisingEdge>:
void waitForPixelClockRisingEdge() {
 8000678:	b508      	push	{r3, lr}
  waitForPixelClockLow();
 800067a:	f7ff ffed 	bl	8000658 <waitForPixelClockLow>
  waitForPixelClockHigh();
 800067e:	f7ff fff3 	bl	8000668 <waitForPixelClockHigh>
}
 8000682:	bd08      	pop	{r3, pc}

08000684 <readPixelByte>:

void readPixelByte(uint8_t* byte) {
	//OV7670_READ_PIXEL_BYTE(byte);
  if (isEndLine) {
 8000684:	4b13      	ldr	r3, [pc, #76]	; (80006d4 <readPixelByte+0x50>)
 8000686:	781b      	ldrb	r3, [r3, #0]
 8000688:	b16b      	cbz	r3, 80006a6 <readPixelByte+0x22>
	if (flag) {
 800068a:	4b13      	ldr	r3, [pc, #76]	; (80006d8 <readPixelByte+0x54>)
 800068c:	781b      	ldrb	r3, [r3, #0]
 800068e:	b13b      	cbz	r3, 80006a0 <readPixelByte+0x1c>
		*byte = 0b00000000;
 8000690:	2300      	movs	r3, #0
 8000692:	7003      	strb	r3, [r0, #0]
	} else {
		*byte = 0b00011111;
	}

	flag = !flag;
 8000694:	4a10      	ldr	r2, [pc, #64]	; (80006d8 <readPixelByte+0x54>)
 8000696:	7813      	ldrb	r3, [r2, #0]
 8000698:	f083 0301 	eor.w	r3, r3, #1
 800069c:	7013      	strb	r3, [r2, #0]
 800069e:	4770      	bx	lr
		*byte = 0b00011111;
 80006a0:	231f      	movs	r3, #31
 80006a2:	7003      	strb	r3, [r0, #0]
 80006a4:	e7f6      	b.n	8000694 <readPixelByte+0x10>
  } else {
	  OV7670_READ_PIXEL_BYTE(byte);
 80006a6:	4b0d      	ldr	r3, [pc, #52]	; (80006dc <readPixelByte+0x58>)
 80006a8:	691b      	ldr	r3, [r3, #16]
 80006aa:	f3c3 1383 	ubfx	r3, r3, #6, #4
 80006ae:	490c      	ldr	r1, [pc, #48]	; (80006e0 <readPixelByte+0x5c>)
 80006b0:	690a      	ldr	r2, [r1, #16]
 80006b2:	f002 0210 	and.w	r2, r2, #16
 80006b6:	4313      	orrs	r3, r2
 80006b8:	4a0a      	ldr	r2, [pc, #40]	; (80006e4 <readPixelByte+0x60>)
 80006ba:	6912      	ldr	r2, [r2, #16]
 80006bc:	0852      	lsrs	r2, r2, #1
 80006be:	f002 0220 	and.w	r2, r2, #32
 80006c2:	4313      	orrs	r3, r2
 80006c4:	690a      	ldr	r2, [r1, #16]
 80006c6:	0052      	lsls	r2, r2, #1
 80006c8:	f002 02c0 	and.w	r2, r2, #192	; 0xc0
 80006cc:	4313      	orrs	r3, r2
 80006ce:	7003      	strb	r3, [r0, #0]
  }
}
 80006d0:	4770      	bx	lr
 80006d2:	bf00      	nop
 80006d4:	2000037a 	.word	0x2000037a
 80006d8:	20000000 	.word	0x20000000
 80006dc:	40020800 	.word	0x40020800
 80006e0:	40021000 	.word	0x40021000
 80006e4:	40020400 	.word	0x40020400

080006e8 <formatRgbPixelByteH>:
// RRRRRGGG
uint8_t formatRgbPixelByteH(uint8_t pixelByteH) {
  // Make sure that
  // A: pixel color always slightly above 0 since zero is end of line marker
  // B: odd number of bits for H byte under H_BYTE_PARITY_CHECK and H_BYTE_PARITY_INVERT to enable error correction
  if (pixelByteH & H_BYTE_PARITY_CHECK) {
 80006e8:	f010 0f20 	tst.w	r0, #32
 80006ec:	d002      	beq.n	80006f4 <formatRgbPixelByteH+0xc>

	return pixelByteH & (~H_BYTE_PARITY_INVERT);
 80006ee:	f000 00f7 	and.w	r0, r0, #247	; 0xf7
 80006f2:	4770      	bx	lr
  } else {

	return pixelByteH | H_BYTE_PARITY_INVERT;
 80006f4:	f040 0008 	orr.w	r0, r0, #8
  }
}
 80006f8:	4770      	bx	lr

080006fa <formatRgbPixelByteL>:
// GGGBBBBB
uint8_t formatRgbPixelByteL(uint8_t pixelByteL) {
	  // Make sure that
	  // A: pixel color always slightly above 0 since zero is end of line marker
	  // B: even number of bits for L byte under L_BYTE_PARITY_CHECK and L_BYTE_PARITY_INVERT to enable error correction
	  if (pixelByteL & L_BYTE_PARITY_CHECK) {
 80006fa:	f010 0f08 	tst.w	r0, #8
 80006fe:	d002      	beq.n	8000706 <formatRgbPixelByteL+0xc>
	    return pixelByteL | L_BYTE_PARITY_INVERT | L_BYTE_PREVENT_ZERO;
 8000700:	f040 0021 	orr.w	r0, r0, #33	; 0x21
 8000704:	4770      	bx	lr
	  } else {
	    return (pixelByteL & (~L_BYTE_PARITY_INVERT)) | L_BYTE_PREVENT_ZERO;
 8000706:	f020 0021 	bic.w	r0, r0, #33	; 0x21
 800070a:	f040 0001 	orr.w	r0, r0, #1
	  }
}
 800070e:	4770      	bx	lr

08000710 <processNextRgbPixelByte>:

void processNextRgbPixelByte() {
 8000710:	b510      	push	{r4, lr}
 8000712:	b082      	sub	sp, #8
  // Format pixel bytes and send out in different cycles.
  // There is not enough time to do both on faster frame rates.
  if (!lineBufferProcessingByteFormatted) {
 8000714:	4b19      	ldr	r3, [pc, #100]	; (800077c <processNextRgbPixelByte+0x6c>)
 8000716:	781b      	ldrb	r3, [r3, #0]
 8000718:	b9cb      	cbnz	r3, 800074e <processNextRgbPixelByte+0x3e>
    if (lineBufferProcessParityFirstByte) {
 800071a:	4b19      	ldr	r3, [pc, #100]	; (8000780 <processNextRgbPixelByte+0x70>)
 800071c:	781b      	ldrb	r3, [r3, #0]
 800071e:	b17b      	cbz	r3, 8000740 <processNextRgbPixelByte+0x30>
      *lineBufferProcessByte = formatRgbPixelByteH(*lineBufferProcessByte);
 8000720:	4b18      	ldr	r3, [pc, #96]	; (8000784 <processNextRgbPixelByte+0x74>)
 8000722:	681c      	ldr	r4, [r3, #0]
 8000724:	7820      	ldrb	r0, [r4, #0]
 8000726:	f7ff ffdf 	bl	80006e8 <formatRgbPixelByteH>
 800072a:	7020      	strb	r0, [r4, #0]
    } else {
      *lineBufferProcessByte = formatRgbPixelByteL(*lineBufferProcessByte);
    }
    lineBufferProcessingByteFormatted = true;
 800072c:	4b13      	ldr	r3, [pc, #76]	; (800077c <processNextRgbPixelByte+0x6c>)
 800072e:	2201      	movs	r2, #1
 8000730:	701a      	strb	r2, [r3, #0]
    lineBufferProcessParityFirstByte = !lineBufferProcessParityFirstByte;
 8000732:	4a13      	ldr	r2, [pc, #76]	; (8000780 <processNextRgbPixelByte+0x70>)
 8000734:	7813      	ldrb	r3, [r2, #0]
 8000736:	f083 0301 	eor.w	r3, r3, #1
 800073a:	7013      	strb	r3, [r2, #0]
      uint8_t buffer = formatPixelByteGrayscale(*lineBufferProcessByte);
      CDC_Transmit_FS(&buffer, 1);
    lineBufferProcessByte++;
    lineBufferProcessingByteFormatted = false;
  }
}
 800073c:	b002      	add	sp, #8
 800073e:	bd10      	pop	{r4, pc}
      *lineBufferProcessByte = formatRgbPixelByteL(*lineBufferProcessByte);
 8000740:	4b10      	ldr	r3, [pc, #64]	; (8000784 <processNextRgbPixelByte+0x74>)
 8000742:	681c      	ldr	r4, [r3, #0]
 8000744:	7820      	ldrb	r0, [r4, #0]
 8000746:	f7ff ffd8 	bl	80006fa <formatRgbPixelByteL>
 800074a:	7020      	strb	r0, [r4, #0]
 800074c:	e7ee      	b.n	800072c <processNextRgbPixelByte+0x1c>
  } else if (isUSBReady()) {
 800074e:	f7ff ff13 	bl	8000578 <isUSBReady>
 8000752:	2800      	cmp	r0, #0
 8000754:	d0f2      	beq.n	800073c <processNextRgbPixelByte+0x2c>
      uint8_t buffer = formatPixelByteGrayscale(*lineBufferProcessByte);
 8000756:	4c0b      	ldr	r4, [pc, #44]	; (8000784 <processNextRgbPixelByte+0x74>)
 8000758:	6823      	ldr	r3, [r4, #0]
 800075a:	7818      	ldrb	r0, [r3, #0]
 800075c:	f7ff ff1e 	bl	800059c <formatPixelByteGrayscale>
 8000760:	f88d 0007 	strb.w	r0, [sp, #7]
      CDC_Transmit_FS(&buffer, 1);
 8000764:	2101      	movs	r1, #1
 8000766:	f10d 0007 	add.w	r0, sp, #7
 800076a:	f005 f9d7 	bl	8005b1c <CDC_Transmit_FS>
    lineBufferProcessByte++;
 800076e:	6823      	ldr	r3, [r4, #0]
 8000770:	3301      	adds	r3, #1
 8000772:	6023      	str	r3, [r4, #0]
    lineBufferProcessingByteFormatted = false;
 8000774:	4b01      	ldr	r3, [pc, #4]	; (800077c <processNextRgbPixelByte+0x6c>)
 8000776:	2200      	movs	r2, #0
 8000778:	701a      	strb	r2, [r3, #0]
}
 800077a:	e7df      	b.n	800073c <processNextRgbPixelByte+0x2c>
 800077c:	200047d5 	.word	0x200047d5
 8000780:	200047d4 	.word	0x200047d4
 8000784:	200047d8 	.word	0x200047d8

08000788 <endOfLine>:

void endOfLine()   {
 8000788:	b500      	push	{lr}
 800078a:	b083      	sub	sp, #12
  uint8_t buffer = formatPixelByteGrayscale(*lineBufferProcessByte);
 800078c:	4b0e      	ldr	r3, [pc, #56]	; (80007c8 <endOfLine+0x40>)
 800078e:	681b      	ldr	r3, [r3, #0]
 8000790:	7818      	ldrb	r0, [r3, #0]
 8000792:	f7ff ff03 	bl	800059c <formatPixelByteGrayscale>
 8000796:	f88d 0007 	strb.w	r0, [sp, #7]

  waitForPreviousUartByteToBeSent();
 800079a:	f7ff fef9 	bl	8000590 <waitForPreviousUartByteToBeSent>
  buffer = 0x00;
 800079e:	2300      	movs	r3, #0
 80007a0:	f88d 3007 	strb.w	r3, [sp, #7]
  CDC_Transmit_FS(&buffer, 1);
 80007a4:	2101      	movs	r1, #1
 80007a6:	f10d 0007 	add.w	r0, sp, #7
 80007aa:	f005 f9b7 	bl	8005b1c <CDC_Transmit_FS>

  waitForPreviousUartByteToBeSent();
 80007ae:	f7ff feef 	bl	8000590 <waitForPreviousUartByteToBeSent>
  buffer = COMMAND_END_OF_LINE;
 80007b2:	2302      	movs	r3, #2
 80007b4:	f88d 3007 	strb.w	r3, [sp, #7]
  CDC_Transmit_FS(&buffer, 1);
 80007b8:	2101      	movs	r1, #1
 80007ba:	f10d 0007 	add.w	r0, sp, #7
 80007be:	f005 f9ad 	bl	8005b1c <CDC_Transmit_FS>
}
 80007c2:	b003      	add	sp, #12
 80007c4:	f85d fb04 	ldr.w	pc, [sp], #4
 80007c8:	200047d8 	.word	0x200047d8

080007cc <processRgbFrame>:
  for (uint8_t x = 0; x < horizontalBytePaddingLeft; x++) {
    waitForPixelClockRisingEdge();
  }
}

void processRgbFrame() {
 80007cc:	b570      	push	{r4, r5, r6, lr}
  uint16_t y = 0;
  waitForVsync();
 80007ce:	f7ff ff3b 	bl	8000648 <waitForVsync>
  uint16_t y = 0;
 80007d2:	2600      	movs	r6, #0
 80007d4:	e02b      	b.n	800082e <processRgbFrame+0x62>
    for (uint16_t x = 0; x < lineLength * 2; x++) {
      waitForPixelClockRisingEdge();
      if (x < (lineLength - 160) * 2) {
    	 readPixelByte(&lineBuffer[x]);
      } else {
    	  isEndLine = true;
 80007d6:	4d1b      	ldr	r5, [pc, #108]	; (8000844 <processRgbFrame+0x78>)
 80007d8:	2301      	movs	r3, #1
 80007da:	702b      	strb	r3, [r5, #0]
    	  readPixelByte(&lineBuffer[x]);
 80007dc:	481a      	ldr	r0, [pc, #104]	; (8000848 <processRgbFrame+0x7c>)
 80007de:	4420      	add	r0, r4
 80007e0:	f7ff ff50 	bl	8000684 <readPixelByte>
    	  isEndLine = false;
 80007e4:	2300      	movs	r3, #0
 80007e6:	702b      	strb	r3, [r5, #0]
    for (uint16_t x = 0; x < lineLength * 2; x++) {
 80007e8:	3401      	adds	r4, #1
 80007ea:	b2a4      	uxth	r4, r4
 80007ec:	f5b4 7f20 	cmp.w	r4, #640	; 0x280
 80007f0:	d209      	bcs.n	8000806 <processRgbFrame+0x3a>
      waitForPixelClockRisingEdge();
 80007f2:	f7ff ff41 	bl	8000678 <waitForPixelClockRisingEdge>
      if (x < (lineLength - 160) * 2) {
 80007f6:	f5b4 7fa0 	cmp.w	r4, #320	; 0x140
 80007fa:	d2ec      	bcs.n	80007d6 <processRgbFrame+0xa>
    	 readPixelByte(&lineBuffer[x]);
 80007fc:	4812      	ldr	r0, [pc, #72]	; (8000848 <processRgbFrame+0x7c>)
 80007fe:	4420      	add	r0, r4
 8000800:	f7ff ff40 	bl	8000684 <readPixelByte>
 8000804:	e7f0      	b.n	80007e8 <processRgbFrame+0x1c>
        processNextRgbPixelByte();
      }
    }

    // Debug info to get some feedback how mutch data was processed during line read.
    processedByteCountDuringCameraRead = lineBufferProcessByte - (&lineBuffer[0]);
 8000806:	4b11      	ldr	r3, [pc, #68]	; (800084c <processRgbFrame+0x80>)
 8000808:	681b      	ldr	r3, [r3, #0]
 800080a:	4a0f      	ldr	r2, [pc, #60]	; (8000848 <processRgbFrame+0x7c>)
 800080c:	1a9b      	subs	r3, r3, r2
 800080e:	4a10      	ldr	r2, [pc, #64]	; (8000850 <processRgbFrame+0x84>)
 8000810:	8013      	strh	r3, [r2, #0]

    // send rest of the line
    while (lineBufferProcessByte < (&lineBuffer[lineLength* 2])) {
 8000812:	4b0e      	ldr	r3, [pc, #56]	; (800084c <processRgbFrame+0x80>)
 8000814:	681a      	ldr	r2, [r3, #0]
 8000816:	4b0f      	ldr	r3, [pc, #60]	; (8000854 <processRgbFrame+0x88>)
 8000818:	429a      	cmp	r2, r3
 800081a:	d202      	bcs.n	8000822 <processRgbFrame+0x56>
      processNextRgbPixelByte();
 800081c:	f7ff ff78 	bl	8000710 <processNextRgbPixelByte>
 8000820:	e7f7      	b.n	8000812 <processRgbFrame+0x46>
    }

    endOfLine();
 8000822:	f7ff ffb1 	bl	8000788 <endOfLine>

    y++;
 8000826:	3601      	adds	r6, #1
 8000828:	b2b6      	uxth	r6, r6
  } while (y < lineCount);
 800082a:	2eef      	cmp	r6, #239	; 0xef
 800082c:	d809      	bhi.n	8000842 <processRgbFrame+0x76>
    lineBufferProcessByte = &lineBuffer[0];
 800082e:	4b07      	ldr	r3, [pc, #28]	; (800084c <processRgbFrame+0x80>)
 8000830:	4a05      	ldr	r2, [pc, #20]	; (8000848 <processRgbFrame+0x7c>)
 8000832:	601a      	str	r2, [r3, #0]
    lineBufferProcessingByteFormatted = false;
 8000834:	2400      	movs	r4, #0
 8000836:	4b08      	ldr	r3, [pc, #32]	; (8000858 <processRgbFrame+0x8c>)
 8000838:	701c      	strb	r4, [r3, #0]
    lineBufferProcessParityFirstByte = true; // Always start with high byte
 800083a:	4b08      	ldr	r3, [pc, #32]	; (800085c <processRgbFrame+0x90>)
 800083c:	2201      	movs	r2, #1
 800083e:	701a      	strb	r2, [r3, #0]
    for (uint16_t x = 0; x < lineLength * 2; x++) {
 8000840:	e7d4      	b.n	80007ec <processRgbFrame+0x20>
}
 8000842:	bd70      	pop	{r4, r5, r6, pc}
 8000844:	2000037a 	.word	0x2000037a
 8000848:	20004554 	.word	0x20004554
 800084c:	200047d8 	.word	0x200047d8
 8000850:	2000037c 	.word	0x2000037c
 8000854:	200047d4 	.word	0x200047d4
 8000858:	200047d5 	.word	0x200047d5
 800085c:	200047d4 	.word	0x200047d4

08000860 <debugPrint>:

void debugPrint(const char * string) {
 8000860:	b530      	push	{r4, r5, lr}
 8000862:	b083      	sub	sp, #12
 8000864:	4605      	mov	r5, r0
    uint8_t buffer = formatPixelByteGrayscale(*lineBufferProcessByte);
 8000866:	4b1d      	ldr	r3, [pc, #116]	; (80008dc <debugPrint+0x7c>)
 8000868:	681b      	ldr	r3, [r3, #0]
 800086a:	7818      	ldrb	r0, [r3, #0]
 800086c:	f7ff fe96 	bl	800059c <formatPixelByteGrayscale>
 8000870:	f88d 0007 	strb.w	r0, [sp, #7]
    waitForPreviousUartByteToBeSent();
 8000874:	f7ff fe8c 	bl	8000590 <waitForPreviousUartByteToBeSent>
    buffer = 0x00;
 8000878:	2400      	movs	r4, #0
 800087a:	f88d 4007 	strb.w	r4, [sp, #7]
    CDC_Transmit_FS(&buffer, 1);
 800087e:	2101      	movs	r1, #1
 8000880:	f10d 0007 	add.w	r0, sp, #7
 8000884:	f005 f94a 	bl	8005b1c <CDC_Transmit_FS>

    waitForPreviousUartByteToBeSent();
 8000888:	f7ff fe82 	bl	8000590 <waitForPreviousUartByteToBeSent>
    buffer = COMMAND_DEBUG_DATA;
 800088c:	2303      	movs	r3, #3
 800088e:	f88d 3007 	strb.w	r3, [sp, #7]
    CDC_Transmit_FS(&buffer, 1);
 8000892:	2101      	movs	r1, #1
 8000894:	f10d 0007 	add.w	r0, sp, #7
 8000898:	f005 f940 	bl	8005b1c <CDC_Transmit_FS>

    waitForPreviousUartByteToBeSent();
 800089c:	f7ff fe78 	bl	8000590 <waitForPreviousUartByteToBeSent>
    buffer = strlen(string);
 80008a0:	4628      	mov	r0, r5
 80008a2:	f7ff fc95 	bl	80001d0 <strlen>
 80008a6:	f88d 0007 	strb.w	r0, [sp, #7]
    CDC_Transmit_FS(&buffer, 1);
 80008aa:	2101      	movs	r1, #1
 80008ac:	f10d 0007 	add.w	r0, sp, #7
 80008b0:	f005 f934 	bl	8005b1c <CDC_Transmit_FS>

    for (uint16_t i=0; i < strlen(string); i++) {
 80008b4:	4628      	mov	r0, r5
 80008b6:	f7ff fc8b 	bl	80001d0 <strlen>
 80008ba:	4284      	cmp	r4, r0
 80008bc:	d20c      	bcs.n	80008d8 <debugPrint+0x78>
    	waitForPreviousUartByteToBeSent();
 80008be:	f7ff fe67 	bl	8000590 <waitForPreviousUartByteToBeSent>
        buffer = string[i];
 80008c2:	5d2b      	ldrb	r3, [r5, r4]
 80008c4:	f88d 3007 	strb.w	r3, [sp, #7]
        CDC_Transmit_FS(&buffer, 1);
 80008c8:	2101      	movs	r1, #1
 80008ca:	f10d 0007 	add.w	r0, sp, #7
 80008ce:	f005 f925 	bl	8005b1c <CDC_Transmit_FS>
    for (uint16_t i=0; i < strlen(string); i++) {
 80008d2:	3401      	adds	r4, #1
 80008d4:	b2a4      	uxth	r4, r4
 80008d6:	e7ed      	b.n	80008b4 <debugPrint+0x54>
    }
}
 80008d8:	b003      	add	sp, #12
 80008da:	bd30      	pop	{r4, r5, pc}
 80008dc:	200047d8 	.word	0x200047d8

080008e0 <processFrame>:

void processFrame() {
 80008e0:	b510      	push	{r4, lr}
 80008e2:	b088      	sub	sp, #32
	processedByteCountDuringCameraRead = 0;
 80008e4:	4c0c      	ldr	r4, [pc, #48]	; (8000918 <processFrame+0x38>)
 80008e6:	2300      	movs	r3, #0
 80008e8:	8023      	strh	r3, [r4, #0]
	startNewFrame(uartPixelFormat);
 80008ea:	2081      	movs	r0, #129	; 0x81
 80008ec:	f7ff fe5a 	bl	80005a4 <startNewFrame>
//	 //__disable_irq();
//
	processRgbFrame();
 80008f0:	f7ff ff6c 	bl	80007cc <processRgbFrame>

//	//__enable_irq();
	frameCounter++;
 80008f4:	4a09      	ldr	r2, [pc, #36]	; (800091c <processFrame+0x3c>)
 80008f6:	8813      	ldrh	r3, [r2, #0]
 80008f8:	3301      	adds	r3, #1
 80008fa:	b29b      	uxth	r3, r3
 80008fc:	8013      	strh	r3, [r2, #0]
	char str[20];
	snprintf(str, 20, "Frame %d %d", frameCounter, processedByteCountDuringCameraRead);
 80008fe:	8822      	ldrh	r2, [r4, #0]
 8000900:	9200      	str	r2, [sp, #0]
 8000902:	4a07      	ldr	r2, [pc, #28]	; (8000920 <processFrame+0x40>)
 8000904:	2114      	movs	r1, #20
 8000906:	a803      	add	r0, sp, #12
 8000908:	f005 fc0a 	bl	8006120 <sniprintf>
	debugPrint(str);
 800090c:	a803      	add	r0, sp, #12
 800090e:	f7ff ffa7 	bl	8000860 <debugPrint>
}
 8000912:	b008      	add	sp, #32
 8000914:	bd10      	pop	{r4, pc}
 8000916:	bf00      	nop
 8000918:	2000037c 	.word	0x2000037c
 800091c:	20000378 	.word	0x20000378
 8000920:	08006898 	.word	0x08006898

08000924 <vApplicationGetIdleTaskMemory>:
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 8000924:	4b03      	ldr	r3, [pc, #12]	; (8000934 <vApplicationGetIdleTaskMemory+0x10>)
 8000926:	6003      	str	r3, [r0, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 8000928:	4b03      	ldr	r3, [pc, #12]	; (8000938 <vApplicationGetIdleTaskMemory+0x14>)
 800092a:	600b      	str	r3, [r1, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 800092c:	2380      	movs	r3, #128	; 0x80
 800092e:	6013      	str	r3, [r2, #0]
  /* place for user code */
}
 8000930:	4770      	bx	lr
 8000932:	bf00      	nop
 8000934:	20000580 	.word	0x20000580
 8000938:	20000380 	.word	0x20000380

0800093c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800093c:	b500      	push	{lr}
 800093e:	b08b      	sub	sp, #44	; 0x2c
  GPIO_InitTypeDef GPIO_InitStruct = {0};

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000940:	2200      	movs	r2, #0
 8000942:	9200      	str	r2, [sp, #0]
 8000944:	4b20      	ldr	r3, [pc, #128]	; (80009c8 <MX_GPIO_Init+0x8c>)
 8000946:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8000948:	f041 0110 	orr.w	r1, r1, #16
 800094c:	6319      	str	r1, [r3, #48]	; 0x30
 800094e:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8000950:	f001 0110 	and.w	r1, r1, #16
 8000954:	9100      	str	r1, [sp, #0]
 8000956:	9900      	ldr	r1, [sp, #0]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000958:	9201      	str	r2, [sp, #4]
 800095a:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800095c:	f041 0180 	orr.w	r1, r1, #128	; 0x80
 8000960:	6319      	str	r1, [r3, #48]	; 0x30
 8000962:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8000964:	f001 0180 	and.w	r1, r1, #128	; 0x80
 8000968:	9101      	str	r1, [sp, #4]
 800096a:	9901      	ldr	r1, [sp, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800096c:	9202      	str	r2, [sp, #8]
 800096e:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8000970:	f041 0101 	orr.w	r1, r1, #1
 8000974:	6319      	str	r1, [r3, #48]	; 0x30
 8000976:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8000978:	f001 0101 	and.w	r1, r1, #1
 800097c:	9102      	str	r1, [sp, #8]
 800097e:	9902      	ldr	r1, [sp, #8]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000980:	9203      	str	r2, [sp, #12]
 8000982:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8000984:	f041 0104 	orr.w	r1, r1, #4
 8000988:	6319      	str	r1, [r3, #48]	; 0x30
 800098a:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800098c:	f001 0104 	and.w	r1, r1, #4
 8000990:	9103      	str	r1, [sp, #12]
 8000992:	9903      	ldr	r1, [sp, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000994:	9204      	str	r2, [sp, #16]
 8000996:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8000998:	f041 0102 	orr.w	r1, r1, #2
 800099c:	6319      	str	r1, [r3, #48]	; 0x30
 800099e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009a0:	f003 0302 	and.w	r3, r3, #2
 80009a4:	9304      	str	r3, [sp, #16]
 80009a6:	9b04      	ldr	r3, [sp, #16]

  /*Configure GPIO pin : PA8 */
  GPIO_InitStruct.Pin = GPIO_PIN_8;
 80009a8:	f44f 7380 	mov.w	r3, #256	; 0x100
 80009ac:	9305      	str	r3, [sp, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80009ae:	2302      	movs	r3, #2
 80009b0:	9306      	str	r3, [sp, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009b2:	9207      	str	r2, [sp, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009b4:	9208      	str	r2, [sp, #32]
  GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
 80009b6:	9209      	str	r2, [sp, #36]	; 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80009b8:	a905      	add	r1, sp, #20
 80009ba:	4804      	ldr	r0, [pc, #16]	; (80009cc <MX_GPIO_Init+0x90>)
 80009bc:	f000 fbc4 	bl	8001148 <HAL_GPIO_Init>

}
 80009c0:	b00b      	add	sp, #44	; 0x2c
 80009c2:	f85d fb04 	ldr.w	pc, [sp], #4
 80009c6:	bf00      	nop
 80009c8:	40023800 	.word	0x40023800
 80009cc:	40020000 	.word	0x40020000

080009d0 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const * argument)
{
 80009d0:	b500      	push	{lr}
 80009d2:	b083      	sub	sp, #12
  /* init code for USB_DEVICE */
  MX_USB_DEVICE_Init();
 80009d4:	f005 f850 	bl	8005a78 <MX_USB_DEVICE_Init>
	  char * str = (char*) malloc(sizeof (char) * 100);

	  //TODO настройки камеры
	  /* Infinite loop */

	  struct StatusStruct status = setup(&hi2c1, RESOLUTION_QVGA_320x240, PIXEL_RGB565);
 80009d8:	2200      	movs	r2, #0
 80009da:	f44f 71a0 	mov.w	r1, #320	; 0x140
 80009de:	4803      	ldr	r0, [pc, #12]	; (80009ec <StartDefaultTask+0x1c>)
 80009e0:	f000 f922 	bl	8000c28 <setup>
//	        }
//	  }

	  while (1)
	  {
	    processFrame();
 80009e4:	f7ff ff7c 	bl	80008e0 <processFrame>
	  while (1)
 80009e8:	e7fc      	b.n	80009e4 <StartDefaultTask+0x14>
 80009ea:	bf00      	nop
 80009ec:	200047e4 	.word	0x200047e4

080009f0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80009f0:	b510      	push	{r4, lr}
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80009f2:	b672      	cpsid	i
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  char * str = (char*) malloc(sizeof (char) * 100);
 80009f4:	2064      	movs	r0, #100	; 0x64
 80009f6:	f005 fabb 	bl	8005f70 <malloc>
 80009fa:	4604      	mov	r4, r0
  while (1)
  {
      osDelay(1000);
 80009fc:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000a00:	f003 fd9c 	bl	800453c <osDelay>
      sprintf(str, "%s!\n\r", "Error initializing I2C");
 8000a04:	4a06      	ldr	r2, [pc, #24]	; (8000a20 <Error_Handler+0x30>)
 8000a06:	4907      	ldr	r1, [pc, #28]	; (8000a24 <Error_Handler+0x34>)
 8000a08:	4620      	mov	r0, r4
 8000a0a:	f005 fbbd 	bl	8006188 <siprintf>
      osMessagePut(pos_Queue, (uint32_t) str, osWaitForever);
 8000a0e:	f04f 32ff 	mov.w	r2, #4294967295
 8000a12:	4621      	mov	r1, r4
 8000a14:	4b04      	ldr	r3, [pc, #16]	; (8000a28 <Error_Handler+0x38>)
 8000a16:	6818      	ldr	r0, [r3, #0]
 8000a18:	f003 fdac 	bl	8004574 <osMessagePut>
  while (1)
 8000a1c:	e7ee      	b.n	80009fc <Error_Handler+0xc>
 8000a1e:	bf00      	nop
 8000a20:	080068b0 	.word	0x080068b0
 8000a24:	080068c8 	.word	0x080068c8
 8000a28:	20004838 	.word	0x20004838

08000a2c <MX_I2C1_Init>:
{
 8000a2c:	b508      	push	{r3, lr}
  hi2c1.Instance = I2C1;
 8000a2e:	480a      	ldr	r0, [pc, #40]	; (8000a58 <MX_I2C1_Init+0x2c>)
 8000a30:	4b0a      	ldr	r3, [pc, #40]	; (8000a5c <MX_I2C1_Init+0x30>)
 8000a32:	6003      	str	r3, [r0, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8000a34:	4b0a      	ldr	r3, [pc, #40]	; (8000a60 <MX_I2C1_Init+0x34>)
 8000a36:	6043      	str	r3, [r0, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000a38:	2300      	movs	r3, #0
 8000a3a:	6083      	str	r3, [r0, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8000a3c:	60c3      	str	r3, [r0, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000a3e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000a42:	6102      	str	r2, [r0, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000a44:	6143      	str	r3, [r0, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8000a46:	6183      	str	r3, [r0, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000a48:	61c3      	str	r3, [r0, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000a4a:	6203      	str	r3, [r0, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000a4c:	f000 fdbc 	bl	80015c8 <HAL_I2C_Init>
 8000a50:	b900      	cbnz	r0, 8000a54 <MX_I2C1_Init+0x28>
}
 8000a52:	bd08      	pop	{r3, pc}
    Error_Handler();
 8000a54:	f7ff ffcc 	bl	80009f0 <Error_Handler>
 8000a58:	200047e4 	.word	0x200047e4
 8000a5c:	40005400 	.word	0x40005400
 8000a60:	000186a0 	.word	0x000186a0

08000a64 <MX_DCMI_Init>:
{
 8000a64:	b508      	push	{r3, lr}
  hdcmi.Instance = DCMI;
 8000a66:	4809      	ldr	r0, [pc, #36]	; (8000a8c <MX_DCMI_Init+0x28>)
 8000a68:	4b09      	ldr	r3, [pc, #36]	; (8000a90 <MX_DCMI_Init+0x2c>)
 8000a6a:	6003      	str	r3, [r0, #0]
  hdcmi.Init.SynchroMode = DCMI_SYNCHRO_HARDWARE;
 8000a6c:	2300      	movs	r3, #0
 8000a6e:	6043      	str	r3, [r0, #4]
  hdcmi.Init.PCKPolarity = DCMI_PCKPOLARITY_FALLING;
 8000a70:	6083      	str	r3, [r0, #8]
  hdcmi.Init.VSPolarity = DCMI_VSPOLARITY_LOW;
 8000a72:	60c3      	str	r3, [r0, #12]
  hdcmi.Init.HSPolarity = DCMI_HSPOLARITY_LOW;
 8000a74:	6103      	str	r3, [r0, #16]
  hdcmi.Init.CaptureRate = DCMI_CR_ALL_FRAME;
 8000a76:	6143      	str	r3, [r0, #20]
  hdcmi.Init.ExtendedDataMode = DCMI_EXTEND_DATA_10B;
 8000a78:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000a7c:	6182      	str	r2, [r0, #24]
  hdcmi.Init.JPEGMode = DCMI_JPEG_DISABLE;
 8000a7e:	6203      	str	r3, [r0, #32]
  if (HAL_DCMI_Init(&hdcmi) != HAL_OK)
 8000a80:	f000 fb1a 	bl	80010b8 <HAL_DCMI_Init>
 8000a84:	b900      	cbnz	r0, 8000a88 <MX_DCMI_Init+0x24>
}
 8000a86:	bd08      	pop	{r3, pc}
    Error_Handler();
 8000a88:	f7ff ffb2 	bl	80009f0 <Error_Handler>
 8000a8c:	2000483c 	.word	0x2000483c
 8000a90:	50050000 	.word	0x50050000

08000a94 <SystemClock_Config>:
{
 8000a94:	b500      	push	{lr}
 8000a96:	b095      	sub	sp, #84	; 0x54
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000a98:	2230      	movs	r2, #48	; 0x30
 8000a9a:	2100      	movs	r1, #0
 8000a9c:	a808      	add	r0, sp, #32
 8000a9e:	f005 fa7d 	bl	8005f9c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000aa2:	2300      	movs	r3, #0
 8000aa4:	9303      	str	r3, [sp, #12]
 8000aa6:	9304      	str	r3, [sp, #16]
 8000aa8:	9305      	str	r3, [sp, #20]
 8000aaa:	9306      	str	r3, [sp, #24]
 8000aac:	9307      	str	r3, [sp, #28]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000aae:	9301      	str	r3, [sp, #4]
 8000ab0:	4a25      	ldr	r2, [pc, #148]	; (8000b48 <SystemClock_Config+0xb4>)
 8000ab2:	6c11      	ldr	r1, [r2, #64]	; 0x40
 8000ab4:	f041 5180 	orr.w	r1, r1, #268435456	; 0x10000000
 8000ab8:	6411      	str	r1, [r2, #64]	; 0x40
 8000aba:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8000abc:	f002 5280 	and.w	r2, r2, #268435456	; 0x10000000
 8000ac0:	9201      	str	r2, [sp, #4]
 8000ac2:	9a01      	ldr	r2, [sp, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000ac4:	9302      	str	r3, [sp, #8]
 8000ac6:	4b21      	ldr	r3, [pc, #132]	; (8000b4c <SystemClock_Config+0xb8>)
 8000ac8:	681a      	ldr	r2, [r3, #0]
 8000aca:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8000ace:	601a      	str	r2, [r3, #0]
 8000ad0:	681b      	ldr	r3, [r3, #0]
 8000ad2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000ad6:	9302      	str	r3, [sp, #8]
 8000ad8:	9b02      	ldr	r3, [sp, #8]
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSE;
 8000ada:	2303      	movs	r3, #3
 8000adc:	9308      	str	r3, [sp, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000ade:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000ae2:	9309      	str	r3, [sp, #36]	; 0x24
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000ae4:	2301      	movs	r3, #1
 8000ae6:	930b      	str	r3, [sp, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000ae8:	2310      	movs	r3, #16
 8000aea:	930c      	str	r3, [sp, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000aec:	2302      	movs	r3, #2
 8000aee:	930e      	str	r3, [sp, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000af0:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 8000af4:	920f      	str	r2, [sp, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8000af6:	2208      	movs	r2, #8
 8000af8:	9210      	str	r2, [sp, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 8000afa:	f44f 72a8 	mov.w	r2, #336	; 0x150
 8000afe:	9211      	str	r2, [sp, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000b00:	9312      	str	r3, [sp, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8000b02:	2307      	movs	r3, #7
 8000b04:	9313      	str	r3, [sp, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000b06:	a808      	add	r0, sp, #32
 8000b08:	f001 fcae 	bl	8002468 <HAL_RCC_OscConfig>
 8000b0c:	b9c0      	cbnz	r0, 8000b40 <SystemClock_Config+0xac>
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000b0e:	230f      	movs	r3, #15
 8000b10:	9303      	str	r3, [sp, #12]
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000b12:	2302      	movs	r3, #2
 8000b14:	9304      	str	r3, [sp, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000b16:	2300      	movs	r3, #0
 8000b18:	9305      	str	r3, [sp, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000b1a:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000b1e:	9306      	str	r3, [sp, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000b20:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000b24:	9307      	str	r3, [sp, #28]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8000b26:	2105      	movs	r1, #5
 8000b28:	a803      	add	r0, sp, #12
 8000b2a:	f001 ff4d 	bl	80029c8 <HAL_RCC_ClockConfig>
 8000b2e:	b948      	cbnz	r0, 8000b44 <SystemClock_Config+0xb0>
  HAL_RCC_MCOConfig(RCC_MCO1, RCC_MCO1SOURCE_HSI, RCC_MCODIV_1);
 8000b30:	2200      	movs	r2, #0
 8000b32:	4611      	mov	r1, r2
 8000b34:	4610      	mov	r0, r2
 8000b36:	f001 fe93 	bl	8002860 <HAL_RCC_MCOConfig>
}
 8000b3a:	b015      	add	sp, #84	; 0x54
 8000b3c:	f85d fb04 	ldr.w	pc, [sp], #4
    Error_Handler();
 8000b40:	f7ff ff56 	bl	80009f0 <Error_Handler>
    Error_Handler();
 8000b44:	f7ff ff54 	bl	80009f0 <Error_Handler>
 8000b48:	40023800 	.word	0x40023800
 8000b4c:	40007000 	.word	0x40007000

08000b50 <main>:
 {
 8000b50:	b500      	push	{lr}
 8000b52:	b08d      	sub	sp, #52	; 0x34
  HAL_Init();
 8000b54:	f000 fa06 	bl	8000f64 <HAL_Init>
  SystemClock_Config();
 8000b58:	f7ff ff9c 	bl	8000a94 <SystemClock_Config>
  MX_GPIO_Init();
 8000b5c:	f7ff feee 	bl	800093c <MX_GPIO_Init>
  MX_I2C1_Init();
 8000b60:	f7ff ff64 	bl	8000a2c <MX_I2C1_Init>
  MX_DCMI_Init();
 8000b64:	f7ff ff7e 	bl	8000a64 <MX_DCMI_Init>
  MX_USB_DEVICE_Init();
 8000b68:	f004 ff86 	bl	8005a78 <MX_USB_DEVICE_Init>
  osMessageQDef(pos_Queue, QUEUE_SIZE, const char*);
 8000b6c:	4c0e      	ldr	r4, [pc, #56]	; (8000ba8 <main+0x58>)
 8000b6e:	ad08      	add	r5, sp, #32
 8000b70:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8000b74:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
  pos_Queue = osMessageCreate(osMessageQ(pos_Queue), NULL);
 8000b78:	2100      	movs	r1, #0
 8000b7a:	4628      	mov	r0, r5
 8000b7c:	f003 fce5 	bl	800454a <osMessageCreate>
 8000b80:	4b0a      	ldr	r3, [pc, #40]	; (8000bac <main+0x5c>)
 8000b82:	6018      	str	r0, [r3, #0]
  osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 128);
 8000b84:	ad01      	add	r5, sp, #4
 8000b86:	3410      	adds	r4, #16
 8000b88:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000b8a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000b8c:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 8000b90:	e885 0007 	stmia.w	r5, {r0, r1, r2}
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 8000b94:	2100      	movs	r1, #0
 8000b96:	a801      	add	r0, sp, #4
 8000b98:	f003 fc9b 	bl	80044d2 <osThreadCreate>
 8000b9c:	4b04      	ldr	r3, [pc, #16]	; (8000bb0 <main+0x60>)
 8000b9e:	6018      	str	r0, [r3, #0]
  osKernelStart();
 8000ba0:	f003 fc92 	bl	80044c8 <osKernelStart>
  while (1)
 8000ba4:	e7fe      	b.n	8000ba4 <main+0x54>
 8000ba6:	bf00      	nop
 8000ba8:	0800686c 	.word	0x0800686c
 8000bac:	20004838 	.word	0x20004838
 8000bb0:	200047dc 	.word	0x200047dc

08000bb4 <setI2cHandleTypeDef>:
uint8_t writeBuf[2];
uint8_t readBuf;
I2C_HandleTypeDef * baseHi2c1;

void setI2cHandleTypeDef(I2C_HandleTypeDef * hi2c1) {
    baseHi2c1 = hi2c1;
 8000bb4:	4b01      	ldr	r3, [pc, #4]	; (8000bbc <setI2cHandleTypeDef+0x8>)
 8000bb6:	6018      	str	r0, [r3, #0]
}
 8000bb8:	4770      	bx	lr
 8000bba:	bf00      	nop
 8000bbc:	20004884 	.word	0x20004884

08000bc0 <setRegister>:
      programMemPointer++;
    }
  }
}

HAL_StatusTypeDef setRegister(uint8_t addr, uint8_t val) {
 8000bc0:	b500      	push	{lr}
 8000bc2:	b083      	sub	sp, #12
    *(writeBuf + 0) = addr;
 8000bc4:	4b0a      	ldr	r3, [pc, #40]	; (8000bf0 <setRegister+0x30>)
 8000bc6:	7018      	strb	r0, [r3, #0]
    *(writeBuf + 1) = val;
 8000bc8:	7059      	strb	r1, [r3, #1]
    while (HAL_I2C_GetState(baseHi2c1) != HAL_I2C_STATE_READY);
 8000bca:	4b0a      	ldr	r3, [pc, #40]	; (8000bf4 <setRegister+0x34>)
 8000bcc:	6818      	ldr	r0, [r3, #0]
 8000bce:	f000 fe95 	bl	80018fc <HAL_I2C_GetState>
 8000bd2:	2820      	cmp	r0, #32
 8000bd4:	d1f9      	bne.n	8000bca <setRegister+0xa>
    HAL_StatusTypeDef status = HAL_I2C_Master_Transmit(
 8000bd6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000bda:	9300      	str	r3, [sp, #0]
 8000bdc:	2302      	movs	r3, #2
 8000bde:	4a04      	ldr	r2, [pc, #16]	; (8000bf0 <setRegister+0x30>)
 8000be0:	2142      	movs	r1, #66	; 0x42
 8000be2:	4804      	ldr	r0, [pc, #16]	; (8000bf4 <setRegister+0x34>)
 8000be4:	6800      	ldr	r0, [r0, #0]
 8000be6:	f000 fdcd 	bl	8001784 <HAL_I2C_Master_Transmit>
            baseHi2c1, i2cAddress, writeBuf, 2 * sizeof (uint8_t), 1000);

  return status;
}
 8000bea:	b003      	add	sp, #12
 8000bec:	f85d fb04 	ldr.w	pc, [sp], #4
 8000bf0:	20004880 	.word	0x20004880
 8000bf4:	20004884 	.word	0x20004884

08000bf8 <resetSettings>:
HAL_StatusTypeDef resetSettings() {
 8000bf8:	b510      	push	{r4, lr}
  HAL_StatusTypeDef status = setRegister(REG_COM7, COM7_RESET);
 8000bfa:	2180      	movs	r1, #128	; 0x80
 8000bfc:	2012      	movs	r0, #18
 8000bfe:	f7ff ffdf 	bl	8000bc0 <setRegister>
 8000c02:	4604      	mov	r4, r0
  HAL_Delay(500);
 8000c04:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000c08:	f000 f9d8 	bl	8000fbc <HAL_Delay>
}
 8000c0c:	4620      	mov	r0, r4
 8000c0e:	bd10      	pop	{r4, pc}

08000c10 <setRegisters>:
void setRegisters(const struct RegisterData *programMemPointer) {
 8000c10:	b510      	push	{r4, lr}
 8000c12:	4604      	mov	r4, r0
    regData.addr = programMemPointer->addr;
 8000c14:	7820      	ldrb	r0, [r4, #0]
    regData.val = programMemPointer->val;
 8000c16:	7861      	ldrb	r1, [r4, #1]
    if (regData.addr == 0xFF) {
 8000c18:	28ff      	cmp	r0, #255	; 0xff
 8000c1a:	d003      	beq.n	8000c24 <setRegisters+0x14>
      setRegister(regData.addr, regData.val);
 8000c1c:	f7ff ffd0 	bl	8000bc0 <setRegister>
      programMemPointer++;
 8000c20:	3402      	adds	r4, #2
  while (1) {
 8000c22:	e7f7      	b.n	8000c14 <setRegisters+0x4>
}
 8000c24:	bd10      	pop	{r4, pc}
	...

08000c28 <setup>:
#include "ov7670configs/default_configs.h"
#include "ov7670configs/rgb565.h"

enum Resolution resolution;

struct StatusStruct setup(I2C_HandleTypeDef * hi2c1, enum Resolution resolution, enum PixelFormat pixelFormat) {
 8000c28:	b510      	push	{r4, lr}
 8000c2a:	b082      	sub	sp, #8
 8000c2c:	460c      	mov	r4, r1
    setI2cHandleTypeDef(hi2c1);
 8000c2e:	f7ff ffc1 	bl	8000bb4 <setI2cHandleTypeDef>
    struct StatusStruct status;
    status.status = resetSettings();
 8000c32:	f7ff ffe1 	bl	8000bf8 <resetSettings>
 8000c36:	f88d 0000 	strb.w	r0, [sp]
    status.value = false;
 8000c3a:	2300      	movs	r3, #0
 8000c3c:	f88d 3001 	strb.w	r3, [sp, #1]
    if (status.status == HAL_OK) {
 8000c40:	b158      	cbz	r0, 8000c5a <setup+0x32>
//               horizontalBytePaddingRight = 1;
               break;
           }
    }

    return status;
 8000c42:	f8bd 3000 	ldrh.w	r3, [sp]
 8000c46:	2000      	movs	r0, #0
 8000c48:	b2da      	uxtb	r2, r3
 8000c4a:	f362 0007 	bfi	r0, r2, #0, #8
 8000c4e:	f3c3 2307 	ubfx	r3, r3, #8, #8
 8000c52:	f363 200f 	bfi	r0, r3, #8, #8
}
 8000c56:	b002      	add	sp, #8
 8000c58:	bd10      	pop	{r4, pc}
        setRegisters(regsDefault);
 8000c5a:	4808      	ldr	r0, [pc, #32]	; (8000c7c <setup+0x54>)
 8000c5c:	f7ff ffd8 	bl	8000c10 <setRegisters>
        status.value = true;
 8000c60:	2301      	movs	r3, #1
 8000c62:	f88d 3001 	strb.w	r3, [sp, #1]
                setRegisters(regsRGB565);
 8000c66:	4806      	ldr	r0, [pc, #24]	; (8000c80 <setup+0x58>)
 8000c68:	f7ff ffd2 	bl	8000c10 <setRegisters>
        switch (resolution) {
 8000c6c:	f5b4 7fa0 	cmp.w	r4, #320	; 0x140
 8000c70:	d1e7      	bne.n	8000c42 <setup+0x1a>
               setRegisters(regsQVGA);
 8000c72:	4804      	ldr	r0, [pc, #16]	; (8000c84 <setup+0x5c>)
 8000c74:	f7ff ffcc 	bl	8000c10 <setRegisters>
               break;
 8000c78:	e7e3      	b.n	8000c42 <setup+0x1a>
 8000c7a:	bf00      	nop
 8000c7c:	20000004 	.word	0x20000004
 8000c80:	20000158 	.word	0x20000158
 8000c84:	20000140 	.word	0x20000140

08000c88 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000c88:	b500      	push	{lr}
 8000c8a:	b083      	sub	sp, #12
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000c8c:	2200      	movs	r2, #0
 8000c8e:	9200      	str	r2, [sp, #0]
 8000c90:	4b0d      	ldr	r3, [pc, #52]	; (8000cc8 <HAL_MspInit+0x40>)
 8000c92:	6c59      	ldr	r1, [r3, #68]	; 0x44
 8000c94:	f441 4180 	orr.w	r1, r1, #16384	; 0x4000
 8000c98:	6459      	str	r1, [r3, #68]	; 0x44
 8000c9a:	6c59      	ldr	r1, [r3, #68]	; 0x44
 8000c9c:	f401 4180 	and.w	r1, r1, #16384	; 0x4000
 8000ca0:	9100      	str	r1, [sp, #0]
 8000ca2:	9900      	ldr	r1, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000ca4:	9201      	str	r2, [sp, #4]
 8000ca6:	6c19      	ldr	r1, [r3, #64]	; 0x40
 8000ca8:	f041 5180 	orr.w	r1, r1, #268435456	; 0x10000000
 8000cac:	6419      	str	r1, [r3, #64]	; 0x40
 8000cae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000cb0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000cb4:	9301      	str	r3, [sp, #4]
 8000cb6:	9b01      	ldr	r3, [sp, #4]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000cb8:	210f      	movs	r1, #15
 8000cba:	f06f 0001 	mvn.w	r0, #1
 8000cbe:	f000 f9a3 	bl	8001008 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000cc2:	b003      	add	sp, #12
 8000cc4:	f85d fb04 	ldr.w	pc, [sp], #4
 8000cc8:	40023800 	.word	0x40023800

08000ccc <HAL_DCMI_MspInit>:
* This function configures the hardware resources used in this example
* @param hdcmi: DCMI handle pointer
* @retval None
*/
void HAL_DCMI_MspInit(DCMI_HandleTypeDef* hdcmi)
{
 8000ccc:	b570      	push	{r4, r5, r6, lr}
 8000cce:	b08a      	sub	sp, #40	; 0x28
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000cd0:	2300      	movs	r3, #0
 8000cd2:	9305      	str	r3, [sp, #20]
 8000cd4:	9306      	str	r3, [sp, #24]
 8000cd6:	9307      	str	r3, [sp, #28]
 8000cd8:	9308      	str	r3, [sp, #32]
 8000cda:	9309      	str	r3, [sp, #36]	; 0x24
  if(hdcmi->Instance==DCMI)
 8000cdc:	6802      	ldr	r2, [r0, #0]
 8000cde:	4b32      	ldr	r3, [pc, #200]	; (8000da8 <HAL_DCMI_MspInit+0xdc>)
 8000ce0:	429a      	cmp	r2, r3
 8000ce2:	d001      	beq.n	8000ce8 <HAL_DCMI_MspInit+0x1c>
  /* USER CODE BEGIN DCMI_MspInit 1 */

  /* USER CODE END DCMI_MspInit 1 */
  }

}
 8000ce4:	b00a      	add	sp, #40	; 0x28
 8000ce6:	bd70      	pop	{r4, r5, r6, pc}
    __HAL_RCC_DCMI_CLK_ENABLE();
 8000ce8:	2400      	movs	r4, #0
 8000cea:	9400      	str	r4, [sp, #0]
 8000cec:	4b2f      	ldr	r3, [pc, #188]	; (8000dac <HAL_DCMI_MspInit+0xe0>)
 8000cee:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000cf0:	f042 0201 	orr.w	r2, r2, #1
 8000cf4:	635a      	str	r2, [r3, #52]	; 0x34
 8000cf6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000cf8:	f002 0201 	and.w	r2, r2, #1
 8000cfc:	9200      	str	r2, [sp, #0]
 8000cfe:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8000d00:	9401      	str	r4, [sp, #4]
 8000d02:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000d04:	f042 0210 	orr.w	r2, r2, #16
 8000d08:	631a      	str	r2, [r3, #48]	; 0x30
 8000d0a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000d0c:	f002 0210 	and.w	r2, r2, #16
 8000d10:	9201      	str	r2, [sp, #4]
 8000d12:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d14:	9402      	str	r4, [sp, #8]
 8000d16:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000d18:	f042 0201 	orr.w	r2, r2, #1
 8000d1c:	631a      	str	r2, [r3, #48]	; 0x30
 8000d1e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000d20:	f002 0201 	and.w	r2, r2, #1
 8000d24:	9202      	str	r2, [sp, #8]
 8000d26:	9a02      	ldr	r2, [sp, #8]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000d28:	9403      	str	r4, [sp, #12]
 8000d2a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000d2c:	f042 0204 	orr.w	r2, r2, #4
 8000d30:	631a      	str	r2, [r3, #48]	; 0x30
 8000d32:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000d34:	f002 0204 	and.w	r2, r2, #4
 8000d38:	9203      	str	r2, [sp, #12]
 8000d3a:	9a03      	ldr	r2, [sp, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000d3c:	9404      	str	r4, [sp, #16]
 8000d3e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000d40:	f042 0202 	orr.w	r2, r2, #2
 8000d44:	631a      	str	r2, [r3, #48]	; 0x30
 8000d46:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d48:	f003 0302 	and.w	r3, r3, #2
 8000d4c:	9304      	str	r3, [sp, #16]
 8000d4e:	9b04      	ldr	r3, [sp, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6;
 8000d50:	2370      	movs	r3, #112	; 0x70
 8000d52:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d54:	2602      	movs	r6, #2
 8000d56:	9606      	str	r6, [sp, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d58:	9407      	str	r4, [sp, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d5a:	9408      	str	r4, [sp, #32]
    GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 8000d5c:	250d      	movs	r5, #13
 8000d5e:	9509      	str	r5, [sp, #36]	; 0x24
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000d60:	a905      	add	r1, sp, #20
 8000d62:	4813      	ldr	r0, [pc, #76]	; (8000db0 <HAL_DCMI_MspInit+0xe4>)
 8000d64:	f000 f9f0 	bl	8001148 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_6;
 8000d68:	2350      	movs	r3, #80	; 0x50
 8000d6a:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d6c:	9606      	str	r6, [sp, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d6e:	9407      	str	r4, [sp, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d70:	9408      	str	r4, [sp, #32]
    GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 8000d72:	9509      	str	r5, [sp, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d74:	a905      	add	r1, sp, #20
 8000d76:	480f      	ldr	r0, [pc, #60]	; (8000db4 <HAL_DCMI_MspInit+0xe8>)
 8000d78:	f000 f9e6 	bl	8001148 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9
 8000d7c:	f44f 53be 	mov.w	r3, #6080	; 0x17c0
 8000d80:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d82:	9606      	str	r6, [sp, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d84:	9407      	str	r4, [sp, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d86:	9408      	str	r4, [sp, #32]
    GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 8000d88:	9509      	str	r5, [sp, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000d8a:	a905      	add	r1, sp, #20
 8000d8c:	480a      	ldr	r0, [pc, #40]	; (8000db8 <HAL_DCMI_MspInit+0xec>)
 8000d8e:	f000 f9db 	bl	8001148 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8000d92:	23c0      	movs	r3, #192	; 0xc0
 8000d94:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d96:	9606      	str	r6, [sp, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d98:	9407      	str	r4, [sp, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d9a:	9408      	str	r4, [sp, #32]
    GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 8000d9c:	9509      	str	r5, [sp, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000d9e:	a905      	add	r1, sp, #20
 8000da0:	4806      	ldr	r0, [pc, #24]	; (8000dbc <HAL_DCMI_MspInit+0xf0>)
 8000da2:	f000 f9d1 	bl	8001148 <HAL_GPIO_Init>
}
 8000da6:	e79d      	b.n	8000ce4 <HAL_DCMI_MspInit+0x18>
 8000da8:	50050000 	.word	0x50050000
 8000dac:	40023800 	.word	0x40023800
 8000db0:	40021000 	.word	0x40021000
 8000db4:	40020000 	.word	0x40020000
 8000db8:	40020800 	.word	0x40020800
 8000dbc:	40020400 	.word	0x40020400

08000dc0 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000dc0:	b530      	push	{r4, r5, lr}
 8000dc2:	b089      	sub	sp, #36	; 0x24
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000dc4:	2300      	movs	r3, #0
 8000dc6:	9303      	str	r3, [sp, #12]
 8000dc8:	9304      	str	r3, [sp, #16]
 8000dca:	9305      	str	r3, [sp, #20]
 8000dcc:	9306      	str	r3, [sp, #24]
 8000dce:	9307      	str	r3, [sp, #28]
  if(hi2c->Instance==I2C1)
 8000dd0:	6802      	ldr	r2, [r0, #0]
 8000dd2:	4b15      	ldr	r3, [pc, #84]	; (8000e28 <HAL_I2C_MspInit+0x68>)
 8000dd4:	429a      	cmp	r2, r3
 8000dd6:	d001      	beq.n	8000ddc <HAL_I2C_MspInit+0x1c>
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8000dd8:	b009      	add	sp, #36	; 0x24
 8000dda:	bd30      	pop	{r4, r5, pc}
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000ddc:	2500      	movs	r5, #0
 8000dde:	9501      	str	r5, [sp, #4]
 8000de0:	4c12      	ldr	r4, [pc, #72]	; (8000e2c <HAL_I2C_MspInit+0x6c>)
 8000de2:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8000de4:	f043 0302 	orr.w	r3, r3, #2
 8000de8:	6323      	str	r3, [r4, #48]	; 0x30
 8000dea:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8000dec:	f003 0302 	and.w	r3, r3, #2
 8000df0:	9301      	str	r3, [sp, #4]
 8000df2:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8000df4:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000df8:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000dfa:	2312      	movs	r3, #18
 8000dfc:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dfe:	9505      	str	r5, [sp, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000e00:	2303      	movs	r3, #3
 8000e02:	9306      	str	r3, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000e04:	2304      	movs	r3, #4
 8000e06:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000e08:	a903      	add	r1, sp, #12
 8000e0a:	4809      	ldr	r0, [pc, #36]	; (8000e30 <HAL_I2C_MspInit+0x70>)
 8000e0c:	f000 f99c 	bl	8001148 <HAL_GPIO_Init>
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000e10:	9502      	str	r5, [sp, #8]
 8000e12:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8000e14:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000e18:	6423      	str	r3, [r4, #64]	; 0x40
 8000e1a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8000e1c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000e20:	9302      	str	r3, [sp, #8]
 8000e22:	9b02      	ldr	r3, [sp, #8]
}
 8000e24:	e7d8      	b.n	8000dd8 <HAL_I2C_MspInit+0x18>
 8000e26:	bf00      	nop
 8000e28:	40005400 	.word	0x40005400
 8000e2c:	40023800 	.word	0x40023800
 8000e30:	40020400 	.word	0x40020400

08000e34 <NMI_Handler>:
{
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000e34:	e7fe      	b.n	8000e34 <NMI_Handler>

08000e36 <HardFault_Handler>:
void HardFault_Handler(void)
{
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000e36:	e7fe      	b.n	8000e36 <HardFault_Handler>

08000e38 <MemManage_Handler>:
void MemManage_Handler(void)
{
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000e38:	e7fe      	b.n	8000e38 <MemManage_Handler>

08000e3a <BusFault_Handler>:
void BusFault_Handler(void)
{
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000e3a:	e7fe      	b.n	8000e3a <BusFault_Handler>

08000e3c <UsageFault_Handler>:
void UsageFault_Handler(void)
{
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000e3c:	e7fe      	b.n	8000e3c <UsageFault_Handler>

08000e3e <DebugMon_Handler>:

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000e3e:	4770      	bx	lr

08000e40 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000e40:	b508      	push	{r3, lr}
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000e42:	f000 f8a9 	bl	8000f98 <HAL_IncTick>
#if (INCLUDE_xTaskGetSchedulerState == 1 )
  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
 8000e46:	f004 fad5 	bl	80053f4 <xTaskGetSchedulerState>
 8000e4a:	2801      	cmp	r0, #1
 8000e4c:	d100      	bne.n	8000e50 <SysTick_Handler+0x10>
  }
#endif /* INCLUDE_xTaskGetSchedulerState */
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000e4e:	bd08      	pop	{r3, pc}
  xPortSysTickHandler();
 8000e50:	f004 fc10 	bl	8005674 <xPortSysTickHandler>
}
 8000e54:	e7fb      	b.n	8000e4e <SysTick_Handler+0xe>
	...

08000e58 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8000e58:	b508      	push	{r3, lr}
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 8000e5a:	4802      	ldr	r0, [pc, #8]	; (8000e64 <OTG_FS_IRQHandler+0xc>)
 8000e5c:	f000 ff12 	bl	8001c84 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8000e60:	bd08      	pop	{r3, pc}
 8000e62:	bf00      	nop
 8000e64:	20005d60 	.word	0x20005d60

08000e68 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000e68:	b510      	push	{r4, lr}
 8000e6a:	4603      	mov	r3, r0
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000e6c:	4a0c      	ldr	r2, [pc, #48]	; (8000ea0 <_sbrk+0x38>)
 8000e6e:	490d      	ldr	r1, [pc, #52]	; (8000ea4 <_sbrk+0x3c>)
  const uint8_t *max_heap = (uint8_t *)stack_limit;
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000e70:	480d      	ldr	r0, [pc, #52]	; (8000ea8 <_sbrk+0x40>)
 8000e72:	6800      	ldr	r0, [r0, #0]
 8000e74:	b140      	cbz	r0, 8000e88 <_sbrk+0x20>
  {
    __sbrk_heap_end = &_end;
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000e76:	480c      	ldr	r0, [pc, #48]	; (8000ea8 <_sbrk+0x40>)
 8000e78:	6800      	ldr	r0, [r0, #0]
 8000e7a:	4403      	add	r3, r0
 8000e7c:	1a52      	subs	r2, r2, r1
 8000e7e:	4293      	cmp	r3, r2
 8000e80:	d806      	bhi.n	8000e90 <_sbrk+0x28>
    errno = ENOMEM;
    return (void *)-1;
  }

  prev_heap_end = __sbrk_heap_end;
  __sbrk_heap_end += incr;
 8000e82:	4a09      	ldr	r2, [pc, #36]	; (8000ea8 <_sbrk+0x40>)
 8000e84:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
}
 8000e86:	bd10      	pop	{r4, pc}
    __sbrk_heap_end = &_end;
 8000e88:	4807      	ldr	r0, [pc, #28]	; (8000ea8 <_sbrk+0x40>)
 8000e8a:	4c08      	ldr	r4, [pc, #32]	; (8000eac <_sbrk+0x44>)
 8000e8c:	6004      	str	r4, [r0, #0]
 8000e8e:	e7f2      	b.n	8000e76 <_sbrk+0xe>
    errno = ENOMEM;
 8000e90:	f005 f844 	bl	8005f1c <__errno>
 8000e94:	230c      	movs	r3, #12
 8000e96:	6003      	str	r3, [r0, #0]
    return (void *)-1;
 8000e98:	f04f 30ff 	mov.w	r0, #4294967295
 8000e9c:	e7f3      	b.n	8000e86 <_sbrk+0x1e>
 8000e9e:	bf00      	nop
 8000ea0:	20020000 	.word	0x20020000
 8000ea4:	00000400 	.word	0x00000400
 8000ea8:	200005d4 	.word	0x200005d4
 8000eac:	20006178 	.word	0x20006178

08000eb0 <SystemInit>:
  */
void SystemInit(void)
{
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000eb0:	4a03      	ldr	r2, [pc, #12]	; (8000ec0 <SystemInit+0x10>)
 8000eb2:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 8000eb6:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000eba:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000ebe:	4770      	bx	lr
 8000ec0:	e000ed00 	.word	0xe000ed00

08000ec4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8000ec4:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000efc <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000ec8:	480d      	ldr	r0, [pc, #52]	; (8000f00 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000eca:	490e      	ldr	r1, [pc, #56]	; (8000f04 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000ecc:	4a0e      	ldr	r2, [pc, #56]	; (8000f08 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000ece:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000ed0:	e002      	b.n	8000ed8 <LoopCopyDataInit>

08000ed2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000ed2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000ed4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000ed6:	3304      	adds	r3, #4

08000ed8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000ed8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000eda:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000edc:	d3f9      	bcc.n	8000ed2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000ede:	4a0b      	ldr	r2, [pc, #44]	; (8000f0c <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000ee0:	4c0b      	ldr	r4, [pc, #44]	; (8000f10 <LoopFillZerobss+0x26>)
  movs r3, #0
 8000ee2:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000ee4:	e001      	b.n	8000eea <LoopFillZerobss>

08000ee6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000ee6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000ee8:	3204      	adds	r2, #4

08000eea <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000eea:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000eec:	d3fb      	bcc.n	8000ee6 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8000eee:	f7ff ffdf 	bl	8000eb0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000ef2:	f005 f819 	bl	8005f28 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000ef6:	f7ff fe2b 	bl	8000b50 <main>
  bx  lr    
 8000efa:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8000efc:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000f00:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000f04:	2000035c 	.word	0x2000035c
  ldr r2, =_sidata
 8000f08:	0800697c 	.word	0x0800697c
  ldr r2, =_sbss
 8000f0c:	2000035c 	.word	0x2000035c
  ldr r4, =_ebss
 8000f10:	20006178 	.word	0x20006178

08000f14 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000f14:	e7fe      	b.n	8000f14 <ADC_IRQHandler>
	...

08000f18 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000f18:	b510      	push	{r4, lr}
 8000f1a:	4604      	mov	r4, r0
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000f1c:	4b0e      	ldr	r3, [pc, #56]	; (8000f58 <HAL_InitTick+0x40>)
 8000f1e:	7818      	ldrb	r0, [r3, #0]
 8000f20:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000f24:	fbb3 f3f0 	udiv	r3, r3, r0
 8000f28:	4a0c      	ldr	r2, [pc, #48]	; (8000f5c <HAL_InitTick+0x44>)
 8000f2a:	6810      	ldr	r0, [r2, #0]
 8000f2c:	fbb0 f0f3 	udiv	r0, r0, r3
 8000f30:	f000 f8ac 	bl	800108c <HAL_SYSTICK_Config>
 8000f34:	b968      	cbnz	r0, 8000f52 <HAL_InitTick+0x3a>
  {
    return HAL_ERROR;
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000f36:	2c0f      	cmp	r4, #15
 8000f38:	d901      	bls.n	8000f3e <HAL_InitTick+0x26>
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
    uwTickPrio = TickPriority;
  }
  else
  {
    return HAL_ERROR;
 8000f3a:	2001      	movs	r0, #1
 8000f3c:	e00a      	b.n	8000f54 <HAL_InitTick+0x3c>
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000f3e:	2200      	movs	r2, #0
 8000f40:	4621      	mov	r1, r4
 8000f42:	f04f 30ff 	mov.w	r0, #4294967295
 8000f46:	f000 f85f 	bl	8001008 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000f4a:	4b05      	ldr	r3, [pc, #20]	; (8000f60 <HAL_InitTick+0x48>)
 8000f4c:	601c      	str	r4, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8000f4e:	2000      	movs	r0, #0
 8000f50:	e000      	b.n	8000f54 <HAL_InitTick+0x3c>
    return HAL_ERROR;
 8000f52:	2001      	movs	r0, #1
}
 8000f54:	bd10      	pop	{r4, pc}
 8000f56:	bf00      	nop
 8000f58:	20000178 	.word	0x20000178
 8000f5c:	20000174 	.word	0x20000174
 8000f60:	2000017c 	.word	0x2000017c

08000f64 <HAL_Init>:
{
 8000f64:	b508      	push	{r3, lr}
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000f66:	4b0b      	ldr	r3, [pc, #44]	; (8000f94 <HAL_Init+0x30>)
 8000f68:	681a      	ldr	r2, [r3, #0]
 8000f6a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8000f6e:	601a      	str	r2, [r3, #0]
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000f70:	681a      	ldr	r2, [r3, #0]
 8000f72:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8000f76:	601a      	str	r2, [r3, #0]
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000f78:	681a      	ldr	r2, [r3, #0]
 8000f7a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8000f7e:	601a      	str	r2, [r3, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000f80:	2003      	movs	r0, #3
 8000f82:	f000 f82f 	bl	8000fe4 <HAL_NVIC_SetPriorityGrouping>
  HAL_InitTick(TICK_INT_PRIORITY);
 8000f86:	200f      	movs	r0, #15
 8000f88:	f7ff ffc6 	bl	8000f18 <HAL_InitTick>
  HAL_MspInit();
 8000f8c:	f7ff fe7c 	bl	8000c88 <HAL_MspInit>
}
 8000f90:	2000      	movs	r0, #0
 8000f92:	bd08      	pop	{r3, pc}
 8000f94:	40023c00 	.word	0x40023c00

08000f98 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 8000f98:	4a03      	ldr	r2, [pc, #12]	; (8000fa8 <HAL_IncTick+0x10>)
 8000f9a:	6811      	ldr	r1, [r2, #0]
 8000f9c:	4b03      	ldr	r3, [pc, #12]	; (8000fac <HAL_IncTick+0x14>)
 8000f9e:	781b      	ldrb	r3, [r3, #0]
 8000fa0:	440b      	add	r3, r1
 8000fa2:	6013      	str	r3, [r2, #0]
}
 8000fa4:	4770      	bx	lr
 8000fa6:	bf00      	nop
 8000fa8:	2000488c 	.word	0x2000488c
 8000fac:	20000178 	.word	0x20000178

08000fb0 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 8000fb0:	4b01      	ldr	r3, [pc, #4]	; (8000fb8 <HAL_GetTick+0x8>)
 8000fb2:	6818      	ldr	r0, [r3, #0]
}
 8000fb4:	4770      	bx	lr
 8000fb6:	bf00      	nop
 8000fb8:	2000488c 	.word	0x2000488c

08000fbc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000fbc:	b538      	push	{r3, r4, r5, lr}
 8000fbe:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 8000fc0:	f7ff fff6 	bl	8000fb0 <HAL_GetTick>
 8000fc4:	4605      	mov	r5, r0
  uint32_t wait = Delay;

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000fc6:	f1b4 3fff 	cmp.w	r4, #4294967295
 8000fca:	d002      	beq.n	8000fd2 <HAL_Delay+0x16>
  {
    wait += (uint32_t)(uwTickFreq);
 8000fcc:	4b04      	ldr	r3, [pc, #16]	; (8000fe0 <HAL_Delay+0x24>)
 8000fce:	781b      	ldrb	r3, [r3, #0]
 8000fd0:	441c      	add	r4, r3
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000fd2:	f7ff ffed 	bl	8000fb0 <HAL_GetTick>
 8000fd6:	1b40      	subs	r0, r0, r5
 8000fd8:	42a0      	cmp	r0, r4
 8000fda:	d3fa      	bcc.n	8000fd2 <HAL_Delay+0x16>
  {
  }
}
 8000fdc:	bd38      	pop	{r3, r4, r5, pc}
 8000fde:	bf00      	nop
 8000fe0:	20000178 	.word	0x20000178

08000fe4 <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000fe4:	4a07      	ldr	r2, [pc, #28]	; (8001004 <HAL_NVIC_SetPriorityGrouping+0x20>)
 8000fe6:	68d3      	ldr	r3, [r2, #12]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000fe8:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8000fec:	041b      	lsls	r3, r3, #16
 8000fee:	0c1b      	lsrs	r3, r3, #16
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000ff0:	0200      	lsls	r0, r0, #8
 8000ff2:	f400 60e0 	and.w	r0, r0, #1792	; 0x700
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000ff6:	4303      	orrs	r3, r0
  reg_value  =  (reg_value                                   |
 8000ff8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000ffc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
  SCB->AIRCR =  reg_value;
 8001000:	60d3      	str	r3, [r2, #12]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
}
 8001002:	4770      	bx	lr
 8001004:	e000ed00 	.word	0xe000ed00

08001008 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001008:	b430      	push	{r4, r5}
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800100a:	4b17      	ldr	r3, [pc, #92]	; (8001068 <HAL_NVIC_SetPriority+0x60>)
 800100c:	68db      	ldr	r3, [r3, #12]
 800100e:	f3c3 2302 	ubfx	r3, r3, #8, #3
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001012:	f1c3 0407 	rsb	r4, r3, #7
 8001016:	2c04      	cmp	r4, #4
 8001018:	bf28      	it	cs
 800101a:	2404      	movcs	r4, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800101c:	1d1d      	adds	r5, r3, #4
 800101e:	2d06      	cmp	r5, #6
 8001020:	d918      	bls.n	8001054 <HAL_NVIC_SetPriority+0x4c>
 8001022:	3b03      	subs	r3, #3

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001024:	f04f 35ff 	mov.w	r5, #4294967295
 8001028:	fa05 f404 	lsl.w	r4, r5, r4
 800102c:	ea21 0104 	bic.w	r1, r1, r4
 8001030:	4099      	lsls	r1, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001032:	fa05 f303 	lsl.w	r3, r5, r3
 8001036:	ea22 0303 	bic.w	r3, r2, r3
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800103a:	4319      	orrs	r1, r3
  if ((int32_t)(IRQn) >= 0)
 800103c:	2800      	cmp	r0, #0
 800103e:	db0b      	blt.n	8001058 <HAL_NVIC_SetPriority+0x50>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001040:	0109      	lsls	r1, r1, #4
 8001042:	b2c9      	uxtb	r1, r1
 8001044:	f100 4060 	add.w	r0, r0, #3758096384	; 0xe0000000
 8001048:	f500 4061 	add.w	r0, r0, #57600	; 0xe100
 800104c:	f880 1300 	strb.w	r1, [r0, #768]	; 0x300
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
}
 8001050:	bc30      	pop	{r4, r5}
 8001052:	4770      	bx	lr
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001054:	2300      	movs	r3, #0
 8001056:	e7e5      	b.n	8001024 <HAL_NVIC_SetPriority+0x1c>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001058:	f000 000f 	and.w	r0, r0, #15
 800105c:	0109      	lsls	r1, r1, #4
 800105e:	b2c9      	uxtb	r1, r1
 8001060:	4b02      	ldr	r3, [pc, #8]	; (800106c <HAL_NVIC_SetPriority+0x64>)
 8001062:	5419      	strb	r1, [r3, r0]
 8001064:	e7f4      	b.n	8001050 <HAL_NVIC_SetPriority+0x48>
 8001066:	bf00      	nop
 8001068:	e000ed00 	.word	0xe000ed00
 800106c:	e000ed14 	.word	0xe000ed14

08001070 <HAL_NVIC_EnableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 8001070:	2800      	cmp	r0, #0
 8001072:	db07      	blt.n	8001084 <HAL_NVIC_EnableIRQ+0x14>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001074:	f000 021f 	and.w	r2, r0, #31
 8001078:	0940      	lsrs	r0, r0, #5
 800107a:	2301      	movs	r3, #1
 800107c:	4093      	lsls	r3, r2
 800107e:	4a02      	ldr	r2, [pc, #8]	; (8001088 <HAL_NVIC_EnableIRQ+0x18>)
 8001080:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
}
 8001084:	4770      	bx	lr
 8001086:	bf00      	nop
 8001088:	e000e100 	.word	0xe000e100

0800108c <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800108c:	3801      	subs	r0, #1
 800108e:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8001092:	d20a      	bcs.n	80010aa <HAL_SYSTICK_Config+0x1e>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001094:	4b06      	ldr	r3, [pc, #24]	; (80010b0 <HAL_SYSTICK_Config+0x24>)
 8001096:	6058      	str	r0, [r3, #4]
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001098:	4a06      	ldr	r2, [pc, #24]	; (80010b4 <HAL_SYSTICK_Config+0x28>)
 800109a:	21f0      	movs	r1, #240	; 0xf0
 800109c:	f882 1023 	strb.w	r1, [r2, #35]	; 0x23
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80010a0:	2000      	movs	r0, #0
 80010a2:	6098      	str	r0, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80010a4:	2207      	movs	r2, #7
 80010a6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80010a8:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 80010aa:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 80010ac:	4770      	bx	lr
 80010ae:	bf00      	nop
 80010b0:	e000e010 	.word	0xe000e010
 80010b4:	e000ed00 	.word	0xe000ed00

080010b8 <HAL_DCMI_Init>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DCMI_Init(DCMI_HandleTypeDef *hdcmi)
{
  /* Check the DCMI peripheral state */
  if(hdcmi == NULL)
 80010b8:	2800      	cmp	r0, #0
 80010ba:	d042      	beq.n	8001142 <HAL_DCMI_Init+0x8a>
{
 80010bc:	b510      	push	{r4, lr}
 80010be:	4604      	mov	r4, r0
  assert_param(IS_DCMI_BYTE_SELECT_MODE(hdcmi->Init.ByteSelectMode));
  assert_param(IS_DCMI_BYTE_SELECT_START(hdcmi->Init.ByteSelectStart));
  assert_param(IS_DCMI_LINE_SELECT_MODE(hdcmi->Init.LineSelectMode));
  assert_param(IS_DCMI_LINE_SELECT_START(hdcmi->Init.LineSelectStart));
#endif /* STM32F446xx || STM32F469xx || STM32F479xx */
  if(hdcmi->State == HAL_DCMI_STATE_RESET)
 80010c0:	f890 3025 	ldrb.w	r3, [r0, #37]	; 0x25
 80010c4:	b343      	cbz	r3, 8001118 <HAL_DCMI_Init+0x60>
#endif /* (USE_HAL_DCMI_REGISTER_CALLBACKS) */
    HAL_DCMI_MspInit(hdcmi);
  }

  /* Change the DCMI state */
  hdcmi->State = HAL_DCMI_STATE_BUSY;
 80010c6:	2302      	movs	r3, #2
 80010c8:	f884 3025 	strb.w	r3, [r4, #37]	; 0x25
                          /* Configures the HS, VS, DE and PC polarity */
  hdcmi->Instance->CR &= ~(DCMI_CR_PCKPOL | DCMI_CR_HSPOL  | DCMI_CR_VSPOL  | DCMI_CR_EDM_0 |\
 80010cc:	6822      	ldr	r2, [r4, #0]
 80010ce:	6813      	ldr	r3, [r2, #0]
 80010d0:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 80010d4:	f023 0308 	bic.w	r3, r3, #8
 80010d8:	6013      	str	r3, [r2, #0]
#if defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx)
                           | DCMI_CR_BSM_0 | DCMI_CR_BSM_1 | DCMI_CR_OEBS |\
                           DCMI_CR_LSM | DCMI_CR_OELS
#endif /* STM32F446xx || STM32F469xx || STM32F479xx */
                           );
  hdcmi->Instance->CR |=  (uint32_t)(hdcmi->Init.SynchroMode | hdcmi->Init.CaptureRate |\
 80010da:	6821      	ldr	r1, [r4, #0]
 80010dc:	680a      	ldr	r2, [r1, #0]
 80010de:	6863      	ldr	r3, [r4, #4]
 80010e0:	6960      	ldr	r0, [r4, #20]
 80010e2:	4303      	orrs	r3, r0
                                     hdcmi->Init.VSPolarity  | hdcmi->Init.HSPolarity  |\
 80010e4:	68e0      	ldr	r0, [r4, #12]
  hdcmi->Instance->CR |=  (uint32_t)(hdcmi->Init.SynchroMode | hdcmi->Init.CaptureRate |\
 80010e6:	4303      	orrs	r3, r0
                                     hdcmi->Init.VSPolarity  | hdcmi->Init.HSPolarity  |\
 80010e8:	6920      	ldr	r0, [r4, #16]
 80010ea:	4303      	orrs	r3, r0
                                     hdcmi->Init.PCKPolarity | hdcmi->Init.ExtendedDataMode |\
 80010ec:	68a0      	ldr	r0, [r4, #8]
                                     hdcmi->Init.VSPolarity  | hdcmi->Init.HSPolarity  |\
 80010ee:	4303      	orrs	r3, r0
                                     hdcmi->Init.PCKPolarity | hdcmi->Init.ExtendedDataMode |\
 80010f0:	69a0      	ldr	r0, [r4, #24]
 80010f2:	4303      	orrs	r3, r0
                                     hdcmi->Init.JPEGMode
 80010f4:	6a20      	ldr	r0, [r4, #32]
                                     hdcmi->Init.PCKPolarity | hdcmi->Init.ExtendedDataMode |\
 80010f6:	4303      	orrs	r3, r0
  hdcmi->Instance->CR |=  (uint32_t)(hdcmi->Init.SynchroMode | hdcmi->Init.CaptureRate |\
 80010f8:	4313      	orrs	r3, r2
 80010fa:	600b      	str	r3, [r1, #0]
                                     | hdcmi->Init.ByteSelectMode |\
                                     hdcmi->Init.ByteSelectStart | hdcmi->Init.LineSelectMode |\
                                     hdcmi->Init.LineSelectStart
#endif /* STM32F446xx || STM32F469xx || STM32F479xx */
                                     );
  if(hdcmi->Init.SynchroMode == DCMI_SYNCHRO_EMBEDDED)
 80010fc:	6863      	ldr	r3, [r4, #4]
 80010fe:	2b10      	cmp	r3, #16
 8001100:	d012      	beq.n	8001128 <HAL_DCMI_Init+0x70>
                             ((uint32_t)hdcmi->Init.SyncroCode.FrameEndCode << DCMI_POSITION_ESCR_FEC));

  }

  /* Enable the Line, Vsync, Error and Overrun interrupts */
  __HAL_DCMI_ENABLE_IT(hdcmi, DCMI_IT_LINE | DCMI_IT_VSYNC | DCMI_IT_ERR | DCMI_IT_OVR);
 8001102:	6822      	ldr	r2, [r4, #0]
 8001104:	68d3      	ldr	r3, [r2, #12]
 8001106:	f043 031e 	orr.w	r3, r3, #30
 800110a:	60d3      	str	r3, [r2, #12]

  /* Update error code */
  hdcmi->ErrorCode = HAL_DCMI_ERROR_NONE;
 800110c:	2000      	movs	r0, #0
 800110e:	63e0      	str	r0, [r4, #60]	; 0x3c

  /* Initialize the DCMI state*/
  hdcmi->State  = HAL_DCMI_STATE_READY;
 8001110:	2301      	movs	r3, #1
 8001112:	f884 3025 	strb.w	r3, [r4, #37]	; 0x25

  return HAL_OK;
}
 8001116:	bd10      	pop	{r4, pc}
    hdcmi->Lock = HAL_UNLOCKED;
 8001118:	f880 3024 	strb.w	r3, [r0, #36]	; 0x24
    HAL_DCMI_MspInit(hdcmi);
 800111c:	f7ff fdd6 	bl	8000ccc <HAL_DCMI_MspInit>
    HAL_DCMI_MspInit(hdcmi);
 8001120:	4620      	mov	r0, r4
 8001122:	f7ff fdd3 	bl	8000ccc <HAL_DCMI_MspInit>
 8001126:	e7ce      	b.n	80010c6 <HAL_DCMI_Init+0xe>
    hdcmi->Instance->ESCR = (((uint32_t)hdcmi->Init.SyncroCode.FrameStartCode)    |
 8001128:	7f23      	ldrb	r3, [r4, #28]
                             ((uint32_t)hdcmi->Init.SyncroCode.LineStartCode << DCMI_POSITION_ESCR_LSC)|
 800112a:	7f62      	ldrb	r2, [r4, #29]
    hdcmi->Instance->ESCR = (((uint32_t)hdcmi->Init.SyncroCode.FrameStartCode)    |
 800112c:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
                             ((uint32_t)hdcmi->Init.SyncroCode.LineEndCode << DCMI_POSITION_ESCR_LEC) |
 8001130:	7fa2      	ldrb	r2, [r4, #30]
                             ((uint32_t)hdcmi->Init.SyncroCode.LineStartCode << DCMI_POSITION_ESCR_LSC)|
 8001132:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
                             ((uint32_t)hdcmi->Init.SyncroCode.FrameEndCode << DCMI_POSITION_ESCR_FEC));
 8001136:	7fe1      	ldrb	r1, [r4, #31]
    hdcmi->Instance->ESCR = (((uint32_t)hdcmi->Init.SyncroCode.FrameStartCode)    |
 8001138:	6822      	ldr	r2, [r4, #0]
                             ((uint32_t)hdcmi->Init.SyncroCode.LineEndCode << DCMI_POSITION_ESCR_LEC) |
 800113a:	ea43 6301 	orr.w	r3, r3, r1, lsl #24
    hdcmi->Instance->ESCR = (((uint32_t)hdcmi->Init.SyncroCode.FrameStartCode)    |
 800113e:	6193      	str	r3, [r2, #24]
 8001140:	e7df      	b.n	8001102 <HAL_DCMI_Init+0x4a>
     return HAL_ERROR;
 8001142:	2001      	movs	r0, #1
}
 8001144:	4770      	bx	lr
	...

08001148 <HAL_GPIO_Init>:
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001148:	2300      	movs	r3, #0
 800114a:	2b0f      	cmp	r3, #15
 800114c:	f200 80dd 	bhi.w	800130a <HAL_GPIO_Init+0x1c2>
{
 8001150:	b4f0      	push	{r4, r5, r6, r7}
 8001152:	b082      	sub	sp, #8
 8001154:	e05d      	b.n	8001212 <HAL_GPIO_Init+0xca>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001156:	6886      	ldr	r6, [r0, #8]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001158:	005f      	lsls	r7, r3, #1
 800115a:	2403      	movs	r4, #3
 800115c:	40bc      	lsls	r4, r7
 800115e:	ea26 0604 	bic.w	r6, r6, r4
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001162:	68cc      	ldr	r4, [r1, #12]
 8001164:	40bc      	lsls	r4, r7
 8001166:	4334      	orrs	r4, r6
        GPIOx->OSPEEDR = temp;
 8001168:	6084      	str	r4, [r0, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800116a:	6846      	ldr	r6, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800116c:	ea26 0602 	bic.w	r6, r6, r2
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001170:	684c      	ldr	r4, [r1, #4]
 8001172:	f3c4 1200 	ubfx	r2, r4, #4, #1
 8001176:	409a      	lsls	r2, r3
 8001178:	4332      	orrs	r2, r6
        GPIOx->OTYPER = temp;
 800117a:	6042      	str	r2, [r0, #4]
 800117c:	e057      	b.n	800122e <HAL_GPIO_Init+0xe6>
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800117e:	08dc      	lsrs	r4, r3, #3
 8001180:	3408      	adds	r4, #8
 8001182:	f850 7024 	ldr.w	r7, [r0, r4, lsl #2]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001186:	f003 0207 	and.w	r2, r3, #7
 800118a:	0096      	lsls	r6, r2, #2
 800118c:	220f      	movs	r2, #15
 800118e:	40b2      	lsls	r2, r6
 8001190:	ea27 0702 	bic.w	r7, r7, r2
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001194:	690a      	ldr	r2, [r1, #16]
 8001196:	40b2      	lsls	r2, r6
 8001198:	433a      	orrs	r2, r7
        GPIOx->AFR[position >> 3U] = temp;
 800119a:	f840 2024 	str.w	r2, [r0, r4, lsl #2]
 800119e:	e05a      	b.n	8001256 <HAL_GPIO_Init+0x10e>
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();

        temp = SYSCFG->EXTICR[position >> 2U];
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80011a0:	2207      	movs	r2, #7
 80011a2:	e000      	b.n	80011a6 <HAL_GPIO_Init+0x5e>
 80011a4:	2200      	movs	r2, #0
 80011a6:	40b2      	lsls	r2, r6
 80011a8:	433a      	orrs	r2, r7
        SYSCFG->EXTICR[position >> 2U] = temp;
 80011aa:	3402      	adds	r4, #2
 80011ac:	4e57      	ldr	r6, [pc, #348]	; (800130c <HAL_GPIO_Init+0x1c4>)
 80011ae:	f846 2024 	str.w	r2, [r6, r4, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80011b2:	4a57      	ldr	r2, [pc, #348]	; (8001310 <HAL_GPIO_Init+0x1c8>)
 80011b4:	6814      	ldr	r4, [r2, #0]
        temp &= ~((uint32_t)iocurrent);
 80011b6:	43ea      	mvns	r2, r5
 80011b8:	ea24 0605 	bic.w	r6, r4, r5
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80011bc:	684f      	ldr	r7, [r1, #4]
 80011be:	f417 3f80 	tst.w	r7, #65536	; 0x10000
 80011c2:	d001      	beq.n	80011c8 <HAL_GPIO_Init+0x80>
        {
          temp |= iocurrent;
 80011c4:	ea45 0604 	orr.w	r6, r5, r4
        }
        EXTI->IMR = temp;
 80011c8:	4c51      	ldr	r4, [pc, #324]	; (8001310 <HAL_GPIO_Init+0x1c8>)
 80011ca:	6026      	str	r6, [r4, #0]

        temp = EXTI->EMR;
 80011cc:	6864      	ldr	r4, [r4, #4]
        temp &= ~((uint32_t)iocurrent);
 80011ce:	ea02 0604 	and.w	r6, r2, r4
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80011d2:	684f      	ldr	r7, [r1, #4]
 80011d4:	f417 3f00 	tst.w	r7, #131072	; 0x20000
 80011d8:	d001      	beq.n	80011de <HAL_GPIO_Init+0x96>
        {
          temp |= iocurrent;
 80011da:	ea45 0604 	orr.w	r6, r5, r4
        }
        EXTI->EMR = temp;
 80011de:	4c4c      	ldr	r4, [pc, #304]	; (8001310 <HAL_GPIO_Init+0x1c8>)
 80011e0:	6066      	str	r6, [r4, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80011e2:	68a4      	ldr	r4, [r4, #8]
        temp &= ~((uint32_t)iocurrent);
 80011e4:	ea02 0604 	and.w	r6, r2, r4
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80011e8:	684f      	ldr	r7, [r1, #4]
 80011ea:	f417 1f80 	tst.w	r7, #1048576	; 0x100000
 80011ee:	d001      	beq.n	80011f4 <HAL_GPIO_Init+0xac>
        {
          temp |= iocurrent;
 80011f0:	ea45 0604 	orr.w	r6, r5, r4
        }
        EXTI->RTSR = temp;
 80011f4:	4c46      	ldr	r4, [pc, #280]	; (8001310 <HAL_GPIO_Init+0x1c8>)
 80011f6:	60a6      	str	r6, [r4, #8]

        temp = EXTI->FTSR;
 80011f8:	68e4      	ldr	r4, [r4, #12]
        temp &= ~((uint32_t)iocurrent);
 80011fa:	4022      	ands	r2, r4
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80011fc:	684e      	ldr	r6, [r1, #4]
 80011fe:	f416 1f00 	tst.w	r6, #2097152	; 0x200000
 8001202:	d001      	beq.n	8001208 <HAL_GPIO_Init+0xc0>
        {
          temp |= iocurrent;
 8001204:	ea45 0204 	orr.w	r2, r5, r4
        }
        EXTI->FTSR = temp;
 8001208:	4c41      	ldr	r4, [pc, #260]	; (8001310 <HAL_GPIO_Init+0x1c8>)
 800120a:	60e2      	str	r2, [r4, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800120c:	3301      	adds	r3, #1
 800120e:	2b0f      	cmp	r3, #15
 8001210:	d878      	bhi.n	8001304 <HAL_GPIO_Init+0x1bc>
    ioposition = 0x01U << position;
 8001212:	2201      	movs	r2, #1
 8001214:	409a      	lsls	r2, r3
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001216:	680c      	ldr	r4, [r1, #0]
 8001218:	ea04 0502 	and.w	r5, r4, r2
    if(iocurrent == ioposition)
 800121c:	ea32 0404 	bics.w	r4, r2, r4
 8001220:	d1f4      	bne.n	800120c <HAL_GPIO_Init+0xc4>
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001222:	684c      	ldr	r4, [r1, #4]
 8001224:	f004 0403 	and.w	r4, r4, #3
 8001228:	3c01      	subs	r4, #1
 800122a:	2c01      	cmp	r4, #1
 800122c:	d993      	bls.n	8001156 <HAL_GPIO_Init+0xe>
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800122e:	684a      	ldr	r2, [r1, #4]
 8001230:	f002 0203 	and.w	r2, r2, #3
 8001234:	2a03      	cmp	r2, #3
 8001236:	d009      	beq.n	800124c <HAL_GPIO_Init+0x104>
        temp = GPIOx->PUPDR;
 8001238:	68c4      	ldr	r4, [r0, #12]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800123a:	005e      	lsls	r6, r3, #1
 800123c:	2203      	movs	r2, #3
 800123e:	40b2      	lsls	r2, r6
 8001240:	ea24 0402 	bic.w	r4, r4, r2
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001244:	688a      	ldr	r2, [r1, #8]
 8001246:	40b2      	lsls	r2, r6
 8001248:	4322      	orrs	r2, r4
        GPIOx->PUPDR = temp;
 800124a:	60c2      	str	r2, [r0, #12]
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800124c:	684a      	ldr	r2, [r1, #4]
 800124e:	f002 0203 	and.w	r2, r2, #3
 8001252:	2a02      	cmp	r2, #2
 8001254:	d093      	beq.n	800117e <HAL_GPIO_Init+0x36>
      temp = GPIOx->MODER;
 8001256:	6804      	ldr	r4, [r0, #0]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001258:	005e      	lsls	r6, r3, #1
 800125a:	2203      	movs	r2, #3
 800125c:	40b2      	lsls	r2, r6
 800125e:	ea24 0402 	bic.w	r4, r4, r2
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001262:	684a      	ldr	r2, [r1, #4]
 8001264:	f002 0203 	and.w	r2, r2, #3
 8001268:	40b2      	lsls	r2, r6
 800126a:	4322      	orrs	r2, r4
      GPIOx->MODER = temp;
 800126c:	6002      	str	r2, [r0, #0]
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800126e:	684a      	ldr	r2, [r1, #4]
 8001270:	f412 3f40 	tst.w	r2, #196608	; 0x30000
 8001274:	d0ca      	beq.n	800120c <HAL_GPIO_Init+0xc4>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001276:	2200      	movs	r2, #0
 8001278:	9201      	str	r2, [sp, #4]
 800127a:	4a26      	ldr	r2, [pc, #152]	; (8001314 <HAL_GPIO_Init+0x1cc>)
 800127c:	6c54      	ldr	r4, [r2, #68]	; 0x44
 800127e:	f444 4480 	orr.w	r4, r4, #16384	; 0x4000
 8001282:	6454      	str	r4, [r2, #68]	; 0x44
 8001284:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8001286:	f402 4280 	and.w	r2, r2, #16384	; 0x4000
 800128a:	9201      	str	r2, [sp, #4]
 800128c:	9a01      	ldr	r2, [sp, #4]
        temp = SYSCFG->EXTICR[position >> 2U];
 800128e:	089c      	lsrs	r4, r3, #2
 8001290:	1ca6      	adds	r6, r4, #2
 8001292:	4a1e      	ldr	r2, [pc, #120]	; (800130c <HAL_GPIO_Init+0x1c4>)
 8001294:	f852 7026 	ldr.w	r7, [r2, r6, lsl #2]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001298:	f003 0203 	and.w	r2, r3, #3
 800129c:	0096      	lsls	r6, r2, #2
 800129e:	220f      	movs	r2, #15
 80012a0:	40b2      	lsls	r2, r6
 80012a2:	ea27 0702 	bic.w	r7, r7, r2
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80012a6:	4a1c      	ldr	r2, [pc, #112]	; (8001318 <HAL_GPIO_Init+0x1d0>)
 80012a8:	4290      	cmp	r0, r2
 80012aa:	f43f af7b 	beq.w	80011a4 <HAL_GPIO_Init+0x5c>
 80012ae:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80012b2:	4290      	cmp	r0, r2
 80012b4:	d01a      	beq.n	80012ec <HAL_GPIO_Init+0x1a4>
 80012b6:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80012ba:	4290      	cmp	r0, r2
 80012bc:	d018      	beq.n	80012f0 <HAL_GPIO_Init+0x1a8>
 80012be:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80012c2:	4290      	cmp	r0, r2
 80012c4:	d016      	beq.n	80012f4 <HAL_GPIO_Init+0x1ac>
 80012c6:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80012ca:	4290      	cmp	r0, r2
 80012cc:	d014      	beq.n	80012f8 <HAL_GPIO_Init+0x1b0>
 80012ce:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80012d2:	4290      	cmp	r0, r2
 80012d4:	d012      	beq.n	80012fc <HAL_GPIO_Init+0x1b4>
 80012d6:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80012da:	4290      	cmp	r0, r2
 80012dc:	d010      	beq.n	8001300 <HAL_GPIO_Init+0x1b8>
 80012de:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80012e2:	4290      	cmp	r0, r2
 80012e4:	f43f af5c 	beq.w	80011a0 <HAL_GPIO_Init+0x58>
 80012e8:	2208      	movs	r2, #8
 80012ea:	e75c      	b.n	80011a6 <HAL_GPIO_Init+0x5e>
 80012ec:	2201      	movs	r2, #1
 80012ee:	e75a      	b.n	80011a6 <HAL_GPIO_Init+0x5e>
 80012f0:	2202      	movs	r2, #2
 80012f2:	e758      	b.n	80011a6 <HAL_GPIO_Init+0x5e>
 80012f4:	2203      	movs	r2, #3
 80012f6:	e756      	b.n	80011a6 <HAL_GPIO_Init+0x5e>
 80012f8:	2204      	movs	r2, #4
 80012fa:	e754      	b.n	80011a6 <HAL_GPIO_Init+0x5e>
 80012fc:	2205      	movs	r2, #5
 80012fe:	e752      	b.n	80011a6 <HAL_GPIO_Init+0x5e>
 8001300:	2206      	movs	r2, #6
 8001302:	e750      	b.n	80011a6 <HAL_GPIO_Init+0x5e>
      }
    }
  }
}
 8001304:	b002      	add	sp, #8
 8001306:	bcf0      	pop	{r4, r5, r6, r7}
 8001308:	4770      	bx	lr
 800130a:	4770      	bx	lr
 800130c:	40013800 	.word	0x40013800
 8001310:	40013c00 	.word	0x40013c00
 8001314:	40023800 	.word	0x40023800
 8001318:	40020000 	.word	0x40020000

0800131c <I2C_IsAcknowledgeFailed>:
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800131c:	6803      	ldr	r3, [r0, #0]
 800131e:	695a      	ldr	r2, [r3, #20]
 8001320:	f412 6f80 	tst.w	r2, #1024	; 0x400
 8001324:	d101      	bne.n	800132a <I2C_IsAcknowledgeFailed+0xe>
    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);

    return HAL_ERROR;
  }
  return HAL_OK;
 8001326:	2000      	movs	r0, #0
}
 8001328:	4770      	bx	lr
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800132a:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800132e:	615a      	str	r2, [r3, #20]
    hi2c->PreviousState       = I2C_STATE_NONE;
 8001330:	2300      	movs	r3, #0
 8001332:	6303      	str	r3, [r0, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8001334:	2220      	movs	r2, #32
 8001336:	f880 203d 	strb.w	r2, [r0, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 800133a:	f880 303e 	strb.w	r3, [r0, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800133e:	6c02      	ldr	r2, [r0, #64]	; 0x40
 8001340:	f042 0204 	orr.w	r2, r2, #4
 8001344:	6402      	str	r2, [r0, #64]	; 0x40
    __HAL_UNLOCK(hi2c);
 8001346:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
    return HAL_ERROR;
 800134a:	2001      	movs	r0, #1
 800134c:	4770      	bx	lr

0800134e <I2C_WaitOnFlagUntilTimeout>:
{
 800134e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001352:	4607      	mov	r7, r0
 8001354:	460d      	mov	r5, r1
 8001356:	4690      	mov	r8, r2
 8001358:	461e      	mov	r6, r3
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800135a:	e022      	b.n	80013a2 <I2C_WaitOnFlagUntilTimeout+0x54>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800135c:	f7ff fe28 	bl	8000fb0 <HAL_GetTick>
 8001360:	9b06      	ldr	r3, [sp, #24]
 8001362:	1ac0      	subs	r0, r0, r3
 8001364:	42b0      	cmp	r0, r6
 8001366:	d800      	bhi.n	800136a <I2C_WaitOnFlagUntilTimeout+0x1c>
 8001368:	b9de      	cbnz	r6, 80013a2 <I2C_WaitOnFlagUntilTimeout+0x54>
        hi2c->PreviousState     = I2C_STATE_NONE;
 800136a:	2300      	movs	r3, #0
 800136c:	633b      	str	r3, [r7, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 800136e:	2220      	movs	r2, #32
 8001370:	f887 203d 	strb.w	r2, [r7, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8001374:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8001378:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800137a:	f042 0220 	orr.w	r2, r2, #32
 800137e:	643a      	str	r2, [r7, #64]	; 0x40
        __HAL_UNLOCK(hi2c);
 8001380:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c
        return HAL_ERROR;
 8001384:	2001      	movs	r0, #1
 8001386:	e01a      	b.n	80013be <I2C_WaitOnFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8001388:	683b      	ldr	r3, [r7, #0]
 800138a:	699c      	ldr	r4, [r3, #24]
 800138c:	ea25 0404 	bic.w	r4, r5, r4
 8001390:	b2a4      	uxth	r4, r4
 8001392:	fab4 f484 	clz	r4, r4
 8001396:	0964      	lsrs	r4, r4, #5
 8001398:	45a0      	cmp	r8, r4
 800139a:	d10f      	bne.n	80013bc <I2C_WaitOnFlagUntilTimeout+0x6e>
    if (Timeout != HAL_MAX_DELAY)
 800139c:	f1b6 3fff 	cmp.w	r6, #4294967295
 80013a0:	d1dc      	bne.n	800135c <I2C_WaitOnFlagUntilTimeout+0xe>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80013a2:	f3c5 4307 	ubfx	r3, r5, #16, #8
 80013a6:	2b01      	cmp	r3, #1
 80013a8:	d1ee      	bne.n	8001388 <I2C_WaitOnFlagUntilTimeout+0x3a>
 80013aa:	683b      	ldr	r3, [r7, #0]
 80013ac:	695c      	ldr	r4, [r3, #20]
 80013ae:	ea25 0404 	bic.w	r4, r5, r4
 80013b2:	b2a4      	uxth	r4, r4
 80013b4:	fab4 f484 	clz	r4, r4
 80013b8:	0964      	lsrs	r4, r4, #5
 80013ba:	e7ed      	b.n	8001398 <I2C_WaitOnFlagUntilTimeout+0x4a>
  return HAL_OK;
 80013bc:	2000      	movs	r0, #0
}
 80013be:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

080013c2 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
{
 80013c2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80013c6:	4605      	mov	r5, r0
 80013c8:	460e      	mov	r6, r1
 80013ca:	4617      	mov	r7, r2
 80013cc:	4698      	mov	r8, r3
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80013ce:	e03d      	b.n	800144c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x8a>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80013d0:	681a      	ldr	r2, [r3, #0]
 80013d2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80013d6:	601a      	str	r2, [r3, #0]
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80013d8:	682b      	ldr	r3, [r5, #0]
 80013da:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80013de:	615a      	str	r2, [r3, #20]
      hi2c->PreviousState       = I2C_STATE_NONE;
 80013e0:	2300      	movs	r3, #0
 80013e2:	632b      	str	r3, [r5, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80013e4:	2220      	movs	r2, #32
 80013e6:	f885 203d 	strb.w	r2, [r5, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80013ea:	f885 303e 	strb.w	r3, [r5, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80013ee:	6c2a      	ldr	r2, [r5, #64]	; 0x40
 80013f0:	f042 0204 	orr.w	r2, r2, #4
 80013f4:	642a      	str	r2, [r5, #64]	; 0x40
      __HAL_UNLOCK(hi2c);
 80013f6:	f885 303c 	strb.w	r3, [r5, #60]	; 0x3c
      return HAL_ERROR;
 80013fa:	2001      	movs	r0, #1
 80013fc:	e034      	b.n	8001468 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xa6>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80013fe:	f7ff fdd7 	bl	8000fb0 <HAL_GetTick>
 8001402:	eba0 0008 	sub.w	r0, r0, r8
 8001406:	42b8      	cmp	r0, r7
 8001408:	d800      	bhi.n	800140c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x4a>
 800140a:	b9ff      	cbnz	r7, 800144c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x8a>
        hi2c->PreviousState       = I2C_STATE_NONE;
 800140c:	2300      	movs	r3, #0
 800140e:	632b      	str	r3, [r5, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8001410:	2220      	movs	r2, #32
 8001412:	f885 203d 	strb.w	r2, [r5, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8001416:	f885 303e 	strb.w	r3, [r5, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800141a:	6c2a      	ldr	r2, [r5, #64]	; 0x40
 800141c:	f042 0220 	orr.w	r2, r2, #32
 8001420:	642a      	str	r2, [r5, #64]	; 0x40
        __HAL_UNLOCK(hi2c);
 8001422:	f885 303c 	strb.w	r3, [r5, #60]	; 0x3c
        return HAL_ERROR;
 8001426:	2001      	movs	r0, #1
 8001428:	e01e      	b.n	8001468 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800142a:	682b      	ldr	r3, [r5, #0]
 800142c:	699c      	ldr	r4, [r3, #24]
 800142e:	ea26 0404 	bic.w	r4, r6, r4
 8001432:	b2a4      	uxth	r4, r4
 8001434:	3c00      	subs	r4, #0
 8001436:	bf18      	it	ne
 8001438:	2401      	movne	r4, #1
 800143a:	b1a4      	cbz	r4, 8001466 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xa4>
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800143c:	682b      	ldr	r3, [r5, #0]
 800143e:	695a      	ldr	r2, [r3, #20]
 8001440:	f412 6f80 	tst.w	r2, #1024	; 0x400
 8001444:	d1c4      	bne.n	80013d0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xe>
    if (Timeout != HAL_MAX_DELAY)
 8001446:	f1b7 3fff 	cmp.w	r7, #4294967295
 800144a:	d1d8      	bne.n	80013fe <I2C_WaitOnMasterAddressFlagUntilTimeout+0x3c>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800144c:	f3c6 4307 	ubfx	r3, r6, #16, #8
 8001450:	2b01      	cmp	r3, #1
 8001452:	d1ea      	bne.n	800142a <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
 8001454:	682b      	ldr	r3, [r5, #0]
 8001456:	695c      	ldr	r4, [r3, #20]
 8001458:	ea26 0404 	bic.w	r4, r6, r4
 800145c:	b2a4      	uxth	r4, r4
 800145e:	3c00      	subs	r4, #0
 8001460:	bf18      	it	ne
 8001462:	2401      	movne	r4, #1
 8001464:	e7e9      	b.n	800143a <I2C_WaitOnMasterAddressFlagUntilTimeout+0x78>
  return HAL_OK;
 8001466:	2000      	movs	r0, #0
}
 8001468:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800146c <I2C_MasterRequestWrite>:
{
 800146c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800146e:	b083      	sub	sp, #12
 8001470:	4604      	mov	r4, r0
 8001472:	460d      	mov	r5, r1
 8001474:	4616      	mov	r6, r2
 8001476:	461f      	mov	r7, r3
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8001478:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 800147a:	2b08      	cmp	r3, #8
 800147c:	d00d      	beq.n	800149a <I2C_MasterRequestWrite+0x2e>
 800147e:	2b01      	cmp	r3, #1
 8001480:	d00b      	beq.n	800149a <I2C_MasterRequestWrite+0x2e>
 8001482:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8001486:	d008      	beq.n	800149a <I2C_MasterRequestWrite+0x2e>
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8001488:	6b03      	ldr	r3, [r0, #48]	; 0x30
 800148a:	2b12      	cmp	r3, #18
 800148c:	d10a      	bne.n	80014a4 <I2C_MasterRequestWrite+0x38>
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800148e:	6802      	ldr	r2, [r0, #0]
 8001490:	6813      	ldr	r3, [r2, #0]
 8001492:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001496:	6013      	str	r3, [r2, #0]
 8001498:	e004      	b.n	80014a4 <I2C_MasterRequestWrite+0x38>
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800149a:	6822      	ldr	r2, [r4, #0]
 800149c:	6813      	ldr	r3, [r2, #0]
 800149e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80014a2:	6013      	str	r3, [r2, #0]
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80014a4:	9700      	str	r7, [sp, #0]
 80014a6:	4633      	mov	r3, r6
 80014a8:	2200      	movs	r2, #0
 80014aa:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80014ae:	4620      	mov	r0, r4
 80014b0:	f7ff ff4d 	bl	800134e <I2C_WaitOnFlagUntilTimeout>
 80014b4:	b980      	cbnz	r0, 80014d8 <I2C_MasterRequestWrite+0x6c>
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80014b6:	6923      	ldr	r3, [r4, #16]
 80014b8:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80014bc:	d116      	bne.n	80014ec <I2C_MasterRequestWrite+0x80>
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80014be:	6823      	ldr	r3, [r4, #0]
 80014c0:	f005 05fe 	and.w	r5, r5, #254	; 0xfe
 80014c4:	611d      	str	r5, [r3, #16]
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80014c6:	463b      	mov	r3, r7
 80014c8:	4632      	mov	r2, r6
 80014ca:	4913      	ldr	r1, [pc, #76]	; (8001518 <I2C_MasterRequestWrite+0xac>)
 80014cc:	4620      	mov	r0, r4
 80014ce:	f7ff ff78 	bl	80013c2 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80014d2:	b9f8      	cbnz	r0, 8001514 <I2C_MasterRequestWrite+0xa8>
}
 80014d4:	b003      	add	sp, #12
 80014d6:	bdf0      	pop	{r4, r5, r6, r7, pc}
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80014d8:	6823      	ldr	r3, [r4, #0]
 80014da:	681b      	ldr	r3, [r3, #0]
 80014dc:	f413 7f80 	tst.w	r3, #256	; 0x100
 80014e0:	d002      	beq.n	80014e8 <I2C_MasterRequestWrite+0x7c>
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80014e2:	f44f 7300 	mov.w	r3, #512	; 0x200
 80014e6:	6423      	str	r3, [r4, #64]	; 0x40
    return HAL_TIMEOUT;
 80014e8:	2003      	movs	r0, #3
 80014ea:	e7f3      	b.n	80014d4 <I2C_MasterRequestWrite+0x68>
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 80014ec:	11eb      	asrs	r3, r5, #7
 80014ee:	6822      	ldr	r2, [r4, #0]
 80014f0:	f003 0306 	and.w	r3, r3, #6
 80014f4:	f043 03f0 	orr.w	r3, r3, #240	; 0xf0
 80014f8:	6113      	str	r3, [r2, #16]
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 80014fa:	463b      	mov	r3, r7
 80014fc:	4632      	mov	r2, r6
 80014fe:	4907      	ldr	r1, [pc, #28]	; (800151c <I2C_MasterRequestWrite+0xb0>)
 8001500:	4620      	mov	r0, r4
 8001502:	f7ff ff5e 	bl	80013c2 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8001506:	b918      	cbnz	r0, 8001510 <I2C_MasterRequestWrite+0xa4>
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8001508:	6823      	ldr	r3, [r4, #0]
 800150a:	b2ed      	uxtb	r5, r5
 800150c:	611d      	str	r5, [r3, #16]
 800150e:	e7da      	b.n	80014c6 <I2C_MasterRequestWrite+0x5a>
      return HAL_ERROR;
 8001510:	2001      	movs	r0, #1
 8001512:	e7df      	b.n	80014d4 <I2C_MasterRequestWrite+0x68>
    return HAL_ERROR;
 8001514:	2001      	movs	r0, #1
 8001516:	e7dd      	b.n	80014d4 <I2C_MasterRequestWrite+0x68>
 8001518:	00010002 	.word	0x00010002
 800151c:	00010008 	.word	0x00010008

08001520 <I2C_WaitOnTXEFlagUntilTimeout>:
{
 8001520:	b570      	push	{r4, r5, r6, lr}
 8001522:	4604      	mov	r4, r0
 8001524:	460d      	mov	r5, r1
 8001526:	4616      	mov	r6, r2
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8001528:	6823      	ldr	r3, [r4, #0]
 800152a:	695b      	ldr	r3, [r3, #20]
 800152c:	f013 0f80 	tst.w	r3, #128	; 0x80
 8001530:	d11c      	bne.n	800156c <I2C_WaitOnTXEFlagUntilTimeout+0x4c>
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8001532:	4620      	mov	r0, r4
 8001534:	f7ff fef2 	bl	800131c <I2C_IsAcknowledgeFailed>
 8001538:	b9d0      	cbnz	r0, 8001570 <I2C_WaitOnTXEFlagUntilTimeout+0x50>
    if (Timeout != HAL_MAX_DELAY)
 800153a:	f1b5 3fff 	cmp.w	r5, #4294967295
 800153e:	d0f3      	beq.n	8001528 <I2C_WaitOnTXEFlagUntilTimeout+0x8>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001540:	f7ff fd36 	bl	8000fb0 <HAL_GetTick>
 8001544:	1b80      	subs	r0, r0, r6
 8001546:	42a8      	cmp	r0, r5
 8001548:	d801      	bhi.n	800154e <I2C_WaitOnTXEFlagUntilTimeout+0x2e>
 800154a:	2d00      	cmp	r5, #0
 800154c:	d1ec      	bne.n	8001528 <I2C_WaitOnTXEFlagUntilTimeout+0x8>
        hi2c->PreviousState       = I2C_STATE_NONE;
 800154e:	2300      	movs	r3, #0
 8001550:	6323      	str	r3, [r4, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8001552:	2220      	movs	r2, #32
 8001554:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8001558:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800155c:	6c22      	ldr	r2, [r4, #64]	; 0x40
 800155e:	f042 0220 	orr.w	r2, r2, #32
 8001562:	6422      	str	r2, [r4, #64]	; 0x40
        __HAL_UNLOCK(hi2c);
 8001564:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
        return HAL_ERROR;
 8001568:	2001      	movs	r0, #1
 800156a:	e000      	b.n	800156e <I2C_WaitOnTXEFlagUntilTimeout+0x4e>
  return HAL_OK;
 800156c:	2000      	movs	r0, #0
}
 800156e:	bd70      	pop	{r4, r5, r6, pc}
      return HAL_ERROR;
 8001570:	2001      	movs	r0, #1
 8001572:	e7fc      	b.n	800156e <I2C_WaitOnTXEFlagUntilTimeout+0x4e>

08001574 <I2C_WaitOnBTFFlagUntilTimeout>:
{
 8001574:	b570      	push	{r4, r5, r6, lr}
 8001576:	4604      	mov	r4, r0
 8001578:	460d      	mov	r5, r1
 800157a:	4616      	mov	r6, r2
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800157c:	6823      	ldr	r3, [r4, #0]
 800157e:	695b      	ldr	r3, [r3, #20]
 8001580:	f013 0f04 	tst.w	r3, #4
 8001584:	d11c      	bne.n	80015c0 <I2C_WaitOnBTFFlagUntilTimeout+0x4c>
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8001586:	4620      	mov	r0, r4
 8001588:	f7ff fec8 	bl	800131c <I2C_IsAcknowledgeFailed>
 800158c:	b9d0      	cbnz	r0, 80015c4 <I2C_WaitOnBTFFlagUntilTimeout+0x50>
    if (Timeout != HAL_MAX_DELAY)
 800158e:	f1b5 3fff 	cmp.w	r5, #4294967295
 8001592:	d0f3      	beq.n	800157c <I2C_WaitOnBTFFlagUntilTimeout+0x8>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001594:	f7ff fd0c 	bl	8000fb0 <HAL_GetTick>
 8001598:	1b80      	subs	r0, r0, r6
 800159a:	42a8      	cmp	r0, r5
 800159c:	d801      	bhi.n	80015a2 <I2C_WaitOnBTFFlagUntilTimeout+0x2e>
 800159e:	2d00      	cmp	r5, #0
 80015a0:	d1ec      	bne.n	800157c <I2C_WaitOnBTFFlagUntilTimeout+0x8>
        hi2c->PreviousState       = I2C_STATE_NONE;
 80015a2:	2300      	movs	r3, #0
 80015a4:	6323      	str	r3, [r4, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80015a6:	2220      	movs	r2, #32
 80015a8:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80015ac:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80015b0:	6c22      	ldr	r2, [r4, #64]	; 0x40
 80015b2:	f042 0220 	orr.w	r2, r2, #32
 80015b6:	6422      	str	r2, [r4, #64]	; 0x40
        __HAL_UNLOCK(hi2c);
 80015b8:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
        return HAL_ERROR;
 80015bc:	2001      	movs	r0, #1
 80015be:	e000      	b.n	80015c2 <I2C_WaitOnBTFFlagUntilTimeout+0x4e>
  return HAL_OK;
 80015c0:	2000      	movs	r0, #0
}
 80015c2:	bd70      	pop	{r4, r5, r6, pc}
      return HAL_ERROR;
 80015c4:	2001      	movs	r0, #1
 80015c6:	e7fc      	b.n	80015c2 <I2C_WaitOnBTFFlagUntilTimeout+0x4e>

080015c8 <HAL_I2C_Init>:
  if (hi2c == NULL)
 80015c8:	2800      	cmp	r0, #0
 80015ca:	f000 80cc 	beq.w	8001766 <HAL_I2C_Init+0x19e>
{
 80015ce:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80015d0:	4604      	mov	r4, r0
  if (hi2c->State == HAL_I2C_STATE_RESET)
 80015d2:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 80015d6:	2b00      	cmp	r3, #0
 80015d8:	d077      	beq.n	80016ca <HAL_I2C_Init+0x102>
  hi2c->State = HAL_I2C_STATE_BUSY;
 80015da:	2324      	movs	r3, #36	; 0x24
 80015dc:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  __HAL_I2C_DISABLE(hi2c);
 80015e0:	6822      	ldr	r2, [r4, #0]
 80015e2:	6813      	ldr	r3, [r2, #0]
 80015e4:	f023 0301 	bic.w	r3, r3, #1
 80015e8:	6013      	str	r3, [r2, #0]
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80015ea:	6822      	ldr	r2, [r4, #0]
 80015ec:	6813      	ldr	r3, [r2, #0]
 80015ee:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80015f2:	6013      	str	r3, [r2, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80015f4:	6822      	ldr	r2, [r4, #0]
 80015f6:	6813      	ldr	r3, [r2, #0]
 80015f8:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80015fc:	6013      	str	r3, [r2, #0]
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80015fe:	f001 fa99 	bl	8002b34 <HAL_RCC_GetPCLK1Freq>
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8001602:	6862      	ldr	r2, [r4, #4]
 8001604:	4b5a      	ldr	r3, [pc, #360]	; (8001770 <HAL_I2C_Init+0x1a8>)
 8001606:	429a      	cmp	r2, r3
 8001608:	d864      	bhi.n	80016d4 <HAL_I2C_Init+0x10c>
 800160a:	4b5a      	ldr	r3, [pc, #360]	; (8001774 <HAL_I2C_Init+0x1ac>)
 800160c:	4298      	cmp	r0, r3
 800160e:	bf8c      	ite	hi
 8001610:	2300      	movhi	r3, #0
 8001612:	2301      	movls	r3, #1
 8001614:	2b00      	cmp	r3, #0
 8001616:	f040 80a8 	bne.w	800176a <HAL_I2C_Init+0x1a2>
  freqrange = I2C_FREQRANGE(pclk1);
 800161a:	4d57      	ldr	r5, [pc, #348]	; (8001778 <HAL_I2C_Init+0x1b0>)
 800161c:	fba5 3500 	umull	r3, r5, r5, r0
 8001620:	0caf      	lsrs	r7, r5, #18
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8001622:	6826      	ldr	r6, [r4, #0]
 8001624:	6871      	ldr	r1, [r6, #4]
 8001626:	f021 013f 	bic.w	r1, r1, #63	; 0x3f
 800162a:	ea41 4195 	orr.w	r1, r1, r5, lsr #18
 800162e:	6071      	str	r1, [r6, #4]
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8001630:	6821      	ldr	r1, [r4, #0]
 8001632:	6a0b      	ldr	r3, [r1, #32]
 8001634:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001638:	6865      	ldr	r5, [r4, #4]
 800163a:	4a4d      	ldr	r2, [pc, #308]	; (8001770 <HAL_I2C_Init+0x1a8>)
 800163c:	4295      	cmp	r5, r2
 800163e:	d84f      	bhi.n	80016e0 <HAL_I2C_Init+0x118>
 8001640:	1c7a      	adds	r2, r7, #1
 8001642:	4313      	orrs	r3, r2
 8001644:	620b      	str	r3, [r1, #32]
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8001646:	6825      	ldr	r5, [r4, #0]
 8001648:	69e9      	ldr	r1, [r5, #28]
 800164a:	f421 414f 	bic.w	r1, r1, #52992	; 0xcf00
 800164e:	f021 01ff 	bic.w	r1, r1, #255	; 0xff
 8001652:	6863      	ldr	r3, [r4, #4]
 8001654:	4a46      	ldr	r2, [pc, #280]	; (8001770 <HAL_I2C_Init+0x1a8>)
 8001656:	4293      	cmp	r3, r2
 8001658:	d84c      	bhi.n	80016f4 <HAL_I2C_Init+0x12c>
 800165a:	3801      	subs	r0, #1
 800165c:	005b      	lsls	r3, r3, #1
 800165e:	fbb0 f0f3 	udiv	r0, r0, r3
 8001662:	3001      	adds	r0, #1
 8001664:	f640 73fc 	movw	r3, #4092	; 0xffc
 8001668:	4218      	tst	r0, r3
 800166a:	d078      	beq.n	800175e <HAL_I2C_Init+0x196>
 800166c:	f3c0 030b 	ubfx	r3, r0, #0, #12
 8001670:	430b      	orrs	r3, r1
 8001672:	61eb      	str	r3, [r5, #28]
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8001674:	6821      	ldr	r1, [r4, #0]
 8001676:	680b      	ldr	r3, [r1, #0]
 8001678:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 800167c:	69e2      	ldr	r2, [r4, #28]
 800167e:	6a20      	ldr	r0, [r4, #32]
 8001680:	4302      	orrs	r2, r0
 8001682:	4313      	orrs	r3, r2
 8001684:	600b      	str	r3, [r1, #0]
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8001686:	6821      	ldr	r1, [r4, #0]
 8001688:	688b      	ldr	r3, [r1, #8]
 800168a:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 800168e:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8001692:	6922      	ldr	r2, [r4, #16]
 8001694:	68e0      	ldr	r0, [r4, #12]
 8001696:	4302      	orrs	r2, r0
 8001698:	4313      	orrs	r3, r2
 800169a:	608b      	str	r3, [r1, #8]
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 800169c:	6821      	ldr	r1, [r4, #0]
 800169e:	68cb      	ldr	r3, [r1, #12]
 80016a0:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80016a4:	6962      	ldr	r2, [r4, #20]
 80016a6:	69a0      	ldr	r0, [r4, #24]
 80016a8:	4302      	orrs	r2, r0
 80016aa:	4313      	orrs	r3, r2
 80016ac:	60cb      	str	r3, [r1, #12]
  __HAL_I2C_ENABLE(hi2c);
 80016ae:	6822      	ldr	r2, [r4, #0]
 80016b0:	6813      	ldr	r3, [r2, #0]
 80016b2:	f043 0301 	orr.w	r3, r3, #1
 80016b6:	6013      	str	r3, [r2, #0]
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80016b8:	2000      	movs	r0, #0
 80016ba:	6420      	str	r0, [r4, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80016bc:	2320      	movs	r3, #32
 80016be:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80016c2:	6320      	str	r0, [r4, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80016c4:	f884 003e 	strb.w	r0, [r4, #62]	; 0x3e
}
 80016c8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    hi2c->Lock = HAL_UNLOCKED;
 80016ca:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
    HAL_I2C_MspInit(hi2c);
 80016ce:	f7ff fb77 	bl	8000dc0 <HAL_I2C_MspInit>
 80016d2:	e782      	b.n	80015da <HAL_I2C_Init+0x12>
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80016d4:	4b29      	ldr	r3, [pc, #164]	; (800177c <HAL_I2C_Init+0x1b4>)
 80016d6:	4298      	cmp	r0, r3
 80016d8:	bf8c      	ite	hi
 80016da:	2300      	movhi	r3, #0
 80016dc:	2301      	movls	r3, #1
 80016de:	e799      	b.n	8001614 <HAL_I2C_Init+0x4c>
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80016e0:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80016e4:	fb02 f207 	mul.w	r2, r2, r7
 80016e8:	4d25      	ldr	r5, [pc, #148]	; (8001780 <HAL_I2C_Init+0x1b8>)
 80016ea:	fba5 5202 	umull	r5, r2, r5, r2
 80016ee:	0992      	lsrs	r2, r2, #6
 80016f0:	3201      	adds	r2, #1
 80016f2:	e7a6      	b.n	8001642 <HAL_I2C_Init+0x7a>
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80016f4:	68a2      	ldr	r2, [r4, #8]
 80016f6:	b9ba      	cbnz	r2, 8001728 <HAL_I2C_Init+0x160>
 80016f8:	1e46      	subs	r6, r0, #1
 80016fa:	eb03 0743 	add.w	r7, r3, r3, lsl #1
 80016fe:	fbb6 f6f7 	udiv	r6, r6, r7
 8001702:	3601      	adds	r6, #1
 8001704:	f3c6 060b 	ubfx	r6, r6, #0, #12
 8001708:	fab6 f686 	clz	r6, r6
 800170c:	0976      	lsrs	r6, r6, #5
 800170e:	bb46      	cbnz	r6, 8001762 <HAL_I2C_Init+0x19a>
 8001710:	b9c2      	cbnz	r2, 8001744 <HAL_I2C_Init+0x17c>
 8001712:	1e42      	subs	r2, r0, #1
 8001714:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8001718:	fbb2 f2f3 	udiv	r2, r2, r3
 800171c:	3201      	adds	r2, #1
 800171e:	f3c2 020b 	ubfx	r2, r2, #0, #12
 8001722:	f442 4300 	orr.w	r3, r2, #32768	; 0x8000
 8001726:	e7a3      	b.n	8001670 <HAL_I2C_Init+0xa8>
 8001728:	1e46      	subs	r6, r0, #1
 800172a:	eb03 0783 	add.w	r7, r3, r3, lsl #2
 800172e:	eb07 0787 	add.w	r7, r7, r7, lsl #2
 8001732:	fbb6 f6f7 	udiv	r6, r6, r7
 8001736:	3601      	adds	r6, #1
 8001738:	f3c6 060b 	ubfx	r6, r6, #0, #12
 800173c:	fab6 f686 	clz	r6, r6
 8001740:	0976      	lsrs	r6, r6, #5
 8001742:	e7e4      	b.n	800170e <HAL_I2C_Init+0x146>
 8001744:	1e42      	subs	r2, r0, #1
 8001746:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 800174a:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 800174e:	fbb2 f2f3 	udiv	r2, r2, r3
 8001752:	3201      	adds	r2, #1
 8001754:	f3c2 020b 	ubfx	r2, r2, #0, #12
 8001758:	f442 4340 	orr.w	r3, r2, #49152	; 0xc000
 800175c:	e788      	b.n	8001670 <HAL_I2C_Init+0xa8>
 800175e:	2304      	movs	r3, #4
 8001760:	e786      	b.n	8001670 <HAL_I2C_Init+0xa8>
 8001762:	2301      	movs	r3, #1
 8001764:	e784      	b.n	8001670 <HAL_I2C_Init+0xa8>
    return HAL_ERROR;
 8001766:	2001      	movs	r0, #1
}
 8001768:	4770      	bx	lr
    return HAL_ERROR;
 800176a:	2001      	movs	r0, #1
 800176c:	e7ac      	b.n	80016c8 <HAL_I2C_Init+0x100>
 800176e:	bf00      	nop
 8001770:	000186a0 	.word	0x000186a0
 8001774:	001e847f 	.word	0x001e847f
 8001778:	431bde83 	.word	0x431bde83
 800177c:	003d08ff 	.word	0x003d08ff
 8001780:	10624dd3 	.word	0x10624dd3

08001784 <HAL_I2C_Master_Transmit>:
{
 8001784:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8001788:	b085      	sub	sp, #20
 800178a:	4604      	mov	r4, r0
 800178c:	460f      	mov	r7, r1
 800178e:	4691      	mov	r9, r2
 8001790:	4698      	mov	r8, r3
 8001792:	9e0c      	ldr	r6, [sp, #48]	; 0x30
  uint32_t tickstart = HAL_GetTick();
 8001794:	f7ff fc0c 	bl	8000fb0 <HAL_GetTick>
 8001798:	4605      	mov	r5, r0
  if (hi2c->State == HAL_I2C_STATE_READY)
 800179a:	f894 003d 	ldrb.w	r0, [r4, #61]	; 0x3d
 800179e:	b2c0      	uxtb	r0, r0
 80017a0:	2820      	cmp	r0, #32
 80017a2:	d004      	beq.n	80017ae <HAL_I2C_Master_Transmit+0x2a>
    return HAL_BUSY;
 80017a4:	2702      	movs	r7, #2
}
 80017a6:	4638      	mov	r0, r7
 80017a8:	b005      	add	sp, #20
 80017aa:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80017ae:	9500      	str	r5, [sp, #0]
 80017b0:	2319      	movs	r3, #25
 80017b2:	2201      	movs	r2, #1
 80017b4:	494f      	ldr	r1, [pc, #316]	; (80018f4 <HAL_I2C_Master_Transmit+0x170>)
 80017b6:	4620      	mov	r0, r4
 80017b8:	f7ff fdc9 	bl	800134e <I2C_WaitOnFlagUntilTimeout>
 80017bc:	2800      	cmp	r0, #0
 80017be:	f040 8092 	bne.w	80018e6 <HAL_I2C_Master_Transmit+0x162>
    __HAL_LOCK(hi2c);
 80017c2:	f894 303c 	ldrb.w	r3, [r4, #60]	; 0x3c
 80017c6:	2b01      	cmp	r3, #1
 80017c8:	f000 808f 	beq.w	80018ea <HAL_I2C_Master_Transmit+0x166>
 80017cc:	2301      	movs	r3, #1
 80017ce:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80017d2:	6823      	ldr	r3, [r4, #0]
 80017d4:	681a      	ldr	r2, [r3, #0]
 80017d6:	f012 0f01 	tst.w	r2, #1
 80017da:	d103      	bne.n	80017e4 <HAL_I2C_Master_Transmit+0x60>
      __HAL_I2C_ENABLE(hi2c);
 80017dc:	681a      	ldr	r2, [r3, #0]
 80017de:	f042 0201 	orr.w	r2, r2, #1
 80017e2:	601a      	str	r2, [r3, #0]
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80017e4:	6822      	ldr	r2, [r4, #0]
 80017e6:	6813      	ldr	r3, [r2, #0]
 80017e8:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80017ec:	6013      	str	r3, [r2, #0]
    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 80017ee:	2321      	movs	r3, #33	; 0x21
 80017f0:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 80017f4:	2310      	movs	r3, #16
 80017f6:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 80017fa:	2300      	movs	r3, #0
 80017fc:	6423      	str	r3, [r4, #64]	; 0x40
    hi2c->pBuffPtr    = pData;
 80017fe:	f8c4 9024 	str.w	r9, [r4, #36]	; 0x24
    hi2c->XferCount   = Size;
 8001802:	f8a4 802a 	strh.w	r8, [r4, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8001806:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8001808:	8523      	strh	r3, [r4, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800180a:	4b3b      	ldr	r3, [pc, #236]	; (80018f8 <HAL_I2C_Master_Transmit+0x174>)
 800180c:	62e3      	str	r3, [r4, #44]	; 0x2c
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 800180e:	462b      	mov	r3, r5
 8001810:	4632      	mov	r2, r6
 8001812:	4639      	mov	r1, r7
 8001814:	4620      	mov	r0, r4
 8001816:	f7ff fe29 	bl	800146c <I2C_MasterRequestWrite>
 800181a:	4607      	mov	r7, r0
 800181c:	2800      	cmp	r0, #0
 800181e:	d166      	bne.n	80018ee <HAL_I2C_Master_Transmit+0x16a>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001820:	2300      	movs	r3, #0
 8001822:	9303      	str	r3, [sp, #12]
 8001824:	6823      	ldr	r3, [r4, #0]
 8001826:	695a      	ldr	r2, [r3, #20]
 8001828:	9203      	str	r2, [sp, #12]
 800182a:	699b      	ldr	r3, [r3, #24]
 800182c:	9303      	str	r3, [sp, #12]
 800182e:	9b03      	ldr	r3, [sp, #12]
    while (hi2c->XferSize > 0U)
 8001830:	e011      	b.n	8001856 <HAL_I2C_Master_Transmit+0xd2>
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001832:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8001834:	2b04      	cmp	r3, #4
 8001836:	d001      	beq.n	800183c <HAL_I2C_Master_Transmit+0xb8>
        return HAL_ERROR;
 8001838:	2701      	movs	r7, #1
 800183a:	e7b4      	b.n	80017a6 <HAL_I2C_Master_Transmit+0x22>
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800183c:	6822      	ldr	r2, [r4, #0]
 800183e:	6813      	ldr	r3, [r2, #0]
 8001840:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001844:	6013      	str	r3, [r2, #0]
 8001846:	e7f7      	b.n	8001838 <HAL_I2C_Master_Transmit+0xb4>
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001848:	462a      	mov	r2, r5
 800184a:	4631      	mov	r1, r6
 800184c:	4620      	mov	r0, r4
 800184e:	f7ff fe91 	bl	8001574 <I2C_WaitOnBTFFlagUntilTimeout>
 8001852:	2800      	cmp	r0, #0
 8001854:	d12e      	bne.n	80018b4 <HAL_I2C_Master_Transmit+0x130>
    while (hi2c->XferSize > 0U)
 8001856:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 8001858:	2b00      	cmp	r3, #0
 800185a:	d036      	beq.n	80018ca <HAL_I2C_Master_Transmit+0x146>
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800185c:	462a      	mov	r2, r5
 800185e:	4631      	mov	r1, r6
 8001860:	4620      	mov	r0, r4
 8001862:	f7ff fe5d 	bl	8001520 <I2C_WaitOnTXEFlagUntilTimeout>
 8001866:	2800      	cmp	r0, #0
 8001868:	d1e3      	bne.n	8001832 <HAL_I2C_Master_Transmit+0xae>
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800186a:	6a62      	ldr	r2, [r4, #36]	; 0x24
 800186c:	6823      	ldr	r3, [r4, #0]
 800186e:	7812      	ldrb	r2, [r2, #0]
 8001870:	611a      	str	r2, [r3, #16]
      hi2c->pBuffPtr++;
 8001872:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8001874:	1c4b      	adds	r3, r1, #1
 8001876:	6263      	str	r3, [r4, #36]	; 0x24
      hi2c->XferCount--;
 8001878:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 800187a:	b29b      	uxth	r3, r3
 800187c:	3b01      	subs	r3, #1
 800187e:	b29b      	uxth	r3, r3
 8001880:	8563      	strh	r3, [r4, #42]	; 0x2a
      hi2c->XferSize--;
 8001882:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 8001884:	3b01      	subs	r3, #1
 8001886:	b29b      	uxth	r3, r3
 8001888:	8523      	strh	r3, [r4, #40]	; 0x28
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 800188a:	6822      	ldr	r2, [r4, #0]
 800188c:	6950      	ldr	r0, [r2, #20]
 800188e:	f010 0f04 	tst.w	r0, #4
 8001892:	d0d9      	beq.n	8001848 <HAL_I2C_Master_Transmit+0xc4>
 8001894:	2b00      	cmp	r3, #0
 8001896:	d0d7      	beq.n	8001848 <HAL_I2C_Master_Transmit+0xc4>
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8001898:	784b      	ldrb	r3, [r1, #1]
 800189a:	6113      	str	r3, [r2, #16]
        hi2c->pBuffPtr++;
 800189c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800189e:	3301      	adds	r3, #1
 80018a0:	6263      	str	r3, [r4, #36]	; 0x24
        hi2c->XferCount--;
 80018a2:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 80018a4:	b29b      	uxth	r3, r3
 80018a6:	3b01      	subs	r3, #1
 80018a8:	b29b      	uxth	r3, r3
 80018aa:	8563      	strh	r3, [r4, #42]	; 0x2a
        hi2c->XferSize--;
 80018ac:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 80018ae:	3b01      	subs	r3, #1
 80018b0:	8523      	strh	r3, [r4, #40]	; 0x28
 80018b2:	e7c9      	b.n	8001848 <HAL_I2C_Master_Transmit+0xc4>
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80018b4:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80018b6:	2b04      	cmp	r3, #4
 80018b8:	d001      	beq.n	80018be <HAL_I2C_Master_Transmit+0x13a>
        return HAL_ERROR;
 80018ba:	2701      	movs	r7, #1
 80018bc:	e773      	b.n	80017a6 <HAL_I2C_Master_Transmit+0x22>
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80018be:	6822      	ldr	r2, [r4, #0]
 80018c0:	6813      	ldr	r3, [r2, #0]
 80018c2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80018c6:	6013      	str	r3, [r2, #0]
 80018c8:	e7f7      	b.n	80018ba <HAL_I2C_Master_Transmit+0x136>
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80018ca:	6822      	ldr	r2, [r4, #0]
 80018cc:	6813      	ldr	r3, [r2, #0]
 80018ce:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80018d2:	6013      	str	r3, [r2, #0]
    hi2c->State = HAL_I2C_STATE_READY;
 80018d4:	2320      	movs	r3, #32
 80018d6:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80018da:	2300      	movs	r3, #0
 80018dc:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
    __HAL_UNLOCK(hi2c);
 80018e0:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
    return HAL_OK;
 80018e4:	e75f      	b.n	80017a6 <HAL_I2C_Master_Transmit+0x22>
      return HAL_BUSY;
 80018e6:	2702      	movs	r7, #2
 80018e8:	e75d      	b.n	80017a6 <HAL_I2C_Master_Transmit+0x22>
    __HAL_LOCK(hi2c);
 80018ea:	2702      	movs	r7, #2
 80018ec:	e75b      	b.n	80017a6 <HAL_I2C_Master_Transmit+0x22>
      return HAL_ERROR;
 80018ee:	2701      	movs	r7, #1
 80018f0:	e759      	b.n	80017a6 <HAL_I2C_Master_Transmit+0x22>
 80018f2:	bf00      	nop
 80018f4:	00100002 	.word	0x00100002
 80018f8:	ffff0000 	.word	0xffff0000

080018fc <HAL_I2C_GetState>:
  return hi2c->State;
 80018fc:	f890 003d 	ldrb.w	r0, [r0, #61]	; 0x3d
}
 8001900:	4770      	bx	lr

08001902 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8001902:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8001906:	b082      	sub	sp, #8
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8001908:	f8d0 8000 	ldr.w	r8, [r0]
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];

  if (ep->xfer_count > ep->xfer_len)
 800190c:	ebc1 03c1 	rsb	r3, r1, r1, lsl #3
 8001910:	eb00 0383 	add.w	r3, r0, r3, lsl #2
 8001914:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8001916:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001918:	429a      	cmp	r2, r3
 800191a:	d855      	bhi.n	80019c8 <PCD_WriteEmptyTxFifo+0xc6>
 800191c:	4607      	mov	r7, r0
 800191e:	460c      	mov	r4, r1
 8001920:	46c1      	mov	r9, r8
  {
    return HAL_ERROR;
  }

  len = ep->xfer_len - ep->xfer_count;
 8001922:	1a9b      	subs	r3, r3, r2

  if (len > ep->maxpacket)
 8001924:	ebc1 02c1 	rsb	r2, r1, r1, lsl #3
 8001928:	eb00 0282 	add.w	r2, r0, r2, lsl #2
 800192c:	6c52      	ldr	r2, [r2, #68]	; 0x44
 800192e:	429a      	cmp	r2, r3
 8001930:	d300      	bcc.n	8001934 <PCD_WriteEmptyTxFifo+0x32>
  len = ep->xfer_len - ep->xfer_count;
 8001932:	461a      	mov	r2, r3
  {
    len = ep->maxpacket;
  }

  len32b = (len + 3U) / 4U;
 8001934:	f102 0a03 	add.w	sl, r2, #3
 8001938:	ea4f 0a9a 	mov.w	sl, sl, lsr #2

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800193c:	e015      	b.n	800196a <PCD_WriteEmptyTxFifo+0x68>

    if (len > ep->maxpacket)
    {
      len = ep->maxpacket;
    }
    len32b = (len + 3U) / 4U;
 800193e:	f106 0a03 	add.w	sl, r6, #3
 8001942:	ea4f 0a9a 	mov.w	sl, sl, lsr #2

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8001946:	ebc4 05c4 	rsb	r5, r4, r4, lsl #3
 800194a:	eb07 0585 	add.w	r5, r7, r5, lsl #2
 800194e:	6ca9      	ldr	r1, [r5, #72]	; 0x48
 8001950:	7c3b      	ldrb	r3, [r7, #16]
 8001952:	9300      	str	r3, [sp, #0]
 8001954:	b2b3      	uxth	r3, r6
 8001956:	b2e2      	uxtb	r2, r4
 8001958:	4640      	mov	r0, r8
 800195a:	f001 fc3f 	bl	80031dc <USB_WritePacket>
                          (uint8_t)hpcd->Init.dma_enable);

    ep->xfer_buff  += len;
 800195e:	6cab      	ldr	r3, [r5, #72]	; 0x48
 8001960:	4433      	add	r3, r6
 8001962:	64ab      	str	r3, [r5, #72]	; 0x48
    ep->xfer_count += len;
 8001964:	6d6b      	ldr	r3, [r5, #84]	; 0x54
 8001966:	441e      	add	r6, r3
 8001968:	656e      	str	r6, [r5, #84]	; 0x54
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800196a:	eb09 1344 	add.w	r3, r9, r4, lsl #5
 800196e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001972:	699b      	ldr	r3, [r3, #24]
 8001974:	b29b      	uxth	r3, r3
 8001976:	4553      	cmp	r3, sl
 8001978:	d312      	bcc.n	80019a0 <PCD_WriteEmptyTxFifo+0x9e>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 800197a:	ebc4 02c4 	rsb	r2, r4, r4, lsl #3
 800197e:	eb07 0282 	add.w	r2, r7, r2, lsl #2
 8001982:	6d51      	ldr	r1, [r2, #84]	; 0x54
 8001984:	6d13      	ldr	r3, [r2, #80]	; 0x50
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8001986:	4299      	cmp	r1, r3
 8001988:	d20a      	bcs.n	80019a0 <PCD_WriteEmptyTxFifo+0x9e>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 800198a:	b14b      	cbz	r3, 80019a0 <PCD_WriteEmptyTxFifo+0x9e>
    len = ep->xfer_len - ep->xfer_count;
 800198c:	1a5b      	subs	r3, r3, r1
    if (len > ep->maxpacket)
 800198e:	ebc4 02c4 	rsb	r2, r4, r4, lsl #3
 8001992:	eb07 0282 	add.w	r2, r7, r2, lsl #2
 8001996:	6c56      	ldr	r6, [r2, #68]	; 0x44
 8001998:	429e      	cmp	r6, r3
 800199a:	d3d0      	bcc.n	800193e <PCD_WriteEmptyTxFifo+0x3c>
    len = ep->xfer_len - ep->xfer_count;
 800199c:	461e      	mov	r6, r3
 800199e:	e7ce      	b.n	800193e <PCD_WriteEmptyTxFifo+0x3c>
  }

  if (ep->xfer_len <= ep->xfer_count)
 80019a0:	ebc4 00c4 	rsb	r0, r4, r4, lsl #3
 80019a4:	eb07 0780 	add.w	r7, r7, r0, lsl #2
 80019a8:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80019aa:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80019ac:	429a      	cmp	r2, r3
 80019ae:	d80f      	bhi.n	80019d0 <PCD_WriteEmptyTxFifo+0xce>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 80019b0:	f004 040f 	and.w	r4, r4, #15
 80019b4:	2301      	movs	r3, #1
 80019b6:	40a3      	lsls	r3, r4
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 80019b8:	f8d8 4834 	ldr.w	r4, [r8, #2100]	; 0x834
 80019bc:	ea24 0403 	bic.w	r4, r4, r3
 80019c0:	f8c8 4834 	str.w	r4, [r8, #2100]	; 0x834
  }

  return HAL_OK;
 80019c4:	2000      	movs	r0, #0
 80019c6:	e000      	b.n	80019ca <PCD_WriteEmptyTxFifo+0xc8>
    return HAL_ERROR;
 80019c8:	2001      	movs	r0, #1
}
 80019ca:	b002      	add	sp, #8
 80019cc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  return HAL_OK;
 80019d0:	2000      	movs	r0, #0
 80019d2:	e7fa      	b.n	80019ca <PCD_WriteEmptyTxFifo+0xc8>

080019d4 <HAL_PCD_Init>:
{
 80019d4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80019d6:	b08b      	sub	sp, #44	; 0x2c
  if (hpcd == NULL)
 80019d8:	2800      	cmp	r0, #0
 80019da:	f000 808c 	beq.w	8001af6 <HAL_PCD_Init+0x122>
 80019de:	4605      	mov	r5, r0
  USBx = hpcd->Instance;
 80019e0:	6804      	ldr	r4, [r0, #0]
  if (hpcd->State == HAL_PCD_STATE_RESET)
 80019e2:	f890 33bd 	ldrb.w	r3, [r0, #957]	; 0x3bd
 80019e6:	b32b      	cbz	r3, 8001a34 <HAL_PCD_Init+0x60>
  hpcd->State = HAL_PCD_STATE_BUSY;
 80019e8:	2303      	movs	r3, #3
 80019ea:	f885 33bd 	strb.w	r3, [r5, #957]	; 0x3bd
  if ((USBx->CID & (0x1U << 8)) == 0U)
 80019ee:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 80019f0:	f413 7f80 	tst.w	r3, #256	; 0x100
 80019f4:	d101      	bne.n	80019fa <HAL_PCD_Init+0x26>
    hpcd->Init.dma_enable = 0U;
 80019f6:	2300      	movs	r3, #0
 80019f8:	612b      	str	r3, [r5, #16]
  __HAL_PCD_DISABLE(hpcd);
 80019fa:	6828      	ldr	r0, [r5, #0]
 80019fc:	f001 f98e 	bl	8002d1c <USB_DisableGlobalInt>
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8001a00:	462c      	mov	r4, r5
 8001a02:	f854 7b10 	ldr.w	r7, [r4], #16
 8001a06:	466e      	mov	r6, sp
 8001a08:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001a0a:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 8001a0c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001a0e:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 8001a10:	e894 0003 	ldmia.w	r4, {r0, r1}
 8001a14:	e886 0003 	stmia.w	r6, {r0, r1}
 8001a18:	1d2b      	adds	r3, r5, #4
 8001a1a:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001a1c:	4638      	mov	r0, r7
 8001a1e:	f001 f8bf 	bl	8002ba0 <USB_CoreInit>
 8001a22:	4604      	mov	r4, r0
 8001a24:	b158      	cbz	r0, 8001a3e <HAL_PCD_Init+0x6a>
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001a26:	2302      	movs	r3, #2
 8001a28:	f885 33bd 	strb.w	r3, [r5, #957]	; 0x3bd
    return HAL_ERROR;
 8001a2c:	2401      	movs	r4, #1
}
 8001a2e:	4620      	mov	r0, r4
 8001a30:	b00b      	add	sp, #44	; 0x2c
 8001a32:	bdf0      	pop	{r4, r5, r6, r7, pc}
    hpcd->Lock = HAL_UNLOCKED;
 8001a34:	f880 33bc 	strb.w	r3, [r0, #956]	; 0x3bc
    HAL_PCD_MspInit(hpcd);
 8001a38:	f004 f916 	bl	8005c68 <HAL_PCD_MspInit>
 8001a3c:	e7d4      	b.n	80019e8 <HAL_PCD_Init+0x14>
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8001a3e:	2100      	movs	r1, #0
 8001a40:	6828      	ldr	r0, [r5, #0]
 8001a42:	f001 fdcd 	bl	80035e0 <USB_SetCurrentMode>
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001a46:	4623      	mov	r3, r4
 8001a48:	e016      	b.n	8001a78 <HAL_PCD_Init+0xa4>
    hpcd->IN_ep[i].is_in = 1U;
 8001a4a:	ebc3 02c3 	rsb	r2, r3, r3, lsl #3
 8001a4e:	eb05 0282 	add.w	r2, r5, r2, lsl #2
 8001a52:	2101      	movs	r1, #1
 8001a54:	f882 103d 	strb.w	r1, [r2, #61]	; 0x3d
    hpcd->IN_ep[i].num = i;
 8001a58:	f882 303c 	strb.w	r3, [r2, #60]	; 0x3c
    hpcd->IN_ep[i].tx_fifo_num = i;
 8001a5c:	f8a2 3042 	strh.w	r3, [r2, #66]	; 0x42
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8001a60:	2100      	movs	r1, #0
 8001a62:	f882 103f 	strb.w	r1, [r2, #63]	; 0x3f
    hpcd->IN_ep[i].maxpacket = 0U;
 8001a66:	6451      	str	r1, [r2, #68]	; 0x44
    hpcd->IN_ep[i].xfer_buff = 0U;
 8001a68:	6491      	str	r1, [r2, #72]	; 0x48
    hpcd->IN_ep[i].xfer_len = 0U;
 8001a6a:	ebc3 02c3 	rsb	r2, r3, r3, lsl #3
 8001a6e:	eb05 0282 	add.w	r2, r5, r2, lsl #2
 8001a72:	6511      	str	r1, [r2, #80]	; 0x50
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001a74:	3301      	adds	r3, #1
 8001a76:	b2db      	uxtb	r3, r3
 8001a78:	6869      	ldr	r1, [r5, #4]
 8001a7a:	428b      	cmp	r3, r1
 8001a7c:	d3e5      	bcc.n	8001a4a <HAL_PCD_Init+0x76>
 8001a7e:	e016      	b.n	8001aae <HAL_PCD_Init+0xda>
    hpcd->OUT_ep[i].is_in = 0U;
 8001a80:	ebc4 03c4 	rsb	r3, r4, r4, lsl #3
 8001a84:	eb05 0383 	add.w	r3, r5, r3, lsl #2
 8001a88:	2200      	movs	r2, #0
 8001a8a:	f883 21fd 	strb.w	r2, [r3, #509]	; 0x1fd
    hpcd->OUT_ep[i].num = i;
 8001a8e:	f883 41fc 	strb.w	r4, [r3, #508]	; 0x1fc
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8001a92:	f883 21ff 	strb.w	r2, [r3, #511]	; 0x1ff
    hpcd->OUT_ep[i].maxpacket = 0U;
 8001a96:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8001a9a:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
    hpcd->OUT_ep[i].xfer_len = 0U;
 8001a9e:	ebc4 03c4 	rsb	r3, r4, r4, lsl #3
 8001aa2:	eb05 0383 	add.w	r3, r5, r3, lsl #2
 8001aa6:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001aaa:	3401      	adds	r4, #1
 8001aac:	b2e4      	uxtb	r4, r4
 8001aae:	42a1      	cmp	r1, r4
 8001ab0:	d8e6      	bhi.n	8001a80 <HAL_PCD_Init+0xac>
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8001ab2:	462c      	mov	r4, r5
 8001ab4:	f854 7b10 	ldr.w	r7, [r4], #16
 8001ab8:	466e      	mov	r6, sp
 8001aba:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001abc:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 8001abe:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001ac0:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 8001ac2:	e894 0003 	ldmia.w	r4, {r0, r1}
 8001ac6:	e886 0003 	stmia.w	r6, {r0, r1}
 8001aca:	1d2b      	adds	r3, r5, #4
 8001acc:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001ace:	4638      	mov	r0, r7
 8001ad0:	f001 f960 	bl	8002d94 <USB_DevInit>
 8001ad4:	4604      	mov	r4, r0
 8001ad6:	b120      	cbz	r0, 8001ae2 <HAL_PCD_Init+0x10e>
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001ad8:	2302      	movs	r3, #2
 8001ada:	f885 33bd 	strb.w	r3, [r5, #957]	; 0x3bd
    return HAL_ERROR;
 8001ade:	2401      	movs	r4, #1
 8001ae0:	e7a5      	b.n	8001a2e <HAL_PCD_Init+0x5a>
  hpcd->USB_Address = 0U;
 8001ae2:	2300      	movs	r3, #0
 8001ae4:	f885 3038 	strb.w	r3, [r5, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8001ae8:	2301      	movs	r3, #1
 8001aea:	f885 33bd 	strb.w	r3, [r5, #957]	; 0x3bd
  (void)USB_DevDisconnect(hpcd->Instance);
 8001aee:	6828      	ldr	r0, [r5, #0]
 8001af0:	f001 fd33 	bl	800355a <USB_DevDisconnect>
  return HAL_OK;
 8001af4:	e79b      	b.n	8001a2e <HAL_PCD_Init+0x5a>
    return HAL_ERROR;
 8001af6:	2401      	movs	r4, #1
 8001af8:	e799      	b.n	8001a2e <HAL_PCD_Init+0x5a>

08001afa <HAL_PCD_Start>:
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8001afa:	6802      	ldr	r2, [r0, #0]
  __HAL_LOCK(hpcd);
 8001afc:	f890 33bc 	ldrb.w	r3, [r0, #956]	; 0x3bc
 8001b00:	2b01      	cmp	r3, #1
 8001b02:	d019      	beq.n	8001b38 <HAL_PCD_Start+0x3e>
{
 8001b04:	b510      	push	{r4, lr}
 8001b06:	4604      	mov	r4, r0
  __HAL_LOCK(hpcd);
 8001b08:	2301      	movs	r3, #1
 8001b0a:	f880 33bc 	strb.w	r3, [r0, #956]	; 0x3bc
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8001b0e:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8001b10:	2b01      	cmp	r3, #1
 8001b12:	d009      	beq.n	8001b28 <HAL_PCD_Start+0x2e>
  __HAL_PCD_ENABLE(hpcd);
 8001b14:	6820      	ldr	r0, [r4, #0]
 8001b16:	f001 f8fb 	bl	8002d10 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8001b1a:	6820      	ldr	r0, [r4, #0]
 8001b1c:	f001 fd0f 	bl	800353e <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8001b20:	2000      	movs	r0, #0
 8001b22:	f884 03bc 	strb.w	r0, [r4, #956]	; 0x3bc
}
 8001b26:	bd10      	pop	{r4, pc}
      (hpcd->Init.phy_itface != USB_OTG_ULPI_PHY))
 8001b28:	6983      	ldr	r3, [r0, #24]
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8001b2a:	2b01      	cmp	r3, #1
 8001b2c:	d0f2      	beq.n	8001b14 <HAL_PCD_Start+0x1a>
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8001b2e:	6b93      	ldr	r3, [r2, #56]	; 0x38
 8001b30:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001b34:	6393      	str	r3, [r2, #56]	; 0x38
 8001b36:	e7ed      	b.n	8001b14 <HAL_PCD_Start+0x1a>
  __HAL_LOCK(hpcd);
 8001b38:	2002      	movs	r0, #2
}
 8001b3a:	4770      	bx	lr

08001b3c <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8001b3c:	b570      	push	{r4, r5, r6, lr}
 8001b3e:	4604      	mov	r4, r0
 8001b40:	460d      	mov	r5, r1
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8001b42:	6800      	ldr	r0, [r0, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8001b44:	6c06      	ldr	r6, [r0, #64]	; 0x40
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8001b46:	eb00 1341 	add.w	r3, r0, r1, lsl #5
 8001b4a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001b4e:	689a      	ldr	r2, [r3, #8]

  if (hpcd->Init.dma_enable == 1U)
 8001b50:	6921      	ldr	r1, [r4, #16]
 8001b52:	2901      	cmp	r1, #1
 8001b54:	d011      	beq.n	8001b7a <PCD_EP_OutXfrComplete_int+0x3e>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 8001b56:	4935      	ldr	r1, [pc, #212]	; (8001c2c <PCD_EP_OutXfrComplete_int+0xf0>)
 8001b58:	428e      	cmp	r6, r1
 8001b5a:	d050      	beq.n	8001bfe <PCD_EP_OutXfrComplete_int+0xc2>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8001b5c:	b93d      	cbnz	r5, 8001b6e <PCD_EP_OutXfrComplete_int+0x32>
 8001b5e:	ebc5 03c5 	rsb	r3, r5, r5, lsl #3
 8001b62:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8001b66:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 8001b6a:	2b00      	cmp	r3, #0
 8001b6c:	d058      	beq.n	8001c20 <PCD_EP_OutXfrComplete_int+0xe4>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8001b6e:	b2e9      	uxtb	r1, r5
 8001b70:	4620      	mov	r0, r4
 8001b72:	f004 f8c5 	bl	8005d00 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
}
 8001b76:	2000      	movs	r0, #0
 8001b78:	bd70      	pop	{r4, r5, r6, pc}
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 8001b7a:	f012 0f08 	tst.w	r2, #8
 8001b7e:	d009      	beq.n	8001b94 <PCD_EP_OutXfrComplete_int+0x58>
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8001b80:	492b      	ldr	r1, [pc, #172]	; (8001c30 <PCD_EP_OutXfrComplete_int+0xf4>)
 8001b82:	428e      	cmp	r6, r1
 8001b84:	d9f7      	bls.n	8001b76 <PCD_EP_OutXfrComplete_int+0x3a>
 8001b86:	f412 4f00 	tst.w	r2, #32768	; 0x8000
 8001b8a:	d0f4      	beq.n	8001b76 <PCD_EP_OutXfrComplete_int+0x3a>
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8001b8c:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8001b90:	609a      	str	r2, [r3, #8]
 8001b92:	e7f0      	b.n	8001b76 <PCD_EP_OutXfrComplete_int+0x3a>
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 8001b94:	f012 0f20 	tst.w	r2, #32
 8001b98:	d002      	beq.n	8001ba0 <PCD_EP_OutXfrComplete_int+0x64>
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8001b9a:	2220      	movs	r2, #32
 8001b9c:	609a      	str	r2, [r3, #8]
 8001b9e:	e7ea      	b.n	8001b76 <PCD_EP_OutXfrComplete_int+0x3a>
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 8001ba0:	f012 0f28 	tst.w	r2, #40	; 0x28
 8001ba4:	d1e7      	bne.n	8001b76 <PCD_EP_OutXfrComplete_int+0x3a>
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8001ba6:	4922      	ldr	r1, [pc, #136]	; (8001c30 <PCD_EP_OutXfrComplete_int+0xf4>)
 8001ba8:	428e      	cmp	r6, r1
 8001baa:	d906      	bls.n	8001bba <PCD_EP_OutXfrComplete_int+0x7e>
 8001bac:	f412 4f00 	tst.w	r2, #32768	; 0x8000
 8001bb0:	d003      	beq.n	8001bba <PCD_EP_OutXfrComplete_int+0x7e>
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8001bb2:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8001bb6:	609a      	str	r2, [r3, #8]
 8001bb8:	e7dd      	b.n	8001b76 <PCD_EP_OutXfrComplete_int+0x3a>
          hpcd->OUT_ep[epnum].maxpacket -
 8001bba:	ebc5 02c5 	rsb	r2, r5, r5, lsl #3
 8001bbe:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 8001bc2:	f8d2 1204 	ldr.w	r1, [r2, #516]	; 0x204
          (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 8001bc6:	691b      	ldr	r3, [r3, #16]
 8001bc8:	f3c3 0312 	ubfx	r3, r3, #0, #19
          hpcd->OUT_ep[epnum].maxpacket -
 8001bcc:	1ac9      	subs	r1, r1, r3
        hpcd->OUT_ep[epnum].xfer_count =
 8001bce:	f8c2 1214 	str.w	r1, [r2, #532]	; 0x214
        hpcd->OUT_ep[epnum].xfer_buff += hpcd->OUT_ep[epnum].maxpacket;
 8001bd2:	f8d2 1204 	ldr.w	r1, [r2, #516]	; 0x204
 8001bd6:	f8d2 3208 	ldr.w	r3, [r2, #520]	; 0x208
 8001bda:	440b      	add	r3, r1
 8001bdc:	f8c2 3208 	str.w	r3, [r2, #520]	; 0x208
        if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8001be0:	b915      	cbnz	r5, 8001be8 <PCD_EP_OutXfrComplete_int+0xac>
 8001be2:	f8d2 3210 	ldr.w	r3, [r2, #528]	; 0x210
 8001be6:	b123      	cbz	r3, 8001bf2 <PCD_EP_OutXfrComplete_int+0xb6>
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8001be8:	b2e9      	uxtb	r1, r5
 8001bea:	4620      	mov	r0, r4
 8001bec:	f004 f888 	bl	8005d00 <HAL_PCD_DataOutStageCallback>
 8001bf0:	e7c1      	b.n	8001b76 <PCD_EP_OutXfrComplete_int+0x3a>
          (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8001bf2:	f504 7271 	add.w	r2, r4, #964	; 0x3c4
 8001bf6:	2101      	movs	r1, #1
 8001bf8:	f001 fd34 	bl	8003664 <USB_EP0_OutStart>
 8001bfc:	e7f4      	b.n	8001be8 <PCD_EP_OutXfrComplete_int+0xac>
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 8001bfe:	f412 4f00 	tst.w	r2, #32768	; 0x8000
 8001c02:	d003      	beq.n	8001c0c <PCD_EP_OutXfrComplete_int+0xd0>
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8001c04:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8001c08:	609a      	str	r2, [r3, #8]
 8001c0a:	e7b4      	b.n	8001b76 <PCD_EP_OutXfrComplete_int+0x3a>
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8001c0c:	f012 0f20 	tst.w	r2, #32
 8001c10:	d001      	beq.n	8001c16 <PCD_EP_OutXfrComplete_int+0xda>
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8001c12:	2220      	movs	r2, #32
 8001c14:	609a      	str	r2, [r3, #8]
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8001c16:	b2e9      	uxtb	r1, r5
 8001c18:	4620      	mov	r0, r4
 8001c1a:	f004 f871 	bl	8005d00 <HAL_PCD_DataOutStageCallback>
 8001c1e:	e7aa      	b.n	8001b76 <PCD_EP_OutXfrComplete_int+0x3a>
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 8001c20:	f504 7271 	add.w	r2, r4, #964	; 0x3c4
 8001c24:	2100      	movs	r1, #0
 8001c26:	f001 fd1d 	bl	8003664 <USB_EP0_OutStart>
 8001c2a:	e7a0      	b.n	8001b6e <PCD_EP_OutXfrComplete_int+0x32>
 8001c2c:	4f54310a 	.word	0x4f54310a
 8001c30:	4f54300a 	.word	0x4f54300a

08001c34 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8001c34:	b538      	push	{r3, r4, r5, lr}
 8001c36:	4604      	mov	r4, r0
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8001c38:	6803      	ldr	r3, [r0, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8001c3a:	6c1d      	ldr	r5, [r3, #64]	; 0x40
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8001c3c:	eb03 1341 	add.w	r3, r3, r1, lsl #5
 8001c40:	f8d3 1b08 	ldr.w	r1, [r3, #2824]	; 0xb08

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8001c44:	4a0e      	ldr	r2, [pc, #56]	; (8001c80 <PCD_EP_OutSetupPacket_int+0x4c>)
 8001c46:	4295      	cmp	r5, r2
 8001c48:	d907      	bls.n	8001c5a <PCD_EP_OutSetupPacket_int+0x26>
 8001c4a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001c4e:	f411 4f00 	tst.w	r1, #32768	; 0x8000
 8001c52:	d002      	beq.n	8001c5a <PCD_EP_OutSetupPacket_int+0x26>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8001c54:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8001c58:	609a      	str	r2, [r3, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 8001c5a:	4620      	mov	r0, r4
 8001c5c:	f004 f848 	bl	8005cf0 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 8001c60:	4b07      	ldr	r3, [pc, #28]	; (8001c80 <PCD_EP_OutSetupPacket_int+0x4c>)
 8001c62:	429d      	cmp	r5, r3
 8001c64:	d902      	bls.n	8001c6c <PCD_EP_OutSetupPacket_int+0x38>
 8001c66:	6923      	ldr	r3, [r4, #16]
 8001c68:	2b01      	cmp	r3, #1
 8001c6a:	d001      	beq.n	8001c70 <PCD_EP_OutSetupPacket_int+0x3c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
  }

  return HAL_OK;
}
 8001c6c:	2000      	movs	r0, #0
 8001c6e:	bd38      	pop	{r3, r4, r5, pc}
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8001c70:	f504 7271 	add.w	r2, r4, #964	; 0x3c4
 8001c74:	2101      	movs	r1, #1
 8001c76:	6820      	ldr	r0, [r4, #0]
 8001c78:	f001 fcf4 	bl	8003664 <USB_EP0_OutStart>
 8001c7c:	e7f6      	b.n	8001c6c <PCD_EP_OutSetupPacket_int+0x38>
 8001c7e:	bf00      	nop
 8001c80:	4f54300a 	.word	0x4f54300a

08001c84 <HAL_PCD_IRQHandler>:
{
 8001c84:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001c88:	b083      	sub	sp, #12
 8001c8a:	4604      	mov	r4, r0
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8001c8c:	6805      	ldr	r5, [r0, #0]
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 8001c8e:	4628      	mov	r0, r5
 8001c90:	f001 fca2 	bl	80035d8 <USB_GetMode>
 8001c94:	b110      	cbz	r0, 8001c9c <HAL_PCD_IRQHandler+0x18>
}
 8001c96:	b003      	add	sp, #12
 8001c98:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8001c9c:	462f      	mov	r7, r5
 8001c9e:	4606      	mov	r6, r0
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 8001ca0:	6820      	ldr	r0, [r4, #0]
 8001ca2:	f001 fc68 	bl	8003576 <USB_ReadInterrupts>
 8001ca6:	2800      	cmp	r0, #0
 8001ca8:	d0f5      	beq.n	8001c96 <HAL_PCD_IRQHandler+0x12>
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 8001caa:	6820      	ldr	r0, [r4, #0]
 8001cac:	f001 fc63 	bl	8003576 <USB_ReadInterrupts>
 8001cb0:	f010 0f02 	tst.w	r0, #2
 8001cb4:	d004      	beq.n	8001cc0 <HAL_PCD_IRQHandler+0x3c>
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 8001cb6:	6822      	ldr	r2, [r4, #0]
 8001cb8:	6953      	ldr	r3, [r2, #20]
 8001cba:	f003 0302 	and.w	r3, r3, #2
 8001cbe:	6153      	str	r3, [r2, #20]
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 8001cc0:	6820      	ldr	r0, [r4, #0]
 8001cc2:	f001 fc58 	bl	8003576 <USB_ReadInterrupts>
 8001cc6:	f010 0f10 	tst.w	r0, #16
 8001cca:	d014      	beq.n	8001cf6 <HAL_PCD_IRQHandler+0x72>
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8001ccc:	6822      	ldr	r2, [r4, #0]
 8001cce:	6993      	ldr	r3, [r2, #24]
 8001cd0:	f023 0310 	bic.w	r3, r3, #16
 8001cd4:	6193      	str	r3, [r2, #24]
      temp = USBx->GRXSTSP;
 8001cd6:	f8d5 8020 	ldr.w	r8, [r5, #32]
      ep = &hpcd->OUT_ep[temp & USB_OTG_GRXSTSP_EPNUM];
 8001cda:	f008 090f 	and.w	r9, r8, #15
      if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 8001cde:	f3c8 4343 	ubfx	r3, r8, #17, #4
 8001ce2:	2b02      	cmp	r3, #2
 8001ce4:	d068      	beq.n	8001db8 <HAL_PCD_IRQHandler+0x134>
      else if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_SETUP_UPDT)
 8001ce6:	2b06      	cmp	r3, #6
 8001ce8:	f000 808d 	beq.w	8001e06 <HAL_PCD_IRQHandler+0x182>
      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8001cec:	6822      	ldr	r2, [r4, #0]
 8001cee:	6993      	ldr	r3, [r2, #24]
 8001cf0:	f043 0310 	orr.w	r3, r3, #16
 8001cf4:	6193      	str	r3, [r2, #24]
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 8001cf6:	6820      	ldr	r0, [r4, #0]
 8001cf8:	f001 fc3d 	bl	8003576 <USB_ReadInterrupts>
 8001cfc:	f410 2f00 	tst.w	r0, #524288	; 0x80000
 8001d00:	f040 8093 	bne.w	8001e2a <HAL_PCD_IRQHandler+0x1a6>
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 8001d04:	6820      	ldr	r0, [r4, #0]
 8001d06:	f001 fc36 	bl	8003576 <USB_ReadInterrupts>
 8001d0a:	f410 2f80 	tst.w	r0, #262144	; 0x40000
 8001d0e:	f040 80d7 	bne.w	8001ec0 <HAL_PCD_IRQHandler+0x23c>
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 8001d12:	6820      	ldr	r0, [r4, #0]
 8001d14:	f001 fc2f 	bl	8003576 <USB_ReadInterrupts>
 8001d18:	2800      	cmp	r0, #0
 8001d1a:	f2c0 8143 	blt.w	8001fa4 <HAL_PCD_IRQHandler+0x320>
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 8001d1e:	6820      	ldr	r0, [r4, #0]
 8001d20:	f001 fc29 	bl	8003576 <USB_ReadInterrupts>
 8001d24:	f410 6f00 	tst.w	r0, #2048	; 0x800
 8001d28:	d00a      	beq.n	8001d40 <HAL_PCD_IRQHandler+0xbc>
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 8001d2a:	f8d5 3808 	ldr.w	r3, [r5, #2056]	; 0x808
 8001d2e:	f013 0f01 	tst.w	r3, #1
 8001d32:	f040 8151 	bne.w	8001fd8 <HAL_PCD_IRQHandler+0x354>
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 8001d36:	6822      	ldr	r2, [r4, #0]
 8001d38:	6953      	ldr	r3, [r2, #20]
 8001d3a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001d3e:	6153      	str	r3, [r2, #20]
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 8001d40:	6820      	ldr	r0, [r4, #0]
 8001d42:	f001 fc18 	bl	8003576 <USB_ReadInterrupts>
 8001d46:	f410 5f80 	tst.w	r0, #4096	; 0x1000
 8001d4a:	f040 8149 	bne.w	8001fe0 <HAL_PCD_IRQHandler+0x35c>
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 8001d4e:	6820      	ldr	r0, [r4, #0]
 8001d50:	f001 fc11 	bl	8003576 <USB_ReadInterrupts>
 8001d54:	f410 5f00 	tst.w	r0, #8192	; 0x2000
 8001d58:	f040 81a8 	bne.w	80020ac <HAL_PCD_IRQHandler+0x428>
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 8001d5c:	6820      	ldr	r0, [r4, #0]
 8001d5e:	f001 fc0a 	bl	8003576 <USB_ReadInterrupts>
 8001d62:	f010 0f08 	tst.w	r0, #8
 8001d66:	f040 81b9 	bne.w	80020dc <HAL_PCD_IRQHandler+0x458>
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 8001d6a:	6820      	ldr	r0, [r4, #0]
 8001d6c:	f001 fc03 	bl	8003576 <USB_ReadInterrupts>
 8001d70:	f410 1f80 	tst.w	r0, #1048576	; 0x100000
 8001d74:	f040 81bb 	bne.w	80020ee <HAL_PCD_IRQHandler+0x46a>
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8001d78:	6820      	ldr	r0, [r4, #0]
 8001d7a:	f001 fbfc 	bl	8003576 <USB_ReadInterrupts>
 8001d7e:	f410 1f00 	tst.w	r0, #2097152	; 0x200000
 8001d82:	f040 81be 	bne.w	8002102 <HAL_PCD_IRQHandler+0x47e>
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8001d86:	6820      	ldr	r0, [r4, #0]
 8001d88:	f001 fbf5 	bl	8003576 <USB_ReadInterrupts>
 8001d8c:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8001d90:	f040 81c1 	bne.w	8002116 <HAL_PCD_IRQHandler+0x492>
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8001d94:	6820      	ldr	r0, [r4, #0]
 8001d96:	f001 fbee 	bl	8003576 <USB_ReadInterrupts>
 8001d9a:	f010 0f04 	tst.w	r0, #4
 8001d9e:	f43f af7a 	beq.w	8001c96 <HAL_PCD_IRQHandler+0x12>
      temp = hpcd->Instance->GOTGINT;
 8001da2:	6823      	ldr	r3, [r4, #0]
 8001da4:	685d      	ldr	r5, [r3, #4]
      if ((temp & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8001da6:	f015 0f04 	tst.w	r5, #4
 8001daa:	f040 81bd 	bne.w	8002128 <HAL_PCD_IRQHandler+0x4a4>
      hpcd->Instance->GOTGINT |= temp;
 8001dae:	6822      	ldr	r2, [r4, #0]
 8001db0:	6853      	ldr	r3, [r2, #4]
 8001db2:	432b      	orrs	r3, r5
 8001db4:	6053      	str	r3, [r2, #4]
 8001db6:	e76e      	b.n	8001c96 <HAL_PCD_IRQHandler+0x12>
        if ((temp & USB_OTG_GRXSTSP_BCNT) != 0U)
 8001db8:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 8001dbc:	ea18 0f03 	tst.w	r8, r3
 8001dc0:	d094      	beq.n	8001cec <HAL_PCD_IRQHandler+0x68>
                               (uint16_t)((temp & USB_OTG_GRXSTSP_BCNT) >> 4));
 8001dc2:	ea4f 1b18 	mov.w	fp, r8, lsr #4
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8001dc6:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8001dca:	9301      	str	r3, [sp, #4]
 8001dcc:	ebc9 0ac9 	rsb	sl, r9, r9, lsl #3
 8001dd0:	eb04 0a8a 	add.w	sl, r4, sl, lsl #2
 8001dd4:	f3c8 120a 	ubfx	r2, r8, #4, #11
 8001dd8:	f8da 1208 	ldr.w	r1, [sl, #520]	; 0x208
 8001ddc:	4628      	mov	r0, r5
 8001dde:	f001 fb1d 	bl	800341c <USB_ReadPacket>
          ep->xfer_buff += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8001de2:	f3cb 0b0a 	ubfx	fp, fp, #0, #11
 8001de6:	f8da 3208 	ldr.w	r3, [sl, #520]	; 0x208
 8001dea:	445b      	add	r3, fp
 8001dec:	f8ca 3208 	str.w	r3, [sl, #520]	; 0x208
          ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8001df0:	9b01      	ldr	r3, [sp, #4]
 8001df2:	eba3 0309 	sub.w	r3, r3, r9
 8001df6:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8001dfa:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8001dfe:	445b      	add	r3, fp
 8001e00:	f8ca 3214 	str.w	r3, [sl, #532]	; 0x214
 8001e04:	e772      	b.n	8001cec <HAL_PCD_IRQHandler+0x68>
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 8001e06:	2208      	movs	r2, #8
 8001e08:	f504 7171 	add.w	r1, r4, #964	; 0x3c4
 8001e0c:	4628      	mov	r0, r5
 8001e0e:	f001 fb05 	bl	800341c <USB_ReadPacket>
        ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8001e12:	f3c8 180a 	ubfx	r8, r8, #4, #11
 8001e16:	ebc9 02c9 	rsb	r2, r9, r9, lsl #3
 8001e1a:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 8001e1e:	f8d2 3214 	ldr.w	r3, [r2, #532]	; 0x214
 8001e22:	4443      	add	r3, r8
 8001e24:	f8c2 3214 	str.w	r3, [r2, #532]	; 0x214
 8001e28:	e760      	b.n	8001cec <HAL_PCD_IRQHandler+0x68>
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 8001e2a:	6820      	ldr	r0, [r4, #0]
 8001e2c:	f001 fba7 	bl	800357e <USB_ReadDevAllOutEpInterrupt>
 8001e30:	4680      	mov	r8, r0
      epnum = 0U;
 8001e32:	46b1      	mov	r9, r6
      while (ep_intr != 0U)
 8001e34:	e017      	b.n	8001e66 <HAL_PCD_IRQHandler+0x1e2>
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 8001e36:	eb07 1349 	add.w	r3, r7, r9, lsl #5
 8001e3a:	2201      	movs	r2, #1
 8001e3c:	f8c3 2b08 	str.w	r2, [r3, #2824]	; 0xb08
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 8001e40:	4649      	mov	r1, r9
 8001e42:	4620      	mov	r0, r4
 8001e44:	f7ff fe7a 	bl	8001b3c <PCD_EP_OutXfrComplete_int>
 8001e48:	e01d      	b.n	8001e86 <HAL_PCD_IRQHandler+0x202>
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8001e4a:	eb07 1349 	add.w	r3, r7, r9, lsl #5
 8001e4e:	2208      	movs	r2, #8
 8001e50:	f8c3 2b08 	str.w	r2, [r3, #2824]	; 0xb08
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 8001e54:	4649      	mov	r1, r9
 8001e56:	4620      	mov	r0, r4
 8001e58:	f7ff feec 	bl	8001c34 <PCD_EP_OutSetupPacket_int>
 8001e5c:	e016      	b.n	8001e8c <HAL_PCD_IRQHandler+0x208>
        epnum++;
 8001e5e:	f109 0901 	add.w	r9, r9, #1
        ep_intr >>= 1U;
 8001e62:	ea4f 0858 	mov.w	r8, r8, lsr #1
      while (ep_intr != 0U)
 8001e66:	f1b8 0f00 	cmp.w	r8, #0
 8001e6a:	f43f af4b 	beq.w	8001d04 <HAL_PCD_IRQHandler+0x80>
        if ((ep_intr & 0x1U) != 0U)
 8001e6e:	f018 0f01 	tst.w	r8, #1
 8001e72:	d0f4      	beq.n	8001e5e <HAL_PCD_IRQHandler+0x1da>
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8001e74:	fa5f f189 	uxtb.w	r1, r9
 8001e78:	6820      	ldr	r0, [r4, #0]
 8001e7a:	f001 fb90 	bl	800359e <USB_ReadDevOutEPInterrupt>
 8001e7e:	4682      	mov	sl, r0
          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8001e80:	f010 0f01 	tst.w	r0, #1
 8001e84:	d1d7      	bne.n	8001e36 <HAL_PCD_IRQHandler+0x1b2>
          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 8001e86:	f01a 0f08 	tst.w	sl, #8
 8001e8a:	d1de      	bne.n	8001e4a <HAL_PCD_IRQHandler+0x1c6>
          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 8001e8c:	f01a 0f10 	tst.w	sl, #16
 8001e90:	d004      	beq.n	8001e9c <HAL_PCD_IRQHandler+0x218>
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 8001e92:	eb07 1349 	add.w	r3, r7, r9, lsl #5
 8001e96:	2210      	movs	r2, #16
 8001e98:	f8c3 2b08 	str.w	r2, [r3, #2824]	; 0xb08
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8001e9c:	f01a 0f20 	tst.w	sl, #32
 8001ea0:	d004      	beq.n	8001eac <HAL_PCD_IRQHandler+0x228>
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8001ea2:	eb07 1349 	add.w	r3, r7, r9, lsl #5
 8001ea6:	2220      	movs	r2, #32
 8001ea8:	f8c3 2b08 	str.w	r2, [r3, #2824]	; 0xb08
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 8001eac:	f41a 5f00 	tst.w	sl, #8192	; 0x2000
 8001eb0:	d0d5      	beq.n	8001e5e <HAL_PCD_IRQHandler+0x1da>
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 8001eb2:	eb07 1349 	add.w	r3, r7, r9, lsl #5
 8001eb6:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001eba:	f8c3 2b08 	str.w	r2, [r3, #2824]	; 0xb08
 8001ebe:	e7ce      	b.n	8001e5e <HAL_PCD_IRQHandler+0x1da>
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 8001ec0:	6820      	ldr	r0, [r4, #0]
 8001ec2:	f001 fb64 	bl	800358e <USB_ReadDevAllInEpInterrupt>
 8001ec6:	4680      	mov	r8, r0
      epnum = 0U;
 8001ec8:	46b1      	mov	r9, r6
      while (ep_intr != 0U)
 8001eca:	e02a      	b.n	8001f22 <HAL_PCD_IRQHandler+0x29e>
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 8001ecc:	4659      	mov	r1, fp
 8001ece:	4620      	mov	r0, r4
 8001ed0:	f003 ff22 	bl	8005d18 <HAL_PCD_DataInStageCallback>
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 8001ed4:	f01a 0f08 	tst.w	sl, #8
 8001ed8:	d004      	beq.n	8001ee4 <HAL_PCD_IRQHandler+0x260>
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 8001eda:	eb07 1349 	add.w	r3, r7, r9, lsl #5
 8001ede:	2208      	movs	r2, #8
 8001ee0:	f8c3 2908 	str.w	r2, [r3, #2312]	; 0x908
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 8001ee4:	f01a 0f10 	tst.w	sl, #16
 8001ee8:	d004      	beq.n	8001ef4 <HAL_PCD_IRQHandler+0x270>
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 8001eea:	eb07 1349 	add.w	r3, r7, r9, lsl #5
 8001eee:	2210      	movs	r2, #16
 8001ef0:	f8c3 2908 	str.w	r2, [r3, #2312]	; 0x908
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 8001ef4:	f01a 0f40 	tst.w	sl, #64	; 0x40
 8001ef8:	d004      	beq.n	8001f04 <HAL_PCD_IRQHandler+0x280>
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 8001efa:	eb07 1349 	add.w	r3, r7, r9, lsl #5
 8001efe:	2240      	movs	r2, #64	; 0x40
 8001f00:	f8c3 2908 	str.w	r2, [r3, #2312]	; 0x908
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 8001f04:	f01a 0f02 	tst.w	sl, #2
 8001f08:	d004      	beq.n	8001f14 <HAL_PCD_IRQHandler+0x290>
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 8001f0a:	eb07 1349 	add.w	r3, r7, r9, lsl #5
 8001f0e:	2202      	movs	r2, #2
 8001f10:	f8c3 2908 	str.w	r2, [r3, #2312]	; 0x908
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 8001f14:	f01a 0f80 	tst.w	sl, #128	; 0x80
 8001f18:	d13f      	bne.n	8001f9a <HAL_PCD_IRQHandler+0x316>
        epnum++;
 8001f1a:	f109 0901 	add.w	r9, r9, #1
        ep_intr >>= 1U;
 8001f1e:	ea4f 0858 	mov.w	r8, r8, lsr #1
      while (ep_intr != 0U)
 8001f22:	f1b8 0f00 	cmp.w	r8, #0
 8001f26:	f43f aef4 	beq.w	8001d12 <HAL_PCD_IRQHandler+0x8e>
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 8001f2a:	f018 0f01 	tst.w	r8, #1
 8001f2e:	d0f4      	beq.n	8001f1a <HAL_PCD_IRQHandler+0x296>
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8001f30:	fa5f fb89 	uxtb.w	fp, r9
 8001f34:	4659      	mov	r1, fp
 8001f36:	6820      	ldr	r0, [r4, #0]
 8001f38:	f001 fb3a 	bl	80035b0 <USB_ReadDevInEPInterrupt>
 8001f3c:	4682      	mov	sl, r0
          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 8001f3e:	f010 0f01 	tst.w	r0, #1
 8001f42:	d0c7      	beq.n	8001ed4 <HAL_PCD_IRQHandler+0x250>
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8001f44:	f009 030f 	and.w	r3, r9, #15
 8001f48:	2101      	movs	r1, #1
 8001f4a:	fa01 f203 	lsl.w	r2, r1, r3
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8001f4e:	f8d7 3834 	ldr.w	r3, [r7, #2100]	; 0x834
 8001f52:	ea23 0302 	bic.w	r3, r3, r2
 8001f56:	f8c7 3834 	str.w	r3, [r7, #2100]	; 0x834
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 8001f5a:	eb07 1349 	add.w	r3, r7, r9, lsl #5
 8001f5e:	f8c3 1908 	str.w	r1, [r3, #2312]	; 0x908
            if (hpcd->Init.dma_enable == 1U)
 8001f62:	6923      	ldr	r3, [r4, #16]
 8001f64:	428b      	cmp	r3, r1
 8001f66:	d1b1      	bne.n	8001ecc <HAL_PCD_IRQHandler+0x248>
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 8001f68:	ebc9 03c9 	rsb	r3, r9, r9, lsl #3
 8001f6c:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8001f70:	6c59      	ldr	r1, [r3, #68]	; 0x44
 8001f72:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8001f74:	440a      	add	r2, r1
 8001f76:	649a      	str	r2, [r3, #72]	; 0x48
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 8001f78:	f1b9 0f00 	cmp.w	r9, #0
 8001f7c:	d1a6      	bne.n	8001ecc <HAL_PCD_IRQHandler+0x248>
 8001f7e:	ebc9 03c9 	rsb	r3, r9, r9, lsl #3
 8001f82:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8001f86:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001f88:	2b00      	cmp	r3, #0
 8001f8a:	d19f      	bne.n	8001ecc <HAL_PCD_IRQHandler+0x248>
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8001f8c:	f504 7271 	add.w	r2, r4, #964	; 0x3c4
 8001f90:	2101      	movs	r1, #1
 8001f92:	6820      	ldr	r0, [r4, #0]
 8001f94:	f001 fb66 	bl	8003664 <USB_EP0_OutStart>
 8001f98:	e798      	b.n	8001ecc <HAL_PCD_IRQHandler+0x248>
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 8001f9a:	4649      	mov	r1, r9
 8001f9c:	4620      	mov	r0, r4
 8001f9e:	f7ff fcb0 	bl	8001902 <PCD_WriteEmptyTxFifo>
 8001fa2:	e7ba      	b.n	8001f1a <HAL_PCD_IRQHandler+0x296>
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8001fa4:	f8d5 3804 	ldr.w	r3, [r5, #2052]	; 0x804
 8001fa8:	f023 0301 	bic.w	r3, r3, #1
 8001fac:	f8c5 3804 	str.w	r3, [r5, #2052]	; 0x804
      if (hpcd->LPM_State == LPM_L1)
 8001fb0:	f894 33f4 	ldrb.w	r3, [r4, #1012]	; 0x3f4
 8001fb4:	2b01      	cmp	r3, #1
 8001fb6:	d008      	beq.n	8001fca <HAL_PCD_IRQHandler+0x346>
        HAL_PCD_ResumeCallback(hpcd);
 8001fb8:	4620      	mov	r0, r4
 8001fba:	f003 feed 	bl	8005d98 <HAL_PCD_ResumeCallback>
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 8001fbe:	6822      	ldr	r2, [r4, #0]
 8001fc0:	6953      	ldr	r3, [r2, #20]
 8001fc2:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8001fc6:	6153      	str	r3, [r2, #20]
 8001fc8:	e6a9      	b.n	8001d1e <HAL_PCD_IRQHandler+0x9a>
        hpcd->LPM_State = LPM_L0;
 8001fca:	2100      	movs	r1, #0
 8001fcc:	f884 13f4 	strb.w	r1, [r4, #1012]	; 0x3f4
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8001fd0:	4620      	mov	r0, r4
 8001fd2:	f000 fa47 	bl	8002464 <HAL_PCDEx_LPM_Callback>
 8001fd6:	e7f2      	b.n	8001fbe <HAL_PCD_IRQHandler+0x33a>
        HAL_PCD_SuspendCallback(hpcd);
 8001fd8:	4620      	mov	r0, r4
 8001fda:	f003 fec5 	bl	8005d68 <HAL_PCD_SuspendCallback>
 8001fde:	e6aa      	b.n	8001d36 <HAL_PCD_IRQHandler+0xb2>
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8001fe0:	f505 6800 	add.w	r8, r5, #2048	; 0x800
 8001fe4:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8001fe8:	f023 0301 	bic.w	r3, r3, #1
 8001fec:	f8c8 3004 	str.w	r3, [r8, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8001ff0:	2110      	movs	r1, #16
 8001ff2:	6820      	ldr	r0, [r4, #0]
 8001ff4:	f000 fe98 	bl	8002d28 <USB_FlushTxFifo>
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001ff8:	e020      	b.n	800203c <HAL_PCD_IRQHandler+0x3b8>
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 8001ffa:	eb07 1346 	add.w	r3, r7, r6, lsl #5
 8001ffe:	f64f 317f 	movw	r1, #64383	; 0xfb7f
 8002002:	f8c3 1908 	str.w	r1, [r3, #2312]	; 0x908
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8002006:	f8d3 2900 	ldr.w	r2, [r3, #2304]	; 0x900
 800200a:	f422 1200 	bic.w	r2, r2, #2097152	; 0x200000
 800200e:	f8c3 2900 	str.w	r2, [r3, #2304]	; 0x900
        USBx_INEP(i)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8002012:	f8d3 2900 	ldr.w	r2, [r3, #2304]	; 0x900
 8002016:	f042 6200 	orr.w	r2, r2, #134217728	; 0x8000000
 800201a:	f8c3 2900 	str.w	r2, [r3, #2304]	; 0x900
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 800201e:	f8c3 1b08 	str.w	r1, [r3, #2824]	; 0xb08
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8002022:	f8d3 2b00 	ldr.w	r2, [r3, #2816]	; 0xb00
 8002026:	f422 1200 	bic.w	r2, r2, #2097152	; 0x200000
 800202a:	f8c3 2b00 	str.w	r2, [r3, #2816]	; 0xb00
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 800202e:	f8d3 2b00 	ldr.w	r2, [r3, #2816]	; 0xb00
 8002032:	f042 6200 	orr.w	r2, r2, #134217728	; 0x8000000
 8002036:	f8c3 2b00 	str.w	r2, [r3, #2816]	; 0xb00
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800203a:	3601      	adds	r6, #1
 800203c:	6863      	ldr	r3, [r4, #4]
 800203e:	42b3      	cmp	r3, r6
 8002040:	d8db      	bhi.n	8001ffa <HAL_PCD_IRQHandler+0x376>
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 8002042:	f8d8 301c 	ldr.w	r3, [r8, #28]
 8002046:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 800204a:	f8c8 301c 	str.w	r3, [r8, #28]
      if (hpcd->Init.use_dedicated_ep1 != 0U)
 800204e:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8002050:	b1eb      	cbz	r3, 800208e <HAL_PCD_IRQHandler+0x40a>
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 8002052:	f8d8 3084 	ldr.w	r3, [r8, #132]	; 0x84
 8002056:	f043 030b 	orr.w	r3, r3, #11
 800205a:	f8c8 3084 	str.w	r3, [r8, #132]	; 0x84
        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 800205e:	f8d8 3044 	ldr.w	r3, [r8, #68]	; 0x44
 8002062:	f043 030b 	orr.w	r3, r3, #11
 8002066:	f8c8 3044 	str.w	r3, [r8, #68]	; 0x44
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 800206a:	f8d5 3800 	ldr.w	r3, [r5, #2048]	; 0x800
 800206e:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8002072:	f8c5 3800 	str.w	r3, [r5, #2048]	; 0x800
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8002076:	f504 7271 	add.w	r2, r4, #964	; 0x3c4
 800207a:	7c21      	ldrb	r1, [r4, #16]
 800207c:	6820      	ldr	r0, [r4, #0]
 800207e:	f001 faf1 	bl	8003664 <USB_EP0_OutStart>
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 8002082:	6822      	ldr	r2, [r4, #0]
 8002084:	6953      	ldr	r3, [r2, #20]
 8002086:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800208a:	6153      	str	r3, [r2, #20]
 800208c:	e65f      	b.n	8001d4e <HAL_PCD_IRQHandler+0xca>
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 800208e:	f8d8 3014 	ldr.w	r3, [r8, #20]
 8002092:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8002096:	f043 032b 	orr.w	r3, r3, #43	; 0x2b
 800209a:	f8c8 3014 	str.w	r3, [r8, #20]
        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 800209e:	f8d8 3010 	ldr.w	r3, [r8, #16]
 80020a2:	f043 030b 	orr.w	r3, r3, #11
 80020a6:	f8c8 3010 	str.w	r3, [r8, #16]
 80020aa:	e7de      	b.n	800206a <HAL_PCD_IRQHandler+0x3e6>
      (void)USB_ActivateSetup(hpcd->Instance);
 80020ac:	6820      	ldr	r0, [r4, #0]
 80020ae:	f001 fac8 	bl	8003642 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 80020b2:	6820      	ldr	r0, [r4, #0]
 80020b4:	f000 ff3a 	bl	8002f2c <USB_GetDevSpeed>
 80020b8:	60e0      	str	r0, [r4, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 80020ba:	6825      	ldr	r5, [r4, #0]
 80020bc:	f000 fd34 	bl	8002b28 <HAL_RCC_GetHCLKFreq>
 80020c0:	4601      	mov	r1, r0
 80020c2:	7b22      	ldrb	r2, [r4, #12]
 80020c4:	4628      	mov	r0, r5
 80020c6:	f000 fdb1 	bl	8002c2c <USB_SetTurnaroundTime>
      HAL_PCD_ResetCallback(hpcd);
 80020ca:	4620      	mov	r0, r4
 80020cc:	f003 fe35 	bl	8005d3a <HAL_PCD_ResetCallback>
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 80020d0:	6822      	ldr	r2, [r4, #0]
 80020d2:	6953      	ldr	r3, [r2, #20]
 80020d4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80020d8:	6153      	str	r3, [r2, #20]
 80020da:	e63f      	b.n	8001d5c <HAL_PCD_IRQHandler+0xd8>
      HAL_PCD_SOFCallback(hpcd);
 80020dc:	4620      	mov	r0, r4
 80020de:	f003 fe26 	bl	8005d2e <HAL_PCD_SOFCallback>
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 80020e2:	6822      	ldr	r2, [r4, #0]
 80020e4:	6953      	ldr	r3, [r2, #20]
 80020e6:	f003 0308 	and.w	r3, r3, #8
 80020ea:	6153      	str	r3, [r2, #20]
 80020ec:	e63d      	b.n	8001d6a <HAL_PCD_IRQHandler+0xe6>
      HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 80020ee:	2100      	movs	r1, #0
 80020f0:	4620      	mov	r0, r4
 80020f2:	f003 fe5d 	bl	8005db0 <HAL_PCD_ISOINIncompleteCallback>
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 80020f6:	6822      	ldr	r2, [r4, #0]
 80020f8:	6953      	ldr	r3, [r2, #20]
 80020fa:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80020fe:	6153      	str	r3, [r2, #20]
 8002100:	e63a      	b.n	8001d78 <HAL_PCD_IRQHandler+0xf4>
      HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 8002102:	2100      	movs	r1, #0
 8002104:	4620      	mov	r0, r4
 8002106:	f003 fe4d 	bl	8005da4 <HAL_PCD_ISOOUTIncompleteCallback>
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 800210a:	6822      	ldr	r2, [r4, #0]
 800210c:	6953      	ldr	r3, [r2, #20]
 800210e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002112:	6153      	str	r3, [r2, #20]
 8002114:	e637      	b.n	8001d86 <HAL_PCD_IRQHandler+0x102>
      HAL_PCD_ConnectCallback(hpcd);
 8002116:	4620      	mov	r0, r4
 8002118:	f003 fe50 	bl	8005dbc <HAL_PCD_ConnectCallback>
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 800211c:	6822      	ldr	r2, [r4, #0]
 800211e:	6953      	ldr	r3, [r2, #20]
 8002120:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8002124:	6153      	str	r3, [r2, #20]
 8002126:	e635      	b.n	8001d94 <HAL_PCD_IRQHandler+0x110>
        HAL_PCD_DisconnectCallback(hpcd);
 8002128:	4620      	mov	r0, r4
 800212a:	f003 fe4d 	bl	8005dc8 <HAL_PCD_DisconnectCallback>
 800212e:	e63e      	b.n	8001dae <HAL_PCD_IRQHandler+0x12a>

08002130 <HAL_PCD_SetAddress>:
  __HAL_LOCK(hpcd);
 8002130:	f890 33bc 	ldrb.w	r3, [r0, #956]	; 0x3bc
 8002134:	2b01      	cmp	r3, #1
 8002136:	d00d      	beq.n	8002154 <HAL_PCD_SetAddress+0x24>
{
 8002138:	b510      	push	{r4, lr}
 800213a:	4604      	mov	r4, r0
  __HAL_LOCK(hpcd);
 800213c:	2301      	movs	r3, #1
 800213e:	f880 33bc 	strb.w	r3, [r0, #956]	; 0x3bc
  hpcd->USB_Address = address;
 8002142:	f880 1038 	strb.w	r1, [r0, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8002146:	6800      	ldr	r0, [r0, #0]
 8002148:	f001 f9e9 	bl	800351e <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 800214c:	2000      	movs	r0, #0
 800214e:	f884 03bc 	strb.w	r0, [r4, #956]	; 0x3bc
}
 8002152:	bd10      	pop	{r4, pc}
  __HAL_LOCK(hpcd);
 8002154:	2002      	movs	r0, #2
}
 8002156:	4770      	bx	lr

08002158 <HAL_PCD_EP_Open>:
{
 8002158:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800215a:	4607      	mov	r7, r0
 800215c:	460c      	mov	r4, r1
  if ((ep_addr & 0x80U) == 0x80U)
 800215e:	f011 0f80 	tst.w	r1, #128	; 0x80
 8002162:	d127      	bne.n	80021b4 <HAL_PCD_EP_Open+0x5c>
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002164:	f001 050f 	and.w	r5, r1, #15
 8002168:	ebc5 06c5 	rsb	r6, r5, r5, lsl #3
 800216c:	00b6      	lsls	r6, r6, #2
 800216e:	f506 76fc 	add.w	r6, r6, #504	; 0x1f8
 8002172:	4406      	add	r6, r0
 8002174:	1d31      	adds	r1, r6, #4
    ep->is_in = 0U;
 8002176:	ebc5 05c5 	rsb	r5, r5, r5, lsl #3
 800217a:	eb00 0585 	add.w	r5, r0, r5, lsl #2
 800217e:	2000      	movs	r0, #0
 8002180:	f885 01fd 	strb.w	r0, [r5, #509]	; 0x1fd
  ep->num = ep_addr & EP_ADDR_MSK;
 8002184:	f004 040f 	and.w	r4, r4, #15
 8002188:	700c      	strb	r4, [r1, #0]
  ep->maxpacket = ep_mps;
 800218a:	608a      	str	r2, [r1, #8]
  ep->type = ep_type;
 800218c:	70cb      	strb	r3, [r1, #3]
  if (ep->is_in != 0U)
 800218e:	784a      	ldrb	r2, [r1, #1]
 8002190:	b102      	cbz	r2, 8002194 <HAL_PCD_EP_Open+0x3c>
    ep->tx_fifo_num = ep->num;
 8002192:	80cc      	strh	r4, [r1, #6]
  if (ep_type == EP_TYPE_BULK)
 8002194:	2b02      	cmp	r3, #2
 8002196:	d01d      	beq.n	80021d4 <HAL_PCD_EP_Open+0x7c>
  __HAL_LOCK(hpcd);
 8002198:	f897 33bc 	ldrb.w	r3, [r7, #956]	; 0x3bc
 800219c:	2b01      	cmp	r3, #1
 800219e:	d01c      	beq.n	80021da <HAL_PCD_EP_Open+0x82>
 80021a0:	2301      	movs	r3, #1
 80021a2:	f887 33bc 	strb.w	r3, [r7, #956]	; 0x3bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 80021a6:	6838      	ldr	r0, [r7, #0]
 80021a8:	f000 fed1 	bl	8002f4e <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80021ac:	2000      	movs	r0, #0
 80021ae:	f887 03bc 	strb.w	r0, [r7, #956]	; 0x3bc
}
 80021b2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80021b4:	f001 000f 	and.w	r0, r1, #15
 80021b8:	ebc0 01c0 	rsb	r1, r0, r0, lsl #3
 80021bc:	0089      	lsls	r1, r1, #2
 80021be:	3138      	adds	r1, #56	; 0x38
 80021c0:	4439      	add	r1, r7
 80021c2:	3104      	adds	r1, #4
    ep->is_in = 1U;
 80021c4:	ebc0 00c0 	rsb	r0, r0, r0, lsl #3
 80021c8:	eb07 0080 	add.w	r0, r7, r0, lsl #2
 80021cc:	2501      	movs	r5, #1
 80021ce:	f880 503d 	strb.w	r5, [r0, #61]	; 0x3d
 80021d2:	e7d7      	b.n	8002184 <HAL_PCD_EP_Open+0x2c>
    ep->data_pid_start = 0U;
 80021d4:	2300      	movs	r3, #0
 80021d6:	710b      	strb	r3, [r1, #4]
 80021d8:	e7de      	b.n	8002198 <HAL_PCD_EP_Open+0x40>
  __HAL_LOCK(hpcd);
 80021da:	2002      	movs	r0, #2
 80021dc:	e7e9      	b.n	80021b2 <HAL_PCD_EP_Open+0x5a>

080021de <HAL_PCD_EP_Close>:
{
 80021de:	b510      	push	{r4, lr}
 80021e0:	4604      	mov	r4, r0
 80021e2:	460a      	mov	r2, r1
  if ((ep_addr & 0x80U) == 0x80U)
 80021e4:	f011 0f80 	tst.w	r1, #128	; 0x80
 80021e8:	d120      	bne.n	800222c <HAL_PCD_EP_Close+0x4e>
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80021ea:	f001 000f 	and.w	r0, r1, #15
 80021ee:	ebc0 03c0 	rsb	r3, r0, r0, lsl #3
 80021f2:	009b      	lsls	r3, r3, #2
 80021f4:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 80021f8:	4423      	add	r3, r4
 80021fa:	1d19      	adds	r1, r3, #4
    ep->is_in = 0U;
 80021fc:	ebc0 00c0 	rsb	r0, r0, r0, lsl #3
 8002200:	eb04 0080 	add.w	r0, r4, r0, lsl #2
 8002204:	2300      	movs	r3, #0
 8002206:	f880 31fd 	strb.w	r3, [r0, #509]	; 0x1fd
  ep->num   = ep_addr & EP_ADDR_MSK;
 800220a:	f002 020f 	and.w	r2, r2, #15
 800220e:	700a      	strb	r2, [r1, #0]
  __HAL_LOCK(hpcd);
 8002210:	f894 33bc 	ldrb.w	r3, [r4, #956]	; 0x3bc
 8002214:	2b01      	cmp	r3, #1
 8002216:	d019      	beq.n	800224c <HAL_PCD_EP_Close+0x6e>
 8002218:	2301      	movs	r3, #1
 800221a:	f884 33bc 	strb.w	r3, [r4, #956]	; 0x3bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 800221e:	6820      	ldr	r0, [r4, #0]
 8002220:	f000 fee0 	bl	8002fe4 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8002224:	2000      	movs	r0, #0
 8002226:	f884 03bc 	strb.w	r0, [r4, #956]	; 0x3bc
}
 800222a:	bd10      	pop	{r4, pc}
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800222c:	f001 000f 	and.w	r0, r1, #15
 8002230:	ebc0 03c0 	rsb	r3, r0, r0, lsl #3
 8002234:	009b      	lsls	r3, r3, #2
 8002236:	3338      	adds	r3, #56	; 0x38
 8002238:	4423      	add	r3, r4
 800223a:	1d19      	adds	r1, r3, #4
    ep->is_in = 1U;
 800223c:	ebc0 00c0 	rsb	r0, r0, r0, lsl #3
 8002240:	eb04 0080 	add.w	r0, r4, r0, lsl #2
 8002244:	2301      	movs	r3, #1
 8002246:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
 800224a:	e7de      	b.n	800220a <HAL_PCD_EP_Close+0x2c>
  __HAL_LOCK(hpcd);
 800224c:	2002      	movs	r0, #2
 800224e:	e7ec      	b.n	800222a <HAL_PCD_EP_Close+0x4c>

08002250 <HAL_PCD_EP_Receive>:
{
 8002250:	b538      	push	{r3, r4, r5, lr}
  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002252:	f001 040f 	and.w	r4, r1, #15
 8002256:	ebc4 01c4 	rsb	r1, r4, r4, lsl #3
 800225a:	0089      	lsls	r1, r1, #2
 800225c:	f501 71fc 	add.w	r1, r1, #504	; 0x1f8
 8002260:	4401      	add	r1, r0
 8002262:	3104      	adds	r1, #4
  ep->xfer_buff = pBuf;
 8002264:	ebc4 05c4 	rsb	r5, r4, r4, lsl #3
 8002268:	eb00 0585 	add.w	r5, r0, r5, lsl #2
 800226c:	f8c5 2208 	str.w	r2, [r5, #520]	; 0x208
  ep->xfer_len = len;
 8002270:	f8c5 3210 	str.w	r3, [r5, #528]	; 0x210
  ep->xfer_count = 0U;
 8002274:	2300      	movs	r3, #0
 8002276:	f8c5 3214 	str.w	r3, [r5, #532]	; 0x214
  ep->is_in = 0U;
 800227a:	f885 31fd 	strb.w	r3, [r5, #509]	; 0x1fd
  ep->num = ep_addr & EP_ADDR_MSK;
 800227e:	f885 41fc 	strb.w	r4, [r5, #508]	; 0x1fc
  if (hpcd->Init.dma_enable == 1U)
 8002282:	6903      	ldr	r3, [r0, #16]
 8002284:	2b01      	cmp	r3, #1
 8002286:	d006      	beq.n	8002296 <HAL_PCD_EP_Receive+0x46>
  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8002288:	b964      	cbnz	r4, 80022a4 <HAL_PCD_EP_Receive+0x54>
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 800228a:	b2da      	uxtb	r2, r3
 800228c:	6800      	ldr	r0, [r0, #0]
 800228e:	f000 ff17 	bl	80030c0 <USB_EP0StartXfer>
}
 8002292:	2000      	movs	r0, #0
 8002294:	bd38      	pop	{r3, r4, r5, pc}
    ep->dma_addr = (uint32_t)pBuf;
 8002296:	ebc4 05c4 	rsb	r5, r4, r4, lsl #3
 800229a:	eb00 0585 	add.w	r5, r0, r5, lsl #2
 800229e:	f8c5 220c 	str.w	r2, [r5, #524]	; 0x20c
 80022a2:	e7f1      	b.n	8002288 <HAL_PCD_EP_Receive+0x38>
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 80022a4:	b2da      	uxtb	r2, r3
 80022a6:	6800      	ldr	r0, [r0, #0]
 80022a8:	f000 ffac 	bl	8003204 <USB_EPStartXfer>
 80022ac:	e7f1      	b.n	8002292 <HAL_PCD_EP_Receive+0x42>

080022ae <HAL_PCD_EP_GetRxCount>:
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 80022ae:	f001 010f 	and.w	r1, r1, #15
 80022b2:	ebc1 01c1 	rsb	r1, r1, r1, lsl #3
 80022b6:	eb00 0181 	add.w	r1, r0, r1, lsl #2
}
 80022ba:	f8d1 0214 	ldr.w	r0, [r1, #532]	; 0x214
 80022be:	4770      	bx	lr

080022c0 <HAL_PCD_EP_Transmit>:
{
 80022c0:	b538      	push	{r3, r4, r5, lr}
  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80022c2:	f001 040f 	and.w	r4, r1, #15
 80022c6:	ebc4 01c4 	rsb	r1, r4, r4, lsl #3
 80022ca:	0089      	lsls	r1, r1, #2
 80022cc:	3138      	adds	r1, #56	; 0x38
 80022ce:	4401      	add	r1, r0
 80022d0:	3104      	adds	r1, #4
  ep->xfer_buff = pBuf;
 80022d2:	ebc4 05c4 	rsb	r5, r4, r4, lsl #3
 80022d6:	eb00 0585 	add.w	r5, r0, r5, lsl #2
 80022da:	64aa      	str	r2, [r5, #72]	; 0x48
  ep->xfer_len = len;
 80022dc:	652b      	str	r3, [r5, #80]	; 0x50
  ep->xfer_count = 0U;
 80022de:	2300      	movs	r3, #0
 80022e0:	656b      	str	r3, [r5, #84]	; 0x54
  ep->is_in = 1U;
 80022e2:	2301      	movs	r3, #1
 80022e4:	f885 303d 	strb.w	r3, [r5, #61]	; 0x3d
  ep->num = ep_addr & EP_ADDR_MSK;
 80022e8:	f885 403c 	strb.w	r4, [r5, #60]	; 0x3c
  if (hpcd->Init.dma_enable == 1U)
 80022ec:	6903      	ldr	r3, [r0, #16]
 80022ee:	2b01      	cmp	r3, #1
 80022f0:	d006      	beq.n	8002300 <HAL_PCD_EP_Transmit+0x40>
  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80022f2:	b95c      	cbnz	r4, 800230c <HAL_PCD_EP_Transmit+0x4c>
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 80022f4:	b2da      	uxtb	r2, r3
 80022f6:	6800      	ldr	r0, [r0, #0]
 80022f8:	f000 fee2 	bl	80030c0 <USB_EP0StartXfer>
}
 80022fc:	2000      	movs	r0, #0
 80022fe:	bd38      	pop	{r3, r4, r5, pc}
    ep->dma_addr = (uint32_t)pBuf;
 8002300:	ebc4 05c4 	rsb	r5, r4, r4, lsl #3
 8002304:	eb00 0585 	add.w	r5, r0, r5, lsl #2
 8002308:	64ea      	str	r2, [r5, #76]	; 0x4c
 800230a:	e7f2      	b.n	80022f2 <HAL_PCD_EP_Transmit+0x32>
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 800230c:	b2da      	uxtb	r2, r3
 800230e:	6800      	ldr	r0, [r0, #0]
 8002310:	f000 ff78 	bl	8003204 <USB_EPStartXfer>
 8002314:	e7f2      	b.n	80022fc <HAL_PCD_EP_Transmit+0x3c>

08002316 <HAL_PCD_EP_SetStall>:
{
 8002316:	b538      	push	{r3, r4, r5, lr}
  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8002318:	f001 050f 	and.w	r5, r1, #15
 800231c:	6842      	ldr	r2, [r0, #4]
 800231e:	4295      	cmp	r5, r2
 8002320:	d839      	bhi.n	8002396 <HAL_PCD_EP_SetStall+0x80>
 8002322:	4604      	mov	r4, r0
 8002324:	460b      	mov	r3, r1
  if ((0x80U & ep_addr) == 0x80U)
 8002326:	f011 0f80 	tst.w	r1, #128	; 0x80
 800232a:	d11f      	bne.n	800236c <HAL_PCD_EP_SetStall+0x56>
    ep = &hpcd->OUT_ep[ep_addr];
 800232c:	ebc1 01c1 	rsb	r1, r1, r1, lsl #3
 8002330:	0089      	lsls	r1, r1, #2
 8002332:	f501 71fc 	add.w	r1, r1, #504	; 0x1f8
 8002336:	4401      	add	r1, r0
 8002338:	3104      	adds	r1, #4
    ep->is_in = 0U;
 800233a:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
 800233e:	eb00 0383 	add.w	r3, r0, r3, lsl #2
 8002342:	2200      	movs	r2, #0
 8002344:	f883 21fd 	strb.w	r2, [r3, #509]	; 0x1fd
  ep->is_stall = 1U;
 8002348:	2301      	movs	r3, #1
 800234a:	708b      	strb	r3, [r1, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 800234c:	700d      	strb	r5, [r1, #0]
  __HAL_LOCK(hpcd);
 800234e:	f894 33bc 	ldrb.w	r3, [r4, #956]	; 0x3bc
 8002352:	2b01      	cmp	r3, #1
 8002354:	d021      	beq.n	800239a <HAL_PCD_EP_SetStall+0x84>
 8002356:	2301      	movs	r3, #1
 8002358:	f884 33bc 	strb.w	r3, [r4, #956]	; 0x3bc
  (void)USB_EPSetStall(hpcd->Instance, ep);
 800235c:	6820      	ldr	r0, [r4, #0]
 800235e:	f001 f883 	bl	8003468 <USB_EPSetStall>
  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8002362:	b18d      	cbz	r5, 8002388 <HAL_PCD_EP_SetStall+0x72>
  __HAL_UNLOCK(hpcd);
 8002364:	2000      	movs	r0, #0
 8002366:	f884 03bc 	strb.w	r0, [r4, #956]	; 0x3bc
}
 800236a:	bd38      	pop	{r3, r4, r5, pc}
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800236c:	ebc5 01c5 	rsb	r1, r5, r5, lsl #3
 8002370:	0089      	lsls	r1, r1, #2
 8002372:	3138      	adds	r1, #56	; 0x38
 8002374:	4401      	add	r1, r0
 8002376:	3104      	adds	r1, #4
    ep->is_in = 1U;
 8002378:	ebc5 03c5 	rsb	r3, r5, r5, lsl #3
 800237c:	eb00 0383 	add.w	r3, r0, r3, lsl #2
 8002380:	2201      	movs	r2, #1
 8002382:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8002386:	e7df      	b.n	8002348 <HAL_PCD_EP_SetStall+0x32>
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 8002388:	f504 7271 	add.w	r2, r4, #964	; 0x3c4
 800238c:	7c21      	ldrb	r1, [r4, #16]
 800238e:	6820      	ldr	r0, [r4, #0]
 8002390:	f001 f968 	bl	8003664 <USB_EP0_OutStart>
 8002394:	e7e6      	b.n	8002364 <HAL_PCD_EP_SetStall+0x4e>
    return HAL_ERROR;
 8002396:	2001      	movs	r0, #1
 8002398:	e7e7      	b.n	800236a <HAL_PCD_EP_SetStall+0x54>
  __HAL_LOCK(hpcd);
 800239a:	2002      	movs	r0, #2
 800239c:	e7e5      	b.n	800236a <HAL_PCD_EP_SetStall+0x54>

0800239e <HAL_PCD_EP_ClrStall>:
  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 800239e:	f001 030f 	and.w	r3, r1, #15
 80023a2:	6842      	ldr	r2, [r0, #4]
 80023a4:	4293      	cmp	r3, r2
 80023a6:	d831      	bhi.n	800240c <HAL_PCD_EP_ClrStall+0x6e>
{
 80023a8:	b510      	push	{r4, lr}
 80023aa:	4604      	mov	r4, r0
  if ((0x80U & ep_addr) == 0x80U)
 80023ac:	f011 0f80 	tst.w	r1, #128	; 0x80
 80023b0:	d11e      	bne.n	80023f0 <HAL_PCD_EP_ClrStall+0x52>
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80023b2:	ebc3 01c3 	rsb	r1, r3, r3, lsl #3
 80023b6:	0089      	lsls	r1, r1, #2
 80023b8:	f501 71fc 	add.w	r1, r1, #504	; 0x1f8
 80023bc:	4401      	add	r1, r0
 80023be:	3104      	adds	r1, #4
    ep->is_in = 0U;
 80023c0:	ebc3 02c3 	rsb	r2, r3, r3, lsl #3
 80023c4:	eb00 0282 	add.w	r2, r0, r2, lsl #2
 80023c8:	2000      	movs	r0, #0
 80023ca:	f882 01fd 	strb.w	r0, [r2, #509]	; 0x1fd
  ep->is_stall = 0U;
 80023ce:	2200      	movs	r2, #0
 80023d0:	708a      	strb	r2, [r1, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80023d2:	700b      	strb	r3, [r1, #0]
  __HAL_LOCK(hpcd);
 80023d4:	f894 33bc 	ldrb.w	r3, [r4, #956]	; 0x3bc
 80023d8:	2b01      	cmp	r3, #1
 80023da:	d019      	beq.n	8002410 <HAL_PCD_EP_ClrStall+0x72>
 80023dc:	2301      	movs	r3, #1
 80023de:	f884 33bc 	strb.w	r3, [r4, #956]	; 0x3bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 80023e2:	6820      	ldr	r0, [r4, #0]
 80023e4:	f001 f86d 	bl	80034c2 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 80023e8:	2000      	movs	r0, #0
 80023ea:	f884 03bc 	strb.w	r0, [r4, #956]	; 0x3bc
}
 80023ee:	bd10      	pop	{r4, pc}
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80023f0:	ebc3 01c3 	rsb	r1, r3, r3, lsl #3
 80023f4:	0089      	lsls	r1, r1, #2
 80023f6:	3138      	adds	r1, #56	; 0x38
 80023f8:	4401      	add	r1, r0
 80023fa:	3104      	adds	r1, #4
    ep->is_in = 1U;
 80023fc:	ebc3 02c3 	rsb	r2, r3, r3, lsl #3
 8002400:	eb00 0282 	add.w	r2, r0, r2, lsl #2
 8002404:	2001      	movs	r0, #1
 8002406:	f882 003d 	strb.w	r0, [r2, #61]	; 0x3d
 800240a:	e7e0      	b.n	80023ce <HAL_PCD_EP_ClrStall+0x30>
    return HAL_ERROR;
 800240c:	2001      	movs	r0, #1
}
 800240e:	4770      	bx	lr
  __HAL_LOCK(hpcd);
 8002410:	2002      	movs	r0, #2
 8002412:	e7ec      	b.n	80023ee <HAL_PCD_EP_ClrStall+0x50>

08002414 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 8002414:	b430      	push	{r4, r5}
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 8002416:	6804      	ldr	r4, [r0, #0]
 8002418:	6a60      	ldr	r0, [r4, #36]	; 0x24

  if (fifo == 0U)
 800241a:	b919      	cbnz	r1, 8002424 <HAL_PCDEx_SetTxFiFo+0x10>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 800241c:	ea40 4002 	orr.w	r0, r0, r2, lsl #16
 8002420:	62a0      	str	r0, [r4, #40]	; 0x28
 8002422:	e018      	b.n	8002456 <HAL_PCDEx_SetTxFiFo+0x42>
 8002424:	460d      	mov	r5, r1
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 8002426:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8002428:	eb00 4013 	add.w	r0, r0, r3, lsr #16
    for (i = 0U; i < (fifo - 1U); i++)
 800242c:	2300      	movs	r3, #0
 800242e:	1e69      	subs	r1, r5, #1
 8002430:	428b      	cmp	r3, r1
 8002432:	d209      	bcs.n	8002448 <HAL_PCDEx_SetTxFiFo+0x34>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 8002434:	f103 0140 	add.w	r1, r3, #64	; 0x40
 8002438:	eb04 0181 	add.w	r1, r4, r1, lsl #2
 800243c:	6849      	ldr	r1, [r1, #4]
 800243e:	eb00 4011 	add.w	r0, r0, r1, lsr #16
    for (i = 0U; i < (fifo - 1U); i++)
 8002442:	3301      	adds	r3, #1
 8002444:	b2db      	uxtb	r3, r3
 8002446:	e7f2      	b.n	800242e <HAL_PCDEx_SetTxFiFo+0x1a>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 8002448:	ea40 4002 	orr.w	r0, r0, r2, lsl #16
 800244c:	f105 013f 	add.w	r1, r5, #63	; 0x3f
 8002450:	eb04 0181 	add.w	r1, r4, r1, lsl #2
 8002454:	6048      	str	r0, [r1, #4]
  }

  return HAL_OK;
}
 8002456:	2000      	movs	r0, #0
 8002458:	bc30      	pop	{r4, r5}
 800245a:	4770      	bx	lr

0800245c <HAL_PCDEx_SetRxFiFo>:
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
  hpcd->Instance->GRXFSIZ = size;
 800245c:	6803      	ldr	r3, [r0, #0]
 800245e:	6259      	str	r1, [r3, #36]	; 0x24

  return HAL_OK;
}
 8002460:	2000      	movs	r0, #0
 8002462:	4770      	bx	lr

08002464 <HAL_PCDEx_LPM_Callback>:
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 8002464:	4770      	bx	lr
	...

08002468 <HAL_RCC_OscConfig>:
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002468:	2800      	cmp	r0, #0
 800246a:	f000 81df 	beq.w	800282c <HAL_RCC_OscConfig+0x3c4>
{
 800246e:	b570      	push	{r4, r5, r6, lr}
 8002470:	b082      	sub	sp, #8
 8002472:	4604      	mov	r4, r0
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002474:	6803      	ldr	r3, [r0, #0]
 8002476:	f013 0f01 	tst.w	r3, #1
 800247a:	d03b      	beq.n	80024f4 <HAL_RCC_OscConfig+0x8c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800247c:	4ba6      	ldr	r3, [pc, #664]	; (8002718 <HAL_RCC_OscConfig+0x2b0>)
 800247e:	689b      	ldr	r3, [r3, #8]
 8002480:	f003 030c 	and.w	r3, r3, #12
 8002484:	2b04      	cmp	r3, #4
 8002486:	d02c      	beq.n	80024e2 <HAL_RCC_OscConfig+0x7a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002488:	4ba3      	ldr	r3, [pc, #652]	; (8002718 <HAL_RCC_OscConfig+0x2b0>)
 800248a:	689b      	ldr	r3, [r3, #8]
 800248c:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002490:	2b08      	cmp	r3, #8
 8002492:	d021      	beq.n	80024d8 <HAL_RCC_OscConfig+0x70>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002494:	6863      	ldr	r3, [r4, #4]
 8002496:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800249a:	d04f      	beq.n	800253c <HAL_RCC_OscConfig+0xd4>
 800249c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80024a0:	d052      	beq.n	8002548 <HAL_RCC_OscConfig+0xe0>
 80024a2:	4b9d      	ldr	r3, [pc, #628]	; (8002718 <HAL_RCC_OscConfig+0x2b0>)
 80024a4:	681a      	ldr	r2, [r3, #0]
 80024a6:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 80024aa:	601a      	str	r2, [r3, #0]
 80024ac:	681a      	ldr	r2, [r3, #0]
 80024ae:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80024b2:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80024b4:	6863      	ldr	r3, [r4, #4]
 80024b6:	2b00      	cmp	r3, #0
 80024b8:	d050      	beq.n	800255c <HAL_RCC_OscConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80024ba:	f7fe fd79 	bl	8000fb0 <HAL_GetTick>
 80024be:	4605      	mov	r5, r0

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80024c0:	4b95      	ldr	r3, [pc, #596]	; (8002718 <HAL_RCC_OscConfig+0x2b0>)
 80024c2:	681b      	ldr	r3, [r3, #0]
 80024c4:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 80024c8:	d114      	bne.n	80024f4 <HAL_RCC_OscConfig+0x8c>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80024ca:	f7fe fd71 	bl	8000fb0 <HAL_GetTick>
 80024ce:	1b40      	subs	r0, r0, r5
 80024d0:	2864      	cmp	r0, #100	; 0x64
 80024d2:	d9f5      	bls.n	80024c0 <HAL_RCC_OscConfig+0x58>
          {
            return HAL_TIMEOUT;
 80024d4:	2003      	movs	r0, #3
 80024d6:	e1b0      	b.n	800283a <HAL_RCC_OscConfig+0x3d2>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80024d8:	4b8f      	ldr	r3, [pc, #572]	; (8002718 <HAL_RCC_OscConfig+0x2b0>)
 80024da:	685b      	ldr	r3, [r3, #4]
 80024dc:	f413 0f80 	tst.w	r3, #4194304	; 0x400000
 80024e0:	d0d8      	beq.n	8002494 <HAL_RCC_OscConfig+0x2c>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80024e2:	4b8d      	ldr	r3, [pc, #564]	; (8002718 <HAL_RCC_OscConfig+0x2b0>)
 80024e4:	681b      	ldr	r3, [r3, #0]
 80024e6:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 80024ea:	d003      	beq.n	80024f4 <HAL_RCC_OscConfig+0x8c>
 80024ec:	6863      	ldr	r3, [r4, #4]
 80024ee:	2b00      	cmp	r3, #0
 80024f0:	f000 819e 	beq.w	8002830 <HAL_RCC_OscConfig+0x3c8>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80024f4:	6823      	ldr	r3, [r4, #0]
 80024f6:	f013 0f02 	tst.w	r3, #2
 80024fa:	d054      	beq.n	80025a6 <HAL_RCC_OscConfig+0x13e>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80024fc:	4b86      	ldr	r3, [pc, #536]	; (8002718 <HAL_RCC_OscConfig+0x2b0>)
 80024fe:	689b      	ldr	r3, [r3, #8]
 8002500:	f013 0f0c 	tst.w	r3, #12
 8002504:	d03e      	beq.n	8002584 <HAL_RCC_OscConfig+0x11c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002506:	4b84      	ldr	r3, [pc, #528]	; (8002718 <HAL_RCC_OscConfig+0x2b0>)
 8002508:	689b      	ldr	r3, [r3, #8]
 800250a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800250e:	2b08      	cmp	r3, #8
 8002510:	d033      	beq.n	800257a <HAL_RCC_OscConfig+0x112>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002512:	68e3      	ldr	r3, [r4, #12]
 8002514:	2b00      	cmp	r3, #0
 8002516:	d067      	beq.n	80025e8 <HAL_RCC_OscConfig+0x180>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002518:	4b80      	ldr	r3, [pc, #512]	; (800271c <HAL_RCC_OscConfig+0x2b4>)
 800251a:	2201      	movs	r2, #1
 800251c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800251e:	f7fe fd47 	bl	8000fb0 <HAL_GetTick>
 8002522:	4605      	mov	r5, r0

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002524:	4b7c      	ldr	r3, [pc, #496]	; (8002718 <HAL_RCC_OscConfig+0x2b0>)
 8002526:	681b      	ldr	r3, [r3, #0]
 8002528:	f013 0f02 	tst.w	r3, #2
 800252c:	d153      	bne.n	80025d6 <HAL_RCC_OscConfig+0x16e>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800252e:	f7fe fd3f 	bl	8000fb0 <HAL_GetTick>
 8002532:	1b40      	subs	r0, r0, r5
 8002534:	2802      	cmp	r0, #2
 8002536:	d9f5      	bls.n	8002524 <HAL_RCC_OscConfig+0xbc>
          {
            return HAL_TIMEOUT;
 8002538:	2003      	movs	r0, #3
 800253a:	e17e      	b.n	800283a <HAL_RCC_OscConfig+0x3d2>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800253c:	4a76      	ldr	r2, [pc, #472]	; (8002718 <HAL_RCC_OscConfig+0x2b0>)
 800253e:	6813      	ldr	r3, [r2, #0]
 8002540:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002544:	6013      	str	r3, [r2, #0]
 8002546:	e7b5      	b.n	80024b4 <HAL_RCC_OscConfig+0x4c>
 8002548:	4b73      	ldr	r3, [pc, #460]	; (8002718 <HAL_RCC_OscConfig+0x2b0>)
 800254a:	681a      	ldr	r2, [r3, #0]
 800254c:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 8002550:	601a      	str	r2, [r3, #0]
 8002552:	681a      	ldr	r2, [r3, #0]
 8002554:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8002558:	601a      	str	r2, [r3, #0]
 800255a:	e7ab      	b.n	80024b4 <HAL_RCC_OscConfig+0x4c>
        tickstart = HAL_GetTick();
 800255c:	f7fe fd28 	bl	8000fb0 <HAL_GetTick>
 8002560:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002562:	4b6d      	ldr	r3, [pc, #436]	; (8002718 <HAL_RCC_OscConfig+0x2b0>)
 8002564:	681b      	ldr	r3, [r3, #0]
 8002566:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 800256a:	d0c3      	beq.n	80024f4 <HAL_RCC_OscConfig+0x8c>
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800256c:	f7fe fd20 	bl	8000fb0 <HAL_GetTick>
 8002570:	1b40      	subs	r0, r0, r5
 8002572:	2864      	cmp	r0, #100	; 0x64
 8002574:	d9f5      	bls.n	8002562 <HAL_RCC_OscConfig+0xfa>
            return HAL_TIMEOUT;
 8002576:	2003      	movs	r0, #3
 8002578:	e15f      	b.n	800283a <HAL_RCC_OscConfig+0x3d2>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800257a:	4b67      	ldr	r3, [pc, #412]	; (8002718 <HAL_RCC_OscConfig+0x2b0>)
 800257c:	685b      	ldr	r3, [r3, #4]
 800257e:	f413 0f80 	tst.w	r3, #4194304	; 0x400000
 8002582:	d1c6      	bne.n	8002512 <HAL_RCC_OscConfig+0xaa>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002584:	4b64      	ldr	r3, [pc, #400]	; (8002718 <HAL_RCC_OscConfig+0x2b0>)
 8002586:	681b      	ldr	r3, [r3, #0]
 8002588:	f013 0f02 	tst.w	r3, #2
 800258c:	d003      	beq.n	8002596 <HAL_RCC_OscConfig+0x12e>
 800258e:	68e3      	ldr	r3, [r4, #12]
 8002590:	2b01      	cmp	r3, #1
 8002592:	f040 814f 	bne.w	8002834 <HAL_RCC_OscConfig+0x3cc>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002596:	4a60      	ldr	r2, [pc, #384]	; (8002718 <HAL_RCC_OscConfig+0x2b0>)
 8002598:	6813      	ldr	r3, [r2, #0]
 800259a:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 800259e:	6921      	ldr	r1, [r4, #16]
 80025a0:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 80025a4:	6013      	str	r3, [r2, #0]
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80025a6:	6823      	ldr	r3, [r4, #0]
 80025a8:	f013 0f08 	tst.w	r3, #8
 80025ac:	d040      	beq.n	8002630 <HAL_RCC_OscConfig+0x1c8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80025ae:	6963      	ldr	r3, [r4, #20]
 80025b0:	b363      	cbz	r3, 800260c <HAL_RCC_OscConfig+0x1a4>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80025b2:	4b5b      	ldr	r3, [pc, #364]	; (8002720 <HAL_RCC_OscConfig+0x2b8>)
 80025b4:	2201      	movs	r2, #1
 80025b6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80025b8:	f7fe fcfa 	bl	8000fb0 <HAL_GetTick>
 80025bc:	4605      	mov	r5, r0

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80025be:	4b56      	ldr	r3, [pc, #344]	; (8002718 <HAL_RCC_OscConfig+0x2b0>)
 80025c0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80025c2:	f013 0f02 	tst.w	r3, #2
 80025c6:	d133      	bne.n	8002630 <HAL_RCC_OscConfig+0x1c8>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80025c8:	f7fe fcf2 	bl	8000fb0 <HAL_GetTick>
 80025cc:	1b40      	subs	r0, r0, r5
 80025ce:	2802      	cmp	r0, #2
 80025d0:	d9f5      	bls.n	80025be <HAL_RCC_OscConfig+0x156>
        {
          return HAL_TIMEOUT;
 80025d2:	2003      	movs	r0, #3
 80025d4:	e131      	b.n	800283a <HAL_RCC_OscConfig+0x3d2>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80025d6:	4a50      	ldr	r2, [pc, #320]	; (8002718 <HAL_RCC_OscConfig+0x2b0>)
 80025d8:	6813      	ldr	r3, [r2, #0]
 80025da:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 80025de:	6921      	ldr	r1, [r4, #16]
 80025e0:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 80025e4:	6013      	str	r3, [r2, #0]
 80025e6:	e7de      	b.n	80025a6 <HAL_RCC_OscConfig+0x13e>
        __HAL_RCC_HSI_DISABLE();
 80025e8:	4b4c      	ldr	r3, [pc, #304]	; (800271c <HAL_RCC_OscConfig+0x2b4>)
 80025ea:	2200      	movs	r2, #0
 80025ec:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 80025ee:	f7fe fcdf 	bl	8000fb0 <HAL_GetTick>
 80025f2:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80025f4:	4b48      	ldr	r3, [pc, #288]	; (8002718 <HAL_RCC_OscConfig+0x2b0>)
 80025f6:	681b      	ldr	r3, [r3, #0]
 80025f8:	f013 0f02 	tst.w	r3, #2
 80025fc:	d0d3      	beq.n	80025a6 <HAL_RCC_OscConfig+0x13e>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80025fe:	f7fe fcd7 	bl	8000fb0 <HAL_GetTick>
 8002602:	1b40      	subs	r0, r0, r5
 8002604:	2802      	cmp	r0, #2
 8002606:	d9f5      	bls.n	80025f4 <HAL_RCC_OscConfig+0x18c>
            return HAL_TIMEOUT;
 8002608:	2003      	movs	r0, #3
 800260a:	e116      	b.n	800283a <HAL_RCC_OscConfig+0x3d2>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800260c:	4b44      	ldr	r3, [pc, #272]	; (8002720 <HAL_RCC_OscConfig+0x2b8>)
 800260e:	2200      	movs	r2, #0
 8002610:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002612:	f7fe fccd 	bl	8000fb0 <HAL_GetTick>
 8002616:	4605      	mov	r5, r0

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002618:	4b3f      	ldr	r3, [pc, #252]	; (8002718 <HAL_RCC_OscConfig+0x2b0>)
 800261a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800261c:	f013 0f02 	tst.w	r3, #2
 8002620:	d006      	beq.n	8002630 <HAL_RCC_OscConfig+0x1c8>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002622:	f7fe fcc5 	bl	8000fb0 <HAL_GetTick>
 8002626:	1b40      	subs	r0, r0, r5
 8002628:	2802      	cmp	r0, #2
 800262a:	d9f5      	bls.n	8002618 <HAL_RCC_OscConfig+0x1b0>
        {
          return HAL_TIMEOUT;
 800262c:	2003      	movs	r0, #3
 800262e:	e104      	b.n	800283a <HAL_RCC_OscConfig+0x3d2>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002630:	6823      	ldr	r3, [r4, #0]
 8002632:	f013 0f04 	tst.w	r3, #4
 8002636:	d078      	beq.n	800272a <HAL_RCC_OscConfig+0x2c2>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002638:	4b37      	ldr	r3, [pc, #220]	; (8002718 <HAL_RCC_OscConfig+0x2b0>)
 800263a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800263c:	f013 5f80 	tst.w	r3, #268435456	; 0x10000000
 8002640:	d10d      	bne.n	800265e <HAL_RCC_OscConfig+0x1f6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002642:	2300      	movs	r3, #0
 8002644:	9301      	str	r3, [sp, #4]
 8002646:	4b34      	ldr	r3, [pc, #208]	; (8002718 <HAL_RCC_OscConfig+0x2b0>)
 8002648:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800264a:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 800264e:	641a      	str	r2, [r3, #64]	; 0x40
 8002650:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002652:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002656:	9301      	str	r3, [sp, #4]
 8002658:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 800265a:	2501      	movs	r5, #1
 800265c:	e000      	b.n	8002660 <HAL_RCC_OscConfig+0x1f8>
    FlagStatus       pwrclkchanged = RESET;
 800265e:	2500      	movs	r5, #0
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002660:	4b30      	ldr	r3, [pc, #192]	; (8002724 <HAL_RCC_OscConfig+0x2bc>)
 8002662:	681b      	ldr	r3, [r3, #0]
 8002664:	f413 7f80 	tst.w	r3, #256	; 0x100
 8002668:	d021      	beq.n	80026ae <HAL_RCC_OscConfig+0x246>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800266a:	68a3      	ldr	r3, [r4, #8]
 800266c:	2b01      	cmp	r3, #1
 800266e:	d032      	beq.n	80026d6 <HAL_RCC_OscConfig+0x26e>
 8002670:	2b05      	cmp	r3, #5
 8002672:	d036      	beq.n	80026e2 <HAL_RCC_OscConfig+0x27a>
 8002674:	4b28      	ldr	r3, [pc, #160]	; (8002718 <HAL_RCC_OscConfig+0x2b0>)
 8002676:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8002678:	f022 0201 	bic.w	r2, r2, #1
 800267c:	671a      	str	r2, [r3, #112]	; 0x70
 800267e:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8002680:	f022 0204 	bic.w	r2, r2, #4
 8002684:	671a      	str	r2, [r3, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002686:	68a3      	ldr	r3, [r4, #8]
 8002688:	2b00      	cmp	r3, #0
 800268a:	d034      	beq.n	80026f6 <HAL_RCC_OscConfig+0x28e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800268c:	f7fe fc90 	bl	8000fb0 <HAL_GetTick>
 8002690:	4606      	mov	r6, r0

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002692:	4b21      	ldr	r3, [pc, #132]	; (8002718 <HAL_RCC_OscConfig+0x2b0>)
 8002694:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002696:	f013 0f02 	tst.w	r3, #2
 800269a:	d145      	bne.n	8002728 <HAL_RCC_OscConfig+0x2c0>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800269c:	f7fe fc88 	bl	8000fb0 <HAL_GetTick>
 80026a0:	1b80      	subs	r0, r0, r6
 80026a2:	f241 3388 	movw	r3, #5000	; 0x1388
 80026a6:	4298      	cmp	r0, r3
 80026a8:	d9f3      	bls.n	8002692 <HAL_RCC_OscConfig+0x22a>
        {
          return HAL_TIMEOUT;
 80026aa:	2003      	movs	r0, #3
 80026ac:	e0c5      	b.n	800283a <HAL_RCC_OscConfig+0x3d2>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80026ae:	4a1d      	ldr	r2, [pc, #116]	; (8002724 <HAL_RCC_OscConfig+0x2bc>)
 80026b0:	6813      	ldr	r3, [r2, #0]
 80026b2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80026b6:	6013      	str	r3, [r2, #0]
      tickstart = HAL_GetTick();
 80026b8:	f7fe fc7a 	bl	8000fb0 <HAL_GetTick>
 80026bc:	4606      	mov	r6, r0
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80026be:	4b19      	ldr	r3, [pc, #100]	; (8002724 <HAL_RCC_OscConfig+0x2bc>)
 80026c0:	681b      	ldr	r3, [r3, #0]
 80026c2:	f413 7f80 	tst.w	r3, #256	; 0x100
 80026c6:	d1d0      	bne.n	800266a <HAL_RCC_OscConfig+0x202>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80026c8:	f7fe fc72 	bl	8000fb0 <HAL_GetTick>
 80026cc:	1b80      	subs	r0, r0, r6
 80026ce:	2802      	cmp	r0, #2
 80026d0:	d9f5      	bls.n	80026be <HAL_RCC_OscConfig+0x256>
          return HAL_TIMEOUT;
 80026d2:	2003      	movs	r0, #3
 80026d4:	e0b1      	b.n	800283a <HAL_RCC_OscConfig+0x3d2>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80026d6:	4a10      	ldr	r2, [pc, #64]	; (8002718 <HAL_RCC_OscConfig+0x2b0>)
 80026d8:	6f13      	ldr	r3, [r2, #112]	; 0x70
 80026da:	f043 0301 	orr.w	r3, r3, #1
 80026de:	6713      	str	r3, [r2, #112]	; 0x70
 80026e0:	e7d1      	b.n	8002686 <HAL_RCC_OscConfig+0x21e>
 80026e2:	4b0d      	ldr	r3, [pc, #52]	; (8002718 <HAL_RCC_OscConfig+0x2b0>)
 80026e4:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80026e6:	f042 0204 	orr.w	r2, r2, #4
 80026ea:	671a      	str	r2, [r3, #112]	; 0x70
 80026ec:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80026ee:	f042 0201 	orr.w	r2, r2, #1
 80026f2:	671a      	str	r2, [r3, #112]	; 0x70
 80026f4:	e7c7      	b.n	8002686 <HAL_RCC_OscConfig+0x21e>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80026f6:	f7fe fc5b 	bl	8000fb0 <HAL_GetTick>
 80026fa:	4606      	mov	r6, r0

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80026fc:	4b06      	ldr	r3, [pc, #24]	; (8002718 <HAL_RCC_OscConfig+0x2b0>)
 80026fe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002700:	f013 0f02 	tst.w	r3, #2
 8002704:	d010      	beq.n	8002728 <HAL_RCC_OscConfig+0x2c0>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002706:	f7fe fc53 	bl	8000fb0 <HAL_GetTick>
 800270a:	1b80      	subs	r0, r0, r6
 800270c:	f241 3388 	movw	r3, #5000	; 0x1388
 8002710:	4298      	cmp	r0, r3
 8002712:	d9f3      	bls.n	80026fc <HAL_RCC_OscConfig+0x294>
        {
          return HAL_TIMEOUT;
 8002714:	2003      	movs	r0, #3
 8002716:	e090      	b.n	800283a <HAL_RCC_OscConfig+0x3d2>
 8002718:	40023800 	.word	0x40023800
 800271c:	42470000 	.word	0x42470000
 8002720:	42470e80 	.word	0x42470e80
 8002724:	40007000 	.word	0x40007000
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002728:	b9ed      	cbnz	r5, 8002766 <HAL_RCC_OscConfig+0x2fe>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800272a:	69a3      	ldr	r3, [r4, #24]
 800272c:	2b00      	cmp	r3, #0
 800272e:	f000 8083 	beq.w	8002838 <HAL_RCC_OscConfig+0x3d0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002732:	4a49      	ldr	r2, [pc, #292]	; (8002858 <HAL_RCC_OscConfig+0x3f0>)
 8002734:	6892      	ldr	r2, [r2, #8]
 8002736:	f002 020c 	and.w	r2, r2, #12
 800273a:	2a08      	cmp	r2, #8
 800273c:	d051      	beq.n	80027e2 <HAL_RCC_OscConfig+0x37a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800273e:	2b02      	cmp	r3, #2
 8002740:	d017      	beq.n	8002772 <HAL_RCC_OscConfig+0x30a>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002742:	4b46      	ldr	r3, [pc, #280]	; (800285c <HAL_RCC_OscConfig+0x3f4>)
 8002744:	2200      	movs	r2, #0
 8002746:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002748:	f7fe fc32 	bl	8000fb0 <HAL_GetTick>
 800274c:	4604      	mov	r4, r0

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800274e:	4b42      	ldr	r3, [pc, #264]	; (8002858 <HAL_RCC_OscConfig+0x3f0>)
 8002750:	681b      	ldr	r3, [r3, #0]
 8002752:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 8002756:	d042      	beq.n	80027de <HAL_RCC_OscConfig+0x376>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002758:	f7fe fc2a 	bl	8000fb0 <HAL_GetTick>
 800275c:	1b00      	subs	r0, r0, r4
 800275e:	2802      	cmp	r0, #2
 8002760:	d9f5      	bls.n	800274e <HAL_RCC_OscConfig+0x2e6>
          {
            return HAL_TIMEOUT;
 8002762:	2003      	movs	r0, #3
 8002764:	e069      	b.n	800283a <HAL_RCC_OscConfig+0x3d2>
      __HAL_RCC_PWR_CLK_DISABLE();
 8002766:	4a3c      	ldr	r2, [pc, #240]	; (8002858 <HAL_RCC_OscConfig+0x3f0>)
 8002768:	6c13      	ldr	r3, [r2, #64]	; 0x40
 800276a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800276e:	6413      	str	r3, [r2, #64]	; 0x40
 8002770:	e7db      	b.n	800272a <HAL_RCC_OscConfig+0x2c2>
        __HAL_RCC_PLL_DISABLE();
 8002772:	4b3a      	ldr	r3, [pc, #232]	; (800285c <HAL_RCC_OscConfig+0x3f4>)
 8002774:	2200      	movs	r2, #0
 8002776:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8002778:	f7fe fc1a 	bl	8000fb0 <HAL_GetTick>
 800277c:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800277e:	4b36      	ldr	r3, [pc, #216]	; (8002858 <HAL_RCC_OscConfig+0x3f0>)
 8002780:	681b      	ldr	r3, [r3, #0]
 8002782:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 8002786:	d006      	beq.n	8002796 <HAL_RCC_OscConfig+0x32e>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002788:	f7fe fc12 	bl	8000fb0 <HAL_GetTick>
 800278c:	1b40      	subs	r0, r0, r5
 800278e:	2802      	cmp	r0, #2
 8002790:	d9f5      	bls.n	800277e <HAL_RCC_OscConfig+0x316>
            return HAL_TIMEOUT;
 8002792:	2003      	movs	r0, #3
 8002794:	e051      	b.n	800283a <HAL_RCC_OscConfig+0x3d2>
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002796:	69e3      	ldr	r3, [r4, #28]
 8002798:	6a22      	ldr	r2, [r4, #32]
 800279a:	4313      	orrs	r3, r2
 800279c:	6a62      	ldr	r2, [r4, #36]	; 0x24
 800279e:	ea43 1382 	orr.w	r3, r3, r2, lsl #6
 80027a2:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 80027a4:	0852      	lsrs	r2, r2, #1
 80027a6:	3a01      	subs	r2, #1
 80027a8:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80027ac:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 80027ae:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 80027b2:	4a29      	ldr	r2, [pc, #164]	; (8002858 <HAL_RCC_OscConfig+0x3f0>)
 80027b4:	6053      	str	r3, [r2, #4]
        __HAL_RCC_PLL_ENABLE();
 80027b6:	4b29      	ldr	r3, [pc, #164]	; (800285c <HAL_RCC_OscConfig+0x3f4>)
 80027b8:	2201      	movs	r2, #1
 80027ba:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 80027bc:	f7fe fbf8 	bl	8000fb0 <HAL_GetTick>
 80027c0:	4604      	mov	r4, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80027c2:	4b25      	ldr	r3, [pc, #148]	; (8002858 <HAL_RCC_OscConfig+0x3f0>)
 80027c4:	681b      	ldr	r3, [r3, #0]
 80027c6:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 80027ca:	d106      	bne.n	80027da <HAL_RCC_OscConfig+0x372>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80027cc:	f7fe fbf0 	bl	8000fb0 <HAL_GetTick>
 80027d0:	1b00      	subs	r0, r0, r4
 80027d2:	2802      	cmp	r0, #2
 80027d4:	d9f5      	bls.n	80027c2 <HAL_RCC_OscConfig+0x35a>
            return HAL_TIMEOUT;
 80027d6:	2003      	movs	r0, #3
 80027d8:	e02f      	b.n	800283a <HAL_RCC_OscConfig+0x3d2>
          return HAL_ERROR;
        }
      }
    }
  }
  return HAL_OK;
 80027da:	2000      	movs	r0, #0
 80027dc:	e02d      	b.n	800283a <HAL_RCC_OscConfig+0x3d2>
 80027de:	2000      	movs	r0, #0
 80027e0:	e02b      	b.n	800283a <HAL_RCC_OscConfig+0x3d2>
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80027e2:	2b01      	cmp	r3, #1
 80027e4:	d02b      	beq.n	800283e <HAL_RCC_OscConfig+0x3d6>
        pll_config = RCC->PLLCFGR;
 80027e6:	4b1c      	ldr	r3, [pc, #112]	; (8002858 <HAL_RCC_OscConfig+0x3f0>)
 80027e8:	685b      	ldr	r3, [r3, #4]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80027ea:	f403 0180 	and.w	r1, r3, #4194304	; 0x400000
 80027ee:	69e2      	ldr	r2, [r4, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80027f0:	4291      	cmp	r1, r2
 80027f2:	d126      	bne.n	8002842 <HAL_RCC_OscConfig+0x3da>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80027f4:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80027f8:	6a21      	ldr	r1, [r4, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80027fa:	428a      	cmp	r2, r1
 80027fc:	d123      	bne.n	8002846 <HAL_RCC_OscConfig+0x3de>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80027fe:	6a61      	ldr	r1, [r4, #36]	; 0x24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002800:	f647 72c0 	movw	r2, #32704	; 0x7fc0
 8002804:	401a      	ands	r2, r3
 8002806:	ebb2 1f81 	cmp.w	r2, r1, lsl #6
 800280a:	d11e      	bne.n	800284a <HAL_RCC_OscConfig+0x3e2>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800280c:	f403 3140 	and.w	r1, r3, #196608	; 0x30000
 8002810:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 8002812:	0852      	lsrs	r2, r2, #1
 8002814:	3a01      	subs	r2, #1
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002816:	ebb1 4f02 	cmp.w	r1, r2, lsl #16
 800281a:	d118      	bne.n	800284e <HAL_RCC_OscConfig+0x3e6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 800281c:	f003 6370 	and.w	r3, r3, #251658240	; 0xf000000
 8002820:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002822:	ebb3 6f02 	cmp.w	r3, r2, lsl #24
 8002826:	d114      	bne.n	8002852 <HAL_RCC_OscConfig+0x3ea>
  return HAL_OK;
 8002828:	2000      	movs	r0, #0
 800282a:	e006      	b.n	800283a <HAL_RCC_OscConfig+0x3d2>
    return HAL_ERROR;
 800282c:	2001      	movs	r0, #1
}
 800282e:	4770      	bx	lr
        return HAL_ERROR;
 8002830:	2001      	movs	r0, #1
 8002832:	e002      	b.n	800283a <HAL_RCC_OscConfig+0x3d2>
        return HAL_ERROR;
 8002834:	2001      	movs	r0, #1
 8002836:	e000      	b.n	800283a <HAL_RCC_OscConfig+0x3d2>
  return HAL_OK;
 8002838:	2000      	movs	r0, #0
}
 800283a:	b002      	add	sp, #8
 800283c:	bd70      	pop	{r4, r5, r6, pc}
        return HAL_ERROR;
 800283e:	2001      	movs	r0, #1
 8002840:	e7fb      	b.n	800283a <HAL_RCC_OscConfig+0x3d2>
          return HAL_ERROR;
 8002842:	2001      	movs	r0, #1
 8002844:	e7f9      	b.n	800283a <HAL_RCC_OscConfig+0x3d2>
 8002846:	2001      	movs	r0, #1
 8002848:	e7f7      	b.n	800283a <HAL_RCC_OscConfig+0x3d2>
 800284a:	2001      	movs	r0, #1
 800284c:	e7f5      	b.n	800283a <HAL_RCC_OscConfig+0x3d2>
 800284e:	2001      	movs	r0, #1
 8002850:	e7f3      	b.n	800283a <HAL_RCC_OscConfig+0x3d2>
 8002852:	2001      	movs	r0, #1
 8002854:	e7f1      	b.n	800283a <HAL_RCC_OscConfig+0x3d2>
 8002856:	bf00      	nop
 8002858:	40023800 	.word	0x40023800
 800285c:	42470060 	.word	0x42470060

08002860 <HAL_RCC_MCOConfig>:
  * @note  For STM32F410Rx devices to output I2SCLK clock on MCO2 you should have
  *        at last one of the SPI clocks enabled (SPI1, SPI2 or SPI5).
  * @retval None
  */
void HAL_RCC_MCOConfig(uint32_t RCC_MCOx, uint32_t RCC_MCOSource, uint32_t RCC_MCODiv)
{
 8002860:	b570      	push	{r4, r5, r6, lr}
 8002862:	b088      	sub	sp, #32
 8002864:	460c      	mov	r4, r1
 8002866:	4615      	mov	r5, r2
  GPIO_InitTypeDef GPIO_InitStruct;
  /* Check the parameters */
  assert_param(IS_RCC_MCO(RCC_MCOx));
  assert_param(IS_RCC_MCODIV(RCC_MCODiv));
  /* RCC_MCO1 */
  if(RCC_MCOx == RCC_MCO1)
 8002868:	bb00      	cbnz	r0, 80028ac <HAL_RCC_MCOConfig+0x4c>
  {
    assert_param(IS_RCC_MCO1SOURCE(RCC_MCOSource));

    /* MCO1 Clock Enable */
    __MCO1_CLK_ENABLE();
 800286a:	2300      	movs	r3, #0
 800286c:	9301      	str	r3, [sp, #4]
 800286e:	4e20      	ldr	r6, [pc, #128]	; (80028f0 <HAL_RCC_MCOConfig+0x90>)
 8002870:	6b32      	ldr	r2, [r6, #48]	; 0x30
 8002872:	f042 0201 	orr.w	r2, r2, #1
 8002876:	6332      	str	r2, [r6, #48]	; 0x30
 8002878:	6b32      	ldr	r2, [r6, #48]	; 0x30
 800287a:	f002 0201 	and.w	r2, r2, #1
 800287e:	9201      	str	r2, [sp, #4]
 8002880:	9a01      	ldr	r2, [sp, #4]

    /* Configure the MCO1 pin in alternate function mode */
    GPIO_InitStruct.Pin = MCO1_PIN;
 8002882:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002886:	9203      	str	r2, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002888:	2202      	movs	r2, #2
 800288a:	9204      	str	r2, [sp, #16]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800288c:	2203      	movs	r2, #3
 800288e:	9206      	str	r2, [sp, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002890:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
 8002892:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(MCO1_GPIO_PORT, &GPIO_InitStruct);
 8002894:	a903      	add	r1, sp, #12
 8002896:	4817      	ldr	r0, [pc, #92]	; (80028f4 <HAL_RCC_MCOConfig+0x94>)
 8002898:	f7fe fc56 	bl	8001148 <HAL_GPIO_Init>

    /* Mask MCO1 and MCO1PRE[2:0] bits then Select MCO1 clock source and prescaler */
    MODIFY_REG(RCC->CFGR, (RCC_CFGR_MCO1 | RCC_CFGR_MCO1PRE), (RCC_MCOSource | RCC_MCODiv));
 800289c:	68b3      	ldr	r3, [r6, #8]
 800289e:	f023 63ec 	bic.w	r3, r3, #123731968	; 0x7600000
 80028a2:	432c      	orrs	r4, r5
 80028a4:	431c      	orrs	r4, r3
 80028a6:	60b4      	str	r4, [r6, #8]
#if defined(RCC_CFGR_MCO2EN)
    __HAL_RCC_MCO2_ENABLE();
#endif /* RCC_CFGR_MCO2EN */
  }
#endif /* RCC_CFGR_MCO2 */
}
 80028a8:	b008      	add	sp, #32
 80028aa:	bd70      	pop	{r4, r5, r6, pc}
    __MCO2_CLK_ENABLE();
 80028ac:	2300      	movs	r3, #0
 80028ae:	9302      	str	r3, [sp, #8]
 80028b0:	4e0f      	ldr	r6, [pc, #60]	; (80028f0 <HAL_RCC_MCOConfig+0x90>)
 80028b2:	6b32      	ldr	r2, [r6, #48]	; 0x30
 80028b4:	f042 0204 	orr.w	r2, r2, #4
 80028b8:	6332      	str	r2, [r6, #48]	; 0x30
 80028ba:	6b32      	ldr	r2, [r6, #48]	; 0x30
 80028bc:	f002 0204 	and.w	r2, r2, #4
 80028c0:	9202      	str	r2, [sp, #8]
 80028c2:	9a02      	ldr	r2, [sp, #8]
    GPIO_InitStruct.Pin = MCO2_PIN;
 80028c4:	f44f 7200 	mov.w	r2, #512	; 0x200
 80028c8:	9203      	str	r2, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80028ca:	2202      	movs	r2, #2
 80028cc:	9204      	str	r2, [sp, #16]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80028ce:	2203      	movs	r2, #3
 80028d0:	9206      	str	r2, [sp, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80028d2:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
 80028d4:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(MCO2_GPIO_PORT, &GPIO_InitStruct);
 80028d6:	a903      	add	r1, sp, #12
 80028d8:	4807      	ldr	r0, [pc, #28]	; (80028f8 <HAL_RCC_MCOConfig+0x98>)
 80028da:	f7fe fc35 	bl	8001148 <HAL_GPIO_Init>
    MODIFY_REG(RCC->CFGR, (RCC_CFGR_MCO2 | RCC_CFGR_MCO2PRE), (RCC_MCOSource | (RCC_MCODiv << 3U)));
 80028de:	68b3      	ldr	r3, [r6, #8]
 80028e0:	f023 4378 	bic.w	r3, r3, #4160749568	; 0xf8000000
 80028e4:	ea44 04c5 	orr.w	r4, r4, r5, lsl #3
 80028e8:	431c      	orrs	r4, r3
 80028ea:	60b4      	str	r4, [r6, #8]
}
 80028ec:	e7dc      	b.n	80028a8 <HAL_RCC_MCOConfig+0x48>
 80028ee:	bf00      	nop
 80028f0:	40023800 	.word	0x40023800
 80028f4:	40020000 	.word	0x40020000
 80028f8:	40020800 	.word	0x40020800

080028fc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80028fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
  uint32_t sysclockfreq = 0U;

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80028fe:	4b2f      	ldr	r3, [pc, #188]	; (80029bc <HAL_RCC_GetSysClockFreq+0xc0>)
 8002900:	689b      	ldr	r3, [r3, #8]
 8002902:	f003 030c 	and.w	r3, r3, #12
 8002906:	2b04      	cmp	r3, #4
 8002908:	d053      	beq.n	80029b2 <HAL_RCC_GetSysClockFreq+0xb6>
 800290a:	2b08      	cmp	r3, #8
 800290c:	d153      	bne.n	80029b6 <HAL_RCC_GetSysClockFreq+0xba>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800290e:	4b2b      	ldr	r3, [pc, #172]	; (80029bc <HAL_RCC_GetSysClockFreq+0xc0>)
 8002910:	685a      	ldr	r2, [r3, #4]
 8002912:	f002 023f 	and.w	r2, r2, #63	; 0x3f
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002916:	685b      	ldr	r3, [r3, #4]
 8002918:	f413 0f80 	tst.w	r3, #4194304	; 0x400000
 800291c:	d028      	beq.n	8002970 <HAL_RCC_GetSysClockFreq+0x74>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800291e:	4b27      	ldr	r3, [pc, #156]	; (80029bc <HAL_RCC_GetSysClockFreq+0xc0>)
 8002920:	685b      	ldr	r3, [r3, #4]
 8002922:	f3c3 1388 	ubfx	r3, r3, #6, #9
 8002926:	0158      	lsls	r0, r3, #5
 8002928:	2100      	movs	r1, #0
 800292a:	1ac0      	subs	r0, r0, r3
 800292c:	f161 0100 	sbc.w	r1, r1, #0
 8002930:	018e      	lsls	r6, r1, #6
 8002932:	ea46 6690 	orr.w	r6, r6, r0, lsr #26
 8002936:	0187      	lsls	r7, r0, #6
 8002938:	1a3c      	subs	r4, r7, r0
 800293a:	eb66 0501 	sbc.w	r5, r6, r1
 800293e:	00e9      	lsls	r1, r5, #3
 8002940:	ea41 7154 	orr.w	r1, r1, r4, lsr #29
 8002944:	00e0      	lsls	r0, r4, #3
 8002946:	18c0      	adds	r0, r0, r3
 8002948:	f141 0100 	adc.w	r1, r1, #0
 800294c:	024b      	lsls	r3, r1, #9
 800294e:	ea43 53d0 	orr.w	r3, r3, r0, lsr #23
 8002952:	0244      	lsls	r4, r0, #9
 8002954:	4620      	mov	r0, r4
 8002956:	4619      	mov	r1, r3
 8002958:	2300      	movs	r3, #0
 800295a:	f7fd fc91 	bl	8000280 <__aeabi_uldivmod>
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 800295e:	4b17      	ldr	r3, [pc, #92]	; (80029bc <HAL_RCC_GetSysClockFreq+0xc0>)
 8002960:	685b      	ldr	r3, [r3, #4]
 8002962:	f3c3 4301 	ubfx	r3, r3, #16, #2
 8002966:	3301      	adds	r3, #1
 8002968:	005b      	lsls	r3, r3, #1

      sysclockfreq = pllvco/pllp;
 800296a:	fbb0 f0f3 	udiv	r0, r0, r3
      break;
 800296e:	e023      	b.n	80029b8 <HAL_RCC_GetSysClockFreq+0xbc>
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002970:	4b12      	ldr	r3, [pc, #72]	; (80029bc <HAL_RCC_GetSysClockFreq+0xc0>)
 8002972:	685b      	ldr	r3, [r3, #4]
 8002974:	f3c3 1388 	ubfx	r3, r3, #6, #9
 8002978:	015c      	lsls	r4, r3, #5
 800297a:	2500      	movs	r5, #0
 800297c:	1ae4      	subs	r4, r4, r3
 800297e:	f165 0500 	sbc.w	r5, r5, #0
 8002982:	01ae      	lsls	r6, r5, #6
 8002984:	ea46 6694 	orr.w	r6, r6, r4, lsr #26
 8002988:	01a7      	lsls	r7, r4, #6
 800298a:	1b38      	subs	r0, r7, r4
 800298c:	eb66 0105 	sbc.w	r1, r6, r5
 8002990:	00cc      	lsls	r4, r1, #3
 8002992:	ea44 7450 	orr.w	r4, r4, r0, lsr #29
 8002996:	00c5      	lsls	r5, r0, #3
 8002998:	18e8      	adds	r0, r5, r3
 800299a:	f144 0100 	adc.w	r1, r4, #0
 800299e:	028b      	lsls	r3, r1, #10
 80029a0:	ea43 5390 	orr.w	r3, r3, r0, lsr #22
 80029a4:	0284      	lsls	r4, r0, #10
 80029a6:	4620      	mov	r0, r4
 80029a8:	4619      	mov	r1, r3
 80029aa:	2300      	movs	r3, #0
 80029ac:	f7fd fc68 	bl	8000280 <__aeabi_uldivmod>
 80029b0:	e7d5      	b.n	800295e <HAL_RCC_GetSysClockFreq+0x62>
      sysclockfreq = HSE_VALUE;
 80029b2:	4803      	ldr	r0, [pc, #12]	; (80029c0 <HAL_RCC_GetSysClockFreq+0xc4>)
 80029b4:	e000      	b.n	80029b8 <HAL_RCC_GetSysClockFreq+0xbc>
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80029b6:	4803      	ldr	r0, [pc, #12]	; (80029c4 <HAL_RCC_GetSysClockFreq+0xc8>)
      sysclockfreq = HSI_VALUE;
      break;
    }
  }
  return sysclockfreq;
}
 80029b8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80029ba:	bf00      	nop
 80029bc:	40023800 	.word	0x40023800
 80029c0:	007a1200 	.word	0x007a1200
 80029c4:	00f42400 	.word	0x00f42400

080029c8 <HAL_RCC_ClockConfig>:
  if(RCC_ClkInitStruct == NULL)
 80029c8:	2800      	cmp	r0, #0
 80029ca:	f000 809b 	beq.w	8002b04 <HAL_RCC_ClockConfig+0x13c>
{
 80029ce:	b570      	push	{r4, r5, r6, lr}
 80029d0:	460d      	mov	r5, r1
 80029d2:	4604      	mov	r4, r0
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80029d4:	4b4f      	ldr	r3, [pc, #316]	; (8002b14 <HAL_RCC_ClockConfig+0x14c>)
 80029d6:	681b      	ldr	r3, [r3, #0]
 80029d8:	f003 0307 	and.w	r3, r3, #7
 80029dc:	428b      	cmp	r3, r1
 80029de:	d208      	bcs.n	80029f2 <HAL_RCC_ClockConfig+0x2a>
    __HAL_FLASH_SET_LATENCY(FLatency);
 80029e0:	b2cb      	uxtb	r3, r1
 80029e2:	4a4c      	ldr	r2, [pc, #304]	; (8002b14 <HAL_RCC_ClockConfig+0x14c>)
 80029e4:	7013      	strb	r3, [r2, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80029e6:	6813      	ldr	r3, [r2, #0]
 80029e8:	f003 0307 	and.w	r3, r3, #7
 80029ec:	428b      	cmp	r3, r1
 80029ee:	f040 808b 	bne.w	8002b08 <HAL_RCC_ClockConfig+0x140>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80029f2:	6823      	ldr	r3, [r4, #0]
 80029f4:	f013 0f02 	tst.w	r3, #2
 80029f8:	d017      	beq.n	8002a2a <HAL_RCC_ClockConfig+0x62>
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80029fa:	f013 0f04 	tst.w	r3, #4
 80029fe:	d004      	beq.n	8002a0a <HAL_RCC_ClockConfig+0x42>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002a00:	4a45      	ldr	r2, [pc, #276]	; (8002b18 <HAL_RCC_ClockConfig+0x150>)
 8002a02:	6893      	ldr	r3, [r2, #8]
 8002a04:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8002a08:	6093      	str	r3, [r2, #8]
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002a0a:	6823      	ldr	r3, [r4, #0]
 8002a0c:	f013 0f08 	tst.w	r3, #8
 8002a10:	d004      	beq.n	8002a1c <HAL_RCC_ClockConfig+0x54>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002a12:	4a41      	ldr	r2, [pc, #260]	; (8002b18 <HAL_RCC_ClockConfig+0x150>)
 8002a14:	6893      	ldr	r3, [r2, #8]
 8002a16:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8002a1a:	6093      	str	r3, [r2, #8]
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002a1c:	4a3e      	ldr	r2, [pc, #248]	; (8002b18 <HAL_RCC_ClockConfig+0x150>)
 8002a1e:	6893      	ldr	r3, [r2, #8]
 8002a20:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002a24:	68a1      	ldr	r1, [r4, #8]
 8002a26:	430b      	orrs	r3, r1
 8002a28:	6093      	str	r3, [r2, #8]
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002a2a:	6823      	ldr	r3, [r4, #0]
 8002a2c:	f013 0f01 	tst.w	r3, #1
 8002a30:	d032      	beq.n	8002a98 <HAL_RCC_ClockConfig+0xd0>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002a32:	6863      	ldr	r3, [r4, #4]
 8002a34:	2b01      	cmp	r3, #1
 8002a36:	d021      	beq.n	8002a7c <HAL_RCC_ClockConfig+0xb4>
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002a38:	1e9a      	subs	r2, r3, #2
 8002a3a:	2a01      	cmp	r2, #1
 8002a3c:	d925      	bls.n	8002a8a <HAL_RCC_ClockConfig+0xc2>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002a3e:	4a36      	ldr	r2, [pc, #216]	; (8002b18 <HAL_RCC_ClockConfig+0x150>)
 8002a40:	6812      	ldr	r2, [r2, #0]
 8002a42:	f012 0f02 	tst.w	r2, #2
 8002a46:	d061      	beq.n	8002b0c <HAL_RCC_ClockConfig+0x144>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002a48:	4933      	ldr	r1, [pc, #204]	; (8002b18 <HAL_RCC_ClockConfig+0x150>)
 8002a4a:	688a      	ldr	r2, [r1, #8]
 8002a4c:	f022 0203 	bic.w	r2, r2, #3
 8002a50:	4313      	orrs	r3, r2
 8002a52:	608b      	str	r3, [r1, #8]
    tickstart = HAL_GetTick();
 8002a54:	f7fe faac 	bl	8000fb0 <HAL_GetTick>
 8002a58:	4606      	mov	r6, r0
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002a5a:	4b2f      	ldr	r3, [pc, #188]	; (8002b18 <HAL_RCC_ClockConfig+0x150>)
 8002a5c:	689b      	ldr	r3, [r3, #8]
 8002a5e:	f003 030c 	and.w	r3, r3, #12
 8002a62:	6862      	ldr	r2, [r4, #4]
 8002a64:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 8002a68:	d016      	beq.n	8002a98 <HAL_RCC_ClockConfig+0xd0>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002a6a:	f7fe faa1 	bl	8000fb0 <HAL_GetTick>
 8002a6e:	1b80      	subs	r0, r0, r6
 8002a70:	f241 3388 	movw	r3, #5000	; 0x1388
 8002a74:	4298      	cmp	r0, r3
 8002a76:	d9f0      	bls.n	8002a5a <HAL_RCC_ClockConfig+0x92>
        return HAL_TIMEOUT;
 8002a78:	2003      	movs	r0, #3
 8002a7a:	e042      	b.n	8002b02 <HAL_RCC_ClockConfig+0x13a>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002a7c:	4a26      	ldr	r2, [pc, #152]	; (8002b18 <HAL_RCC_ClockConfig+0x150>)
 8002a7e:	6812      	ldr	r2, [r2, #0]
 8002a80:	f412 3f00 	tst.w	r2, #131072	; 0x20000
 8002a84:	d1e0      	bne.n	8002a48 <HAL_RCC_ClockConfig+0x80>
        return HAL_ERROR;
 8002a86:	2001      	movs	r0, #1
 8002a88:	e03b      	b.n	8002b02 <HAL_RCC_ClockConfig+0x13a>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002a8a:	4a23      	ldr	r2, [pc, #140]	; (8002b18 <HAL_RCC_ClockConfig+0x150>)
 8002a8c:	6812      	ldr	r2, [r2, #0]
 8002a8e:	f012 7f00 	tst.w	r2, #33554432	; 0x2000000
 8002a92:	d1d9      	bne.n	8002a48 <HAL_RCC_ClockConfig+0x80>
        return HAL_ERROR;
 8002a94:	2001      	movs	r0, #1
 8002a96:	e034      	b.n	8002b02 <HAL_RCC_ClockConfig+0x13a>
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002a98:	4b1e      	ldr	r3, [pc, #120]	; (8002b14 <HAL_RCC_ClockConfig+0x14c>)
 8002a9a:	681b      	ldr	r3, [r3, #0]
 8002a9c:	f003 0307 	and.w	r3, r3, #7
 8002aa0:	42ab      	cmp	r3, r5
 8002aa2:	d907      	bls.n	8002ab4 <HAL_RCC_ClockConfig+0xec>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002aa4:	b2ea      	uxtb	r2, r5
 8002aa6:	4b1b      	ldr	r3, [pc, #108]	; (8002b14 <HAL_RCC_ClockConfig+0x14c>)
 8002aa8:	701a      	strb	r2, [r3, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002aaa:	681b      	ldr	r3, [r3, #0]
 8002aac:	f003 0307 	and.w	r3, r3, #7
 8002ab0:	42ab      	cmp	r3, r5
 8002ab2:	d12d      	bne.n	8002b10 <HAL_RCC_ClockConfig+0x148>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002ab4:	6823      	ldr	r3, [r4, #0]
 8002ab6:	f013 0f04 	tst.w	r3, #4
 8002aba:	d006      	beq.n	8002aca <HAL_RCC_ClockConfig+0x102>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002abc:	4a16      	ldr	r2, [pc, #88]	; (8002b18 <HAL_RCC_ClockConfig+0x150>)
 8002abe:	6893      	ldr	r3, [r2, #8]
 8002ac0:	f423 53e0 	bic.w	r3, r3, #7168	; 0x1c00
 8002ac4:	68e1      	ldr	r1, [r4, #12]
 8002ac6:	430b      	orrs	r3, r1
 8002ac8:	6093      	str	r3, [r2, #8]
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002aca:	6823      	ldr	r3, [r4, #0]
 8002acc:	f013 0f08 	tst.w	r3, #8
 8002ad0:	d007      	beq.n	8002ae2 <HAL_RCC_ClockConfig+0x11a>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002ad2:	4a11      	ldr	r2, [pc, #68]	; (8002b18 <HAL_RCC_ClockConfig+0x150>)
 8002ad4:	6893      	ldr	r3, [r2, #8]
 8002ad6:	f423 4360 	bic.w	r3, r3, #57344	; 0xe000
 8002ada:	6921      	ldr	r1, [r4, #16]
 8002adc:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 8002ae0:	6093      	str	r3, [r2, #8]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002ae2:	f7ff ff0b 	bl	80028fc <HAL_RCC_GetSysClockFreq>
 8002ae6:	4b0c      	ldr	r3, [pc, #48]	; (8002b18 <HAL_RCC_ClockConfig+0x150>)
 8002ae8:	689b      	ldr	r3, [r3, #8]
 8002aea:	f3c3 1303 	ubfx	r3, r3, #4, #4
 8002aee:	4a0b      	ldr	r2, [pc, #44]	; (8002b1c <HAL_RCC_ClockConfig+0x154>)
 8002af0:	5cd3      	ldrb	r3, [r2, r3]
 8002af2:	40d8      	lsrs	r0, r3
 8002af4:	4b0a      	ldr	r3, [pc, #40]	; (8002b20 <HAL_RCC_ClockConfig+0x158>)
 8002af6:	6018      	str	r0, [r3, #0]
  HAL_InitTick (uwTickPrio);
 8002af8:	4b0a      	ldr	r3, [pc, #40]	; (8002b24 <HAL_RCC_ClockConfig+0x15c>)
 8002afa:	6818      	ldr	r0, [r3, #0]
 8002afc:	f7fe fa0c 	bl	8000f18 <HAL_InitTick>
  return HAL_OK;
 8002b00:	2000      	movs	r0, #0
}
 8002b02:	bd70      	pop	{r4, r5, r6, pc}
    return HAL_ERROR;
 8002b04:	2001      	movs	r0, #1
}
 8002b06:	4770      	bx	lr
      return HAL_ERROR;
 8002b08:	2001      	movs	r0, #1
 8002b0a:	e7fa      	b.n	8002b02 <HAL_RCC_ClockConfig+0x13a>
        return HAL_ERROR;
 8002b0c:	2001      	movs	r0, #1
 8002b0e:	e7f8      	b.n	8002b02 <HAL_RCC_ClockConfig+0x13a>
      return HAL_ERROR;
 8002b10:	2001      	movs	r0, #1
 8002b12:	e7f6      	b.n	8002b02 <HAL_RCC_ClockConfig+0x13a>
 8002b14:	40023c00 	.word	0x40023c00
 8002b18:	40023800 	.word	0x40023800
 8002b1c:	080068d0 	.word	0x080068d0
 8002b20:	20000174 	.word	0x20000174
 8002b24:	2000017c 	.word	0x2000017c

08002b28 <HAL_RCC_GetHCLKFreq>:
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
  return SystemCoreClock;
}
 8002b28:	4b01      	ldr	r3, [pc, #4]	; (8002b30 <HAL_RCC_GetHCLKFreq+0x8>)
 8002b2a:	6818      	ldr	r0, [r3, #0]
 8002b2c:	4770      	bx	lr
 8002b2e:	bf00      	nop
 8002b30:	20000174 	.word	0x20000174

08002b34 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002b34:	b508      	push	{r3, lr}
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8002b36:	f7ff fff7 	bl	8002b28 <HAL_RCC_GetHCLKFreq>
 8002b3a:	4b04      	ldr	r3, [pc, #16]	; (8002b4c <HAL_RCC_GetPCLK1Freq+0x18>)
 8002b3c:	689b      	ldr	r3, [r3, #8]
 8002b3e:	f3c3 2382 	ubfx	r3, r3, #10, #3
 8002b42:	4a03      	ldr	r2, [pc, #12]	; (8002b50 <HAL_RCC_GetPCLK1Freq+0x1c>)
 8002b44:	5cd3      	ldrb	r3, [r2, r3]
}
 8002b46:	40d8      	lsrs	r0, r3
 8002b48:	bd08      	pop	{r3, pc}
 8002b4a:	bf00      	nop
 8002b4c:	40023800 	.word	0x40023800
 8002b50:	080068e0 	.word	0x080068e0

08002b54 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8002b54:	b082      	sub	sp, #8
  __IO uint32_t count = 0U;
 8002b56:	2300      	movs	r3, #0
 8002b58:	9301      	str	r3, [sp, #4]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 8002b5a:	9b01      	ldr	r3, [sp, #4]
 8002b5c:	3301      	adds	r3, #1
 8002b5e:	9301      	str	r3, [sp, #4]
 8002b60:	4a0e      	ldr	r2, [pc, #56]	; (8002b9c <USB_CoreReset+0x48>)
 8002b62:	4293      	cmp	r3, r2
 8002b64:	d814      	bhi.n	8002b90 <USB_CoreReset+0x3c>
    {
      return HAL_TIMEOUT;
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8002b66:	6903      	ldr	r3, [r0, #16]
 8002b68:	2b00      	cmp	r3, #0
 8002b6a:	daf6      	bge.n	8002b5a <USB_CoreReset+0x6>

  /* Core Soft Reset */
  count = 0U;
 8002b6c:	2300      	movs	r3, #0
 8002b6e:	9301      	str	r3, [sp, #4]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8002b70:	6903      	ldr	r3, [r0, #16]
 8002b72:	f043 0301 	orr.w	r3, r3, #1
 8002b76:	6103      	str	r3, [r0, #16]

  do
  {
    if (++count > 200000U)
 8002b78:	9b01      	ldr	r3, [sp, #4]
 8002b7a:	3301      	adds	r3, #1
 8002b7c:	9301      	str	r3, [sp, #4]
 8002b7e:	4a07      	ldr	r2, [pc, #28]	; (8002b9c <USB_CoreReset+0x48>)
 8002b80:	4293      	cmp	r3, r2
 8002b82:	d808      	bhi.n	8002b96 <USB_CoreReset+0x42>
    {
      return HAL_TIMEOUT;
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8002b84:	6903      	ldr	r3, [r0, #16]
 8002b86:	f013 0f01 	tst.w	r3, #1
 8002b8a:	d1f5      	bne.n	8002b78 <USB_CoreReset+0x24>

  return HAL_OK;
 8002b8c:	2000      	movs	r0, #0
 8002b8e:	e000      	b.n	8002b92 <USB_CoreReset+0x3e>
      return HAL_TIMEOUT;
 8002b90:	2003      	movs	r0, #3
}
 8002b92:	b002      	add	sp, #8
 8002b94:	4770      	bx	lr
      return HAL_TIMEOUT;
 8002b96:	2003      	movs	r0, #3
 8002b98:	e7fb      	b.n	8002b92 <USB_CoreReset+0x3e>
 8002b9a:	bf00      	nop
 8002b9c:	00030d40 	.word	0x00030d40

08002ba0 <USB_CoreInit>:
{
 8002ba0:	b084      	sub	sp, #16
 8002ba2:	b510      	push	{r4, lr}
 8002ba4:	4604      	mov	r4, r0
 8002ba6:	a803      	add	r0, sp, #12
 8002ba8:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8002bac:	9b08      	ldr	r3, [sp, #32]
 8002bae:	2b01      	cmp	r3, #1
 8002bb0:	d11f      	bne.n	8002bf2 <USB_CoreInit+0x52>
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8002bb2:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8002bb4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002bb8:	63a3      	str	r3, [r4, #56]	; 0x38
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8002bba:	68e3      	ldr	r3, [r4, #12]
 8002bbc:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 8002bc0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002bc4:	60e3      	str	r3, [r4, #12]
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8002bc6:	68e3      	ldr	r3, [r4, #12]
 8002bc8:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 8002bcc:	60e3      	str	r3, [r4, #12]
    if (cfg.use_external_vbus == 1U)
 8002bce:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8002bd0:	2b01      	cmp	r3, #1
 8002bd2:	d009      	beq.n	8002be8 <USB_CoreInit+0x48>
    ret = USB_CoreReset(USBx);
 8002bd4:	4620      	mov	r0, r4
 8002bd6:	f7ff ffbd 	bl	8002b54 <USB_CoreReset>
  if (cfg.dma_enable == 1U)
 8002bda:	9b06      	ldr	r3, [sp, #24]
 8002bdc:	2b01      	cmp	r3, #1
 8002bde:	d01b      	beq.n	8002c18 <USB_CoreInit+0x78>
}
 8002be0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8002be4:	b004      	add	sp, #16
 8002be6:	4770      	bx	lr
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8002be8:	68e3      	ldr	r3, [r4, #12]
 8002bea:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002bee:	60e3      	str	r3, [r4, #12]
 8002bf0:	e7f0      	b.n	8002bd4 <USB_CoreInit+0x34>
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8002bf2:	68e3      	ldr	r3, [r4, #12]
 8002bf4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002bf8:	60e3      	str	r3, [r4, #12]
    ret = USB_CoreReset(USBx);
 8002bfa:	4620      	mov	r0, r4
 8002bfc:	f7ff ffaa 	bl	8002b54 <USB_CoreReset>
    if (cfg.battery_charging_enable == 0U)
 8002c00:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8002c02:	b923      	cbnz	r3, 8002c0e <USB_CoreInit+0x6e>
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8002c04:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8002c06:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002c0a:	63a3      	str	r3, [r4, #56]	; 0x38
 8002c0c:	e7e5      	b.n	8002bda <USB_CoreInit+0x3a>
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8002c0e:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8002c10:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002c14:	63a3      	str	r3, [r4, #56]	; 0x38
 8002c16:	e7e0      	b.n	8002bda <USB_CoreInit+0x3a>
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8002c18:	68a3      	ldr	r3, [r4, #8]
 8002c1a:	f043 0306 	orr.w	r3, r3, #6
 8002c1e:	60a3      	str	r3, [r4, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8002c20:	68a3      	ldr	r3, [r4, #8]
 8002c22:	f043 0320 	orr.w	r3, r3, #32
 8002c26:	60a3      	str	r3, [r4, #8]
 8002c28:	e7da      	b.n	8002be0 <USB_CoreInit+0x40>
	...

08002c2c <USB_SetTurnaroundTime>:
  if (speed == USBD_FS_SPEED)
 8002c2c:	2a02      	cmp	r2, #2
 8002c2e:	d00a      	beq.n	8002c46 <USB_SetTurnaroundTime+0x1a>
    UsbTrd = USBD_HS_TRDT_VALUE;
 8002c30:	2109      	movs	r1, #9
  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 8002c32:	68c2      	ldr	r2, [r0, #12]
 8002c34:	f422 5270 	bic.w	r2, r2, #15360	; 0x3c00
 8002c38:	60c2      	str	r2, [r0, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 8002c3a:	68c3      	ldr	r3, [r0, #12]
 8002c3c:	ea43 2381 	orr.w	r3, r3, r1, lsl #10
 8002c40:	60c3      	str	r3, [r0, #12]
}
 8002c42:	2000      	movs	r0, #0
 8002c44:	4770      	bx	lr
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 8002c46:	4b23      	ldr	r3, [pc, #140]	; (8002cd4 <USB_SetTurnaroundTime+0xa8>)
 8002c48:	440b      	add	r3, r1
 8002c4a:	4a23      	ldr	r2, [pc, #140]	; (8002cd8 <USB_SetTurnaroundTime+0xac>)
 8002c4c:	4293      	cmp	r3, r2
 8002c4e:	d92f      	bls.n	8002cb0 <USB_SetTurnaroundTime+0x84>
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 8002c50:	4b22      	ldr	r3, [pc, #136]	; (8002cdc <USB_SetTurnaroundTime+0xb0>)
 8002c52:	440b      	add	r3, r1
 8002c54:	4a22      	ldr	r2, [pc, #136]	; (8002ce0 <USB_SetTurnaroundTime+0xb4>)
 8002c56:	4293      	cmp	r3, r2
 8002c58:	d92c      	bls.n	8002cb4 <USB_SetTurnaroundTime+0x88>
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 8002c5a:	f5a1 0374 	sub.w	r3, r1, #15990784	; 0xf40000
 8002c5e:	f5a3 5310 	sub.w	r3, r3, #9216	; 0x2400
 8002c62:	4a20      	ldr	r2, [pc, #128]	; (8002ce4 <USB_SetTurnaroundTime+0xb8>)
 8002c64:	4293      	cmp	r3, r2
 8002c66:	d927      	bls.n	8002cb8 <USB_SetTurnaroundTime+0x8c>
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 8002c68:	f1a1 7383 	sub.w	r3, r1, #17170432	; 0x1060000
 8002c6c:	f5a3 43e7 	sub.w	r3, r3, #29568	; 0x7380
 8002c70:	4a1d      	ldr	r2, [pc, #116]	; (8002ce8 <USB_SetTurnaroundTime+0xbc>)
 8002c72:	4293      	cmp	r3, r2
 8002c74:	d322      	bcc.n	8002cbc <USB_SetTurnaroundTime+0x90>
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 8002c76:	4b1d      	ldr	r3, [pc, #116]	; (8002cec <USB_SetTurnaroundTime+0xc0>)
 8002c78:	440b      	add	r3, r1
 8002c7a:	4a1d      	ldr	r2, [pc, #116]	; (8002cf0 <USB_SetTurnaroundTime+0xc4>)
 8002c7c:	4293      	cmp	r3, r2
 8002c7e:	d91f      	bls.n	8002cc0 <USB_SetTurnaroundTime+0x94>
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 8002c80:	4b1c      	ldr	r3, [pc, #112]	; (8002cf4 <USB_SetTurnaroundTime+0xc8>)
 8002c82:	440b      	add	r3, r1
 8002c84:	4a1c      	ldr	r2, [pc, #112]	; (8002cf8 <USB_SetTurnaroundTime+0xcc>)
 8002c86:	4293      	cmp	r3, r2
 8002c88:	d31c      	bcc.n	8002cc4 <USB_SetTurnaroundTime+0x98>
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 8002c8a:	4b1c      	ldr	r3, [pc, #112]	; (8002cfc <USB_SetTurnaroundTime+0xd0>)
 8002c8c:	440b      	add	r3, r1
 8002c8e:	4a1c      	ldr	r2, [pc, #112]	; (8002d00 <USB_SetTurnaroundTime+0xd4>)
 8002c90:	4293      	cmp	r3, r2
 8002c92:	d319      	bcc.n	8002cc8 <USB_SetTurnaroundTime+0x9c>
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 8002c94:	f1a1 73b7 	sub.w	r3, r1, #23986176	; 0x16e0000
 8002c98:	f5a3 5358 	sub.w	r3, r3, #13824	; 0x3600
 8002c9c:	4a19      	ldr	r2, [pc, #100]	; (8002d04 <USB_SetTurnaroundTime+0xd8>)
 8002c9e:	4293      	cmp	r3, r2
 8002ca0:	d314      	bcc.n	8002ccc <USB_SetTurnaroundTime+0xa0>
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 8002ca2:	4b19      	ldr	r3, [pc, #100]	; (8002d08 <USB_SetTurnaroundTime+0xdc>)
 8002ca4:	440b      	add	r3, r1
 8002ca6:	4a19      	ldr	r2, [pc, #100]	; (8002d0c <USB_SetTurnaroundTime+0xe0>)
 8002ca8:	4293      	cmp	r3, r2
 8002caa:	d211      	bcs.n	8002cd0 <USB_SetTurnaroundTime+0xa4>
      UsbTrd = 0x7U;
 8002cac:	2107      	movs	r1, #7
 8002cae:	e7c0      	b.n	8002c32 <USB_SetTurnaroundTime+0x6>
      UsbTrd = 0xFU;
 8002cb0:	210f      	movs	r1, #15
 8002cb2:	e7be      	b.n	8002c32 <USB_SetTurnaroundTime+0x6>
      UsbTrd = 0xEU;
 8002cb4:	210e      	movs	r1, #14
 8002cb6:	e7bc      	b.n	8002c32 <USB_SetTurnaroundTime+0x6>
      UsbTrd = 0xDU;
 8002cb8:	210d      	movs	r1, #13
 8002cba:	e7ba      	b.n	8002c32 <USB_SetTurnaroundTime+0x6>
      UsbTrd = 0xCU;
 8002cbc:	210c      	movs	r1, #12
 8002cbe:	e7b8      	b.n	8002c32 <USB_SetTurnaroundTime+0x6>
      UsbTrd = 0xBU;
 8002cc0:	210b      	movs	r1, #11
 8002cc2:	e7b6      	b.n	8002c32 <USB_SetTurnaroundTime+0x6>
      UsbTrd = 0xAU;
 8002cc4:	210a      	movs	r1, #10
 8002cc6:	e7b4      	b.n	8002c32 <USB_SetTurnaroundTime+0x6>
      UsbTrd = 0x9U;
 8002cc8:	2109      	movs	r1, #9
 8002cca:	e7b2      	b.n	8002c32 <USB_SetTurnaroundTime+0x6>
      UsbTrd = 0x8U;
 8002ccc:	2108      	movs	r1, #8
 8002cce:	e7b0      	b.n	8002c32 <USB_SetTurnaroundTime+0x6>
      UsbTrd = 0x6U;
 8002cd0:	2106      	movs	r1, #6
 8002cd2:	e7ae      	b.n	8002c32 <USB_SetTurnaroundTime+0x6>
 8002cd4:	ff275340 	.word	0xff275340
 8002cd8:	000c34ff 	.word	0x000c34ff
 8002cdc:	ff1b1e40 	.word	0xff1b1e40
 8002ce0:	000f423f 	.word	0x000f423f
 8002ce4:	00124f7f 	.word	0x00124f7f
 8002ce8:	0013d620 	.word	0x0013d620
 8002cec:	fee5b660 	.word	0xfee5b660
 8002cf0:	0016e35f 	.word	0x0016e35f
 8002cf4:	feced300 	.word	0xfeced300
 8002cf8:	001b7740 	.word	0x001b7740
 8002cfc:	feb35bc0 	.word	0xfeb35bc0
 8002d00:	002191c0 	.word	0x002191c0
 8002d04:	00387520 	.word	0x00387520
 8002d08:	fe5954e0 	.word	0xfe5954e0
 8002d0c:	00419ce0 	.word	0x00419ce0

08002d10 <USB_EnableGlobalInt>:
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8002d10:	6883      	ldr	r3, [r0, #8]
 8002d12:	f043 0301 	orr.w	r3, r3, #1
 8002d16:	6083      	str	r3, [r0, #8]
}
 8002d18:	2000      	movs	r0, #0
 8002d1a:	4770      	bx	lr

08002d1c <USB_DisableGlobalInt>:
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8002d1c:	6883      	ldr	r3, [r0, #8]
 8002d1e:	f023 0301 	bic.w	r3, r3, #1
 8002d22:	6083      	str	r3, [r0, #8]
}
 8002d24:	2000      	movs	r0, #0
 8002d26:	4770      	bx	lr

08002d28 <USB_FlushTxFifo>:
{
 8002d28:	b082      	sub	sp, #8
  __IO uint32_t count = 0U;
 8002d2a:	2300      	movs	r3, #0
 8002d2c:	9301      	str	r3, [sp, #4]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8002d2e:	0189      	lsls	r1, r1, #6
 8002d30:	f041 0120 	orr.w	r1, r1, #32
 8002d34:	6101      	str	r1, [r0, #16]
    if (++count > 200000U)
 8002d36:	9b01      	ldr	r3, [sp, #4]
 8002d38:	3301      	adds	r3, #1
 8002d3a:	9301      	str	r3, [sp, #4]
 8002d3c:	4a05      	ldr	r2, [pc, #20]	; (8002d54 <USB_FlushTxFifo+0x2c>)
 8002d3e:	4293      	cmp	r3, r2
 8002d40:	d805      	bhi.n	8002d4e <USB_FlushTxFifo+0x26>
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8002d42:	6903      	ldr	r3, [r0, #16]
 8002d44:	f013 0f20 	tst.w	r3, #32
 8002d48:	d1f5      	bne.n	8002d36 <USB_FlushTxFifo+0xe>
  return HAL_OK;
 8002d4a:	2000      	movs	r0, #0
 8002d4c:	e000      	b.n	8002d50 <USB_FlushTxFifo+0x28>
      return HAL_TIMEOUT;
 8002d4e:	2003      	movs	r0, #3
}
 8002d50:	b002      	add	sp, #8
 8002d52:	4770      	bx	lr
 8002d54:	00030d40 	.word	0x00030d40

08002d58 <USB_FlushRxFifo>:
{
 8002d58:	b082      	sub	sp, #8
  __IO uint32_t count = 0U;
 8002d5a:	2300      	movs	r3, #0
 8002d5c:	9301      	str	r3, [sp, #4]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8002d5e:	2310      	movs	r3, #16
 8002d60:	6103      	str	r3, [r0, #16]
    if (++count > 200000U)
 8002d62:	9b01      	ldr	r3, [sp, #4]
 8002d64:	3301      	adds	r3, #1
 8002d66:	9301      	str	r3, [sp, #4]
 8002d68:	4a05      	ldr	r2, [pc, #20]	; (8002d80 <USB_FlushRxFifo+0x28>)
 8002d6a:	4293      	cmp	r3, r2
 8002d6c:	d805      	bhi.n	8002d7a <USB_FlushRxFifo+0x22>
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8002d6e:	6903      	ldr	r3, [r0, #16]
 8002d70:	f013 0f10 	tst.w	r3, #16
 8002d74:	d1f5      	bne.n	8002d62 <USB_FlushRxFifo+0xa>
  return HAL_OK;
 8002d76:	2000      	movs	r0, #0
 8002d78:	e000      	b.n	8002d7c <USB_FlushRxFifo+0x24>
      return HAL_TIMEOUT;
 8002d7a:	2003      	movs	r0, #3
}
 8002d7c:	b002      	add	sp, #8
 8002d7e:	4770      	bx	lr
 8002d80:	00030d40 	.word	0x00030d40

08002d84 <USB_SetDevSpeed>:
  USBx_DEVICE->DCFG |= speed;
 8002d84:	f8d0 3800 	ldr.w	r3, [r0, #2048]	; 0x800
 8002d88:	4319      	orrs	r1, r3
 8002d8a:	f8c0 1800 	str.w	r1, [r0, #2048]	; 0x800
}
 8002d8e:	2000      	movs	r0, #0
 8002d90:	4770      	bx	lr
	...

08002d94 <USB_DevInit>:
{
 8002d94:	b084      	sub	sp, #16
 8002d96:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8002d9a:	4604      	mov	r4, r0
 8002d9c:	a809      	add	r0, sp, #36	; 0x24
 8002d9e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002da2:	4625      	mov	r5, r4
  for (i = 0U; i < 15U; i++)
 8002da4:	2300      	movs	r3, #0
 8002da6:	e006      	b.n	8002db6 <USB_DevInit+0x22>
    USBx->DIEPTXF[i] = 0U;
 8002da8:	f103 0240 	add.w	r2, r3, #64	; 0x40
 8002dac:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 8002db0:	2100      	movs	r1, #0
 8002db2:	6051      	str	r1, [r2, #4]
  for (i = 0U; i < 15U; i++)
 8002db4:	3301      	adds	r3, #1
 8002db6:	2b0e      	cmp	r3, #14
 8002db8:	d9f6      	bls.n	8002da8 <USB_DevInit+0x14>
  if (cfg.vbus_sensing_enable == 0U)
 8002dba:	f8dd 804c 	ldr.w	r8, [sp, #76]	; 0x4c
 8002dbe:	f1b8 0f00 	cmp.w	r8, #0
 8002dc2:	d124      	bne.n	8002e0e <USB_DevInit+0x7a>
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8002dc4:	f8d4 3804 	ldr.w	r3, [r4, #2052]	; 0x804
 8002dc8:	f043 0302 	orr.w	r3, r3, #2
 8002dcc:	f8c4 3804 	str.w	r3, [r4, #2052]	; 0x804
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8002dd0:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8002dd2:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8002dd6:	63a3      	str	r3, [r4, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 8002dd8:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8002dda:	f423 2300 	bic.w	r3, r3, #524288	; 0x80000
 8002dde:	63a3      	str	r3, [r4, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 8002de0:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8002de2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002de6:	63a3      	str	r3, [r4, #56]	; 0x38
  USBx_PCGCCTL = 0U;
 8002de8:	2300      	movs	r3, #0
 8002dea:	f8c4 3e00 	str.w	r3, [r4, #3584]	; 0xe00
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 8002dee:	f504 6600 	add.w	r6, r4, #2048	; 0x800
 8002df2:	f8d4 3800 	ldr.w	r3, [r4, #2048]	; 0x800
 8002df6:	f8c4 3800 	str.w	r3, [r4, #2048]	; 0x800
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8002dfa:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8002dfc:	2b01      	cmp	r3, #1
 8002dfe:	d114      	bne.n	8002e2a <USB_DevInit+0x96>
    if (cfg.speed == USBD_HS_SPEED)
 8002e00:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8002e02:	b96b      	cbnz	r3, 8002e20 <USB_DevInit+0x8c>
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8002e04:	2100      	movs	r1, #0
 8002e06:	4620      	mov	r0, r4
 8002e08:	f7ff ffbc 	bl	8002d84 <USB_SetDevSpeed>
 8002e0c:	e011      	b.n	8002e32 <USB_DevInit+0x9e>
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 8002e0e:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8002e10:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8002e14:	63a3      	str	r3, [r4, #56]	; 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 8002e16:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8002e18:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8002e1c:	63a3      	str	r3, [r4, #56]	; 0x38
 8002e1e:	e7e3      	b.n	8002de8 <USB_DevInit+0x54>
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8002e20:	2101      	movs	r1, #1
 8002e22:	4620      	mov	r0, r4
 8002e24:	f7ff ffae 	bl	8002d84 <USB_SetDevSpeed>
 8002e28:	e003      	b.n	8002e32 <USB_DevInit+0x9e>
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8002e2a:	2103      	movs	r1, #3
 8002e2c:	4620      	mov	r0, r4
 8002e2e:	f7ff ffa9 	bl	8002d84 <USB_SetDevSpeed>
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8002e32:	2110      	movs	r1, #16
 8002e34:	4620      	mov	r0, r4
 8002e36:	f7ff ff77 	bl	8002d28 <USB_FlushTxFifo>
 8002e3a:	4681      	mov	r9, r0
 8002e3c:	b108      	cbz	r0, 8002e42 <USB_DevInit+0xae>
    ret = HAL_ERROR;
 8002e3e:	f04f 0901 	mov.w	r9, #1
  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8002e42:	4620      	mov	r0, r4
 8002e44:	f7ff ff88 	bl	8002d58 <USB_FlushRxFifo>
 8002e48:	b108      	cbz	r0, 8002e4e <USB_DevInit+0xba>
    ret = HAL_ERROR;
 8002e4a:	f04f 0901 	mov.w	r9, #1
  USBx_DEVICE->DIEPMSK = 0U;
 8002e4e:	2300      	movs	r3, #0
 8002e50:	6133      	str	r3, [r6, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8002e52:	6173      	str	r3, [r6, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8002e54:	61f3      	str	r3, [r6, #28]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8002e56:	e00a      	b.n	8002e6e <USB_DevInit+0xda>
      if (i == 0U)
 8002e58:	b9c3      	cbnz	r3, 8002e8c <USB_DevInit+0xf8>
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8002e5a:	f04f 6000 	mov.w	r0, #134217728	; 0x8000000
 8002e5e:	f8c2 0900 	str.w	r0, [r2, #2304]	; 0x900
    USBx_INEP(i)->DIEPTSIZ = 0U;
 8002e62:	2200      	movs	r2, #0
 8002e64:	610a      	str	r2, [r1, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8002e66:	f64f 327f 	movw	r2, #64383	; 0xfb7f
 8002e6a:	608a      	str	r2, [r1, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8002e6c:	3301      	adds	r3, #1
 8002e6e:	9f09      	ldr	r7, [sp, #36]	; 0x24
 8002e70:	429f      	cmp	r7, r3
 8002e72:	d910      	bls.n	8002e96 <USB_DevInit+0x102>
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8002e74:	eb05 1243 	add.w	r2, r5, r3, lsl #5
 8002e78:	f502 6110 	add.w	r1, r2, #2304	; 0x900
 8002e7c:	f8d2 0900 	ldr.w	r0, [r2, #2304]	; 0x900
 8002e80:	2800      	cmp	r0, #0
 8002e82:	dbe9      	blt.n	8002e58 <USB_DevInit+0xc4>
      USBx_INEP(i)->DIEPCTL = 0U;
 8002e84:	2000      	movs	r0, #0
 8002e86:	f8c2 0900 	str.w	r0, [r2, #2304]	; 0x900
 8002e8a:	e7ea      	b.n	8002e62 <USB_DevInit+0xce>
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8002e8c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002e90:	f8c2 0900 	str.w	r0, [r2, #2304]	; 0x900
 8002e94:	e7e5      	b.n	8002e62 <USB_DevInit+0xce>
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8002e96:	2300      	movs	r3, #0
 8002e98:	e00a      	b.n	8002eb0 <USB_DevInit+0x11c>
      if (i == 0U)
 8002e9a:	b1bb      	cbz	r3, 8002ecc <USB_DevInit+0x138>
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8002e9c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002ea0:	f8c2 0b00 	str.w	r0, [r2, #2816]	; 0xb00
    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8002ea4:	2200      	movs	r2, #0
 8002ea6:	610a      	str	r2, [r1, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8002ea8:	f64f 327f 	movw	r2, #64383	; 0xfb7f
 8002eac:	608a      	str	r2, [r1, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8002eae:	3301      	adds	r3, #1
 8002eb0:	429f      	cmp	r7, r3
 8002eb2:	d910      	bls.n	8002ed6 <USB_DevInit+0x142>
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8002eb4:	eb05 1243 	add.w	r2, r5, r3, lsl #5
 8002eb8:	f502 6130 	add.w	r1, r2, #2816	; 0xb00
 8002ebc:	f8d2 0b00 	ldr.w	r0, [r2, #2816]	; 0xb00
 8002ec0:	2800      	cmp	r0, #0
 8002ec2:	dbea      	blt.n	8002e9a <USB_DevInit+0x106>
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8002ec4:	2000      	movs	r0, #0
 8002ec6:	f8c2 0b00 	str.w	r0, [r2, #2816]	; 0xb00
 8002eca:	e7eb      	b.n	8002ea4 <USB_DevInit+0x110>
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8002ecc:	f04f 6000 	mov.w	r0, #134217728	; 0x8000000
 8002ed0:	f8c2 0b00 	str.w	r0, [r2, #2816]	; 0xb00
 8002ed4:	e7e6      	b.n	8002ea4 <USB_DevInit+0x110>
  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8002ed6:	6933      	ldr	r3, [r6, #16]
 8002ed8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002edc:	6133      	str	r3, [r6, #16]
  USBx->GINTMSK = 0U;
 8002ede:	2300      	movs	r3, #0
 8002ee0:	61a3      	str	r3, [r4, #24]
  USBx->GINTSTS = 0xBFFFFFFFU;
 8002ee2:	f06f 4380 	mvn.w	r3, #1073741824	; 0x40000000
 8002ee6:	6163      	str	r3, [r4, #20]
  if (cfg.dma_enable == 0U)
 8002ee8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8002eea:	b91b      	cbnz	r3, 8002ef4 <USB_DevInit+0x160>
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8002eec:	69a3      	ldr	r3, [r4, #24]
 8002eee:	f043 0310 	orr.w	r3, r3, #16
 8002ef2:	61a3      	str	r3, [r4, #24]
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8002ef4:	69a2      	ldr	r2, [r4, #24]
 8002ef6:	4b0c      	ldr	r3, [pc, #48]	; (8002f28 <USB_DevInit+0x194>)
 8002ef8:	4313      	orrs	r3, r2
 8002efa:	61a3      	str	r3, [r4, #24]
  if (cfg.Sof_enable != 0U)
 8002efc:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8002efe:	b11b      	cbz	r3, 8002f08 <USB_DevInit+0x174>
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8002f00:	69a3      	ldr	r3, [r4, #24]
 8002f02:	f043 0308 	orr.w	r3, r3, #8
 8002f06:	61a3      	str	r3, [r4, #24]
  if (cfg.vbus_sensing_enable == 1U)
 8002f08:	f1b8 0f01 	cmp.w	r8, #1
 8002f0c:	d004      	beq.n	8002f18 <USB_DevInit+0x184>
}
 8002f0e:	4648      	mov	r0, r9
 8002f10:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8002f14:	b004      	add	sp, #16
 8002f16:	4770      	bx	lr
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8002f18:	69a3      	ldr	r3, [r4, #24]
 8002f1a:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8002f1e:	f043 0304 	orr.w	r3, r3, #4
 8002f22:	61a3      	str	r3, [r4, #24]
 8002f24:	e7f3      	b.n	8002f0e <USB_DevInit+0x17a>
 8002f26:	bf00      	nop
 8002f28:	803c3800 	.word	0x803c3800

08002f2c <USB_GetDevSpeed>:
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 8002f2c:	f8d0 3808 	ldr.w	r3, [r0, #2056]	; 0x808
  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 8002f30:	f013 0306 	ands.w	r3, r3, #6
 8002f34:	d007      	beq.n	8002f46 <USB_GetDevSpeed+0x1a>
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 8002f36:	2b02      	cmp	r3, #2
 8002f38:	d007      	beq.n	8002f4a <USB_GetDevSpeed+0x1e>
 8002f3a:	2b06      	cmp	r3, #6
 8002f3c:	d001      	beq.n	8002f42 <USB_GetDevSpeed+0x16>
    speed = 0xFU;
 8002f3e:	200f      	movs	r0, #15
}
 8002f40:	4770      	bx	lr
    speed = USBD_FS_SPEED;
 8002f42:	2002      	movs	r0, #2
 8002f44:	4770      	bx	lr
    speed = USBD_HS_SPEED;
 8002f46:	2000      	movs	r0, #0
 8002f48:	4770      	bx	lr
    speed = USBD_FS_SPEED;
 8002f4a:	2002      	movs	r0, #2
 8002f4c:	4770      	bx	lr

08002f4e <USB_ActivateEndpoint>:
{
 8002f4e:	b470      	push	{r4, r5, r6}
  uint32_t epnum = (uint32_t)ep->num;
 8002f50:	780c      	ldrb	r4, [r1, #0]
  if (ep->is_in == 1U)
 8002f52:	784b      	ldrb	r3, [r1, #1]
 8002f54:	2b01      	cmp	r3, #1
 8002f56:	d022      	beq.n	8002f9e <USB_ActivateEndpoint+0x50>
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 8002f58:	f8d0 381c 	ldr.w	r3, [r0, #2076]	; 0x81c
 8002f5c:	f004 060f 	and.w	r6, r4, #15
 8002f60:	2201      	movs	r2, #1
 8002f62:	40b2      	lsls	r2, r6
 8002f64:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8002f68:	f8c0 381c 	str.w	r3, [r0, #2076]	; 0x81c
    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 8002f6c:	eb00 1044 	add.w	r0, r0, r4, lsl #5
 8002f70:	f8d0 3b00 	ldr.w	r3, [r0, #2816]	; 0xb00
 8002f74:	f413 4f00 	tst.w	r3, #32768	; 0x8000
 8002f78:	d10e      	bne.n	8002f98 <USB_ActivateEndpoint+0x4a>
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8002f7a:	f8d0 3b00 	ldr.w	r3, [r0, #2816]	; 0xb00
 8002f7e:	688a      	ldr	r2, [r1, #8]
 8002f80:	f3c2 020a 	ubfx	r2, r2, #0, #11
                                    ((uint32_t)ep->type << 18) |
 8002f84:	78c9      	ldrb	r1, [r1, #3]
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8002f86:	ea42 4281 	orr.w	r2, r2, r1, lsl #18
 8002f8a:	4313      	orrs	r3, r2
 8002f8c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002f90:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002f94:	f8c0 3b00 	str.w	r3, [r0, #2816]	; 0xb00
}
 8002f98:	2000      	movs	r0, #0
 8002f9a:	bc70      	pop	{r4, r5, r6}
 8002f9c:	4770      	bx	lr
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 8002f9e:	f8d0 281c 	ldr.w	r2, [r0, #2076]	; 0x81c
 8002fa2:	f004 060f 	and.w	r6, r4, #15
 8002fa6:	40b3      	lsls	r3, r6
 8002fa8:	b29b      	uxth	r3, r3
 8002faa:	4313      	orrs	r3, r2
 8002fac:	f8c0 381c 	str.w	r3, [r0, #2076]	; 0x81c
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 8002fb0:	eb00 1044 	add.w	r0, r0, r4, lsl #5
 8002fb4:	f8d0 3900 	ldr.w	r3, [r0, #2304]	; 0x900
 8002fb8:	f413 4f00 	tst.w	r3, #32768	; 0x8000
 8002fbc:	d1ec      	bne.n	8002f98 <USB_ActivateEndpoint+0x4a>
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8002fbe:	f8d0 3900 	ldr.w	r3, [r0, #2304]	; 0x900
 8002fc2:	688a      	ldr	r2, [r1, #8]
 8002fc4:	f3c2 020a 	ubfx	r2, r2, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8002fc8:	78c9      	ldrb	r1, [r1, #3]
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8002fca:	ea42 4281 	orr.w	r2, r2, r1, lsl #18
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8002fce:	ea42 5484 	orr.w	r4, r2, r4, lsl #22
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8002fd2:	431c      	orrs	r4, r3
 8002fd4:	f044 5480 	orr.w	r4, r4, #268435456	; 0x10000000
 8002fd8:	f444 4400 	orr.w	r4, r4, #32768	; 0x8000
 8002fdc:	f8c0 4900 	str.w	r4, [r0, #2304]	; 0x900
 8002fe0:	e7da      	b.n	8002f98 <USB_ActivateEndpoint+0x4a>
	...

08002fe4 <USB_DeactivateEndpoint>:
{
 8002fe4:	b430      	push	{r4, r5}
  uint32_t epnum = (uint32_t)ep->num;
 8002fe6:	780b      	ldrb	r3, [r1, #0]
  if (ep->is_in == 1U)
 8002fe8:	784a      	ldrb	r2, [r1, #1]
 8002fea:	2a01      	cmp	r2, #1
 8002fec:	d024      	beq.n	8003038 <USB_DeactivateEndpoint+0x54>
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8002fee:	eb00 1343 	add.w	r3, r0, r3, lsl #5
 8002ff2:	f8d3 2b00 	ldr.w	r2, [r3, #2816]	; 0xb00
 8002ff6:	2a00      	cmp	r2, #0
 8002ff8:	db50      	blt.n	800309c <USB_DeactivateEndpoint+0xb8>
    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8002ffa:	f8d0 583c 	ldr.w	r5, [r0, #2108]	; 0x83c
 8002ffe:	780a      	ldrb	r2, [r1, #0]
 8003000:	f002 020f 	and.w	r2, r2, #15
 8003004:	2401      	movs	r4, #1
 8003006:	fa04 f202 	lsl.w	r2, r4, r2
 800300a:	ea25 4202 	bic.w	r2, r5, r2, lsl #16
 800300e:	f8c0 283c 	str.w	r2, [r0, #2108]	; 0x83c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8003012:	f8d0 281c 	ldr.w	r2, [r0, #2076]	; 0x81c
 8003016:	7809      	ldrb	r1, [r1, #0]
 8003018:	f001 010f 	and.w	r1, r1, #15
 800301c:	408c      	lsls	r4, r1
 800301e:	ea22 4404 	bic.w	r4, r2, r4, lsl #16
 8003022:	f8c0 481c 	str.w	r4, [r0, #2076]	; 0x81c
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 8003026:	f8d3 1b00 	ldr.w	r1, [r3, #2816]	; 0xb00
 800302a:	4a23      	ldr	r2, [pc, #140]	; (80030b8 <USB_DeactivateEndpoint+0xd4>)
 800302c:	400a      	ands	r2, r1
 800302e:	f8c3 2b00 	str.w	r2, [r3, #2816]	; 0xb00
}
 8003032:	2000      	movs	r0, #0
 8003034:	bc30      	pop	{r4, r5}
 8003036:	4770      	bx	lr
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8003038:	eb00 1343 	add.w	r3, r0, r3, lsl #5
 800303c:	f8d3 2900 	ldr.w	r2, [r3, #2304]	; 0x900
 8003040:	2a00      	cmp	r2, #0
 8003042:	db1e      	blt.n	8003082 <USB_DeactivateEndpoint+0x9e>
    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8003044:	f8d0 583c 	ldr.w	r5, [r0, #2108]	; 0x83c
 8003048:	780a      	ldrb	r2, [r1, #0]
 800304a:	f002 020f 	and.w	r2, r2, #15
 800304e:	2401      	movs	r4, #1
 8003050:	fa04 f202 	lsl.w	r2, r4, r2
 8003054:	b292      	uxth	r2, r2
 8003056:	ea25 0202 	bic.w	r2, r5, r2
 800305a:	f8c0 283c 	str.w	r2, [r0, #2108]	; 0x83c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 800305e:	f8d0 281c 	ldr.w	r2, [r0, #2076]	; 0x81c
 8003062:	7809      	ldrb	r1, [r1, #0]
 8003064:	f001 010f 	and.w	r1, r1, #15
 8003068:	408c      	lsls	r4, r1
 800306a:	b2a4      	uxth	r4, r4
 800306c:	ea22 0404 	bic.w	r4, r2, r4
 8003070:	f8c0 481c 	str.w	r4, [r0, #2076]	; 0x81c
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 8003074:	f8d3 1900 	ldr.w	r1, [r3, #2304]	; 0x900
 8003078:	4a10      	ldr	r2, [pc, #64]	; (80030bc <USB_DeactivateEndpoint+0xd8>)
 800307a:	400a      	ands	r2, r1
 800307c:	f8c3 2900 	str.w	r2, [r3, #2304]	; 0x900
 8003080:	e7d7      	b.n	8003032 <USB_DeactivateEndpoint+0x4e>
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8003082:	f8d3 2900 	ldr.w	r2, [r3, #2304]	; 0x900
 8003086:	f042 6200 	orr.w	r2, r2, #134217728	; 0x8000000
 800308a:	f8c3 2900 	str.w	r2, [r3, #2304]	; 0x900
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 800308e:	f8d3 2900 	ldr.w	r2, [r3, #2304]	; 0x900
 8003092:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8003096:	f8c3 2900 	str.w	r2, [r3, #2304]	; 0x900
 800309a:	e7d3      	b.n	8003044 <USB_DeactivateEndpoint+0x60>
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 800309c:	f8d3 2b00 	ldr.w	r2, [r3, #2816]	; 0xb00
 80030a0:	f042 6200 	orr.w	r2, r2, #134217728	; 0x8000000
 80030a4:	f8c3 2b00 	str.w	r2, [r3, #2816]	; 0xb00
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 80030a8:	f8d3 2b00 	ldr.w	r2, [r3, #2816]	; 0xb00
 80030ac:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 80030b0:	f8c3 2b00 	str.w	r2, [r3, #2816]	; 0xb00
 80030b4:	e7a1      	b.n	8002ffa <USB_DeactivateEndpoint+0x16>
 80030b6:	bf00      	nop
 80030b8:	eff37800 	.word	0xeff37800
 80030bc:	ec337800 	.word	0xec337800

080030c0 <USB_EP0StartXfer>:
{
 80030c0:	b470      	push	{r4, r5, r6}
  uint32_t epnum = (uint32_t)ep->num;
 80030c2:	780b      	ldrb	r3, [r1, #0]
  if (ep->is_in == 1U)
 80030c4:	784c      	ldrb	r4, [r1, #1]
 80030c6:	2c01      	cmp	r4, #1
 80030c8:	d026      	beq.n	8003118 <USB_EP0StartXfer+0x58>
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 80030ca:	eb00 1043 	add.w	r0, r0, r3, lsl #5
 80030ce:	f500 6330 	add.w	r3, r0, #2816	; 0xb00
 80030d2:	691c      	ldr	r4, [r3, #16]
 80030d4:	0ce4      	lsrs	r4, r4, #19
 80030d6:	04e4      	lsls	r4, r4, #19
 80030d8:	611c      	str	r4, [r3, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 80030da:	691c      	ldr	r4, [r3, #16]
 80030dc:	f024 54ff 	bic.w	r4, r4, #534773760	; 0x1fe00000
 80030e0:	f424 14c0 	bic.w	r4, r4, #1572864	; 0x180000
 80030e4:	611c      	str	r4, [r3, #16]
    if (ep->xfer_len > 0U)
 80030e6:	694c      	ldr	r4, [r1, #20]
 80030e8:	b10c      	cbz	r4, 80030ee <USB_EP0StartXfer+0x2e>
      ep->xfer_len = ep->maxpacket;
 80030ea:	688c      	ldr	r4, [r1, #8]
 80030ec:	614c      	str	r4, [r1, #20]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 80030ee:	691c      	ldr	r4, [r3, #16]
 80030f0:	f444 2400 	orr.w	r4, r4, #524288	; 0x80000
 80030f4:	611c      	str	r4, [r3, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket));
 80030f6:	691c      	ldr	r4, [r3, #16]
 80030f8:	688d      	ldr	r5, [r1, #8]
 80030fa:	f3c5 0512 	ubfx	r5, r5, #0, #19
 80030fe:	432c      	orrs	r4, r5
 8003100:	611c      	str	r4, [r3, #16]
    if (dma == 1U)
 8003102:	2a01      	cmp	r2, #1
 8003104:	d065      	beq.n	80031d2 <USB_EP0StartXfer+0x112>
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8003106:	f8d0 3b00 	ldr.w	r3, [r0, #2816]	; 0xb00
 800310a:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800310e:	f8c0 3b00 	str.w	r3, [r0, #2816]	; 0xb00
}
 8003112:	2000      	movs	r0, #0
 8003114:	bc70      	pop	{r4, r5, r6}
 8003116:	4770      	bx	lr
    if (ep->xfer_len == 0U)
 8003118:	694c      	ldr	r4, [r1, #20]
 800311a:	bb6c      	cbnz	r4, 8003178 <USB_EP0StartXfer+0xb8>
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800311c:	eb00 1443 	add.w	r4, r0, r3, lsl #5
 8003120:	f8d4 5910 	ldr.w	r5, [r4, #2320]	; 0x910
 8003124:	f025 55ff 	bic.w	r5, r5, #534773760	; 0x1fe00000
 8003128:	f425 15c0 	bic.w	r5, r5, #1572864	; 0x180000
 800312c:	f8c4 5910 	str.w	r5, [r4, #2320]	; 0x910
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8003130:	f8d4 5910 	ldr.w	r5, [r4, #2320]	; 0x910
 8003134:	f445 2500 	orr.w	r5, r5, #524288	; 0x80000
 8003138:	f8c4 5910 	str.w	r5, [r4, #2320]	; 0x910
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800313c:	f8d4 5910 	ldr.w	r5, [r4, #2320]	; 0x910
 8003140:	0ced      	lsrs	r5, r5, #19
 8003142:	04ed      	lsls	r5, r5, #19
 8003144:	f8c4 5910 	str.w	r5, [r4, #2320]	; 0x910
    if (dma == 1U)
 8003148:	2a01      	cmp	r2, #1
 800314a:	d033      	beq.n	80031b4 <USB_EP0StartXfer+0xf4>
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800314c:	eb00 1343 	add.w	r3, r0, r3, lsl #5
 8003150:	f8d3 2900 	ldr.w	r2, [r3, #2304]	; 0x900
 8003154:	f042 4204 	orr.w	r2, r2, #2214592512	; 0x84000000
 8003158:	f8c3 2900 	str.w	r2, [r3, #2304]	; 0x900
      if (ep->xfer_len > 0U)
 800315c:	694b      	ldr	r3, [r1, #20]
 800315e:	2b00      	cmp	r3, #0
 8003160:	d0d7      	beq.n	8003112 <USB_EP0StartXfer+0x52>
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8003162:	f8d0 3834 	ldr.w	r3, [r0, #2100]	; 0x834
 8003166:	780a      	ldrb	r2, [r1, #0]
 8003168:	f002 010f 	and.w	r1, r2, #15
 800316c:	2201      	movs	r2, #1
 800316e:	408a      	lsls	r2, r1
 8003170:	4313      	orrs	r3, r2
 8003172:	f8c0 3834 	str.w	r3, [r0, #2100]	; 0x834
 8003176:	e7cc      	b.n	8003112 <USB_EP0StartXfer+0x52>
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8003178:	eb00 1443 	add.w	r4, r0, r3, lsl #5
 800317c:	f504 6410 	add.w	r4, r4, #2304	; 0x900
 8003180:	6925      	ldr	r5, [r4, #16]
 8003182:	0ced      	lsrs	r5, r5, #19
 8003184:	04ed      	lsls	r5, r5, #19
 8003186:	6125      	str	r5, [r4, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8003188:	6925      	ldr	r5, [r4, #16]
 800318a:	f025 55ff 	bic.w	r5, r5, #534773760	; 0x1fe00000
 800318e:	f425 15c0 	bic.w	r5, r5, #1572864	; 0x180000
 8003192:	6125      	str	r5, [r4, #16]
      if (ep->xfer_len > ep->maxpacket)
 8003194:	694e      	ldr	r6, [r1, #20]
 8003196:	688d      	ldr	r5, [r1, #8]
 8003198:	42ae      	cmp	r6, r5
 800319a:	d900      	bls.n	800319e <USB_EP0StartXfer+0xde>
        ep->xfer_len = ep->maxpacket;
 800319c:	614d      	str	r5, [r1, #20]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800319e:	6925      	ldr	r5, [r4, #16]
 80031a0:	f445 2500 	orr.w	r5, r5, #524288	; 0x80000
 80031a4:	6125      	str	r5, [r4, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 80031a6:	6925      	ldr	r5, [r4, #16]
 80031a8:	694e      	ldr	r6, [r1, #20]
 80031aa:	f3c6 0612 	ubfx	r6, r6, #0, #19
 80031ae:	4335      	orrs	r5, r6
 80031b0:	6125      	str	r5, [r4, #16]
 80031b2:	e7c9      	b.n	8003148 <USB_EP0StartXfer+0x88>
      if ((uint32_t)ep->dma_addr != 0U)
 80031b4:	690a      	ldr	r2, [r1, #16]
 80031b6:	b11a      	cbz	r2, 80031c0 <USB_EP0StartXfer+0x100>
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 80031b8:	eb00 1143 	add.w	r1, r0, r3, lsl #5
 80031bc:	f8c1 2914 	str.w	r2, [r1, #2324]	; 0x914
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 80031c0:	eb00 1043 	add.w	r0, r0, r3, lsl #5
 80031c4:	f8d0 2900 	ldr.w	r2, [r0, #2304]	; 0x900
 80031c8:	f042 4204 	orr.w	r2, r2, #2214592512	; 0x84000000
 80031cc:	f8c0 2900 	str.w	r2, [r0, #2304]	; 0x900
 80031d0:	e79f      	b.n	8003112 <USB_EP0StartXfer+0x52>
      if ((uint32_t)ep->xfer_buff != 0U)
 80031d2:	68ca      	ldr	r2, [r1, #12]
 80031d4:	2a00      	cmp	r2, #0
 80031d6:	d096      	beq.n	8003106 <USB_EP0StartXfer+0x46>
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 80031d8:	615a      	str	r2, [r3, #20]
 80031da:	e794      	b.n	8003106 <USB_EP0StartXfer+0x46>

080031dc <USB_WritePacket>:
{
 80031dc:	b470      	push	{r4, r5, r6}
 80031de:	f89d 400c 	ldrb.w	r4, [sp, #12]
  if (dma == 0U)
 80031e2:	b964      	cbnz	r4, 80031fe <USB_WritePacket+0x22>
    count32b = ((uint32_t)len + 3U) / 4U;
 80031e4:	3303      	adds	r3, #3
 80031e6:	089d      	lsrs	r5, r3, #2
    for (i = 0U; i < count32b; i++)
 80031e8:	42ac      	cmp	r4, r5
 80031ea:	d208      	bcs.n	80031fe <USB_WritePacket+0x22>
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 80031ec:	eb00 3302 	add.w	r3, r0, r2, lsl #12
 80031f0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80031f4:	f851 6b04 	ldr.w	r6, [r1], #4
 80031f8:	601e      	str	r6, [r3, #0]
    for (i = 0U; i < count32b; i++)
 80031fa:	3401      	adds	r4, #1
 80031fc:	e7f4      	b.n	80031e8 <USB_WritePacket+0xc>
}
 80031fe:	2000      	movs	r0, #0
 8003200:	bc70      	pop	{r4, r5, r6}
 8003202:	4770      	bx	lr

08003204 <USB_EPStartXfer>:
{
 8003204:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003206:	b083      	sub	sp, #12
  uint32_t epnum = (uint32_t)ep->num;
 8003208:	780b      	ldrb	r3, [r1, #0]
  if (ep->is_in == 1U)
 800320a:	784c      	ldrb	r4, [r1, #1]
 800320c:	2c01      	cmp	r4, #1
 800320e:	d02b      	beq.n	8003268 <USB_EPStartXfer+0x64>
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8003210:	eb00 1343 	add.w	r3, r0, r3, lsl #5
 8003214:	f503 6430 	add.w	r4, r3, #2816	; 0xb00
 8003218:	6925      	ldr	r5, [r4, #16]
 800321a:	0ced      	lsrs	r5, r5, #19
 800321c:	04ed      	lsls	r5, r5, #19
 800321e:	6125      	str	r5, [r4, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8003220:	6925      	ldr	r5, [r4, #16]
 8003222:	f025 55ff 	bic.w	r5, r5, #534773760	; 0x1fe00000
 8003226:	f425 15c0 	bic.w	r5, r5, #1572864	; 0x180000
 800322a:	6125      	str	r5, [r4, #16]
    if (ep->xfer_len == 0U)
 800322c:	694d      	ldr	r5, [r1, #20]
 800322e:	2d00      	cmp	r5, #0
 8003230:	f040 80c3 	bne.w	80033ba <USB_EPStartXfer+0x1b6>
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 8003234:	6925      	ldr	r5, [r4, #16]
 8003236:	688e      	ldr	r6, [r1, #8]
 8003238:	f3c6 0612 	ubfx	r6, r6, #0, #19
 800323c:	4335      	orrs	r5, r6
 800323e:	6125      	str	r5, [r4, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8003240:	6925      	ldr	r5, [r4, #16]
 8003242:	f445 2500 	orr.w	r5, r5, #524288	; 0x80000
 8003246:	6125      	str	r5, [r4, #16]
    if (dma == 1U)
 8003248:	2a01      	cmp	r2, #1
 800324a:	f000 80cb 	beq.w	80033e4 <USB_EPStartXfer+0x1e0>
    if (ep->type == EP_TYPE_ISOC)
 800324e:	78ca      	ldrb	r2, [r1, #3]
 8003250:	2a01      	cmp	r2, #1
 8003252:	f000 80cd 	beq.w	80033f0 <USB_EPStartXfer+0x1ec>
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8003256:	f8d3 2b00 	ldr.w	r2, [r3, #2816]	; 0xb00
 800325a:	f042 4204 	orr.w	r2, r2, #2214592512	; 0x84000000
 800325e:	f8c3 2b00 	str.w	r2, [r3, #2816]	; 0xb00
}
 8003262:	2000      	movs	r0, #0
 8003264:	b003      	add	sp, #12
 8003266:	bdf0      	pop	{r4, r5, r6, r7, pc}
    if (ep->xfer_len == 0U)
 8003268:	694c      	ldr	r4, [r1, #20]
 800326a:	bb84      	cbnz	r4, 80032ce <USB_EPStartXfer+0xca>
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800326c:	eb00 1443 	add.w	r4, r0, r3, lsl #5
 8003270:	f8d4 5910 	ldr.w	r5, [r4, #2320]	; 0x910
 8003274:	f025 55ff 	bic.w	r5, r5, #534773760	; 0x1fe00000
 8003278:	f425 15c0 	bic.w	r5, r5, #1572864	; 0x180000
 800327c:	f8c4 5910 	str.w	r5, [r4, #2320]	; 0x910
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8003280:	f8d4 5910 	ldr.w	r5, [r4, #2320]	; 0x910
 8003284:	f445 2500 	orr.w	r5, r5, #524288	; 0x80000
 8003288:	f8c4 5910 	str.w	r5, [r4, #2320]	; 0x910
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800328c:	f8d4 5910 	ldr.w	r5, [r4, #2320]	; 0x910
 8003290:	0ced      	lsrs	r5, r5, #19
 8003292:	04ed      	lsls	r5, r5, #19
 8003294:	f8c4 5910 	str.w	r5, [r4, #2320]	; 0x910
    if (dma == 1U)
 8003298:	2a01      	cmp	r2, #1
 800329a:	d04c      	beq.n	8003336 <USB_EPStartXfer+0x132>
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800329c:	eb00 1343 	add.w	r3, r0, r3, lsl #5
 80032a0:	f8d3 4900 	ldr.w	r4, [r3, #2304]	; 0x900
 80032a4:	f044 4404 	orr.w	r4, r4, #2214592512	; 0x84000000
 80032a8:	f8c3 4900 	str.w	r4, [r3, #2304]	; 0x900
      if (ep->type != EP_TYPE_ISOC)
 80032ac:	78cc      	ldrb	r4, [r1, #3]
 80032ae:	2c01      	cmp	r4, #1
 80032b0:	d06a      	beq.n	8003388 <USB_EPStartXfer+0x184>
        if (ep->xfer_len > 0U)
 80032b2:	694b      	ldr	r3, [r1, #20]
 80032b4:	2b00      	cmp	r3, #0
 80032b6:	d0d4      	beq.n	8003262 <USB_EPStartXfer+0x5e>
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 80032b8:	f8d0 2834 	ldr.w	r2, [r0, #2100]	; 0x834
 80032bc:	7809      	ldrb	r1, [r1, #0]
 80032be:	f001 040f 	and.w	r4, r1, #15
 80032c2:	2101      	movs	r1, #1
 80032c4:	40a1      	lsls	r1, r4
 80032c6:	430a      	orrs	r2, r1
 80032c8:	f8c0 2834 	str.w	r2, [r0, #2100]	; 0x834
 80032cc:	e7c9      	b.n	8003262 <USB_EPStartXfer+0x5e>
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80032ce:	eb00 1443 	add.w	r4, r0, r3, lsl #5
 80032d2:	f8d4 5910 	ldr.w	r5, [r4, #2320]	; 0x910
 80032d6:	0ced      	lsrs	r5, r5, #19
 80032d8:	04ed      	lsls	r5, r5, #19
 80032da:	f8c4 5910 	str.w	r5, [r4, #2320]	; 0x910
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 80032de:	f8d4 5910 	ldr.w	r5, [r4, #2320]	; 0x910
 80032e2:	f025 55ff 	bic.w	r5, r5, #534773760	; 0x1fe00000
 80032e6:	f425 15c0 	bic.w	r5, r5, #1572864	; 0x180000
 80032ea:	f8c4 5910 	str.w	r5, [r4, #2320]	; 0x910
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 80032ee:	f8d4 6910 	ldr.w	r6, [r4, #2320]	; 0x910
                                     (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 80032f2:	694d      	ldr	r5, [r1, #20]
 80032f4:	688f      	ldr	r7, [r1, #8]
 80032f6:	443d      	add	r5, r7
 80032f8:	3d01      	subs	r5, #1
 80032fa:	fbb5 f5f7 	udiv	r5, r5, r7
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 80032fe:	4f46      	ldr	r7, [pc, #280]	; (8003418 <USB_EPStartXfer+0x214>)
 8003300:	ea07 45c5 	and.w	r5, r7, r5, lsl #19
 8003304:	4335      	orrs	r5, r6
 8003306:	f8c4 5910 	str.w	r5, [r4, #2320]	; 0x910
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 800330a:	f8d4 5910 	ldr.w	r5, [r4, #2320]	; 0x910
 800330e:	694e      	ldr	r6, [r1, #20]
 8003310:	f3c6 0612 	ubfx	r6, r6, #0, #19
 8003314:	4335      	orrs	r5, r6
 8003316:	f8c4 5910 	str.w	r5, [r4, #2320]	; 0x910
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800331a:	f504 6410 	add.w	r4, r4, #2304	; 0x900
      if (ep->type == EP_TYPE_ISOC)
 800331e:	78cd      	ldrb	r5, [r1, #3]
 8003320:	2d01      	cmp	r5, #1
 8003322:	d1b9      	bne.n	8003298 <USB_EPStartXfer+0x94>
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 8003324:	6925      	ldr	r5, [r4, #16]
 8003326:	f025 45c0 	bic.w	r5, r5, #1610612736	; 0x60000000
 800332a:	6125      	str	r5, [r4, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 800332c:	6925      	ldr	r5, [r4, #16]
 800332e:	f045 5500 	orr.w	r5, r5, #536870912	; 0x20000000
 8003332:	6125      	str	r5, [r4, #16]
 8003334:	e7b0      	b.n	8003298 <USB_EPStartXfer+0x94>
      if ((uint32_t)ep->dma_addr != 0U)
 8003336:	690a      	ldr	r2, [r1, #16]
 8003338:	b11a      	cbz	r2, 8003342 <USB_EPStartXfer+0x13e>
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 800333a:	eb00 1443 	add.w	r4, r0, r3, lsl #5
 800333e:	f8c4 2914 	str.w	r2, [r4, #2324]	; 0x914
      if (ep->type == EP_TYPE_ISOC)
 8003342:	78ca      	ldrb	r2, [r1, #3]
 8003344:	2a01      	cmp	r2, #1
 8003346:	d008      	beq.n	800335a <USB_EPStartXfer+0x156>
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8003348:	eb00 1343 	add.w	r3, r0, r3, lsl #5
 800334c:	f8d3 2900 	ldr.w	r2, [r3, #2304]	; 0x900
 8003350:	f042 4204 	orr.w	r2, r2, #2214592512	; 0x84000000
 8003354:	f8c3 2900 	str.w	r2, [r3, #2304]	; 0x900
 8003358:	e783      	b.n	8003262 <USB_EPStartXfer+0x5e>
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800335a:	f8d0 2808 	ldr.w	r2, [r0, #2056]	; 0x808
 800335e:	f412 7f80 	tst.w	r2, #256	; 0x100
 8003362:	d108      	bne.n	8003376 <USB_EPStartXfer+0x172>
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8003364:	eb00 1143 	add.w	r1, r0, r3, lsl #5
 8003368:	f8d1 2900 	ldr.w	r2, [r1, #2304]	; 0x900
 800336c:	f042 5200 	orr.w	r2, r2, #536870912	; 0x20000000
 8003370:	f8c1 2900 	str.w	r2, [r1, #2304]	; 0x900
 8003374:	e7e8      	b.n	8003348 <USB_EPStartXfer+0x144>
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8003376:	eb00 1143 	add.w	r1, r0, r3, lsl #5
 800337a:	f8d1 2900 	ldr.w	r2, [r1, #2304]	; 0x900
 800337e:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8003382:	f8c1 2900 	str.w	r2, [r1, #2304]	; 0x900
 8003386:	e7df      	b.n	8003348 <USB_EPStartXfer+0x144>
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8003388:	f8d0 4808 	ldr.w	r4, [r0, #2056]	; 0x808
 800338c:	f414 7f80 	tst.w	r4, #256	; 0x100
 8003390:	d10c      	bne.n	80033ac <USB_EPStartXfer+0x1a8>
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8003392:	f8d3 4900 	ldr.w	r4, [r3, #2304]	; 0x900
 8003396:	f044 5400 	orr.w	r4, r4, #536870912	; 0x20000000
 800339a:	f8c3 4900 	str.w	r4, [r3, #2304]	; 0x900
        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 800339e:	9200      	str	r2, [sp, #0]
 80033a0:	8a8b      	ldrh	r3, [r1, #20]
 80033a2:	780a      	ldrb	r2, [r1, #0]
 80033a4:	68c9      	ldr	r1, [r1, #12]
 80033a6:	f7ff ff19 	bl	80031dc <USB_WritePacket>
 80033aa:	e75a      	b.n	8003262 <USB_EPStartXfer+0x5e>
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 80033ac:	f8d3 4900 	ldr.w	r4, [r3, #2304]	; 0x900
 80033b0:	f044 5480 	orr.w	r4, r4, #268435456	; 0x10000000
 80033b4:	f8c3 4900 	str.w	r4, [r3, #2304]	; 0x900
 80033b8:	e7f1      	b.n	800339e <USB_EPStartXfer+0x19a>
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 80033ba:	688e      	ldr	r6, [r1, #8]
 80033bc:	4435      	add	r5, r6
 80033be:	3d01      	subs	r5, #1
 80033c0:	fbb5 f5f6 	udiv	r5, r5, r6
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 80033c4:	6926      	ldr	r6, [r4, #16]
 80033c6:	4f14      	ldr	r7, [pc, #80]	; (8003418 <USB_EPStartXfer+0x214>)
 80033c8:	ea07 47c5 	and.w	r7, r7, r5, lsl #19
 80033cc:	433e      	orrs	r6, r7
 80033ce:	6126      	str	r6, [r4, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket * pktcnt);
 80033d0:	6927      	ldr	r7, [r4, #16]
 80033d2:	688e      	ldr	r6, [r1, #8]
 80033d4:	b2ad      	uxth	r5, r5
 80033d6:	fb06 f505 	mul.w	r5, r6, r5
 80033da:	f3c5 0512 	ubfx	r5, r5, #0, #19
 80033de:	433d      	orrs	r5, r7
 80033e0:	6125      	str	r5, [r4, #16]
 80033e2:	e731      	b.n	8003248 <USB_EPStartXfer+0x44>
      if ((uint32_t)ep->xfer_buff != 0U)
 80033e4:	68ca      	ldr	r2, [r1, #12]
 80033e6:	2a00      	cmp	r2, #0
 80033e8:	f43f af31 	beq.w	800324e <USB_EPStartXfer+0x4a>
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 80033ec:	6162      	str	r2, [r4, #20]
 80033ee:	e72e      	b.n	800324e <USB_EPStartXfer+0x4a>
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 80033f0:	f8d0 2808 	ldr.w	r2, [r0, #2056]	; 0x808
 80033f4:	f412 7f80 	tst.w	r2, #256	; 0x100
 80033f8:	d106      	bne.n	8003408 <USB_EPStartXfer+0x204>
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 80033fa:	f8d3 2b00 	ldr.w	r2, [r3, #2816]	; 0xb00
 80033fe:	f042 5200 	orr.w	r2, r2, #536870912	; 0x20000000
 8003402:	f8c3 2b00 	str.w	r2, [r3, #2816]	; 0xb00
 8003406:	e726      	b.n	8003256 <USB_EPStartXfer+0x52>
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 8003408:	f8d3 2b00 	ldr.w	r2, [r3, #2816]	; 0xb00
 800340c:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8003410:	f8c3 2b00 	str.w	r2, [r3, #2816]	; 0xb00
 8003414:	e71f      	b.n	8003256 <USB_EPStartXfer+0x52>
 8003416:	bf00      	nop
 8003418:	1ff80000 	.word	0x1ff80000

0800341c <USB_ReadPacket>:
{
 800341c:	b4f0      	push	{r4, r5, r6, r7}
 800341e:	b082      	sub	sp, #8
 8003420:	4607      	mov	r7, r0
 8003422:	4608      	mov	r0, r1
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003424:	463e      	mov	r6, r7
  uint32_t count32b = (uint32_t)len >> 2U;
 8003426:	0895      	lsrs	r5, r2, #2
  uint16_t remaining_bytes = len % 4U;
 8003428:	f002 0203 	and.w	r2, r2, #3
  for (i = 0U; i < count32b; i++)
 800342c:	2300      	movs	r3, #0
 800342e:	42ab      	cmp	r3, r5
 8003430:	d206      	bcs.n	8003440 <USB_ReadPacket+0x24>
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8003432:	f506 5480 	add.w	r4, r6, #4096	; 0x1000
 8003436:	6824      	ldr	r4, [r4, #0]
 8003438:	f840 4b04 	str.w	r4, [r0], #4
  for (i = 0U; i < count32b; i++)
 800343c:	3301      	adds	r3, #1
 800343e:	e7f6      	b.n	800342e <USB_ReadPacket+0x12>
  if (remaining_bytes != 0U)
 8003440:	b17a      	cbz	r2, 8003462 <USB_ReadPacket+0x46>
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 8003442:	f507 5780 	add.w	r7, r7, #4096	; 0x1000
 8003446:	683b      	ldr	r3, [r7, #0]
 8003448:	9301      	str	r3, [sp, #4]
    i = 0U;
 800344a:	2500      	movs	r5, #0
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 800344c:	b2eb      	uxtb	r3, r5
 800344e:	00dc      	lsls	r4, r3, #3
 8003450:	9b01      	ldr	r3, [sp, #4]
 8003452:	40e3      	lsrs	r3, r4
 8003454:	f800 3b01 	strb.w	r3, [r0], #1
      i++;
 8003458:	3501      	adds	r5, #1
      remaining_bytes--;
 800345a:	3a01      	subs	r2, #1
 800345c:	b292      	uxth	r2, r2
    } while (remaining_bytes != 0U);
 800345e:	2a00      	cmp	r2, #0
 8003460:	d1f4      	bne.n	800344c <USB_ReadPacket+0x30>
}
 8003462:	b002      	add	sp, #8
 8003464:	bcf0      	pop	{r4, r5, r6, r7}
 8003466:	4770      	bx	lr

08003468 <USB_EPSetStall>:
  uint32_t epnum = (uint32_t)ep->num;
 8003468:	780b      	ldrb	r3, [r1, #0]
  if (ep->is_in == 1U)
 800346a:	784a      	ldrb	r2, [r1, #1]
 800346c:	2a01      	cmp	r2, #1
 800346e:	d014      	beq.n	800349a <USB_EPSetStall+0x32>
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 8003470:	eb00 1043 	add.w	r0, r0, r3, lsl #5
 8003474:	f8d0 2b00 	ldr.w	r2, [r0, #2816]	; 0xb00
 8003478:	2a00      	cmp	r2, #0
 800347a:	db06      	blt.n	800348a <USB_EPSetStall+0x22>
 800347c:	b12b      	cbz	r3, 800348a <USB_EPSetStall+0x22>
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 800347e:	f8d0 3b00 	ldr.w	r3, [r0, #2816]	; 0xb00
 8003482:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8003486:	f8c0 3b00 	str.w	r3, [r0, #2816]	; 0xb00
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 800348a:	f8d0 3b00 	ldr.w	r3, [r0, #2816]	; 0xb00
 800348e:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8003492:	f8c0 3b00 	str.w	r3, [r0, #2816]	; 0xb00
}
 8003496:	2000      	movs	r0, #0
 8003498:	4770      	bx	lr
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 800349a:	eb00 1043 	add.w	r0, r0, r3, lsl #5
 800349e:	f8d0 2900 	ldr.w	r2, [r0, #2304]	; 0x900
 80034a2:	2a00      	cmp	r2, #0
 80034a4:	db06      	blt.n	80034b4 <USB_EPSetStall+0x4c>
 80034a6:	b12b      	cbz	r3, 80034b4 <USB_EPSetStall+0x4c>
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 80034a8:	f8d0 3900 	ldr.w	r3, [r0, #2304]	; 0x900
 80034ac:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80034b0:	f8c0 3900 	str.w	r3, [r0, #2304]	; 0x900
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 80034b4:	f8d0 3900 	ldr.w	r3, [r0, #2304]	; 0x900
 80034b8:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80034bc:	f8c0 3900 	str.w	r3, [r0, #2304]	; 0x900
 80034c0:	e7e9      	b.n	8003496 <USB_EPSetStall+0x2e>

080034c2 <USB_EPClearStall>:
  uint32_t epnum = (uint32_t)ep->num;
 80034c2:	780b      	ldrb	r3, [r1, #0]
  if (ep->is_in == 1U)
 80034c4:	784a      	ldrb	r2, [r1, #1]
 80034c6:	2a01      	cmp	r2, #1
 80034c8:	d00e      	beq.n	80034e8 <USB_EPClearStall+0x26>
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 80034ca:	eb00 1043 	add.w	r0, r0, r3, lsl #5
 80034ce:	f8d0 3b00 	ldr.w	r3, [r0, #2816]	; 0xb00
 80034d2:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80034d6:	f8c0 3b00 	str.w	r3, [r0, #2816]	; 0xb00
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 80034da:	78cb      	ldrb	r3, [r1, #3]
 80034dc:	3b02      	subs	r3, #2
 80034de:	b2db      	uxtb	r3, r3
 80034e0:	2b01      	cmp	r3, #1
 80034e2:	d915      	bls.n	8003510 <USB_EPClearStall+0x4e>
}
 80034e4:	2000      	movs	r0, #0
 80034e6:	4770      	bx	lr
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 80034e8:	eb00 1043 	add.w	r0, r0, r3, lsl #5
 80034ec:	f8d0 3900 	ldr.w	r3, [r0, #2304]	; 0x900
 80034f0:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80034f4:	f8c0 3900 	str.w	r3, [r0, #2304]	; 0x900
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 80034f8:	78cb      	ldrb	r3, [r1, #3]
 80034fa:	3b02      	subs	r3, #2
 80034fc:	b2db      	uxtb	r3, r3
 80034fe:	2b01      	cmp	r3, #1
 8003500:	d8f0      	bhi.n	80034e4 <USB_EPClearStall+0x22>
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8003502:	f8d0 3900 	ldr.w	r3, [r0, #2304]	; 0x900
 8003506:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800350a:	f8c0 3900 	str.w	r3, [r0, #2304]	; 0x900
 800350e:	e7e9      	b.n	80034e4 <USB_EPClearStall+0x22>
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8003510:	f8d0 3b00 	ldr.w	r3, [r0, #2816]	; 0xb00
 8003514:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003518:	f8c0 3b00 	str.w	r3, [r0, #2816]	; 0xb00
 800351c:	e7e2      	b.n	80034e4 <USB_EPClearStall+0x22>

0800351e <USB_SetDevAddress>:
  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 800351e:	f8d0 3800 	ldr.w	r3, [r0, #2048]	; 0x800
 8003522:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8003526:	f8c0 3800 	str.w	r3, [r0, #2048]	; 0x800
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 800352a:	f8d0 3800 	ldr.w	r3, [r0, #2048]	; 0x800
 800352e:	0109      	lsls	r1, r1, #4
 8003530:	f401 61fe 	and.w	r1, r1, #2032	; 0x7f0
 8003534:	4319      	orrs	r1, r3
 8003536:	f8c0 1800 	str.w	r1, [r0, #2048]	; 0x800
}
 800353a:	2000      	movs	r0, #0
 800353c:	4770      	bx	lr

0800353e <USB_DevConnect>:
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800353e:	f8d0 3e00 	ldr.w	r3, [r0, #3584]	; 0xe00
 8003542:	f023 0303 	bic.w	r3, r3, #3
 8003546:	f8c0 3e00 	str.w	r3, [r0, #3584]	; 0xe00
  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 800354a:	f8d0 3804 	ldr.w	r3, [r0, #2052]	; 0x804
 800354e:	f023 0302 	bic.w	r3, r3, #2
 8003552:	f8c0 3804 	str.w	r3, [r0, #2052]	; 0x804
}
 8003556:	2000      	movs	r0, #0
 8003558:	4770      	bx	lr

0800355a <USB_DevDisconnect>:
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800355a:	f8d0 3e00 	ldr.w	r3, [r0, #3584]	; 0xe00
 800355e:	f023 0303 	bic.w	r3, r3, #3
 8003562:	f8c0 3e00 	str.w	r3, [r0, #3584]	; 0xe00
  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8003566:	f8d0 3804 	ldr.w	r3, [r0, #2052]	; 0x804
 800356a:	f043 0302 	orr.w	r3, r3, #2
 800356e:	f8c0 3804 	str.w	r3, [r0, #2052]	; 0x804
}
 8003572:	2000      	movs	r0, #0
 8003574:	4770      	bx	lr

08003576 <USB_ReadInterrupts>:
  tmpreg = USBx->GINTSTS;
 8003576:	6942      	ldr	r2, [r0, #20]
  tmpreg &= USBx->GINTMSK;
 8003578:	6980      	ldr	r0, [r0, #24]
}
 800357a:	4010      	ands	r0, r2
 800357c:	4770      	bx	lr

0800357e <USB_ReadDevAllOutEpInterrupt>:
  tmpreg  = USBx_DEVICE->DAINT;
 800357e:	f8d0 3818 	ldr.w	r3, [r0, #2072]	; 0x818
 8003582:	f500 6000 	add.w	r0, r0, #2048	; 0x800
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8003586:	69c0      	ldr	r0, [r0, #28]
 8003588:	4018      	ands	r0, r3
}
 800358a:	0c00      	lsrs	r0, r0, #16
 800358c:	4770      	bx	lr

0800358e <USB_ReadDevAllInEpInterrupt>:
  tmpreg  = USBx_DEVICE->DAINT;
 800358e:	f8d0 3818 	ldr.w	r3, [r0, #2072]	; 0x818
 8003592:	f500 6000 	add.w	r0, r0, #2048	; 0x800
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8003596:	69c0      	ldr	r0, [r0, #28]
 8003598:	4018      	ands	r0, r3
}
 800359a:	b280      	uxth	r0, r0
 800359c:	4770      	bx	lr

0800359e <USB_ReadDevOutEPInterrupt>:
  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 800359e:	eb00 1141 	add.w	r1, r0, r1, lsl #5
 80035a2:	f8d1 2b08 	ldr.w	r2, [r1, #2824]	; 0xb08
  tmpreg &= USBx_DEVICE->DOEPMSK;
 80035a6:	f500 6000 	add.w	r0, r0, #2048	; 0x800
 80035aa:	6940      	ldr	r0, [r0, #20]
}
 80035ac:	4010      	ands	r0, r2
 80035ae:	4770      	bx	lr

080035b0 <USB_ReadDevInEPInterrupt>:
{
 80035b0:	b410      	push	{r4}
  msk = USBx_DEVICE->DIEPMSK;
 80035b2:	f8d0 4810 	ldr.w	r4, [r0, #2064]	; 0x810
  emp = USBx_DEVICE->DIEPEMPMSK;
 80035b6:	f8d0 3834 	ldr.w	r3, [r0, #2100]	; 0x834
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 80035ba:	f001 020f 	and.w	r2, r1, #15
 80035be:	40d3      	lsrs	r3, r2
 80035c0:	01db      	lsls	r3, r3, #7
 80035c2:	b2db      	uxtb	r3, r3
 80035c4:	4323      	orrs	r3, r4
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 80035c6:	eb00 1041 	add.w	r0, r0, r1, lsl #5
 80035ca:	f500 6010 	add.w	r0, r0, #2304	; 0x900
 80035ce:	6880      	ldr	r0, [r0, #8]
}
 80035d0:	4018      	ands	r0, r3
 80035d2:	f85d 4b04 	ldr.w	r4, [sp], #4
 80035d6:	4770      	bx	lr

080035d8 <USB_GetMode>:
  return ((USBx->GINTSTS) & 0x1U);
 80035d8:	6940      	ldr	r0, [r0, #20]
}
 80035da:	f000 0001 	and.w	r0, r0, #1
 80035de:	4770      	bx	lr

080035e0 <USB_SetCurrentMode>:
{
 80035e0:	b538      	push	{r3, r4, r5, lr}
 80035e2:	4605      	mov	r5, r0
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 80035e4:	68c3      	ldr	r3, [r0, #12]
 80035e6:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 80035ea:	60c3      	str	r3, [r0, #12]
  if (mode == USB_HOST_MODE)
 80035ec:	2901      	cmp	r1, #1
 80035ee:	d013      	beq.n	8003618 <USB_SetCurrentMode+0x38>
  else if (mode == USB_DEVICE_MODE)
 80035f0:	bb19      	cbnz	r1, 800363a <USB_SetCurrentMode+0x5a>
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 80035f2:	68c3      	ldr	r3, [r0, #12]
 80035f4:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80035f8:	60c3      	str	r3, [r0, #12]
  uint32_t ms = 0U;
 80035fa:	2400      	movs	r4, #0
      HAL_Delay(1U);
 80035fc:	2001      	movs	r0, #1
 80035fe:	f7fd fcdd 	bl	8000fbc <HAL_Delay>
      ms++;
 8003602:	3401      	adds	r4, #1
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 8003604:	4628      	mov	r0, r5
 8003606:	f7ff ffe7 	bl	80035d8 <USB_GetMode>
 800360a:	b108      	cbz	r0, 8003610 <USB_SetCurrentMode+0x30>
 800360c:	2c31      	cmp	r4, #49	; 0x31
 800360e:	d9f5      	bls.n	80035fc <USB_SetCurrentMode+0x1c>
  if (ms == 50U)
 8003610:	2c32      	cmp	r4, #50	; 0x32
 8003612:	d014      	beq.n	800363e <USB_SetCurrentMode+0x5e>
  return HAL_OK;
 8003614:	2000      	movs	r0, #0
}
 8003616:	bd38      	pop	{r3, r4, r5, pc}
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8003618:	68c3      	ldr	r3, [r0, #12]
 800361a:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800361e:	60c3      	str	r3, [r0, #12]
  uint32_t ms = 0U;
 8003620:	2400      	movs	r4, #0
      HAL_Delay(1U);
 8003622:	2001      	movs	r0, #1
 8003624:	f7fd fcca 	bl	8000fbc <HAL_Delay>
      ms++;
 8003628:	3401      	adds	r4, #1
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 800362a:	4628      	mov	r0, r5
 800362c:	f7ff ffd4 	bl	80035d8 <USB_GetMode>
 8003630:	2801      	cmp	r0, #1
 8003632:	d0ed      	beq.n	8003610 <USB_SetCurrentMode+0x30>
 8003634:	2c31      	cmp	r4, #49	; 0x31
 8003636:	d9f4      	bls.n	8003622 <USB_SetCurrentMode+0x42>
 8003638:	e7ea      	b.n	8003610 <USB_SetCurrentMode+0x30>
    return HAL_ERROR;
 800363a:	2001      	movs	r0, #1
 800363c:	e7eb      	b.n	8003616 <USB_SetCurrentMode+0x36>
    return HAL_ERROR;
 800363e:	2001      	movs	r0, #1
 8003640:	e7e9      	b.n	8003616 <USB_SetCurrentMode+0x36>

08003642 <USB_ActivateSetup>:
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 8003642:	f8d0 3900 	ldr.w	r3, [r0, #2304]	; 0x900
 8003646:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 800364a:	f023 0307 	bic.w	r3, r3, #7
 800364e:	f8c0 3900 	str.w	r3, [r0, #2304]	; 0x900
  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 8003652:	f8d0 3804 	ldr.w	r3, [r0, #2052]	; 0x804
 8003656:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800365a:	f8c0 3804 	str.w	r3, [r0, #2052]	; 0x804
}
 800365e:	2000      	movs	r0, #0
 8003660:	4770      	bx	lr
	...

08003664 <USB_EP0_OutStart>:
{
 8003664:	b410      	push	{r4}
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8003666:	6c04      	ldr	r4, [r0, #64]	; 0x40
  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 8003668:	4b15      	ldr	r3, [pc, #84]	; (80036c0 <USB_EP0_OutStart+0x5c>)
 800366a:	429c      	cmp	r4, r3
 800366c:	d903      	bls.n	8003676 <USB_EP0_OutStart+0x12>
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800366e:	f8d0 3b00 	ldr.w	r3, [r0, #2816]	; 0xb00
 8003672:	2b00      	cmp	r3, #0
 8003674:	db16      	blt.n	80036a4 <USB_EP0_OutStart+0x40>
  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 8003676:	2400      	movs	r4, #0
 8003678:	f8c0 4b10 	str.w	r4, [r0, #2832]	; 0xb10
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800367c:	f8d0 4b10 	ldr.w	r4, [r0, #2832]	; 0xb10
 8003680:	f444 2400 	orr.w	r4, r4, #524288	; 0x80000
 8003684:	f8c0 4b10 	str.w	r4, [r0, #2832]	; 0xb10
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 8003688:	f8d0 4b10 	ldr.w	r4, [r0, #2832]	; 0xb10
 800368c:	f044 0418 	orr.w	r4, r4, #24
 8003690:	f8c0 4b10 	str.w	r4, [r0, #2832]	; 0xb10
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 8003694:	f8d0 4b10 	ldr.w	r4, [r0, #2832]	; 0xb10
 8003698:	f044 44c0 	orr.w	r4, r4, #1610612736	; 0x60000000
 800369c:	f8c0 4b10 	str.w	r4, [r0, #2832]	; 0xb10
  if (dma == 1U)
 80036a0:	2901      	cmp	r1, #1
 80036a2:	d003      	beq.n	80036ac <USB_EP0_OutStart+0x48>
}
 80036a4:	2000      	movs	r0, #0
 80036a6:	f85d 4b04 	ldr.w	r4, [sp], #4
 80036aa:	4770      	bx	lr
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 80036ac:	f8c0 2b14 	str.w	r2, [r0, #2836]	; 0xb14
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 80036b0:	f8d0 3b00 	ldr.w	r3, [r0, #2816]	; 0xb00
 80036b4:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 80036b8:	f8c0 3b00 	str.w	r3, [r0, #2816]	; 0xb00
 80036bc:	e7f2      	b.n	80036a4 <USB_EP0_OutStart+0x40>
 80036be:	bf00      	nop
 80036c0:	4f54300a 	.word	0x4f54300a

080036c4 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 80036c4:	b510      	push	{r4, lr}
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 80036c6:	f8d0 42bc 	ldr.w	r4, [r0, #700]	; 0x2bc

  if (hcdc == NULL)
 80036ca:	b184      	cbz	r4, 80036ee <USBD_CDC_EP0_RxReady+0x2a>
  {
    return (uint8_t)USBD_FAIL;
  }

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 80036cc:	f8d0 32c0 	ldr.w	r3, [r0, #704]	; 0x2c0
 80036d0:	b17b      	cbz	r3, 80036f2 <USBD_CDC_EP0_RxReady+0x2e>
 80036d2:	f894 0200 	ldrb.w	r0, [r4, #512]	; 0x200
 80036d6:	28ff      	cmp	r0, #255	; 0xff
 80036d8:	d00d      	beq.n	80036f6 <USBD_CDC_EP0_RxReady+0x32>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 80036da:	689b      	ldr	r3, [r3, #8]
 80036dc:	f894 2201 	ldrb.w	r2, [r4, #513]	; 0x201
 80036e0:	4621      	mov	r1, r4
 80036e2:	4798      	blx	r3
                                                      (uint8_t *)hcdc->data,
                                                      (uint16_t)hcdc->CmdLength);
    hcdc->CmdOpCode = 0xFFU;
 80036e4:	23ff      	movs	r3, #255	; 0xff
 80036e6:	f884 3200 	strb.w	r3, [r4, #512]	; 0x200
  }

  return (uint8_t)USBD_OK;
 80036ea:	2000      	movs	r0, #0
}
 80036ec:	bd10      	pop	{r4, pc}
    return (uint8_t)USBD_FAIL;
 80036ee:	2003      	movs	r0, #3
 80036f0:	e7fc      	b.n	80036ec <USBD_CDC_EP0_RxReady+0x28>
  return (uint8_t)USBD_OK;
 80036f2:	2000      	movs	r0, #0
 80036f4:	e7fa      	b.n	80036ec <USBD_CDC_EP0_RxReady+0x28>
 80036f6:	2000      	movs	r0, #0
 80036f8:	e7f8      	b.n	80036ec <USBD_CDC_EP0_RxReady+0x28>
	...

080036fc <USBD_CDC_GetFSCfgDesc>:
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
  *length = (uint16_t)sizeof(USBD_CDC_CfgFSDesc);
 80036fc:	2343      	movs	r3, #67	; 0x43
 80036fe:	8003      	strh	r3, [r0, #0]

  return USBD_CDC_CfgFSDesc;
}
 8003700:	4800      	ldr	r0, [pc, #0]	; (8003704 <USBD_CDC_GetFSCfgDesc+0x8>)
 8003702:	4770      	bx	lr
 8003704:	200001b8 	.word	0x200001b8

08003708 <USBD_CDC_GetHSCfgDesc>:
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
  *length = (uint16_t)sizeof(USBD_CDC_CfgHSDesc);
 8003708:	2343      	movs	r3, #67	; 0x43
 800370a:	8003      	strh	r3, [r0, #0]

  return USBD_CDC_CfgHSDesc;
}
 800370c:	4800      	ldr	r0, [pc, #0]	; (8003710 <USBD_CDC_GetHSCfgDesc+0x8>)
 800370e:	4770      	bx	lr
 8003710:	200001fc 	.word	0x200001fc

08003714 <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
  *length = (uint16_t)sizeof(USBD_CDC_OtherSpeedCfgDesc);
 8003714:	2343      	movs	r3, #67	; 0x43
 8003716:	8003      	strh	r3, [r0, #0]

  return USBD_CDC_OtherSpeedCfgDesc;
}
 8003718:	4800      	ldr	r0, [pc, #0]	; (800371c <USBD_CDC_GetOtherSpeedCfgDesc+0x8>)
 800371a:	4770      	bx	lr
 800371c:	2000024c 	.word	0x2000024c

08003720 <USBD_CDC_GetDeviceQualifierDescriptor>:
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 8003720:	230a      	movs	r3, #10
 8003722:	8003      	strh	r3, [r0, #0]

  return USBD_CDC_DeviceQualifierDesc;
}
 8003724:	4800      	ldr	r0, [pc, #0]	; (8003728 <USBD_CDC_GetDeviceQualifierDescriptor+0x8>)
 8003726:	4770      	bx	lr
 8003728:	20000240 	.word	0x20000240

0800372c <USBD_CDC_DataOut>:
{
 800372c:	b538      	push	{r3, r4, r5, lr}
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800372e:	f8d0 52bc 	ldr.w	r5, [r0, #700]	; 0x2bc
  if (pdev->pClassData == NULL)
 8003732:	b175      	cbz	r5, 8003752 <USBD_CDC_DataOut+0x26>
 8003734:	4604      	mov	r4, r0
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 8003736:	f002 fb98 	bl	8005e6a <USBD_LL_GetRxDataSize>
 800373a:	f8c5 020c 	str.w	r0, [r5, #524]	; 0x20c
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 800373e:	f8d4 32c0 	ldr.w	r3, [r4, #704]	; 0x2c0
 8003742:	68db      	ldr	r3, [r3, #12]
 8003744:	f505 7103 	add.w	r1, r5, #524	; 0x20c
 8003748:	f8d5 0204 	ldr.w	r0, [r5, #516]	; 0x204
 800374c:	4798      	blx	r3
  return (uint8_t)USBD_OK;
 800374e:	2000      	movs	r0, #0
}
 8003750:	bd38      	pop	{r3, r4, r5, pc}
    return (uint8_t)USBD_FAIL;
 8003752:	2003      	movs	r0, #3
 8003754:	e7fc      	b.n	8003750 <USBD_CDC_DataOut+0x24>

08003756 <USBD_CDC_DataIn>:
{
 8003756:	b538      	push	{r3, r4, r5, lr}
  PCD_HandleTypeDef *hpcd = pdev->pData;
 8003758:	f8d0 42c4 	ldr.w	r4, [r0, #708]	; 0x2c4
  if (pdev->pClassData == NULL)
 800375c:	f8d0 32bc 	ldr.w	r3, [r0, #700]	; 0x2bc
 8003760:	b353      	cbz	r3, 80037b8 <USBD_CDC_DataIn+0x62>
  if ((pdev->ep_in[epnum].total_length > 0U) &&
 8003762:	eb01 0281 	add.w	r2, r1, r1, lsl #2
 8003766:	eb00 0282 	add.w	r2, r0, r2, lsl #2
 800376a:	6992      	ldr	r2, [r2, #24]
 800376c:	b14a      	cbz	r2, 8003782 <USBD_CDC_DataIn+0x2c>
      ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 800376e:	ebc1 05c1 	rsb	r5, r1, r1, lsl #3
 8003772:	eb04 0485 	add.w	r4, r4, r5, lsl #2
 8003776:	6c65      	ldr	r5, [r4, #68]	; 0x44
 8003778:	fbb2 f4f5 	udiv	r4, r2, r5
 800377c:	fb05 2214 	mls	r2, r5, r4, r2
  if ((pdev->ep_in[epnum].total_length > 0U) &&
 8003780:	b172      	cbz	r2, 80037a0 <USBD_CDC_DataIn+0x4a>
    hcdc->TxState = 0U;
 8003782:	2200      	movs	r2, #0
 8003784:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt != NULL)
 8003788:	f8d0 22c0 	ldr.w	r2, [r0, #704]	; 0x2c0
 800378c:	6914      	ldr	r4, [r2, #16]
 800378e:	b1ac      	cbz	r4, 80037bc <USBD_CDC_DataIn+0x66>
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 8003790:	460a      	mov	r2, r1
 8003792:	f503 7104 	add.w	r1, r3, #528	; 0x210
 8003796:	f8d3 0208 	ldr.w	r0, [r3, #520]	; 0x208
 800379a:	47a0      	blx	r4
  return (uint8_t)USBD_OK;
 800379c:	2000      	movs	r0, #0
}
 800379e:	bd38      	pop	{r3, r4, r5, pc}
    pdev->ep_in[epnum].total_length = 0U;
 80037a0:	eb01 0381 	add.w	r3, r1, r1, lsl #2
 80037a4:	eb00 0383 	add.w	r3, r0, r3, lsl #2
 80037a8:	2400      	movs	r4, #0
 80037aa:	619c      	str	r4, [r3, #24]
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 80037ac:	4623      	mov	r3, r4
 80037ae:	4622      	mov	r2, r4
 80037b0:	f002 fba4 	bl	8005efc <USBD_LL_Transmit>
  return (uint8_t)USBD_OK;
 80037b4:	4620      	mov	r0, r4
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 80037b6:	e7f2      	b.n	800379e <USBD_CDC_DataIn+0x48>
    return (uint8_t)USBD_FAIL;
 80037b8:	2003      	movs	r0, #3
 80037ba:	e7f0      	b.n	800379e <USBD_CDC_DataIn+0x48>
  return (uint8_t)USBD_OK;
 80037bc:	2000      	movs	r0, #0
 80037be:	e7ee      	b.n	800379e <USBD_CDC_DataIn+0x48>

080037c0 <USBD_CDC_Setup>:
{
 80037c0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80037c2:	b083      	sub	sp, #12
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 80037c4:	f8d0 62bc 	ldr.w	r6, [r0, #700]	; 0x2bc
  uint8_t ifalt = 0U;
 80037c8:	2300      	movs	r3, #0
 80037ca:	f88d 3007 	strb.w	r3, [sp, #7]
  uint16_t status_info = 0U;
 80037ce:	f8ad 3004 	strh.w	r3, [sp, #4]
  if (hcdc == NULL)
 80037d2:	2e00      	cmp	r6, #0
 80037d4:	d06c      	beq.n	80038b0 <USBD_CDC_Setup+0xf0>
 80037d6:	4607      	mov	r7, r0
 80037d8:	460c      	mov	r4, r1
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80037da:	780b      	ldrb	r3, [r1, #0]
 80037dc:	f013 0560 	ands.w	r5, r3, #96	; 0x60
 80037e0:	d02a      	beq.n	8003838 <USBD_CDC_Setup+0x78>
 80037e2:	2d20      	cmp	r5, #32
 80037e4:	d15e      	bne.n	80038a4 <USBD_CDC_Setup+0xe4>
      if (req->wLength != 0U)
 80037e6:	88ca      	ldrh	r2, [r1, #6]
 80037e8:	b1f2      	cbz	r2, 8003828 <USBD_CDC_Setup+0x68>
        if ((req->bmRequest & 0x80U) != 0U)
 80037ea:	f013 0f80 	tst.w	r3, #128	; 0x80
 80037ee:	d00f      	beq.n	8003810 <USBD_CDC_Setup+0x50>
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 80037f0:	f8d0 32c0 	ldr.w	r3, [r0, #704]	; 0x2c0
 80037f4:	689b      	ldr	r3, [r3, #8]
 80037f6:	4631      	mov	r1, r6
 80037f8:	7860      	ldrb	r0, [r4, #1]
 80037fa:	4798      	blx	r3
          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 80037fc:	88e2      	ldrh	r2, [r4, #6]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 80037fe:	2a07      	cmp	r2, #7
 8003800:	bf28      	it	cs
 8003802:	2207      	movcs	r2, #7
 8003804:	4631      	mov	r1, r6
 8003806:	4638      	mov	r0, r7
 8003808:	f000 fe10 	bl	800442c <USBD_CtlSendData>
  USBD_StatusTypeDef ret = USBD_OK;
 800380c:	2500      	movs	r5, #0
 800380e:	e04c      	b.n	80038aa <USBD_CDC_Setup+0xea>
          hcdc->CmdOpCode = req->bRequest;
 8003810:	784b      	ldrb	r3, [r1, #1]
 8003812:	f886 3200 	strb.w	r3, [r6, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)req->wLength;
 8003816:	798b      	ldrb	r3, [r1, #6]
 8003818:	f886 3201 	strb.w	r3, [r6, #513]	; 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, req->wLength);
 800381c:	88ca      	ldrh	r2, [r1, #6]
 800381e:	4631      	mov	r1, r6
 8003820:	f000 fe19 	bl	8004456 <USBD_CtlPrepareRx>
  USBD_StatusTypeDef ret = USBD_OK;
 8003824:	2500      	movs	r5, #0
 8003826:	e040      	b.n	80038aa <USBD_CDC_Setup+0xea>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8003828:	f8d0 32c0 	ldr.w	r3, [r0, #704]	; 0x2c0
 800382c:	689b      	ldr	r3, [r3, #8]
 800382e:	2200      	movs	r2, #0
 8003830:	7848      	ldrb	r0, [r1, #1]
 8003832:	4798      	blx	r3
  USBD_StatusTypeDef ret = USBD_OK;
 8003834:	2500      	movs	r5, #0
 8003836:	e038      	b.n	80038aa <USBD_CDC_Setup+0xea>
      switch (req->bRequest)
 8003838:	784e      	ldrb	r6, [r1, #1]
 800383a:	2e0b      	cmp	r6, #11
 800383c:	d82e      	bhi.n	800389c <USBD_CDC_Setup+0xdc>
 800383e:	e8df f006 	tbb	[pc, r6]
 8003842:	3406      	.short	0x3406
 8003844:	2d2d2d2d 	.word	0x2d2d2d2d
 8003848:	2d2d2d2d 	.word	0x2d2d2d2d
 800384c:	2415      	.short	0x2415
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800384e:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 8003852:	b2db      	uxtb	r3, r3
 8003854:	2b03      	cmp	r3, #3
 8003856:	d003      	beq.n	8003860 <USBD_CDC_Setup+0xa0>
            USBD_CtlError(pdev, req);
 8003858:	f000 fac1 	bl	8003dde <USBD_CtlError>
            ret = USBD_FAIL;
 800385c:	2503      	movs	r5, #3
 800385e:	e024      	b.n	80038aa <USBD_CDC_Setup+0xea>
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 8003860:	2202      	movs	r2, #2
 8003862:	a901      	add	r1, sp, #4
 8003864:	f000 fde2 	bl	800442c <USBD_CtlSendData>
  USBD_StatusTypeDef ret = USBD_OK;
 8003868:	4635      	mov	r5, r6
 800386a:	e01e      	b.n	80038aa <USBD_CDC_Setup+0xea>
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800386c:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 8003870:	b2db      	uxtb	r3, r3
 8003872:	2b03      	cmp	r3, #3
 8003874:	d003      	beq.n	800387e <USBD_CDC_Setup+0xbe>
            USBD_CtlError(pdev, req);
 8003876:	f000 fab2 	bl	8003dde <USBD_CtlError>
            ret = USBD_FAIL;
 800387a:	2503      	movs	r5, #3
 800387c:	e015      	b.n	80038aa <USBD_CDC_Setup+0xea>
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 800387e:	2201      	movs	r2, #1
 8003880:	f10d 0107 	add.w	r1, sp, #7
 8003884:	f000 fdd2 	bl	800442c <USBD_CtlSendData>
 8003888:	e00f      	b.n	80038aa <USBD_CDC_Setup+0xea>
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 800388a:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 800388e:	b2db      	uxtb	r3, r3
 8003890:	2b03      	cmp	r3, #3
 8003892:	d00a      	beq.n	80038aa <USBD_CDC_Setup+0xea>
            USBD_CtlError(pdev, req);
 8003894:	f000 faa3 	bl	8003dde <USBD_CtlError>
            ret = USBD_FAIL;
 8003898:	2503      	movs	r5, #3
 800389a:	e006      	b.n	80038aa <USBD_CDC_Setup+0xea>
          USBD_CtlError(pdev, req);
 800389c:	f000 fa9f 	bl	8003dde <USBD_CtlError>
          ret = USBD_FAIL;
 80038a0:	2503      	movs	r5, #3
          break;
 80038a2:	e002      	b.n	80038aa <USBD_CDC_Setup+0xea>
      USBD_CtlError(pdev, req);
 80038a4:	f000 fa9b 	bl	8003dde <USBD_CtlError>
      ret = USBD_FAIL;
 80038a8:	2503      	movs	r5, #3
}
 80038aa:	4628      	mov	r0, r5
 80038ac:	b003      	add	sp, #12
 80038ae:	bdf0      	pop	{r4, r5, r6, r7, pc}
    return (uint8_t)USBD_FAIL;
 80038b0:	2503      	movs	r5, #3
 80038b2:	e7fa      	b.n	80038aa <USBD_CDC_Setup+0xea>

080038b4 <USBD_CDC_DeInit>:
{
 80038b4:	b538      	push	{r3, r4, r5, lr}
 80038b6:	4604      	mov	r4, r0
  (void)USBD_LL_CloseEP(pdev, CDC_IN_EP);
 80038b8:	2181      	movs	r1, #129	; 0x81
 80038ba:	f002 faff 	bl	8005ebc <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 80038be:	2500      	movs	r5, #0
 80038c0:	8725      	strh	r5, [r4, #56]	; 0x38
  (void)USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 80038c2:	2101      	movs	r1, #1
 80038c4:	4620      	mov	r0, r4
 80038c6:	f002 faf9 	bl	8005ebc <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 80038ca:	f8a4 5178 	strh.w	r5, [r4, #376]	; 0x178
  (void)USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 80038ce:	2182      	movs	r1, #130	; 0x82
 80038d0:	4620      	mov	r0, r4
 80038d2:	f002 faf3 	bl	8005ebc <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 80038d6:	f8a4 504c 	strh.w	r5, [r4, #76]	; 0x4c
  pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = 0U;
 80038da:	f8a4 504e 	strh.w	r5, [r4, #78]	; 0x4e
  if (pdev->pClassData != NULL)
 80038de:	f8d4 32bc 	ldr.w	r3, [r4, #700]	; 0x2bc
 80038e2:	b14b      	cbz	r3, 80038f8 <USBD_CDC_DeInit+0x44>
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 80038e4:	f8d4 32c0 	ldr.w	r3, [r4, #704]	; 0x2c0
 80038e8:	685b      	ldr	r3, [r3, #4]
 80038ea:	4798      	blx	r3
    (void)USBD_free(pdev->pClassData);
 80038ec:	f8d4 02bc 	ldr.w	r0, [r4, #700]	; 0x2bc
 80038f0:	f002 fac6 	bl	8005e80 <USBD_static_free>
    pdev->pClassData = NULL;
 80038f4:	f8c4 52bc 	str.w	r5, [r4, #700]	; 0x2bc
}
 80038f8:	2000      	movs	r0, #0
 80038fa:	bd38      	pop	{r3, r4, r5, pc}

080038fc <USBD_CDC_Init>:
{
 80038fc:	b570      	push	{r4, r5, r6, lr}
 80038fe:	4604      	mov	r4, r0
  hcdc = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 8003900:	f44f 7007 	mov.w	r0, #540	; 0x21c
 8003904:	f002 fab8 	bl	8005e78 <USBD_static_malloc>
  if (hcdc == NULL)
 8003908:	b3b8      	cbz	r0, 800397a <USBD_CDC_Init+0x7e>
 800390a:	4606      	mov	r6, r0
  pdev->pClassData = (void *)hcdc;
 800390c:	f8c4 02bc 	str.w	r0, [r4, #700]	; 0x2bc
  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8003910:	7c23      	ldrb	r3, [r4, #16]
 8003912:	bbbb      	cbnz	r3, 8003984 <USBD_CDC_Init+0x88>
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8003914:	f44f 7300 	mov.w	r3, #512	; 0x200
 8003918:	2202      	movs	r2, #2
 800391a:	2181      	movs	r1, #129	; 0x81
 800391c:	4620      	mov	r0, r4
 800391e:	f002 fac2 	bl	8005ea6 <USBD_LL_OpenEP>
    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8003922:	2501      	movs	r5, #1
 8003924:	8725      	strh	r5, [r4, #56]	; 0x38
    (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8003926:	f44f 7300 	mov.w	r3, #512	; 0x200
 800392a:	2202      	movs	r2, #2
 800392c:	4629      	mov	r1, r5
 800392e:	4620      	mov	r0, r4
 8003930:	f002 fab9 	bl	8005ea6 <USBD_LL_OpenEP>
    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8003934:	f8a4 5178 	strh.w	r5, [r4, #376]	; 0x178
    pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_HS_BINTERVAL;
 8003938:	2310      	movs	r3, #16
 800393a:	f8a4 304e 	strh.w	r3, [r4, #78]	; 0x4e
  (void)USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 800393e:	2308      	movs	r3, #8
 8003940:	2203      	movs	r2, #3
 8003942:	2182      	movs	r1, #130	; 0x82
 8003944:	4620      	mov	r0, r4
 8003946:	f002 faae 	bl	8005ea6 <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 800394a:	2301      	movs	r3, #1
 800394c:	f8a4 304c 	strh.w	r3, [r4, #76]	; 0x4c
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 8003950:	f8d4 32c0 	ldr.w	r3, [r4, #704]	; 0x2c0
 8003954:	681b      	ldr	r3, [r3, #0]
 8003956:	4798      	blx	r3
  hcdc->TxState = 0U;
 8003958:	2300      	movs	r3, #0
 800395a:	f8c6 3214 	str.w	r3, [r6, #532]	; 0x214
  hcdc->RxState = 0U;
 800395e:	f8c6 3218 	str.w	r3, [r6, #536]	; 0x218
  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8003962:	7c25      	ldrb	r5, [r4, #16]
 8003964:	bb15      	cbnz	r5, 80039ac <USBD_CDC_Init+0xb0>
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8003966:	f44f 7300 	mov.w	r3, #512	; 0x200
 800396a:	f8d6 2204 	ldr.w	r2, [r6, #516]	; 0x204
 800396e:	2101      	movs	r1, #1
 8003970:	4620      	mov	r0, r4
 8003972:	f002 facb 	bl	8005f0c <USBD_LL_PrepareReceive>
}
 8003976:	4628      	mov	r0, r5
 8003978:	bd70      	pop	{r4, r5, r6, pc}
    pdev->pClassData = NULL;
 800397a:	2300      	movs	r3, #0
 800397c:	f8c4 32bc 	str.w	r3, [r4, #700]	; 0x2bc
    return (uint8_t)USBD_EMEM;
 8003980:	2502      	movs	r5, #2
 8003982:	e7f8      	b.n	8003976 <USBD_CDC_Init+0x7a>
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8003984:	2340      	movs	r3, #64	; 0x40
 8003986:	2202      	movs	r2, #2
 8003988:	2181      	movs	r1, #129	; 0x81
 800398a:	4620      	mov	r0, r4
 800398c:	f002 fa8b 	bl	8005ea6 <USBD_LL_OpenEP>
    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8003990:	2501      	movs	r5, #1
 8003992:	8725      	strh	r5, [r4, #56]	; 0x38
    (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8003994:	2340      	movs	r3, #64	; 0x40
 8003996:	2202      	movs	r2, #2
 8003998:	4629      	mov	r1, r5
 800399a:	4620      	mov	r0, r4
 800399c:	f002 fa83 	bl	8005ea6 <USBD_LL_OpenEP>
    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 80039a0:	f8a4 5178 	strh.w	r5, [r4, #376]	; 0x178
    pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_FS_BINTERVAL;
 80039a4:	2310      	movs	r3, #16
 80039a6:	f8a4 304e 	strh.w	r3, [r4, #78]	; 0x4e
 80039aa:	e7c8      	b.n	800393e <USBD_CDC_Init+0x42>
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 80039ac:	2340      	movs	r3, #64	; 0x40
 80039ae:	f8d6 2204 	ldr.w	r2, [r6, #516]	; 0x204
 80039b2:	2101      	movs	r1, #1
 80039b4:	4620      	mov	r0, r4
 80039b6:	f002 faa9 	bl	8005f0c <USBD_LL_PrepareReceive>
  return (uint8_t)USBD_OK;
 80039ba:	2500      	movs	r5, #0
 80039bc:	e7db      	b.n	8003976 <USBD_CDC_Init+0x7a>

080039be <USBD_CDC_RegisterInterface>:
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
  if (fops == NULL)
 80039be:	b119      	cbz	r1, 80039c8 <USBD_CDC_RegisterInterface+0xa>
  {
    return (uint8_t)USBD_FAIL;
  }

  pdev->pUserData = fops;
 80039c0:	f8c0 12c0 	str.w	r1, [r0, #704]	; 0x2c0

  return (uint8_t)USBD_OK;
 80039c4:	2000      	movs	r0, #0
 80039c6:	4770      	bx	lr
    return (uint8_t)USBD_FAIL;
 80039c8:	2003      	movs	r0, #3
}
 80039ca:	4770      	bx	lr

080039cc <USBD_CDC_SetTxBuffer>:
  * @retval status
  */
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 80039cc:	f8d0 32bc 	ldr.w	r3, [r0, #700]	; 0x2bc

  if (hcdc == NULL)
 80039d0:	b12b      	cbz	r3, 80039de <USBD_CDC_SetTxBuffer+0x12>
  {
    return (uint8_t)USBD_FAIL;
  }

  hcdc->TxBuffer = pbuff;
 80039d2:	f8c3 1208 	str.w	r1, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 80039d6:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return (uint8_t)USBD_OK;
 80039da:	2000      	movs	r0, #0
 80039dc:	4770      	bx	lr
    return (uint8_t)USBD_FAIL;
 80039de:	2003      	movs	r0, #3
}
 80039e0:	4770      	bx	lr

080039e2 <USBD_CDC_SetRxBuffer>:
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 80039e2:	f8d0 32bc 	ldr.w	r3, [r0, #700]	; 0x2bc

  if (hcdc == NULL)
 80039e6:	b11b      	cbz	r3, 80039f0 <USBD_CDC_SetRxBuffer+0xe>
  {
    return (uint8_t)USBD_FAIL;
  }

  hcdc->RxBuffer = pbuff;
 80039e8:	f8c3 1204 	str.w	r1, [r3, #516]	; 0x204

  return (uint8_t)USBD_OK;
 80039ec:	2000      	movs	r0, #0
 80039ee:	4770      	bx	lr
    return (uint8_t)USBD_FAIL;
 80039f0:	2003      	movs	r0, #3
}
 80039f2:	4770      	bx	lr

080039f4 <USBD_CDC_TransmitPacket>:
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 80039f4:	f8d0 22bc 	ldr.w	r2, [r0, #700]	; 0x2bc
  USBD_StatusTypeDef ret = USBD_BUSY;

  if (pdev->pClassData == NULL)
 80039f8:	b1a2      	cbz	r2, 8003a24 <USBD_CDC_TransmitPacket+0x30>
{
 80039fa:	b508      	push	{r3, lr}
  {
    return (uint8_t)USBD_FAIL;
  }

  if (hcdc->TxState == 0U)
 80039fc:	f8d2 3214 	ldr.w	r3, [r2, #532]	; 0x214
 8003a00:	b10b      	cbz	r3, 8003a06 <USBD_CDC_TransmitPacket+0x12>
  USBD_StatusTypeDef ret = USBD_BUSY;
 8003a02:	2001      	movs	r0, #1

    ret = USBD_OK;
  }

  return (uint8_t)ret;
}
 8003a04:	bd08      	pop	{r3, pc}
    hcdc->TxState = 1U;
 8003a06:	2301      	movs	r3, #1
 8003a08:	f8c2 3214 	str.w	r3, [r2, #532]	; 0x214
    pdev->ep_in[CDC_IN_EP & 0xFU].total_length = hcdc->TxLength;
 8003a0c:	f8d2 3210 	ldr.w	r3, [r2, #528]	; 0x210
 8003a10:	62c3      	str	r3, [r0, #44]	; 0x2c
    (void)USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer, hcdc->TxLength);
 8003a12:	f8d2 3210 	ldr.w	r3, [r2, #528]	; 0x210
 8003a16:	f8d2 2208 	ldr.w	r2, [r2, #520]	; 0x208
 8003a1a:	2181      	movs	r1, #129	; 0x81
 8003a1c:	f002 fa6e 	bl	8005efc <USBD_LL_Transmit>
    ret = USBD_OK;
 8003a20:	2000      	movs	r0, #0
 8003a22:	e7ef      	b.n	8003a04 <USBD_CDC_TransmitPacket+0x10>
    return (uint8_t)USBD_FAIL;
 8003a24:	2003      	movs	r0, #3
}
 8003a26:	4770      	bx	lr

08003a28 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 8003a28:	b510      	push	{r4, lr}
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8003a2a:	f8d0 22bc 	ldr.w	r2, [r0, #700]	; 0x2bc

  if (pdev->pClassData == NULL)
 8003a2e:	b192      	cbz	r2, 8003a56 <USBD_CDC_ReceivePacket+0x2e>
  {
    return (uint8_t)USBD_FAIL;
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8003a30:	7c04      	ldrb	r4, [r0, #16]
 8003a32:	b944      	cbnz	r4, 8003a46 <USBD_CDC_ReceivePacket+0x1e>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8003a34:	f44f 7300 	mov.w	r3, #512	; 0x200
 8003a38:	f8d2 2204 	ldr.w	r2, [r2, #516]	; 0x204
 8003a3c:	2101      	movs	r1, #1
 8003a3e:	f002 fa65 	bl	8005f0c <USBD_LL_PrepareReceive>
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
}
 8003a42:	4620      	mov	r0, r4
 8003a44:	bd10      	pop	{r4, pc}
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8003a46:	2340      	movs	r3, #64	; 0x40
 8003a48:	f8d2 2204 	ldr.w	r2, [r2, #516]	; 0x204
 8003a4c:	2101      	movs	r1, #1
 8003a4e:	f002 fa5d 	bl	8005f0c <USBD_LL_PrepareReceive>
  return (uint8_t)USBD_OK;
 8003a52:	2400      	movs	r4, #0
 8003a54:	e7f5      	b.n	8003a42 <USBD_CDC_ReceivePacket+0x1a>
    return (uint8_t)USBD_FAIL;
 8003a56:	2403      	movs	r4, #3
 8003a58:	e7f3      	b.n	8003a42 <USBD_CDC_ReceivePacket+0x1a>

08003a5a <USBD_Init>:
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8003a5a:	b198      	cbz	r0, 8003a84 <USBD_Init+0x2a>
{
 8003a5c:	b508      	push	{r3, lr}
 8003a5e:	4603      	mov	r3, r0
#endif
    return USBD_FAIL;
  }

  /* Unlink previous class resources */
  pdev->pClass = NULL;
 8003a60:	2000      	movs	r0, #0
 8003a62:	f8c3 02b8 	str.w	r0, [r3, #696]	; 0x2b8
  pdev->pUserData = NULL;
 8003a66:	f8c3 02c0 	str.w	r0, [r3, #704]	; 0x2c0
  pdev->pConfDesc = NULL;
 8003a6a:	f8c3 02cc 	str.w	r0, [r3, #716]	; 0x2cc

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8003a6e:	b109      	cbz	r1, 8003a74 <USBD_Init+0x1a>
  {
    pdev->pDesc = pdesc;
 8003a70:	f8c3 12b4 	str.w	r1, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8003a74:	2101      	movs	r1, #1
 8003a76:	f883 129c 	strb.w	r1, [r3, #668]	; 0x29c
  pdev->id = id;
 8003a7a:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 8003a7c:	4618      	mov	r0, r3
 8003a7e:	f002 f9a9 	bl	8005dd4 <USBD_LL_Init>

  return ret;
}
 8003a82:	bd08      	pop	{r3, pc}
    return USBD_FAIL;
 8003a84:	2003      	movs	r0, #3
}
 8003a86:	4770      	bx	lr

08003a88 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8003a88:	b510      	push	{r4, lr}
 8003a8a:	b082      	sub	sp, #8
  uint16_t len = 0U;
 8003a8c:	2300      	movs	r3, #0
 8003a8e:	f8ad 3006 	strh.w	r3, [sp, #6]

  if (pclass == NULL)
 8003a92:	b161      	cbz	r1, 8003aae <USBD_RegisterClass+0x26>
 8003a94:	4604      	mov	r4, r0
#endif
    return USBD_FAIL;
  }

  /* link the class to the USB Device handle */
  pdev->pClass = pclass;
 8003a96:	f8c0 12b8 	str.w	r1, [r0, #696]	; 0x2b8
  if (pdev->pClass->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass->GetFSConfigDescriptor != NULL)
 8003a9a:	6acb      	ldr	r3, [r1, #44]	; 0x2c
 8003a9c:	b14b      	cbz	r3, 8003ab2 <USBD_RegisterClass+0x2a>
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetFSConfigDescriptor(&len);
 8003a9e:	f10d 0006 	add.w	r0, sp, #6
 8003aa2:	4798      	blx	r3
 8003aa4:	f8c4 02cc 	str.w	r0, [r4, #716]	; 0x2cc
  }
#endif /* USE_USB_FS */

  return USBD_OK;
 8003aa8:	2000      	movs	r0, #0
}
 8003aaa:	b002      	add	sp, #8
 8003aac:	bd10      	pop	{r4, pc}
    return USBD_FAIL;
 8003aae:	2003      	movs	r0, #3
 8003ab0:	e7fb      	b.n	8003aaa <USBD_RegisterClass+0x22>
  return USBD_OK;
 8003ab2:	2000      	movs	r0, #0
 8003ab4:	e7f9      	b.n	8003aaa <USBD_RegisterClass+0x22>

08003ab6 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 8003ab6:	b508      	push	{r3, lr}
  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 8003ab8:	f002 f9ed 	bl	8005e96 <USBD_LL_Start>
}
 8003abc:	bd08      	pop	{r3, pc}

08003abe <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8003abe:	b508      	push	{r3, lr}
  USBD_StatusTypeDef ret = USBD_FAIL;

  if (pdev->pClass != NULL)
 8003ac0:	f8d0 32b8 	ldr.w	r3, [r0, #696]	; 0x2b8
 8003ac4:	b113      	cbz	r3, 8003acc <USBD_SetClassConfig+0xe>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass->Init(pdev, cfgidx);
 8003ac6:	681b      	ldr	r3, [r3, #0]
 8003ac8:	4798      	blx	r3
  }

  return ret;
}
 8003aca:	bd08      	pop	{r3, pc}
  USBD_StatusTypeDef ret = USBD_FAIL;
 8003acc:	2003      	movs	r0, #3
 8003ace:	e7fc      	b.n	8003aca <USBD_SetClassConfig+0xc>

08003ad0 <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8003ad0:	b508      	push	{r3, lr}
  /* Clear configuration and De-initialize the Class process */
  if (pdev->pClass != NULL)
 8003ad2:	f8d0 32b8 	ldr.w	r3, [r0, #696]	; 0x2b8
 8003ad6:	b10b      	cbz	r3, 8003adc <USBD_ClrClassConfig+0xc>
  {
    pdev->pClass->DeInit(pdev, cfgidx);
 8003ad8:	685b      	ldr	r3, [r3, #4]
 8003ada:	4798      	blx	r3
  }

  return USBD_OK;
}
 8003adc:	2000      	movs	r0, #0
 8003ade:	bd08      	pop	{r3, pc}

08003ae0 <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8003ae0:	b538      	push	{r3, r4, r5, lr}
 8003ae2:	4604      	mov	r4, r0
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 8003ae4:	f200 25aa 	addw	r5, r0, #682	; 0x2aa
 8003ae8:	4628      	mov	r0, r5
 8003aea:	f000 f964 	bl	8003db6 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8003aee:	2301      	movs	r3, #1
 8003af0:	f8c4 3294 	str.w	r3, [r4, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 8003af4:	f8b4 32b0 	ldrh.w	r3, [r4, #688]	; 0x2b0
 8003af8:	f8c4 3298 	str.w	r3, [r4, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8003afc:	f894 12aa 	ldrb.w	r1, [r4, #682]	; 0x2aa
 8003b00:	f001 031f 	and.w	r3, r1, #31
 8003b04:	2b01      	cmp	r3, #1
 8003b06:	d00d      	beq.n	8003b24 <USBD_LL_SetupStage+0x44>
 8003b08:	2b02      	cmp	r3, #2
 8003b0a:	d010      	beq.n	8003b2e <USBD_LL_SetupStage+0x4e>
 8003b0c:	b12b      	cbz	r3, 8003b1a <USBD_LL_SetupStage+0x3a>
    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
      break;

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8003b0e:	f001 0180 	and.w	r1, r1, #128	; 0x80
 8003b12:	4620      	mov	r0, r4
 8003b14:	f002 f9da 	bl	8005ecc <USBD_LL_StallEP>
      break;
 8003b18:	e003      	b.n	8003b22 <USBD_LL_SetupStage+0x42>
      ret = USBD_StdDevReq(pdev, &pdev->request);
 8003b1a:	4629      	mov	r1, r5
 8003b1c:	4620      	mov	r0, r4
 8003b1e:	f000 fb08 	bl	8004132 <USBD_StdDevReq>
  }

  return ret;
}
 8003b22:	bd38      	pop	{r3, r4, r5, pc}
      ret = USBD_StdItfReq(pdev, &pdev->request);
 8003b24:	4629      	mov	r1, r5
 8003b26:	4620      	mov	r0, r4
 8003b28:	f000 fb3b 	bl	80041a2 <USBD_StdItfReq>
      break;
 8003b2c:	e7f9      	b.n	8003b22 <USBD_LL_SetupStage+0x42>
      ret = USBD_StdEPReq(pdev, &pdev->request);
 8003b2e:	4629      	mov	r1, r5
 8003b30:	4620      	mov	r0, r4
 8003b32:	f000 fb6a 	bl	800420a <USBD_StdEPReq>
      break;
 8003b36:	e7f4      	b.n	8003b22 <USBD_LL_SetupStage+0x42>

08003b38 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8003b38:	b538      	push	{r3, r4, r5, lr}
 8003b3a:	4604      	mov	r4, r0
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 8003b3c:	460d      	mov	r5, r1
 8003b3e:	bb41      	cbnz	r1, 8003b92 <USBD_LL_DataOutStage+0x5a>
 8003b40:	4613      	mov	r3, r2
  {
    pep = &pdev->ep_out[0];

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8003b42:	f8d0 2294 	ldr.w	r2, [r0, #660]	; 0x294
 8003b46:	2a03      	cmp	r2, #3
 8003b48:	d001      	beq.n	8003b4e <USBD_LL_DataOutStage+0x16>
        }
      }
    }
  }

  return USBD_OK;
 8003b4a:	4608      	mov	r0, r1
}
 8003b4c:	bd38      	pop	{r3, r4, r5, pc}
      if (pep->rem_length > pep->maxpacket)
 8003b4e:	f8d0 115c 	ldr.w	r1, [r0, #348]	; 0x15c
 8003b52:	f8d0 2160 	ldr.w	r2, [r0, #352]	; 0x160
 8003b56:	4291      	cmp	r1, r2
 8003b58:	d809      	bhi.n	8003b6e <USBD_LL_DataOutStage+0x36>
        if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8003b5a:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 8003b5e:	b2db      	uxtb	r3, r3
 8003b60:	2b03      	cmp	r3, #3
 8003b62:	d00f      	beq.n	8003b84 <USBD_LL_DataOutStage+0x4c>
        (void)USBD_CtlSendStatus(pdev);
 8003b64:	4620      	mov	r0, r4
 8003b66:	f000 fc8d 	bl	8004484 <USBD_CtlSendStatus>
  return USBD_OK;
 8003b6a:	4628      	mov	r0, r5
 8003b6c:	e7ee      	b.n	8003b4c <USBD_LL_DataOutStage+0x14>
        pep->rem_length -= pep->maxpacket;
 8003b6e:	1a89      	subs	r1, r1, r2
 8003b70:	f8c0 115c 	str.w	r1, [r0, #348]	; 0x15c
        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 8003b74:	428a      	cmp	r2, r1
 8003b76:	bf28      	it	cs
 8003b78:	460a      	movcs	r2, r1
 8003b7a:	4619      	mov	r1, r3
 8003b7c:	f000 fc7a 	bl	8004474 <USBD_CtlContinueRx>
  return USBD_OK;
 8003b80:	4628      	mov	r0, r5
 8003b82:	e7e3      	b.n	8003b4c <USBD_LL_DataOutStage+0x14>
          if (pdev->pClass->EP0_RxReady != NULL)
 8003b84:	f8d0 32b8 	ldr.w	r3, [r0, #696]	; 0x2b8
 8003b88:	691b      	ldr	r3, [r3, #16]
 8003b8a:	2b00      	cmp	r3, #0
 8003b8c:	d0ea      	beq.n	8003b64 <USBD_LL_DataOutStage+0x2c>
            pdev->pClass->EP0_RxReady(pdev);
 8003b8e:	4798      	blx	r3
 8003b90:	e7e8      	b.n	8003b64 <USBD_LL_DataOutStage+0x2c>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8003b92:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 8003b96:	b2db      	uxtb	r3, r3
 8003b98:	2b03      	cmp	r3, #3
 8003b9a:	d001      	beq.n	8003ba0 <USBD_LL_DataOutStage+0x68>
  return USBD_OK;
 8003b9c:	2000      	movs	r0, #0
 8003b9e:	e7d5      	b.n	8003b4c <USBD_LL_DataOutStage+0x14>
      if (pdev->pClass->DataOut != NULL)
 8003ba0:	f8d0 32b8 	ldr.w	r3, [r0, #696]	; 0x2b8
 8003ba4:	699b      	ldr	r3, [r3, #24]
 8003ba6:	b10b      	cbz	r3, 8003bac <USBD_LL_DataOutStage+0x74>
        ret = (USBD_StatusTypeDef)pdev->pClass->DataOut(pdev, epnum);
 8003ba8:	4798      	blx	r3
        if (ret != USBD_OK)
 8003baa:	e7cf      	b.n	8003b4c <USBD_LL_DataOutStage+0x14>
  return USBD_OK;
 8003bac:	2000      	movs	r0, #0
 8003bae:	e7cd      	b.n	8003b4c <USBD_LL_DataOutStage+0x14>

08003bb0 <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8003bb0:	b538      	push	{r3, r4, r5, lr}
 8003bb2:	4604      	mov	r4, r0
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 8003bb4:	460d      	mov	r5, r1
 8003bb6:	2900      	cmp	r1, #0
 8003bb8:	d14a      	bne.n	8003c50 <USBD_LL_DataInStage+0xa0>
 8003bba:	4613      	mov	r3, r2
  {
    pep = &pdev->ep_in[0];

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8003bbc:	f8d0 2294 	ldr.w	r2, [r0, #660]	; 0x294
 8003bc0:	2a02      	cmp	r2, #2
 8003bc2:	d005      	beq.n	8003bd0 <USBD_LL_DataInStage+0x20>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode == 1U)
 8003bc4:	f894 32a0 	ldrb.w	r3, [r4, #672]	; 0x2a0
 8003bc8:	2b01      	cmp	r3, #1
 8003bca:	d03c      	beq.n	8003c46 <USBD_LL_DataInStage+0x96>
        }
      }
    }
  }

  return USBD_OK;
 8003bcc:	4628      	mov	r0, r5
}
 8003bce:	bd38      	pop	{r3, r4, r5, pc}
      if (pep->rem_length > pep->maxpacket)
 8003bd0:	69c2      	ldr	r2, [r0, #28]
 8003bd2:	6a01      	ldr	r1, [r0, #32]
 8003bd4:	428a      	cmp	r2, r1
 8003bd6:	d80e      	bhi.n	8003bf6 <USBD_LL_DataInStage+0x46>
        if ((pep->maxpacket == pep->rem_length) &&
 8003bd8:	428a      	cmp	r2, r1
 8003bda:	d018      	beq.n	8003c0e <USBD_LL_DataInStage+0x5e>
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8003bdc:	f894 329c 	ldrb.w	r3, [r4, #668]	; 0x29c
 8003be0:	b2db      	uxtb	r3, r3
 8003be2:	2b03      	cmp	r3, #3
 8003be4:	d027      	beq.n	8003c36 <USBD_LL_DataInStage+0x86>
          (void)USBD_LL_StallEP(pdev, 0x80U);
 8003be6:	2180      	movs	r1, #128	; 0x80
 8003be8:	4620      	mov	r0, r4
 8003bea:	f002 f96f 	bl	8005ecc <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 8003bee:	4620      	mov	r0, r4
 8003bf0:	f000 fc53 	bl	800449a <USBD_CtlReceiveStatus>
 8003bf4:	e7e6      	b.n	8003bc4 <USBD_LL_DataInStage+0x14>
        pep->rem_length -= pep->maxpacket;
 8003bf6:	1a52      	subs	r2, r2, r1
 8003bf8:	61c2      	str	r2, [r0, #28]
        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 8003bfa:	4619      	mov	r1, r3
 8003bfc:	f000 fc23 	bl	8004446 <USBD_CtlContinueSendData>
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8003c00:	2300      	movs	r3, #0
 8003c02:	461a      	mov	r2, r3
 8003c04:	4619      	mov	r1, r3
 8003c06:	4620      	mov	r0, r4
 8003c08:	f002 f980 	bl	8005f0c <USBD_LL_PrepareReceive>
 8003c0c:	e7da      	b.n	8003bc4 <USBD_LL_DataInStage+0x14>
            (pep->total_length >= pep->maxpacket) &&
 8003c0e:	6983      	ldr	r3, [r0, #24]
        if ((pep->maxpacket == pep->rem_length) &&
 8003c10:	4299      	cmp	r1, r3
 8003c12:	d8e3      	bhi.n	8003bdc <USBD_LL_DataInStage+0x2c>
            (pep->total_length < pdev->ep0_data_len))
 8003c14:	f8d0 2298 	ldr.w	r2, [r0, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 8003c18:	4293      	cmp	r3, r2
 8003c1a:	d2df      	bcs.n	8003bdc <USBD_LL_DataInStage+0x2c>
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 8003c1c:	2200      	movs	r2, #0
 8003c1e:	4611      	mov	r1, r2
 8003c20:	f000 fc11 	bl	8004446 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8003c24:	2100      	movs	r1, #0
 8003c26:	f8c4 1298 	str.w	r1, [r4, #664]	; 0x298
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8003c2a:	460b      	mov	r3, r1
 8003c2c:	460a      	mov	r2, r1
 8003c2e:	4620      	mov	r0, r4
 8003c30:	f002 f96c 	bl	8005f0c <USBD_LL_PrepareReceive>
 8003c34:	e7c6      	b.n	8003bc4 <USBD_LL_DataInStage+0x14>
            if (pdev->pClass->EP0_TxSent != NULL)
 8003c36:	f8d4 32b8 	ldr.w	r3, [r4, #696]	; 0x2b8
 8003c3a:	68db      	ldr	r3, [r3, #12]
 8003c3c:	2b00      	cmp	r3, #0
 8003c3e:	d0d2      	beq.n	8003be6 <USBD_LL_DataInStage+0x36>
              pdev->pClass->EP0_TxSent(pdev);
 8003c40:	4620      	mov	r0, r4
 8003c42:	4798      	blx	r3
 8003c44:	e7cf      	b.n	8003be6 <USBD_LL_DataInStage+0x36>
      pdev->dev_test_mode = 0U;
 8003c46:	2300      	movs	r3, #0
 8003c48:	f884 32a0 	strb.w	r3, [r4, #672]	; 0x2a0
  return USBD_OK;
 8003c4c:	4628      	mov	r0, r5
 8003c4e:	e7be      	b.n	8003bce <USBD_LL_DataInStage+0x1e>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8003c50:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 8003c54:	b2db      	uxtb	r3, r3
 8003c56:	2b03      	cmp	r3, #3
 8003c58:	d001      	beq.n	8003c5e <USBD_LL_DataInStage+0xae>
  return USBD_OK;
 8003c5a:	2000      	movs	r0, #0
 8003c5c:	e7b7      	b.n	8003bce <USBD_LL_DataInStage+0x1e>
      if (pdev->pClass->DataIn != NULL)
 8003c5e:	f8d0 32b8 	ldr.w	r3, [r0, #696]	; 0x2b8
 8003c62:	695b      	ldr	r3, [r3, #20]
 8003c64:	b10b      	cbz	r3, 8003c6a <USBD_LL_DataInStage+0xba>
        ret = (USBD_StatusTypeDef)pdev->pClass->DataIn(pdev, epnum);
 8003c66:	4798      	blx	r3
        if (ret != USBD_OK)
 8003c68:	e7b1      	b.n	8003bce <USBD_LL_DataInStage+0x1e>
  return USBD_OK;
 8003c6a:	2000      	movs	r0, #0
 8003c6c:	e7af      	b.n	8003bce <USBD_LL_DataInStage+0x1e>

08003c6e <USBD_LL_Reset>:
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8003c6e:	2301      	movs	r3, #1
 8003c70:	f880 329c 	strb.w	r3, [r0, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8003c74:	2300      	movs	r3, #0
 8003c76:	f8c0 3294 	str.w	r3, [r0, #660]	; 0x294
  pdev->dev_config = 0U;
 8003c7a:	6043      	str	r3, [r0, #4]
  pdev->dev_remote_wakeup = 0U;
 8003c7c:	f8c0 32a4 	str.w	r3, [r0, #676]	; 0x2a4

  if (pdev->pClass == NULL)
 8003c80:	f8d0 32b8 	ldr.w	r3, [r0, #696]	; 0x2b8
 8003c84:	b1f3      	cbz	r3, 8003cc4 <USBD_LL_Reset+0x56>
{
 8003c86:	b570      	push	{r4, r5, r6, lr}
 8003c88:	4604      	mov	r4, r0
  {
    return USBD_FAIL;
  }

  if (pdev->pClassData != NULL)
 8003c8a:	f8d0 22bc 	ldr.w	r2, [r0, #700]	; 0x2bc
 8003c8e:	b11a      	cbz	r2, 8003c98 <USBD_LL_Reset+0x2a>
  {
    if (pdev->pClass->DeInit != NULL)
 8003c90:	685b      	ldr	r3, [r3, #4]
 8003c92:	b10b      	cbz	r3, 8003c98 <USBD_LL_Reset+0x2a>
    {
      (void)pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 8003c94:	2100      	movs	r1, #0
 8003c96:	4798      	blx	r3
    }
  }

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8003c98:	2340      	movs	r3, #64	; 0x40
 8003c9a:	2200      	movs	r2, #0
 8003c9c:	4611      	mov	r1, r2
 8003c9e:	4620      	mov	r0, r4
 8003ca0:	f002 f901 	bl	8005ea6 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8003ca4:	2601      	movs	r6, #1
 8003ca6:	f8a4 6164 	strh.w	r6, [r4, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8003caa:	2540      	movs	r5, #64	; 0x40
 8003cac:	f8c4 5160 	str.w	r5, [r4, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8003cb0:	462b      	mov	r3, r5
 8003cb2:	2200      	movs	r2, #0
 8003cb4:	2180      	movs	r1, #128	; 0x80
 8003cb6:	4620      	mov	r0, r4
 8003cb8:	f002 f8f5 	bl	8005ea6 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8003cbc:	84a6      	strh	r6, [r4, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8003cbe:	6225      	str	r5, [r4, #32]

  return USBD_OK;
 8003cc0:	2000      	movs	r0, #0
}
 8003cc2:	bd70      	pop	{r4, r5, r6, pc}
    return USBD_FAIL;
 8003cc4:	2003      	movs	r0, #3
}
 8003cc6:	4770      	bx	lr

08003cc8 <USBD_LL_SetSpeed>:
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
  pdev->dev_speed = speed;
 8003cc8:	7401      	strb	r1, [r0, #16]

  return USBD_OK;
}
 8003cca:	2000      	movs	r0, #0
 8003ccc:	4770      	bx	lr

08003cce <USBD_LL_Suspend>:
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
  pdev->dev_old_state = pdev->dev_state;
 8003cce:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 8003cd2:	b2db      	uxtb	r3, r3
 8003cd4:	f880 329d 	strb.w	r3, [r0, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 8003cd8:	2304      	movs	r3, #4
 8003cda:	f880 329c 	strb.w	r3, [r0, #668]	; 0x29c

  return USBD_OK;
}
 8003cde:	2000      	movs	r0, #0
 8003ce0:	4770      	bx	lr

08003ce2 <USBD_LL_Resume>:
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8003ce2:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 8003ce6:	b2db      	uxtb	r3, r3
 8003ce8:	2b04      	cmp	r3, #4
 8003cea:	d001      	beq.n	8003cf0 <USBD_LL_Resume+0xe>
  {
    pdev->dev_state = pdev->dev_old_state;
  }

  return USBD_OK;
}
 8003cec:	2000      	movs	r0, #0
 8003cee:	4770      	bx	lr
    pdev->dev_state = pdev->dev_old_state;
 8003cf0:	f890 329d 	ldrb.w	r3, [r0, #669]	; 0x29d
 8003cf4:	b2db      	uxtb	r3, r3
 8003cf6:	f880 329c 	strb.w	r3, [r0, #668]	; 0x29c
 8003cfa:	e7f7      	b.n	8003cec <USBD_LL_Resume+0xa>

08003cfc <USBD_LL_SOF>:
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
  if (pdev->pClass == NULL)
 8003cfc:	f8d0 22b8 	ldr.w	r2, [r0, #696]	; 0x2b8
 8003d00:	b162      	cbz	r2, 8003d1c <USBD_LL_SOF+0x20>
{
 8003d02:	b508      	push	{r3, lr}
  {
    return USBD_FAIL;
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8003d04:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 8003d08:	b2db      	uxtb	r3, r3
 8003d0a:	2b03      	cmp	r3, #3
 8003d0c:	d001      	beq.n	8003d12 <USBD_LL_SOF+0x16>
    {
      (void)pdev->pClass->SOF(pdev);
    }
  }

  return USBD_OK;
 8003d0e:	2000      	movs	r0, #0
}
 8003d10:	bd08      	pop	{r3, pc}
    if (pdev->pClass->SOF != NULL)
 8003d12:	69d3      	ldr	r3, [r2, #28]
 8003d14:	b123      	cbz	r3, 8003d20 <USBD_LL_SOF+0x24>
      (void)pdev->pClass->SOF(pdev);
 8003d16:	4798      	blx	r3
  return USBD_OK;
 8003d18:	2000      	movs	r0, #0
 8003d1a:	e7f9      	b.n	8003d10 <USBD_LL_SOF+0x14>
    return USBD_FAIL;
 8003d1c:	2003      	movs	r0, #3
}
 8003d1e:	4770      	bx	lr
  return USBD_OK;
 8003d20:	2000      	movs	r0, #0
 8003d22:	e7f5      	b.n	8003d10 <USBD_LL_SOF+0x14>

08003d24 <USBD_LL_IsoINIncomplete>:
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
  if (pdev->pClass == NULL)
 8003d24:	f8d0 22b8 	ldr.w	r2, [r0, #696]	; 0x2b8
 8003d28:	b162      	cbz	r2, 8003d44 <USBD_LL_IsoINIncomplete+0x20>
{
 8003d2a:	b508      	push	{r3, lr}
  {
    return USBD_FAIL;
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8003d2c:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 8003d30:	b2db      	uxtb	r3, r3
 8003d32:	2b03      	cmp	r3, #3
 8003d34:	d001      	beq.n	8003d3a <USBD_LL_IsoINIncomplete+0x16>
    {
      (void)pdev->pClass->IsoINIncomplete(pdev, epnum);
    }
  }

  return USBD_OK;
 8003d36:	2000      	movs	r0, #0
}
 8003d38:	bd08      	pop	{r3, pc}
    if (pdev->pClass->IsoINIncomplete != NULL)
 8003d3a:	6a13      	ldr	r3, [r2, #32]
 8003d3c:	b123      	cbz	r3, 8003d48 <USBD_LL_IsoINIncomplete+0x24>
      (void)pdev->pClass->IsoINIncomplete(pdev, epnum);
 8003d3e:	4798      	blx	r3
  return USBD_OK;
 8003d40:	2000      	movs	r0, #0
 8003d42:	e7f9      	b.n	8003d38 <USBD_LL_IsoINIncomplete+0x14>
    return USBD_FAIL;
 8003d44:	2003      	movs	r0, #3
}
 8003d46:	4770      	bx	lr
  return USBD_OK;
 8003d48:	2000      	movs	r0, #0
 8003d4a:	e7f5      	b.n	8003d38 <USBD_LL_IsoINIncomplete+0x14>

08003d4c <USBD_LL_IsoOUTIncomplete>:
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
  if (pdev->pClass == NULL)
 8003d4c:	f8d0 22b8 	ldr.w	r2, [r0, #696]	; 0x2b8
 8003d50:	b162      	cbz	r2, 8003d6c <USBD_LL_IsoOUTIncomplete+0x20>
{
 8003d52:	b508      	push	{r3, lr}
  {
    return USBD_FAIL;
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8003d54:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 8003d58:	b2db      	uxtb	r3, r3
 8003d5a:	2b03      	cmp	r3, #3
 8003d5c:	d001      	beq.n	8003d62 <USBD_LL_IsoOUTIncomplete+0x16>
    {
      (void)pdev->pClass->IsoOUTIncomplete(pdev, epnum);
    }
  }

  return USBD_OK;
 8003d5e:	2000      	movs	r0, #0
}
 8003d60:	bd08      	pop	{r3, pc}
    if (pdev->pClass->IsoOUTIncomplete != NULL)
 8003d62:	6a53      	ldr	r3, [r2, #36]	; 0x24
 8003d64:	b123      	cbz	r3, 8003d70 <USBD_LL_IsoOUTIncomplete+0x24>
      (void)pdev->pClass->IsoOUTIncomplete(pdev, epnum);
 8003d66:	4798      	blx	r3
  return USBD_OK;
 8003d68:	2000      	movs	r0, #0
 8003d6a:	e7f9      	b.n	8003d60 <USBD_LL_IsoOUTIncomplete+0x14>
    return USBD_FAIL;
 8003d6c:	2003      	movs	r0, #3
}
 8003d6e:	4770      	bx	lr
  return USBD_OK;
 8003d70:	2000      	movs	r0, #0
 8003d72:	e7f5      	b.n	8003d60 <USBD_LL_IsoOUTIncomplete+0x14>

08003d74 <USBD_LL_DevConnected>:
{
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
}
 8003d74:	2000      	movs	r0, #0
 8003d76:	4770      	bx	lr

08003d78 <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 8003d78:	b508      	push	{r3, lr}
  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8003d7a:	2301      	movs	r3, #1
 8003d7c:	f880 329c 	strb.w	r3, [r0, #668]	; 0x29c

  if (pdev->pClass != NULL)
 8003d80:	f8d0 32b8 	ldr.w	r3, [r0, #696]	; 0x2b8
 8003d84:	b113      	cbz	r3, 8003d8c <USBD_LL_DevDisconnected+0x14>
  {
    (void)pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 8003d86:	685b      	ldr	r3, [r3, #4]
 8003d88:	7901      	ldrb	r1, [r0, #4]
 8003d8a:	4798      	blx	r3
  }

  return USBD_OK;
}
 8003d8c:	2000      	movs	r0, #0
 8003d8e:	bd08      	pop	{r3, pc}

08003d90 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8003d90:	4603      	mov	r3, r0
  uint8_t  len = 0U;
 8003d92:	2000      	movs	r0, #0
  uint8_t *pbuff = buf;

  while (*pbuff != (uint8_t)'\0')
 8003d94:	781a      	ldrb	r2, [r3, #0]
 8003d96:	b11a      	cbz	r2, 8003da0 <USBD_GetLen+0x10>
  {
    len++;
 8003d98:	3001      	adds	r0, #1
 8003d9a:	b2c0      	uxtb	r0, r0
    pbuff++;
 8003d9c:	3301      	adds	r3, #1
 8003d9e:	e7f9      	b.n	8003d94 <USBD_GetLen+0x4>
  }

  return len;
}
 8003da0:	4770      	bx	lr

08003da2 <USBD_SetFeature>:
{
 8003da2:	b508      	push	{r3, lr}
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8003da4:	884b      	ldrh	r3, [r1, #2]
 8003da6:	2b01      	cmp	r3, #1
 8003da8:	d000      	beq.n	8003dac <USBD_SetFeature+0xa>
}
 8003daa:	bd08      	pop	{r3, pc}
    pdev->dev_remote_wakeup = 1U;
 8003dac:	f8c0 32a4 	str.w	r3, [r0, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 8003db0:	f000 fb68 	bl	8004484 <USBD_CtlSendStatus>
}
 8003db4:	e7f9      	b.n	8003daa <USBD_SetFeature+0x8>

08003db6 <USBD_ParseSetupRequest>:
  req->bmRequest = *(uint8_t *)(pbuff);
 8003db6:	780b      	ldrb	r3, [r1, #0]
 8003db8:	7003      	strb	r3, [r0, #0]
  req->bRequest = *(uint8_t *)(pbuff);
 8003dba:	784b      	ldrb	r3, [r1, #1]
 8003dbc:	7043      	strb	r3, [r0, #1]
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;

  _Byte1 = *(uint8_t *)_pbuff;
 8003dbe:	788b      	ldrb	r3, [r1, #2]
  _pbuff++;
  _Byte2 = *(uint8_t *)_pbuff;
 8003dc0:	78ca      	ldrb	r2, [r1, #3]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 8003dc2:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
  req->wValue = SWAPBYTE(pbuff);
 8003dc6:	8043      	strh	r3, [r0, #2]
  _Byte1 = *(uint8_t *)_pbuff;
 8003dc8:	790b      	ldrb	r3, [r1, #4]
  _Byte2 = *(uint8_t *)_pbuff;
 8003dca:	794a      	ldrb	r2, [r1, #5]
  _SwapVal = (_Byte2 << 8) | _Byte1;
 8003dcc:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
  req->wIndex = SWAPBYTE(pbuff);
 8003dd0:	8083      	strh	r3, [r0, #4]
  _Byte1 = *(uint8_t *)_pbuff;
 8003dd2:	798b      	ldrb	r3, [r1, #6]
  _Byte2 = *(uint8_t *)_pbuff;
 8003dd4:	79ca      	ldrb	r2, [r1, #7]
  _SwapVal = (_Byte2 << 8) | _Byte1;
 8003dd6:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
  req->wLength = SWAPBYTE(pbuff);
 8003dda:	80c3      	strh	r3, [r0, #6]
}
 8003ddc:	4770      	bx	lr

08003dde <USBD_CtlError>:
{
 8003dde:	b510      	push	{r4, lr}
 8003de0:	4604      	mov	r4, r0
  (void)USBD_LL_StallEP(pdev, 0x80U);
 8003de2:	2180      	movs	r1, #128	; 0x80
 8003de4:	f002 f872 	bl	8005ecc <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 8003de8:	2100      	movs	r1, #0
 8003dea:	4620      	mov	r0, r4
 8003dec:	f002 f86e 	bl	8005ecc <USBD_LL_StallEP>
}
 8003df0:	bd10      	pop	{r4, pc}

08003df2 <USBD_GetDescriptor>:
{
 8003df2:	b530      	push	{r4, r5, lr}
 8003df4:	b083      	sub	sp, #12
 8003df6:	4604      	mov	r4, r0
 8003df8:	460d      	mov	r5, r1
  uint16_t len = 0U;
 8003dfa:	2300      	movs	r3, #0
 8003dfc:	f8ad 3006 	strh.w	r3, [sp, #6]
  switch (req->wValue >> 8)
 8003e00:	884a      	ldrh	r2, [r1, #2]
 8003e02:	0a13      	lsrs	r3, r2, #8
 8003e04:	3b01      	subs	r3, #1
 8003e06:	2b06      	cmp	r3, #6
 8003e08:	f200 80ab 	bhi.w	8003f62 <USBD_GetDescriptor+0x170>
 8003e0c:	e8df f003 	tbb	[pc, r3]
 8003e10:	a9331f04 	.word	0xa9331f04
 8003e14:	8da9      	.short	0x8da9
 8003e16:	9a          	.byte	0x9a
 8003e17:	00          	.byte	0x00
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8003e18:	f8d0 32b4 	ldr.w	r3, [r0, #692]	; 0x2b4
 8003e1c:	681b      	ldr	r3, [r3, #0]
 8003e1e:	f10d 0106 	add.w	r1, sp, #6
 8003e22:	7c00      	ldrb	r0, [r0, #16]
 8003e24:	4798      	blx	r3
  if (req->wLength != 0U)
 8003e26:	88ea      	ldrh	r2, [r5, #6]
 8003e28:	2a00      	cmp	r2, #0
 8003e2a:	f000 80a3 	beq.w	8003f74 <USBD_GetDescriptor+0x182>
    if (len != 0U)
 8003e2e:	f8bd 3006 	ldrh.w	r3, [sp, #6]
 8003e32:	2b00      	cmp	r3, #0
 8003e34:	f000 8099 	beq.w	8003f6a <USBD_GetDescriptor+0x178>
      len = MIN(len, req->wLength);
 8003e38:	429a      	cmp	r2, r3
 8003e3a:	bf28      	it	cs
 8003e3c:	461a      	movcs	r2, r3
 8003e3e:	f8ad 2006 	strh.w	r2, [sp, #6]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 8003e42:	4601      	mov	r1, r0
 8003e44:	4620      	mov	r0, r4
 8003e46:	f000 faf1 	bl	800442c <USBD_CtlSendData>
}
 8003e4a:	b003      	add	sp, #12
 8003e4c:	bd30      	pop	{r4, r5, pc}
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8003e4e:	7c03      	ldrb	r3, [r0, #16]
 8003e50:	b943      	cbnz	r3, 8003e64 <USBD_GetDescriptor+0x72>
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 8003e52:	f8d0 32b8 	ldr.w	r3, [r0, #696]	; 0x2b8
 8003e56:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003e58:	f10d 0006 	add.w	r0, sp, #6
 8003e5c:	4798      	blx	r3
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8003e5e:	2302      	movs	r3, #2
 8003e60:	7043      	strb	r3, [r0, #1]
  if (err != 0U)
 8003e62:	e7e0      	b.n	8003e26 <USBD_GetDescriptor+0x34>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 8003e64:	f8d0 32b8 	ldr.w	r3, [r0, #696]	; 0x2b8
 8003e68:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003e6a:	f10d 0006 	add.w	r0, sp, #6
 8003e6e:	4798      	blx	r3
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8003e70:	2302      	movs	r3, #2
 8003e72:	7043      	strb	r3, [r0, #1]
  if (err != 0U)
 8003e74:	e7d7      	b.n	8003e26 <USBD_GetDescriptor+0x34>
      switch ((uint8_t)(req->wValue))
 8003e76:	b2d2      	uxtb	r2, r2
 8003e78:	2a05      	cmp	r2, #5
 8003e7a:	d852      	bhi.n	8003f22 <USBD_GetDescriptor+0x130>
 8003e7c:	e8df f002 	tbb	[pc, r2]
 8003e80:	2a1d1003 	.word	0x2a1d1003
 8003e84:	4437      	.short	0x4437
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8003e86:	f8d0 32b4 	ldr.w	r3, [r0, #692]	; 0x2b4
 8003e8a:	685b      	ldr	r3, [r3, #4]
 8003e8c:	b123      	cbz	r3, 8003e98 <USBD_GetDescriptor+0xa6>
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8003e8e:	f10d 0106 	add.w	r1, sp, #6
 8003e92:	7c00      	ldrb	r0, [r0, #16]
 8003e94:	4798      	blx	r3
  if (err != 0U)
 8003e96:	e7c6      	b.n	8003e26 <USBD_GetDescriptor+0x34>
            USBD_CtlError(pdev, req);
 8003e98:	4629      	mov	r1, r5
 8003e9a:	f7ff ffa0 	bl	8003dde <USBD_CtlError>
  if (err != 0U)
 8003e9e:	e7d4      	b.n	8003e4a <USBD_GetDescriptor+0x58>
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8003ea0:	f8d0 32b4 	ldr.w	r3, [r0, #692]	; 0x2b4
 8003ea4:	689b      	ldr	r3, [r3, #8]
 8003ea6:	b123      	cbz	r3, 8003eb2 <USBD_GetDescriptor+0xc0>
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8003ea8:	f10d 0106 	add.w	r1, sp, #6
 8003eac:	7c00      	ldrb	r0, [r0, #16]
 8003eae:	4798      	blx	r3
  if (err != 0U)
 8003eb0:	e7b9      	b.n	8003e26 <USBD_GetDescriptor+0x34>
            USBD_CtlError(pdev, req);
 8003eb2:	4629      	mov	r1, r5
 8003eb4:	f7ff ff93 	bl	8003dde <USBD_CtlError>
  if (err != 0U)
 8003eb8:	e7c7      	b.n	8003e4a <USBD_GetDescriptor+0x58>
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8003eba:	f8d0 32b4 	ldr.w	r3, [r0, #692]	; 0x2b4
 8003ebe:	68db      	ldr	r3, [r3, #12]
 8003ec0:	b123      	cbz	r3, 8003ecc <USBD_GetDescriptor+0xda>
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8003ec2:	f10d 0106 	add.w	r1, sp, #6
 8003ec6:	7c00      	ldrb	r0, [r0, #16]
 8003ec8:	4798      	blx	r3
  if (err != 0U)
 8003eca:	e7ac      	b.n	8003e26 <USBD_GetDescriptor+0x34>
            USBD_CtlError(pdev, req);
 8003ecc:	4629      	mov	r1, r5
 8003ece:	f7ff ff86 	bl	8003dde <USBD_CtlError>
  if (err != 0U)
 8003ed2:	e7ba      	b.n	8003e4a <USBD_GetDescriptor+0x58>
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8003ed4:	f8d0 32b4 	ldr.w	r3, [r0, #692]	; 0x2b4
 8003ed8:	691b      	ldr	r3, [r3, #16]
 8003eda:	b123      	cbz	r3, 8003ee6 <USBD_GetDescriptor+0xf4>
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8003edc:	f10d 0106 	add.w	r1, sp, #6
 8003ee0:	7c00      	ldrb	r0, [r0, #16]
 8003ee2:	4798      	blx	r3
  if (err != 0U)
 8003ee4:	e79f      	b.n	8003e26 <USBD_GetDescriptor+0x34>
            USBD_CtlError(pdev, req);
 8003ee6:	4629      	mov	r1, r5
 8003ee8:	f7ff ff79 	bl	8003dde <USBD_CtlError>
  if (err != 0U)
 8003eec:	e7ad      	b.n	8003e4a <USBD_GetDescriptor+0x58>
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8003eee:	f8d0 32b4 	ldr.w	r3, [r0, #692]	; 0x2b4
 8003ef2:	695b      	ldr	r3, [r3, #20]
 8003ef4:	b123      	cbz	r3, 8003f00 <USBD_GetDescriptor+0x10e>
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8003ef6:	f10d 0106 	add.w	r1, sp, #6
 8003efa:	7c00      	ldrb	r0, [r0, #16]
 8003efc:	4798      	blx	r3
  if (err != 0U)
 8003efe:	e792      	b.n	8003e26 <USBD_GetDescriptor+0x34>
            USBD_CtlError(pdev, req);
 8003f00:	4629      	mov	r1, r5
 8003f02:	f7ff ff6c 	bl	8003dde <USBD_CtlError>
  if (err != 0U)
 8003f06:	e7a0      	b.n	8003e4a <USBD_GetDescriptor+0x58>
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8003f08:	f8d0 32b4 	ldr.w	r3, [r0, #692]	; 0x2b4
 8003f0c:	699b      	ldr	r3, [r3, #24]
 8003f0e:	b123      	cbz	r3, 8003f1a <USBD_GetDescriptor+0x128>
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8003f10:	f10d 0106 	add.w	r1, sp, #6
 8003f14:	7c00      	ldrb	r0, [r0, #16]
 8003f16:	4798      	blx	r3
  if (err != 0U)
 8003f18:	e785      	b.n	8003e26 <USBD_GetDescriptor+0x34>
            USBD_CtlError(pdev, req);
 8003f1a:	4629      	mov	r1, r5
 8003f1c:	f7ff ff5f 	bl	8003dde <USBD_CtlError>
  if (err != 0U)
 8003f20:	e793      	b.n	8003e4a <USBD_GetDescriptor+0x58>
          USBD_CtlError(pdev, req);
 8003f22:	4629      	mov	r1, r5
 8003f24:	f7ff ff5b 	bl	8003dde <USBD_CtlError>
  if (err != 0U)
 8003f28:	e78f      	b.n	8003e4a <USBD_GetDescriptor+0x58>
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8003f2a:	7c03      	ldrb	r3, [r0, #16]
 8003f2c:	b933      	cbnz	r3, 8003f3c <USBD_GetDescriptor+0x14a>
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 8003f2e:	f8d0 32b8 	ldr.w	r3, [r0, #696]	; 0x2b8
 8003f32:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003f34:	f10d 0006 	add.w	r0, sp, #6
 8003f38:	4798      	blx	r3
  if (err != 0U)
 8003f3a:	e774      	b.n	8003e26 <USBD_GetDescriptor+0x34>
        USBD_CtlError(pdev, req);
 8003f3c:	4629      	mov	r1, r5
 8003f3e:	f7ff ff4e 	bl	8003dde <USBD_CtlError>
  if (err != 0U)
 8003f42:	e782      	b.n	8003e4a <USBD_GetDescriptor+0x58>
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8003f44:	7c03      	ldrb	r3, [r0, #16]
 8003f46:	b943      	cbnz	r3, 8003f5a <USBD_GetDescriptor+0x168>
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 8003f48:	f8d0 32b8 	ldr.w	r3, [r0, #696]	; 0x2b8
 8003f4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f4e:	f10d 0006 	add.w	r0, sp, #6
 8003f52:	4798      	blx	r3
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8003f54:	2307      	movs	r3, #7
 8003f56:	7043      	strb	r3, [r0, #1]
  if (err != 0U)
 8003f58:	e765      	b.n	8003e26 <USBD_GetDescriptor+0x34>
        USBD_CtlError(pdev, req);
 8003f5a:	4629      	mov	r1, r5
 8003f5c:	f7ff ff3f 	bl	8003dde <USBD_CtlError>
  if (err != 0U)
 8003f60:	e773      	b.n	8003e4a <USBD_GetDescriptor+0x58>
      USBD_CtlError(pdev, req);
 8003f62:	4629      	mov	r1, r5
 8003f64:	f7ff ff3b 	bl	8003dde <USBD_CtlError>
    return;
 8003f68:	e76f      	b.n	8003e4a <USBD_GetDescriptor+0x58>
      USBD_CtlError(pdev, req);
 8003f6a:	4629      	mov	r1, r5
 8003f6c:	4620      	mov	r0, r4
 8003f6e:	f7ff ff36 	bl	8003dde <USBD_CtlError>
 8003f72:	e76a      	b.n	8003e4a <USBD_GetDescriptor+0x58>
    (void)USBD_CtlSendStatus(pdev);
 8003f74:	4620      	mov	r0, r4
 8003f76:	f000 fa85 	bl	8004484 <USBD_CtlSendStatus>
 8003f7a:	e766      	b.n	8003e4a <USBD_GetDescriptor+0x58>

08003f7c <USBD_SetAddress>:
{
 8003f7c:	b538      	push	{r3, r4, r5, lr}
 8003f7e:	4604      	mov	r4, r0
  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8003f80:	888b      	ldrh	r3, [r1, #4]
 8003f82:	b9fb      	cbnz	r3, 8003fc4 <USBD_SetAddress+0x48>
 8003f84:	88cb      	ldrh	r3, [r1, #6]
 8003f86:	b9eb      	cbnz	r3, 8003fc4 <USBD_SetAddress+0x48>
 8003f88:	884b      	ldrh	r3, [r1, #2]
 8003f8a:	2b7f      	cmp	r3, #127	; 0x7f
 8003f8c:	d81a      	bhi.n	8003fc4 <USBD_SetAddress+0x48>
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8003f8e:	f003 057f 	and.w	r5, r3, #127	; 0x7f
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8003f92:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 8003f96:	b2db      	uxtb	r3, r3
 8003f98:	2b03      	cmp	r3, #3
 8003f9a:	d00c      	beq.n	8003fb6 <USBD_SetAddress+0x3a>
      pdev->dev_address = dev_addr;
 8003f9c:	f880 529e 	strb.w	r5, [r0, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 8003fa0:	4629      	mov	r1, r5
 8003fa2:	f001 ffa3 	bl	8005eec <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 8003fa6:	4620      	mov	r0, r4
 8003fa8:	f000 fa6c 	bl	8004484 <USBD_CtlSendStatus>
      if (dev_addr != 0U)
 8003fac:	b135      	cbz	r5, 8003fbc <USBD_SetAddress+0x40>
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8003fae:	2302      	movs	r3, #2
 8003fb0:	f884 329c 	strb.w	r3, [r4, #668]	; 0x29c
 8003fb4:	e009      	b.n	8003fca <USBD_SetAddress+0x4e>
      USBD_CtlError(pdev, req);
 8003fb6:	f7ff ff12 	bl	8003dde <USBD_CtlError>
 8003fba:	e006      	b.n	8003fca <USBD_SetAddress+0x4e>
        pdev->dev_state = USBD_STATE_DEFAULT;
 8003fbc:	2301      	movs	r3, #1
 8003fbe:	f884 329c 	strb.w	r3, [r4, #668]	; 0x29c
 8003fc2:	e002      	b.n	8003fca <USBD_SetAddress+0x4e>
    USBD_CtlError(pdev, req);
 8003fc4:	4620      	mov	r0, r4
 8003fc6:	f7ff ff0a 	bl	8003dde <USBD_CtlError>
}
 8003fca:	bd38      	pop	{r3, r4, r5, pc}

08003fcc <USBD_SetConfig>:
{
 8003fcc:	b570      	push	{r4, r5, r6, lr}
 8003fce:	4604      	mov	r4, r0
 8003fd0:	460e      	mov	r6, r1
  cfgidx = (uint8_t)(req->wValue);
 8003fd2:	788d      	ldrb	r5, [r1, #2]
 8003fd4:	4b2e      	ldr	r3, [pc, #184]	; (8004090 <USBD_SetConfig+0xc4>)
 8003fd6:	701d      	strb	r5, [r3, #0]
  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8003fd8:	2d01      	cmp	r5, #1
 8003fda:	d810      	bhi.n	8003ffe <USBD_SetConfig+0x32>
  switch (pdev->dev_state)
 8003fdc:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 8003fe0:	b2db      	uxtb	r3, r3
 8003fe2:	2b02      	cmp	r3, #2
 8003fe4:	d00f      	beq.n	8004006 <USBD_SetConfig+0x3a>
 8003fe6:	2b03      	cmp	r3, #3
 8003fe8:	d023      	beq.n	8004032 <USBD_SetConfig+0x66>
      USBD_CtlError(pdev, req);
 8003fea:	f7ff fef8 	bl	8003dde <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 8003fee:	4b28      	ldr	r3, [pc, #160]	; (8004090 <USBD_SetConfig+0xc4>)
 8003ff0:	7819      	ldrb	r1, [r3, #0]
 8003ff2:	4620      	mov	r0, r4
 8003ff4:	f7ff fd6c 	bl	8003ad0 <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 8003ff8:	2503      	movs	r5, #3
}
 8003ffa:	4628      	mov	r0, r5
 8003ffc:	bd70      	pop	{r4, r5, r6, pc}
    USBD_CtlError(pdev, req);
 8003ffe:	f7ff feee 	bl	8003dde <USBD_CtlError>
    return USBD_FAIL;
 8004002:	2503      	movs	r5, #3
 8004004:	e7f9      	b.n	8003ffa <USBD_SetConfig+0x2e>
      if (cfgidx != 0U)
 8004006:	b18d      	cbz	r5, 800402c <USBD_SetConfig+0x60>
        pdev->dev_config = cfgidx;
 8004008:	6045      	str	r5, [r0, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 800400a:	4629      	mov	r1, r5
 800400c:	f7ff fd57 	bl	8003abe <USBD_SetClassConfig>
        if (ret != USBD_OK)
 8004010:	4605      	mov	r5, r0
 8004012:	b120      	cbz	r0, 800401e <USBD_SetConfig+0x52>
          USBD_CtlError(pdev, req);
 8004014:	4631      	mov	r1, r6
 8004016:	4620      	mov	r0, r4
 8004018:	f7ff fee1 	bl	8003dde <USBD_CtlError>
 800401c:	e7ed      	b.n	8003ffa <USBD_SetConfig+0x2e>
          (void)USBD_CtlSendStatus(pdev);
 800401e:	4620      	mov	r0, r4
 8004020:	f000 fa30 	bl	8004484 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 8004024:	2303      	movs	r3, #3
 8004026:	f884 329c 	strb.w	r3, [r4, #668]	; 0x29c
 800402a:	e7e6      	b.n	8003ffa <USBD_SetConfig+0x2e>
        (void)USBD_CtlSendStatus(pdev);
 800402c:	f000 fa2a 	bl	8004484 <USBD_CtlSendStatus>
 8004030:	e7e3      	b.n	8003ffa <USBD_SetConfig+0x2e>
      if (cfgidx == 0U)
 8004032:	b1cd      	cbz	r5, 8004068 <USBD_SetConfig+0x9c>
      else if (cfgidx != pdev->dev_config)
 8004034:	6841      	ldr	r1, [r0, #4]
 8004036:	428d      	cmp	r5, r1
 8004038:	d025      	beq.n	8004086 <USBD_SetConfig+0xba>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800403a:	b2c9      	uxtb	r1, r1
 800403c:	f7ff fd48 	bl	8003ad0 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 8004040:	4b13      	ldr	r3, [pc, #76]	; (8004090 <USBD_SetConfig+0xc4>)
 8004042:	7819      	ldrb	r1, [r3, #0]
 8004044:	6061      	str	r1, [r4, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 8004046:	4620      	mov	r0, r4
 8004048:	f7ff fd39 	bl	8003abe <USBD_SetClassConfig>
        if (ret != USBD_OK)
 800404c:	4605      	mov	r5, r0
 800404e:	b1b0      	cbz	r0, 800407e <USBD_SetConfig+0xb2>
          USBD_CtlError(pdev, req);
 8004050:	4631      	mov	r1, r6
 8004052:	4620      	mov	r0, r4
 8004054:	f7ff fec3 	bl	8003dde <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8004058:	7921      	ldrb	r1, [r4, #4]
 800405a:	4620      	mov	r0, r4
 800405c:	f7ff fd38 	bl	8003ad0 <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8004060:	2302      	movs	r3, #2
 8004062:	f884 329c 	strb.w	r3, [r4, #668]	; 0x29c
 8004066:	e7c8      	b.n	8003ffa <USBD_SetConfig+0x2e>
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8004068:	2302      	movs	r3, #2
 800406a:	f880 329c 	strb.w	r3, [r0, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 800406e:	6045      	str	r5, [r0, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 8004070:	4629      	mov	r1, r5
 8004072:	f7ff fd2d 	bl	8003ad0 <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 8004076:	4620      	mov	r0, r4
 8004078:	f000 fa04 	bl	8004484 <USBD_CtlSendStatus>
 800407c:	e7bd      	b.n	8003ffa <USBD_SetConfig+0x2e>
          (void)USBD_CtlSendStatus(pdev);
 800407e:	4620      	mov	r0, r4
 8004080:	f000 fa00 	bl	8004484 <USBD_CtlSendStatus>
 8004084:	e7b9      	b.n	8003ffa <USBD_SetConfig+0x2e>
        (void)USBD_CtlSendStatus(pdev);
 8004086:	f000 f9fd 	bl	8004484 <USBD_CtlSendStatus>
  USBD_StatusTypeDef ret = USBD_OK;
 800408a:	2500      	movs	r5, #0
 800408c:	e7b5      	b.n	8003ffa <USBD_SetConfig+0x2e>
 800408e:	bf00      	nop
 8004090:	200005d8 	.word	0x200005d8

08004094 <USBD_GetConfig>:
{
 8004094:	b508      	push	{r3, lr}
  if (req->wLength != 1U)
 8004096:	88cb      	ldrh	r3, [r1, #6]
 8004098:	2b01      	cmp	r3, #1
 800409a:	d10b      	bne.n	80040b4 <USBD_GetConfig+0x20>
    switch (pdev->dev_state)
 800409c:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 80040a0:	b2db      	uxtb	r3, r3
 80040a2:	2b02      	cmp	r3, #2
 80040a4:	d909      	bls.n	80040ba <USBD_GetConfig+0x26>
 80040a6:	2b03      	cmp	r3, #3
 80040a8:	d109      	bne.n	80040be <USBD_GetConfig+0x2a>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 80040aa:	2201      	movs	r2, #1
 80040ac:	1d01      	adds	r1, r0, #4
 80040ae:	f000 f9bd 	bl	800442c <USBD_CtlSendData>
        break;
 80040b2:	e001      	b.n	80040b8 <USBD_GetConfig+0x24>
    USBD_CtlError(pdev, req);
 80040b4:	f7ff fe93 	bl	8003dde <USBD_CtlError>
}
 80040b8:	bd08      	pop	{r3, pc}
    switch (pdev->dev_state)
 80040ba:	b25b      	sxtb	r3, r3
 80040bc:	b913      	cbnz	r3, 80040c4 <USBD_GetConfig+0x30>
        USBD_CtlError(pdev, req);
 80040be:	f7ff fe8e 	bl	8003dde <USBD_CtlError>
}
 80040c2:	e7f9      	b.n	80040b8 <USBD_GetConfig+0x24>
        pdev->dev_default_config = 0U;
 80040c4:	4601      	mov	r1, r0
 80040c6:	2300      	movs	r3, #0
 80040c8:	f841 3f08 	str.w	r3, [r1, #8]!
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 80040cc:	2201      	movs	r2, #1
 80040ce:	f000 f9ad 	bl	800442c <USBD_CtlSendData>
        break;
 80040d2:	e7f1      	b.n	80040b8 <USBD_GetConfig+0x24>

080040d4 <USBD_GetStatus>:
{
 80040d4:	b508      	push	{r3, lr}
  switch (pdev->dev_state)
 80040d6:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 80040da:	3b01      	subs	r3, #1
 80040dc:	2b02      	cmp	r3, #2
 80040de:	d812      	bhi.n	8004106 <USBD_GetStatus+0x32>
      if (req->wLength != 0x2U)
 80040e0:	88cb      	ldrh	r3, [r1, #6]
 80040e2:	2b02      	cmp	r3, #2
 80040e4:	d10c      	bne.n	8004100 <USBD_GetStatus+0x2c>
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 80040e6:	2301      	movs	r3, #1
 80040e8:	60c3      	str	r3, [r0, #12]
      if (pdev->dev_remote_wakeup != 0U)
 80040ea:	f8d0 32a4 	ldr.w	r3, [r0, #676]	; 0x2a4
 80040ee:	b10b      	cbz	r3, 80040f4 <USBD_GetStatus+0x20>
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 80040f0:	2303      	movs	r3, #3
 80040f2:	60c3      	str	r3, [r0, #12]
      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 80040f4:	2202      	movs	r2, #2
 80040f6:	f100 010c 	add.w	r1, r0, #12
 80040fa:	f000 f997 	bl	800442c <USBD_CtlSendData>
}
 80040fe:	bd08      	pop	{r3, pc}
        USBD_CtlError(pdev, req);
 8004100:	f7ff fe6d 	bl	8003dde <USBD_CtlError>
        break;
 8004104:	e7fb      	b.n	80040fe <USBD_GetStatus+0x2a>
      USBD_CtlError(pdev, req);
 8004106:	f7ff fe6a 	bl	8003dde <USBD_CtlError>
}
 800410a:	e7f8      	b.n	80040fe <USBD_GetStatus+0x2a>

0800410c <USBD_ClrFeature>:
{
 800410c:	b508      	push	{r3, lr}
  switch (pdev->dev_state)
 800410e:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 8004112:	3b01      	subs	r3, #1
 8004114:	2b02      	cmp	r3, #2
 8004116:	d809      	bhi.n	800412c <USBD_ClrFeature+0x20>
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8004118:	884b      	ldrh	r3, [r1, #2]
 800411a:	2b01      	cmp	r3, #1
 800411c:	d000      	beq.n	8004120 <USBD_ClrFeature+0x14>
}
 800411e:	bd08      	pop	{r3, pc}
        pdev->dev_remote_wakeup = 0U;
 8004120:	2300      	movs	r3, #0
 8004122:	f8c0 32a4 	str.w	r3, [r0, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 8004126:	f000 f9ad 	bl	8004484 <USBD_CtlSendStatus>
 800412a:	e7f8      	b.n	800411e <USBD_ClrFeature+0x12>
      USBD_CtlError(pdev, req);
 800412c:	f7ff fe57 	bl	8003dde <USBD_CtlError>
}
 8004130:	e7f5      	b.n	800411e <USBD_ClrFeature+0x12>

08004132 <USBD_StdDevReq>:
{
 8004132:	b538      	push	{r3, r4, r5, lr}
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8004134:	780c      	ldrb	r4, [r1, #0]
 8004136:	f004 0460 	and.w	r4, r4, #96	; 0x60
 800413a:	2c20      	cmp	r4, #32
 800413c:	d006      	beq.n	800414c <USBD_StdDevReq+0x1a>
 800413e:	2c40      	cmp	r4, #64	; 0x40
 8004140:	d004      	beq.n	800414c <USBD_StdDevReq+0x1a>
 8004142:	b154      	cbz	r4, 800415a <USBD_StdDevReq+0x28>
      USBD_CtlError(pdev, req);
 8004144:	f7ff fe4b 	bl	8003dde <USBD_CtlError>
  USBD_StatusTypeDef ret = USBD_OK;
 8004148:	2400      	movs	r4, #0
      break;
 800414a:	e004      	b.n	8004156 <USBD_StdDevReq+0x24>
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800414c:	f8d0 32b8 	ldr.w	r3, [r0, #696]	; 0x2b8
 8004150:	689b      	ldr	r3, [r3, #8]
 8004152:	4798      	blx	r3
 8004154:	4604      	mov	r4, r0
}
 8004156:	4620      	mov	r0, r4
 8004158:	bd38      	pop	{r3, r4, r5, pc}
      switch (req->bRequest)
 800415a:	784d      	ldrb	r5, [r1, #1]
 800415c:	2d09      	cmp	r5, #9
 800415e:	d81d      	bhi.n	800419c <USBD_StdDevReq+0x6a>
 8004160:	e8df f005 	tbb	[pc, r5]
 8004164:	161c1912 	.word	0x161c1912
 8004168:	1c05081c 	.word	0x1c05081c
 800416c:	0b0f      	.short	0x0b0f
          USBD_GetDescriptor(pdev, req);
 800416e:	f7ff fe40 	bl	8003df2 <USBD_GetDescriptor>
          break;
 8004172:	e7f0      	b.n	8004156 <USBD_StdDevReq+0x24>
          USBD_SetAddress(pdev, req);
 8004174:	f7ff ff02 	bl	8003f7c <USBD_SetAddress>
          break;
 8004178:	e7ed      	b.n	8004156 <USBD_StdDevReq+0x24>
          ret = USBD_SetConfig(pdev, req);
 800417a:	f7ff ff27 	bl	8003fcc <USBD_SetConfig>
 800417e:	4604      	mov	r4, r0
          break;
 8004180:	e7e9      	b.n	8004156 <USBD_StdDevReq+0x24>
          USBD_GetConfig(pdev, req);
 8004182:	f7ff ff87 	bl	8004094 <USBD_GetConfig>
          break;
 8004186:	e7e6      	b.n	8004156 <USBD_StdDevReq+0x24>
          USBD_GetStatus(pdev, req);
 8004188:	f7ff ffa4 	bl	80040d4 <USBD_GetStatus>
  USBD_StatusTypeDef ret = USBD_OK;
 800418c:	462c      	mov	r4, r5
          break;
 800418e:	e7e2      	b.n	8004156 <USBD_StdDevReq+0x24>
          USBD_SetFeature(pdev, req);
 8004190:	f7ff fe07 	bl	8003da2 <USBD_SetFeature>
          break;
 8004194:	e7df      	b.n	8004156 <USBD_StdDevReq+0x24>
          USBD_ClrFeature(pdev, req);
 8004196:	f7ff ffb9 	bl	800410c <USBD_ClrFeature>
          break;
 800419a:	e7dc      	b.n	8004156 <USBD_StdDevReq+0x24>
          USBD_CtlError(pdev, req);
 800419c:	f7ff fe1f 	bl	8003dde <USBD_CtlError>
          break;
 80041a0:	e7d9      	b.n	8004156 <USBD_StdDevReq+0x24>

080041a2 <USBD_StdItfReq>:
{
 80041a2:	b570      	push	{r4, r5, r6, lr}
 80041a4:	4605      	mov	r5, r0
 80041a6:	460c      	mov	r4, r1
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80041a8:	780b      	ldrb	r3, [r1, #0]
 80041aa:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80041ae:	2b20      	cmp	r3, #32
 80041b0:	d007      	beq.n	80041c2 <USBD_StdItfReq+0x20>
 80041b2:	2b40      	cmp	r3, #64	; 0x40
 80041b4:	d005      	beq.n	80041c2 <USBD_StdItfReq+0x20>
 80041b6:	b123      	cbz	r3, 80041c2 <USBD_StdItfReq+0x20>
      USBD_CtlError(pdev, req);
 80041b8:	f7ff fe11 	bl	8003dde <USBD_CtlError>
  USBD_StatusTypeDef ret = USBD_OK;
 80041bc:	2600      	movs	r6, #0
}
 80041be:	4630      	mov	r0, r6
 80041c0:	bd70      	pop	{r4, r5, r6, pc}
      switch (pdev->dev_state)
 80041c2:	f895 329c 	ldrb.w	r3, [r5, #668]	; 0x29c
 80041c6:	3b01      	subs	r3, #1
 80041c8:	2b02      	cmp	r3, #2
 80041ca:	d818      	bhi.n	80041fe <USBD_StdItfReq+0x5c>
          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 80041cc:	7923      	ldrb	r3, [r4, #4]
 80041ce:	2b01      	cmp	r3, #1
 80041d0:	d80f      	bhi.n	80041f2 <USBD_StdItfReq+0x50>
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 80041d2:	f8d5 32b8 	ldr.w	r3, [r5, #696]	; 0x2b8
 80041d6:	689b      	ldr	r3, [r3, #8]
 80041d8:	4621      	mov	r1, r4
 80041da:	4628      	mov	r0, r5
 80041dc:	4798      	blx	r3
 80041de:	4606      	mov	r6, r0
            if ((req->wLength == 0U) && (ret == USBD_OK))
 80041e0:	88e3      	ldrh	r3, [r4, #6]
 80041e2:	2b00      	cmp	r3, #0
 80041e4:	d1eb      	bne.n	80041be <USBD_StdItfReq+0x1c>
 80041e6:	2800      	cmp	r0, #0
 80041e8:	d1e9      	bne.n	80041be <USBD_StdItfReq+0x1c>
              (void)USBD_CtlSendStatus(pdev);
 80041ea:	4628      	mov	r0, r5
 80041ec:	f000 f94a 	bl	8004484 <USBD_CtlSendStatus>
 80041f0:	e7e5      	b.n	80041be <USBD_StdItfReq+0x1c>
            USBD_CtlError(pdev, req);
 80041f2:	4621      	mov	r1, r4
 80041f4:	4628      	mov	r0, r5
 80041f6:	f7ff fdf2 	bl	8003dde <USBD_CtlError>
  USBD_StatusTypeDef ret = USBD_OK;
 80041fa:	2600      	movs	r6, #0
 80041fc:	e7df      	b.n	80041be <USBD_StdItfReq+0x1c>
          USBD_CtlError(pdev, req);
 80041fe:	4621      	mov	r1, r4
 8004200:	4628      	mov	r0, r5
 8004202:	f7ff fdec 	bl	8003dde <USBD_CtlError>
  USBD_StatusTypeDef ret = USBD_OK;
 8004206:	2600      	movs	r6, #0
          break;
 8004208:	e7d9      	b.n	80041be <USBD_StdItfReq+0x1c>

0800420a <USBD_StdEPReq>:
{
 800420a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800420c:	4606      	mov	r6, r0
 800420e:	460d      	mov	r5, r1
  ep_addr = LOBYTE(req->wIndex);
 8004210:	888b      	ldrh	r3, [r1, #4]
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8004212:	780c      	ldrb	r4, [r1, #0]
 8004214:	f004 0460 	and.w	r4, r4, #96	; 0x60
 8004218:	2c20      	cmp	r4, #32
 800421a:	d008      	beq.n	800422e <USBD_StdEPReq+0x24>
 800421c:	b2d9      	uxtb	r1, r3
 800421e:	2c40      	cmp	r4, #64	; 0x40
 8004220:	d005      	beq.n	800422e <USBD_StdEPReq+0x24>
 8004222:	b16c      	cbz	r4, 8004240 <USBD_StdEPReq+0x36>
      USBD_CtlError(pdev, req);
 8004224:	4629      	mov	r1, r5
 8004226:	f7ff fdda 	bl	8003dde <USBD_CtlError>
  USBD_StatusTypeDef ret = USBD_OK;
 800422a:	2400      	movs	r4, #0
      break;
 800422c:	e006      	b.n	800423c <USBD_StdEPReq+0x32>
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800422e:	f8d6 32b8 	ldr.w	r3, [r6, #696]	; 0x2b8
 8004232:	689b      	ldr	r3, [r3, #8]
 8004234:	4629      	mov	r1, r5
 8004236:	4630      	mov	r0, r6
 8004238:	4798      	blx	r3
 800423a:	4604      	mov	r4, r0
}
 800423c:	4620      	mov	r0, r4
 800423e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      switch (req->bRequest)
 8004240:	786f      	ldrb	r7, [r5, #1]
 8004242:	2f01      	cmp	r7, #1
 8004244:	d02f      	beq.n	80042a6 <USBD_StdEPReq+0x9c>
 8004246:	2f03      	cmp	r7, #3
 8004248:	d005      	beq.n	8004256 <USBD_StdEPReq+0x4c>
 800424a:	2f00      	cmp	r7, #0
 800424c:	d059      	beq.n	8004302 <USBD_StdEPReq+0xf8>
          USBD_CtlError(pdev, req);
 800424e:	4629      	mov	r1, r5
 8004250:	f7ff fdc5 	bl	8003dde <USBD_CtlError>
          break;
 8004254:	e7f2      	b.n	800423c <USBD_StdEPReq+0x32>
          switch (pdev->dev_state)
 8004256:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 800425a:	b2db      	uxtb	r3, r3
 800425c:	2b02      	cmp	r3, #2
 800425e:	d005      	beq.n	800426c <USBD_StdEPReq+0x62>
 8004260:	2b03      	cmp	r3, #3
 8004262:	d012      	beq.n	800428a <USBD_StdEPReq+0x80>
              USBD_CtlError(pdev, req);
 8004264:	4629      	mov	r1, r5
 8004266:	f7ff fdba 	bl	8003dde <USBD_CtlError>
              break;
 800426a:	e7e7      	b.n	800423c <USBD_StdEPReq+0x32>
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800426c:	b109      	cbz	r1, 8004272 <USBD_StdEPReq+0x68>
 800426e:	2980      	cmp	r1, #128	; 0x80
 8004270:	d104      	bne.n	800427c <USBD_StdEPReq+0x72>
                USBD_CtlError(pdev, req);
 8004272:	4629      	mov	r1, r5
 8004274:	4630      	mov	r0, r6
 8004276:	f7ff fdb2 	bl	8003dde <USBD_CtlError>
 800427a:	e7df      	b.n	800423c <USBD_StdEPReq+0x32>
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800427c:	f001 fe26 	bl	8005ecc <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8004280:	2180      	movs	r1, #128	; 0x80
 8004282:	4630      	mov	r0, r6
 8004284:	f001 fe22 	bl	8005ecc <USBD_LL_StallEP>
 8004288:	e7d8      	b.n	800423c <USBD_StdEPReq+0x32>
              if (req->wValue == USB_FEATURE_EP_HALT)
 800428a:	886b      	ldrh	r3, [r5, #2]
 800428c:	b923      	cbnz	r3, 8004298 <USBD_StdEPReq+0x8e>
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 800428e:	b119      	cbz	r1, 8004298 <USBD_StdEPReq+0x8e>
 8004290:	2980      	cmp	r1, #128	; 0x80
 8004292:	d001      	beq.n	8004298 <USBD_StdEPReq+0x8e>
 8004294:	88eb      	ldrh	r3, [r5, #6]
 8004296:	b11b      	cbz	r3, 80042a0 <USBD_StdEPReq+0x96>
              (void)USBD_CtlSendStatus(pdev);
 8004298:	4630      	mov	r0, r6
 800429a:	f000 f8f3 	bl	8004484 <USBD_CtlSendStatus>
              break;
 800429e:	e7cd      	b.n	800423c <USBD_StdEPReq+0x32>
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 80042a0:	f001 fe14 	bl	8005ecc <USBD_LL_StallEP>
 80042a4:	e7f8      	b.n	8004298 <USBD_StdEPReq+0x8e>
          switch (pdev->dev_state)
 80042a6:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 80042aa:	b2db      	uxtb	r3, r3
 80042ac:	2b02      	cmp	r3, #2
 80042ae:	d005      	beq.n	80042bc <USBD_StdEPReq+0xb2>
 80042b0:	2b03      	cmp	r3, #3
 80042b2:	d012      	beq.n	80042da <USBD_StdEPReq+0xd0>
              USBD_CtlError(pdev, req);
 80042b4:	4629      	mov	r1, r5
 80042b6:	f7ff fd92 	bl	8003dde <USBD_CtlError>
              break;
 80042ba:	e7bf      	b.n	800423c <USBD_StdEPReq+0x32>
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80042bc:	b109      	cbz	r1, 80042c2 <USBD_StdEPReq+0xb8>
 80042be:	2980      	cmp	r1, #128	; 0x80
 80042c0:	d104      	bne.n	80042cc <USBD_StdEPReq+0xc2>
                USBD_CtlError(pdev, req);
 80042c2:	4629      	mov	r1, r5
 80042c4:	4630      	mov	r0, r6
 80042c6:	f7ff fd8a 	bl	8003dde <USBD_CtlError>
 80042ca:	e7b7      	b.n	800423c <USBD_StdEPReq+0x32>
                (void)USBD_LL_StallEP(pdev, ep_addr);
 80042cc:	f001 fdfe 	bl	8005ecc <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 80042d0:	2180      	movs	r1, #128	; 0x80
 80042d2:	4630      	mov	r0, r6
 80042d4:	f001 fdfa 	bl	8005ecc <USBD_LL_StallEP>
 80042d8:	e7b0      	b.n	800423c <USBD_StdEPReq+0x32>
              if (req->wValue == USB_FEATURE_EP_HALT)
 80042da:	886b      	ldrh	r3, [r5, #2]
 80042dc:	2b00      	cmp	r3, #0
 80042de:	d1ad      	bne.n	800423c <USBD_StdEPReq+0x32>
                if ((ep_addr & 0x7FU) != 0x00U)
 80042e0:	f011 0f7f 	tst.w	r1, #127	; 0x7f
 80042e4:	d10a      	bne.n	80042fc <USBD_StdEPReq+0xf2>
                (void)USBD_CtlSendStatus(pdev);
 80042e6:	4630      	mov	r0, r6
 80042e8:	f000 f8cc 	bl	8004484 <USBD_CtlSendStatus>
                ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 80042ec:	f8d6 32b8 	ldr.w	r3, [r6, #696]	; 0x2b8
 80042f0:	689b      	ldr	r3, [r3, #8]
 80042f2:	4629      	mov	r1, r5
 80042f4:	4630      	mov	r0, r6
 80042f6:	4798      	blx	r3
 80042f8:	4604      	mov	r4, r0
 80042fa:	e79f      	b.n	800423c <USBD_StdEPReq+0x32>
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 80042fc:	f001 fdee 	bl	8005edc <USBD_LL_ClearStallEP>
 8004300:	e7f1      	b.n	80042e6 <USBD_StdEPReq+0xdc>
          switch (pdev->dev_state)
 8004302:	f890 229c 	ldrb.w	r2, [r0, #668]	; 0x29c
 8004306:	b2d2      	uxtb	r2, r2
 8004308:	2a02      	cmp	r2, #2
 800430a:	d006      	beq.n	800431a <USBD_StdEPReq+0x110>
 800430c:	2a03      	cmp	r2, #3
 800430e:	d029      	beq.n	8004364 <USBD_StdEPReq+0x15a>
              USBD_CtlError(pdev, req);
 8004310:	4629      	mov	r1, r5
 8004312:	f7ff fd64 	bl	8003dde <USBD_CtlError>
  USBD_StatusTypeDef ret = USBD_OK;
 8004316:	463c      	mov	r4, r7
              break;
 8004318:	e790      	b.n	800423c <USBD_StdEPReq+0x32>
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800431a:	b109      	cbz	r1, 8004320 <USBD_StdEPReq+0x116>
 800431c:	2980      	cmp	r1, #128	; 0x80
 800431e:	d113      	bne.n	8004348 <USBD_StdEPReq+0x13e>
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8004320:	f013 0f80 	tst.w	r3, #128	; 0x80
 8004324:	d115      	bne.n	8004352 <USBD_StdEPReq+0x148>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8004326:	f001 017f 	and.w	r1, r1, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800432a:	eb01 0181 	add.w	r1, r1, r1, lsl #2
 800432e:	0089      	lsls	r1, r1, #2
 8004330:	f501 71a8 	add.w	r1, r1, #336	; 0x150
 8004334:	4431      	add	r1, r6
 8004336:	3104      	adds	r1, #4
              pep->status = 0x0000U;
 8004338:	2300      	movs	r3, #0
 800433a:	600b      	str	r3, [r1, #0]
              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800433c:	2202      	movs	r2, #2
 800433e:	4630      	mov	r0, r6
 8004340:	f000 f874 	bl	800442c <USBD_CtlSendData>
  USBD_StatusTypeDef ret = USBD_OK;
 8004344:	463c      	mov	r4, r7
              break;
 8004346:	e779      	b.n	800423c <USBD_StdEPReq+0x32>
                USBD_CtlError(pdev, req);
 8004348:	4629      	mov	r1, r5
 800434a:	f7ff fd48 	bl	8003dde <USBD_CtlError>
  USBD_StatusTypeDef ret = USBD_OK;
 800434e:	463c      	mov	r4, r7
                break;
 8004350:	e774      	b.n	800423c <USBD_StdEPReq+0x32>
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8004352:	f001 017f 	and.w	r1, r1, #127	; 0x7f
 8004356:	eb01 0181 	add.w	r1, r1, r1, lsl #2
 800435a:	0089      	lsls	r1, r1, #2
 800435c:	3110      	adds	r1, #16
 800435e:	4431      	add	r1, r6
 8004360:	3104      	adds	r1, #4
 8004362:	e7e9      	b.n	8004338 <USBD_StdEPReq+0x12e>
              if ((ep_addr & 0x80U) == 0x80U)
 8004364:	b25b      	sxtb	r3, r3
 8004366:	2b00      	cmp	r3, #0
 8004368:	db1f      	blt.n	80043aa <USBD_StdEPReq+0x1a0>
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 800436a:	f001 020f 	and.w	r2, r1, #15
 800436e:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 8004372:	eb00 0282 	add.w	r2, r0, r2, lsl #2
 8004376:	f8b2 2164 	ldrh.w	r2, [r2, #356]	; 0x164
 800437a:	b322      	cbz	r2, 80043c6 <USBD_StdEPReq+0x1bc>
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800437c:	2b00      	cmp	r3, #0
 800437e:	db27      	blt.n	80043d0 <USBD_StdEPReq+0x1c6>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8004380:	f001 037f 	and.w	r3, r1, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8004384:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8004388:	009c      	lsls	r4, r3, #2
 800438a:	f504 74a8 	add.w	r4, r4, #336	; 0x150
 800438e:	4434      	add	r4, r6
 8004390:	3404      	adds	r4, #4
              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8004392:	b109      	cbz	r1, 8004398 <USBD_StdEPReq+0x18e>
 8004394:	2980      	cmp	r1, #128	; 0x80
 8004396:	d124      	bne.n	80043e2 <USBD_StdEPReq+0x1d8>
                pep->status = 0x0000U;
 8004398:	2300      	movs	r3, #0
 800439a:	6023      	str	r3, [r4, #0]
              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800439c:	2202      	movs	r2, #2
 800439e:	4621      	mov	r1, r4
 80043a0:	4630      	mov	r0, r6
 80043a2:	f000 f843 	bl	800442c <USBD_CtlSendData>
  USBD_StatusTypeDef ret = USBD_OK;
 80043a6:	463c      	mov	r4, r7
              break;
 80043a8:	e748      	b.n	800423c <USBD_StdEPReq+0x32>
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 80043aa:	f001 020f 	and.w	r2, r1, #15
 80043ae:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 80043b2:	eb00 0282 	add.w	r2, r0, r2, lsl #2
 80043b6:	8c92      	ldrh	r2, [r2, #36]	; 0x24
 80043b8:	2a00      	cmp	r2, #0
 80043ba:	d1df      	bne.n	800437c <USBD_StdEPReq+0x172>
                  USBD_CtlError(pdev, req);
 80043bc:	4629      	mov	r1, r5
 80043be:	f7ff fd0e 	bl	8003dde <USBD_CtlError>
  USBD_StatusTypeDef ret = USBD_OK;
 80043c2:	463c      	mov	r4, r7
                  break;
 80043c4:	e73a      	b.n	800423c <USBD_StdEPReq+0x32>
                  USBD_CtlError(pdev, req);
 80043c6:	4629      	mov	r1, r5
 80043c8:	f7ff fd09 	bl	8003dde <USBD_CtlError>
  USBD_StatusTypeDef ret = USBD_OK;
 80043cc:	463c      	mov	r4, r7
                  break;
 80043ce:	e735      	b.n	800423c <USBD_StdEPReq+0x32>
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80043d0:	f001 037f 	and.w	r3, r1, #127	; 0x7f
 80043d4:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 80043d8:	009c      	lsls	r4, r3, #2
 80043da:	3410      	adds	r4, #16
 80043dc:	4434      	add	r4, r6
 80043de:	3404      	adds	r4, #4
 80043e0:	e7d7      	b.n	8004392 <USBD_StdEPReq+0x188>
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 80043e2:	4630      	mov	r0, r6
 80043e4:	f001 fd2a 	bl	8005e3c <USBD_LL_IsStallEP>
 80043e8:	b110      	cbz	r0, 80043f0 <USBD_StdEPReq+0x1e6>
                pep->status = 0x0001U;
 80043ea:	2301      	movs	r3, #1
 80043ec:	6023      	str	r3, [r4, #0]
 80043ee:	e7d5      	b.n	800439c <USBD_StdEPReq+0x192>
                pep->status = 0x0000U;
 80043f0:	2300      	movs	r3, #0
 80043f2:	6023      	str	r3, [r4, #0]
 80043f4:	e7d2      	b.n	800439c <USBD_StdEPReq+0x192>

080043f6 <USBD_GetString>:
  if (desc == NULL)
 80043f6:	b1c0      	cbz	r0, 800442a <USBD_GetString+0x34>
{
 80043f8:	b570      	push	{r4, r5, r6, lr}
 80043fa:	460d      	mov	r5, r1
 80043fc:	4616      	mov	r6, r2
 80043fe:	4604      	mov	r4, r0
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 8004400:	f7ff fcc6 	bl	8003d90 <USBD_GetLen>
 8004404:	3001      	adds	r0, #1
 8004406:	0040      	lsls	r0, r0, #1
 8004408:	8030      	strh	r0, [r6, #0]
  unicode[idx] = *(uint8_t *)len;
 800440a:	7028      	strb	r0, [r5, #0]
  unicode[idx] = USB_DESC_TYPE_STRING;
 800440c:	2303      	movs	r3, #3
 800440e:	706b      	strb	r3, [r5, #1]
  idx++;
 8004410:	2302      	movs	r3, #2
  while (*pdesc != (uint8_t)'\0')
 8004412:	7822      	ldrb	r2, [r4, #0]
 8004414:	b142      	cbz	r2, 8004428 <USBD_GetString+0x32>
    unicode[idx] = *pdesc;
 8004416:	54ea      	strb	r2, [r5, r3]
    pdesc++;
 8004418:	3401      	adds	r4, #1
    idx++;
 800441a:	1c5a      	adds	r2, r3, #1
 800441c:	b2d2      	uxtb	r2, r2
    unicode[idx] = 0U;
 800441e:	2100      	movs	r1, #0
 8004420:	54a9      	strb	r1, [r5, r2]
    idx++;
 8004422:	3302      	adds	r3, #2
 8004424:	b2db      	uxtb	r3, r3
 8004426:	e7f4      	b.n	8004412 <USBD_GetString+0x1c>
}
 8004428:	bd70      	pop	{r4, r5, r6, pc}
 800442a:	4770      	bx	lr

0800442c <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 800442c:	b510      	push	{r4, lr}
 800442e:	4613      	mov	r3, r2
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8004430:	2202      	movs	r2, #2
 8004432:	f8c0 2294 	str.w	r2, [r0, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 8004436:	6183      	str	r3, [r0, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 8004438:	61c3      	str	r3, [r0, #28]
#endif

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800443a:	460a      	mov	r2, r1
 800443c:	2100      	movs	r1, #0
 800443e:	f001 fd5d 	bl	8005efc <USBD_LL_Transmit>

  return USBD_OK;
}
 8004442:	2000      	movs	r0, #0
 8004444:	bd10      	pop	{r4, pc}

08004446 <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 8004446:	b508      	push	{r3, lr}
 8004448:	4613      	mov	r3, r2
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800444a:	460a      	mov	r2, r1
 800444c:	2100      	movs	r1, #0
 800444e:	f001 fd55 	bl	8005efc <USBD_LL_Transmit>

  return USBD_OK;
}
 8004452:	2000      	movs	r0, #0
 8004454:	bd08      	pop	{r3, pc}

08004456 <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 8004456:	b510      	push	{r4, lr}
 8004458:	4613      	mov	r3, r2
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 800445a:	2203      	movs	r2, #3
 800445c:	f8c0 2294 	str.w	r2, [r0, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 8004460:	f8c0 3158 	str.w	r3, [r0, #344]	; 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 8004464:	f8c0 315c 	str.w	r3, [r0, #348]	; 0x15c
#endif

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8004468:	460a      	mov	r2, r1
 800446a:	2100      	movs	r1, #0
 800446c:	f001 fd4e 	bl	8005f0c <USBD_LL_PrepareReceive>

  return USBD_OK;
}
 8004470:	2000      	movs	r0, #0
 8004472:	bd10      	pop	{r4, pc}

08004474 <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 8004474:	b508      	push	{r3, lr}
 8004476:	4613      	mov	r3, r2
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8004478:	460a      	mov	r2, r1
 800447a:	2100      	movs	r1, #0
 800447c:	f001 fd46 	bl	8005f0c <USBD_LL_PrepareReceive>

  return USBD_OK;
}
 8004480:	2000      	movs	r0, #0
 8004482:	bd08      	pop	{r3, pc}

08004484 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8004484:	b508      	push	{r3, lr}
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8004486:	2204      	movs	r2, #4
 8004488:	f8c0 2294 	str.w	r2, [r0, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800448c:	2300      	movs	r3, #0
 800448e:	461a      	mov	r2, r3
 8004490:	4619      	mov	r1, r3
 8004492:	f001 fd33 	bl	8005efc <USBD_LL_Transmit>

  return USBD_OK;
}
 8004496:	2000      	movs	r0, #0
 8004498:	bd08      	pop	{r3, pc}

0800449a <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800449a:	b508      	push	{r3, lr}
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800449c:	2205      	movs	r2, #5
 800449e:	f8c0 2294 	str.w	r2, [r0, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80044a2:	2300      	movs	r3, #0
 80044a4:	461a      	mov	r2, r3
 80044a6:	4619      	mov	r1, r3
 80044a8:	f001 fd30 	bl	8005f0c <USBD_LL_PrepareReceive>

  return USBD_OK;
}
 80044ac:	2000      	movs	r0, #0
 80044ae:	bd08      	pop	{r3, pc}

080044b0 <makeFreeRtosPriority>:
/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
  
  if (priority != osPriorityError) {
 80044b0:	2884      	cmp	r0, #132	; 0x84
 80044b2:	d001      	beq.n	80044b8 <makeFreeRtosPriority+0x8>
    fpriority += (priority - osPriorityIdle);
 80044b4:	3003      	adds	r0, #3
 80044b6:	4770      	bx	lr
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 80044b8:	2000      	movs	r0, #0
  }
  
  return fpriority;
}
 80044ba:	4770      	bx	lr

080044bc <inHandlerMode>:
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80044bc:	f3ef 8005 	mrs	r0, IPSR

/* Determine whether we are in thread mode or handler mode. */
static int inHandlerMode (void)
{
  return __get_IPSR() != 0;
}
 80044c0:	3800      	subs	r0, #0
 80044c2:	bf18      	it	ne
 80044c4:	2001      	movne	r0, #1
 80044c6:	4770      	bx	lr

080044c8 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 80044c8:	b508      	push	{r3, lr}
  vTaskStartScheduler();
 80044ca:	f000 fd29 	bl	8004f20 <vTaskStartScheduler>
  
  return osOK;
}
 80044ce:	2000      	movs	r0, #0
 80044d0:	bd08      	pop	{r3, pc}

080044d2 <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 80044d2:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80044d6:	b087      	sub	sp, #28
 80044d8:	4604      	mov	r4, r0
 80044da:	460f      	mov	r7, r1
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 80044dc:	6945      	ldr	r5, [r0, #20]
 80044de:	b1bd      	cbz	r5, 8004510 <osThreadCreate+0x3e>
 80044e0:	6986      	ldr	r6, [r0, #24]
 80044e2:	b1ae      	cbz	r6, 8004510 <osThreadCreate+0x3e>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80044e4:	f8d0 8004 	ldr.w	r8, [r0, #4]
 80044e8:	f8d0 9000 	ldr.w	r9, [r0]
 80044ec:	f9b0 0008 	ldrsh.w	r0, [r0, #8]
 80044f0:	f7ff ffde 	bl	80044b0 <makeFreeRtosPriority>
 80044f4:	9602      	str	r6, [sp, #8]
 80044f6:	9501      	str	r5, [sp, #4]
 80044f8:	9000      	str	r0, [sp, #0]
 80044fa:	463b      	mov	r3, r7
 80044fc:	6922      	ldr	r2, [r4, #16]
 80044fe:	4649      	mov	r1, r9
 8004500:	4640      	mov	r0, r8
 8004502:	f000 fc9f 	bl	8004e44 <xTaskCreateStatic>
 8004506:	9005      	str	r0, [sp, #20]
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 8004508:	9805      	ldr	r0, [sp, #20]
}
 800450a:	b007      	add	sp, #28
 800450c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8004510:	6865      	ldr	r5, [r4, #4]
 8004512:	6826      	ldr	r6, [r4, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8004514:	f8d4 8010 	ldr.w	r8, [r4, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8004518:	f9b4 0008 	ldrsh.w	r0, [r4, #8]
 800451c:	f7ff ffc8 	bl	80044b0 <makeFreeRtosPriority>
 8004520:	ab05      	add	r3, sp, #20
 8004522:	9301      	str	r3, [sp, #4]
 8004524:	9000      	str	r0, [sp, #0]
 8004526:	463b      	mov	r3, r7
 8004528:	fa1f f288 	uxth.w	r2, r8
 800452c:	4631      	mov	r1, r6
 800452e:	4628      	mov	r0, r5
 8004530:	f000 fcc2 	bl	8004eb8 <xTaskCreate>
 8004534:	2801      	cmp	r0, #1
 8004536:	d0e7      	beq.n	8004508 <osThreadCreate+0x36>
      return NULL;
 8004538:	2000      	movs	r0, #0
 800453a:	e7e6      	b.n	800450a <osThreadCreate+0x38>

0800453c <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 800453c:	b508      	push	{r3, lr}
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 800453e:	b900      	cbnz	r0, 8004542 <osDelay+0x6>
 8004540:	2001      	movs	r0, #1
 8004542:	f000 fe33 	bl	80051ac <vTaskDelay>
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 8004546:	2000      	movs	r0, #0
 8004548:	bd08      	pop	{r3, pc}

0800454a <osMessageCreate>:
* @param  thread_id     thread ID (obtained by \ref osThreadCreate or \ref osThreadGetId) or NULL.
* @retval  message queue ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osMessageCreate shall be consistent in every CMSIS-RTOS.
*/
osMessageQId osMessageCreate (const osMessageQDef_t *queue_def, osThreadId thread_id)
{
 800454a:	b500      	push	{lr}
 800454c:	b083      	sub	sp, #12
  (void) thread_id;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  if ((queue_def->buffer != NULL) && (queue_def->controlblock != NULL)) {
 800454e:	6882      	ldr	r2, [r0, #8]
 8004550:	b142      	cbz	r2, 8004564 <osMessageCreate+0x1a>
 8004552:	68c3      	ldr	r3, [r0, #12]
 8004554:	b133      	cbz	r3, 8004564 <osMessageCreate+0x1a>
    return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
 8004556:	2100      	movs	r1, #0
 8004558:	9100      	str	r1, [sp, #0]
 800455a:	6841      	ldr	r1, [r0, #4]
 800455c:	6800      	ldr	r0, [r0, #0]
 800455e:	f000 f953 	bl	8004808 <xQueueGenericCreateStatic>
 8004562:	e004      	b.n	800456e <osMessageCreate+0x24>
  }
  else {
    return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
 8004564:	2200      	movs	r2, #0
 8004566:	6841      	ldr	r1, [r0, #4]
 8004568:	6800      	ldr	r0, [r0, #0]
 800456a:	f000 f997 	bl	800489c <xQueueGenericCreate>
#elif ( configSUPPORT_STATIC_ALLOCATION == 1 )
  return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
#else  
  return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
#endif
}
 800456e:	b003      	add	sp, #12
 8004570:	f85d fb04 	ldr.w	pc, [sp], #4

08004574 <osMessagePut>:
* @param  millisec  timeout value or 0 in case of no time-out.
* @retval status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMessagePut shall be consistent in every CMSIS-RTOS.
*/
osStatus osMessagePut (osMessageQId queue_id, uint32_t info, uint32_t millisec)
{
 8004574:	b530      	push	{r4, r5, lr}
 8004576:	b085      	sub	sp, #20
 8004578:	4604      	mov	r4, r0
 800457a:	9101      	str	r1, [sp, #4]
  portBASE_TYPE taskWoken = pdFALSE;
 800457c:	2300      	movs	r3, #0
 800457e:	9303      	str	r3, [sp, #12]
  TickType_t ticks;
  
  ticks = millisec / portTICK_PERIOD_MS;
  if (ticks == 0) {
 8004580:	4615      	mov	r5, r2
 8004582:	b902      	cbnz	r2, 8004586 <osMessagePut+0x12>
    ticks = 1;
 8004584:	2501      	movs	r5, #1
  }
  
  if (inHandlerMode()) {
 8004586:	f7ff ff99 	bl	80044bc <inHandlerMode>
 800458a:	b198      	cbz	r0, 80045b4 <osMessagePut+0x40>
    if (xQueueSendFromISR(queue_id, &info, &taskWoken) != pdTRUE) {
 800458c:	2300      	movs	r3, #0
 800458e:	aa03      	add	r2, sp, #12
 8004590:	a901      	add	r1, sp, #4
 8004592:	4620      	mov	r0, r4
 8004594:	f000 fa66 	bl	8004a64 <xQueueGenericSendFromISR>
 8004598:	2801      	cmp	r0, #1
 800459a:	d116      	bne.n	80045ca <osMessagePut+0x56>
      return osErrorOS;
    }
    portEND_SWITCHING_ISR(taskWoken);
 800459c:	9b03      	ldr	r3, [sp, #12]
 800459e:	b1b3      	cbz	r3, 80045ce <osMessagePut+0x5a>
 80045a0:	4b0d      	ldr	r3, [pc, #52]	; (80045d8 <osMessagePut+0x64>)
 80045a2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80045a6:	601a      	str	r2, [r3, #0]
 80045a8:	f3bf 8f4f 	dsb	sy
 80045ac:	f3bf 8f6f 	isb	sy
    if (xQueueSend(queue_id, &info, ticks) != pdTRUE) {
      return osErrorOS;
    }
  }
  
  return osOK;
 80045b0:	2000      	movs	r0, #0
 80045b2:	e008      	b.n	80045c6 <osMessagePut+0x52>
    if (xQueueSend(queue_id, &info, ticks) != pdTRUE) {
 80045b4:	2300      	movs	r3, #0
 80045b6:	462a      	mov	r2, r5
 80045b8:	a901      	add	r1, sp, #4
 80045ba:	4620      	mov	r0, r4
 80045bc:	f000 f992 	bl	80048e4 <xQueueGenericSend>
 80045c0:	2801      	cmp	r0, #1
 80045c2:	d106      	bne.n	80045d2 <osMessagePut+0x5e>
  return osOK;
 80045c4:	2000      	movs	r0, #0
}
 80045c6:	b005      	add	sp, #20
 80045c8:	bd30      	pop	{r4, r5, pc}
      return osErrorOS;
 80045ca:	20ff      	movs	r0, #255	; 0xff
 80045cc:	e7fb      	b.n	80045c6 <osMessagePut+0x52>
  return osOK;
 80045ce:	2000      	movs	r0, #0
 80045d0:	e7f9      	b.n	80045c6 <osMessagePut+0x52>
      return osErrorOS;
 80045d2:	20ff      	movs	r0, #255	; 0xff
 80045d4:	e7f7      	b.n	80045c6 <osMessagePut+0x52>
 80045d6:	bf00      	nop
 80045d8:	e000ed04 	.word	0xe000ed04

080045dc <vListInitialise>:
void vListInitialise( List_t * const pxList )
{
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80045dc:	f100 0308 	add.w	r3, r0, #8
 80045e0:	6043      	str	r3, [r0, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 80045e2:	f04f 32ff 	mov.w	r2, #4294967295
 80045e6:	6082      	str	r2, [r0, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80045e8:	60c3      	str	r3, [r0, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80045ea:	6103      	str	r3, [r0, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80045ec:	2300      	movs	r3, #0
 80045ee:	6003      	str	r3, [r0, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 80045f0:	4770      	bx	lr

080045f2 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 80045f2:	2300      	movs	r3, #0
 80045f4:	6103      	str	r3, [r0, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80045f6:	4770      	bx	lr

080045f8 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
ListItem_t * const pxIndex = pxList->pxIndex;
 80045f8:	6843      	ldr	r3, [r0, #4]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 80045fa:	604b      	str	r3, [r1, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80045fc:	689a      	ldr	r2, [r3, #8]
 80045fe:	608a      	str	r2, [r1, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8004600:	6051      	str	r1, [r2, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8004602:	6099      	str	r1, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8004604:	6108      	str	r0, [r1, #16]

	( pxList->uxNumberOfItems )++;
 8004606:	6803      	ldr	r3, [r0, #0]
 8004608:	3301      	adds	r3, #1
 800460a:	6003      	str	r3, [r0, #0]
}
 800460c:	4770      	bx	lr

0800460e <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800460e:	b430      	push	{r4, r5}
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8004610:	680d      	ldr	r5, [r1, #0]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8004612:	f1b5 3fff 	cmp.w	r5, #4294967295
 8004616:	d011      	beq.n	800463c <vListInsert+0x2e>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8004618:	f100 0308 	add.w	r3, r0, #8
 800461c:	461c      	mov	r4, r3
 800461e:	685b      	ldr	r3, [r3, #4]
 8004620:	681a      	ldr	r2, [r3, #0]
 8004622:	42aa      	cmp	r2, r5
 8004624:	d9fa      	bls.n	800461c <vListInsert+0xe>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8004626:	6863      	ldr	r3, [r4, #4]
 8004628:	604b      	str	r3, [r1, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800462a:	6099      	str	r1, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800462c:	608c      	str	r4, [r1, #8]
	pxIterator->pxNext = pxNewListItem;
 800462e:	6061      	str	r1, [r4, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8004630:	6108      	str	r0, [r1, #16]

	( pxList->uxNumberOfItems )++;
 8004632:	6803      	ldr	r3, [r0, #0]
 8004634:	3301      	adds	r3, #1
 8004636:	6003      	str	r3, [r0, #0]
}
 8004638:	bc30      	pop	{r4, r5}
 800463a:	4770      	bx	lr
		pxIterator = pxList->xListEnd.pxPrevious;
 800463c:	6904      	ldr	r4, [r0, #16]
 800463e:	e7f2      	b.n	8004626 <vListInsert+0x18>

08004640 <uxListRemove>:

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8004640:	6903      	ldr	r3, [r0, #16]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8004642:	6841      	ldr	r1, [r0, #4]
 8004644:	6882      	ldr	r2, [r0, #8]
 8004646:	608a      	str	r2, [r1, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8004648:	6841      	ldr	r1, [r0, #4]
 800464a:	6051      	str	r1, [r2, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800464c:	685a      	ldr	r2, [r3, #4]
 800464e:	4282      	cmp	r2, r0
 8004650:	d006      	beq.n	8004660 <uxListRemove+0x20>
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8004652:	2200      	movs	r2, #0
 8004654:	6102      	str	r2, [r0, #16]
	( pxList->uxNumberOfItems )--;
 8004656:	681a      	ldr	r2, [r3, #0]
 8004658:	3a01      	subs	r2, #1
 800465a:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800465c:	6818      	ldr	r0, [r3, #0]
}
 800465e:	4770      	bx	lr
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8004660:	6882      	ldr	r2, [r0, #8]
 8004662:	605a      	str	r2, [r3, #4]
 8004664:	e7f5      	b.n	8004652 <uxListRemove+0x12>

08004666 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8004666:	b510      	push	{r4, lr}
 8004668:	4604      	mov	r4, r0
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800466a:	f000 ff93 	bl	8005594 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800466e:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 8004670:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8004672:	429a      	cmp	r2, r3
 8004674:	d004      	beq.n	8004680 <prvIsQueueFull+0x1a>
		{
			xReturn = pdTRUE;
		}
		else
		{
			xReturn = pdFALSE;
 8004676:	2400      	movs	r4, #0
		}
	}
	taskEXIT_CRITICAL();
 8004678:	f000 ffae 	bl	80055d8 <vPortExitCritical>

	return xReturn;
}
 800467c:	4620      	mov	r0, r4
 800467e:	bd10      	pop	{r4, pc}
			xReturn = pdTRUE;
 8004680:	2401      	movs	r4, #1
 8004682:	e7f9      	b.n	8004678 <prvIsQueueFull+0x12>

08004684 <prvCopyDataToQueue>:
{
 8004684:	b570      	push	{r4, r5, r6, lr}
 8004686:	4604      	mov	r4, r0
 8004688:	4615      	mov	r5, r2
	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800468a:	6b86      	ldr	r6, [r0, #56]	; 0x38
	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800468c:	6c02      	ldr	r2, [r0, #64]	; 0x40
 800468e:	b95a      	cbnz	r2, 80046a8 <prvCopyDataToQueue+0x24>
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8004690:	6803      	ldr	r3, [r0, #0]
 8004692:	b11b      	cbz	r3, 800469c <prvCopyDataToQueue+0x18>
BaseType_t xReturn = pdFALSE;
 8004694:	2000      	movs	r0, #0
	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8004696:	3601      	adds	r6, #1
 8004698:	63a6      	str	r6, [r4, #56]	; 0x38
}
 800469a:	bd70      	pop	{r4, r5, r6, pc}
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800469c:	6880      	ldr	r0, [r0, #8]
 800469e:	f000 feb9 	bl	8005414 <xTaskPriorityDisinherit>
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 80046a2:	2300      	movs	r3, #0
 80046a4:	60a3      	str	r3, [r4, #8]
 80046a6:	e7f6      	b.n	8004696 <prvCopyDataToQueue+0x12>
	else if( xPosition == queueSEND_TO_BACK )
 80046a8:	b96d      	cbnz	r5, 80046c6 <prvCopyDataToQueue+0x42>
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80046aa:	6840      	ldr	r0, [r0, #4]
 80046ac:	f001 fc68 	bl	8005f80 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80046b0:	6c22      	ldr	r2, [r4, #64]	; 0x40
 80046b2:	6863      	ldr	r3, [r4, #4]
 80046b4:	4413      	add	r3, r2
 80046b6:	6063      	str	r3, [r4, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80046b8:	68a2      	ldr	r2, [r4, #8]
 80046ba:	4293      	cmp	r3, r2
 80046bc:	d319      	bcc.n	80046f2 <prvCopyDataToQueue+0x6e>
			pxQueue->pcWriteTo = pxQueue->pcHead;
 80046be:	6823      	ldr	r3, [r4, #0]
 80046c0:	6063      	str	r3, [r4, #4]
BaseType_t xReturn = pdFALSE;
 80046c2:	4628      	mov	r0, r5
 80046c4:	e7e7      	b.n	8004696 <prvCopyDataToQueue+0x12>
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 80046c6:	68c0      	ldr	r0, [r0, #12]
 80046c8:	f001 fc5a 	bl	8005f80 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 80046cc:	6c22      	ldr	r2, [r4, #64]	; 0x40
 80046ce:	4251      	negs	r1, r2
 80046d0:	68e3      	ldr	r3, [r4, #12]
 80046d2:	1a9b      	subs	r3, r3, r2
 80046d4:	60e3      	str	r3, [r4, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80046d6:	6822      	ldr	r2, [r4, #0]
 80046d8:	4293      	cmp	r3, r2
 80046da:	d202      	bcs.n	80046e2 <prvCopyDataToQueue+0x5e>
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 80046dc:	68a3      	ldr	r3, [r4, #8]
 80046de:	440b      	add	r3, r1
 80046e0:	60e3      	str	r3, [r4, #12]
		if( xPosition == queueOVERWRITE )
 80046e2:	2d02      	cmp	r5, #2
 80046e4:	d001      	beq.n	80046ea <prvCopyDataToQueue+0x66>
BaseType_t xReturn = pdFALSE;
 80046e6:	2000      	movs	r0, #0
 80046e8:	e7d5      	b.n	8004696 <prvCopyDataToQueue+0x12>
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80046ea:	b126      	cbz	r6, 80046f6 <prvCopyDataToQueue+0x72>
				--uxMessagesWaiting;
 80046ec:	3e01      	subs	r6, #1
BaseType_t xReturn = pdFALSE;
 80046ee:	2000      	movs	r0, #0
 80046f0:	e7d1      	b.n	8004696 <prvCopyDataToQueue+0x12>
 80046f2:	4628      	mov	r0, r5
 80046f4:	e7cf      	b.n	8004696 <prvCopyDataToQueue+0x12>
 80046f6:	2000      	movs	r0, #0
 80046f8:	e7cd      	b.n	8004696 <prvCopyDataToQueue+0x12>

080046fa <prvUnlockQueue>:
{
 80046fa:	b538      	push	{r3, r4, r5, lr}
 80046fc:	4605      	mov	r5, r0
	taskENTER_CRITICAL();
 80046fe:	f000 ff49 	bl	8005594 <vPortEnterCritical>
		int8_t cTxLock = pxQueue->cTxLock;
 8004702:	f895 4045 	ldrb.w	r4, [r5, #69]	; 0x45
 8004706:	b264      	sxtb	r4, r4
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8004708:	e003      	b.n	8004712 <prvUnlockQueue+0x18>
						vTaskMissedYield();
 800470a:	f000 fe6d 	bl	80053e8 <vTaskMissedYield>
			--cTxLock;
 800470e:	3c01      	subs	r4, #1
 8004710:	b264      	sxtb	r4, r4
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8004712:	2c00      	cmp	r4, #0
 8004714:	dd08      	ble.n	8004728 <prvUnlockQueue+0x2e>
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8004716:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8004718:	b133      	cbz	r3, 8004728 <prvUnlockQueue+0x2e>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800471a:	f105 0024 	add.w	r0, r5, #36	; 0x24
 800471e:	f000 fdcf 	bl	80052c0 <xTaskRemoveFromEventList>
 8004722:	2800      	cmp	r0, #0
 8004724:	d0f3      	beq.n	800470e <prvUnlockQueue+0x14>
 8004726:	e7f0      	b.n	800470a <prvUnlockQueue+0x10>
		pxQueue->cTxLock = queueUNLOCKED;
 8004728:	23ff      	movs	r3, #255	; 0xff
 800472a:	f885 3045 	strb.w	r3, [r5, #69]	; 0x45
	taskEXIT_CRITICAL();
 800472e:	f000 ff53 	bl	80055d8 <vPortExitCritical>
	taskENTER_CRITICAL();
 8004732:	f000 ff2f 	bl	8005594 <vPortEnterCritical>
		int8_t cRxLock = pxQueue->cRxLock;
 8004736:	f895 4044 	ldrb.w	r4, [r5, #68]	; 0x44
 800473a:	b264      	sxtb	r4, r4
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800473c:	e003      	b.n	8004746 <prvUnlockQueue+0x4c>
					vTaskMissedYield();
 800473e:	f000 fe53 	bl	80053e8 <vTaskMissedYield>
				--cRxLock;
 8004742:	3c01      	subs	r4, #1
 8004744:	b264      	sxtb	r4, r4
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8004746:	2c00      	cmp	r4, #0
 8004748:	dd08      	ble.n	800475c <prvUnlockQueue+0x62>
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800474a:	692b      	ldr	r3, [r5, #16]
 800474c:	b133      	cbz	r3, 800475c <prvUnlockQueue+0x62>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800474e:	f105 0010 	add.w	r0, r5, #16
 8004752:	f000 fdb5 	bl	80052c0 <xTaskRemoveFromEventList>
 8004756:	2800      	cmp	r0, #0
 8004758:	d0f3      	beq.n	8004742 <prvUnlockQueue+0x48>
 800475a:	e7f0      	b.n	800473e <prvUnlockQueue+0x44>
		pxQueue->cRxLock = queueUNLOCKED;
 800475c:	23ff      	movs	r3, #255	; 0xff
 800475e:	f885 3044 	strb.w	r3, [r5, #68]	; 0x44
	taskEXIT_CRITICAL();
 8004762:	f000 ff39 	bl	80055d8 <vPortExitCritical>
}
 8004766:	bd38      	pop	{r3, r4, r5, pc}

08004768 <xQueueGenericReset>:
{
 8004768:	b538      	push	{r3, r4, r5, lr}
	configASSERT( pxQueue );
 800476a:	b1e0      	cbz	r0, 80047a6 <xQueueGenericReset+0x3e>
 800476c:	460d      	mov	r5, r1
 800476e:	4604      	mov	r4, r0
	taskENTER_CRITICAL();
 8004770:	f000 ff10 	bl	8005594 <vPortEnterCritical>
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8004774:	6821      	ldr	r1, [r4, #0]
 8004776:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 8004778:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800477a:	fb03 1002 	mla	r0, r3, r2, r1
 800477e:	60a0      	str	r0, [r4, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8004780:	2000      	movs	r0, #0
 8004782:	63a0      	str	r0, [r4, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8004784:	6061      	str	r1, [r4, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8004786:	3a01      	subs	r2, #1
 8004788:	fb02 1303 	mla	r3, r2, r3, r1
 800478c:	60e3      	str	r3, [r4, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800478e:	23ff      	movs	r3, #255	; 0xff
 8004790:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8004794:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
		if( xNewQueue == pdFALSE )
 8004798:	b9ed      	cbnz	r5, 80047d6 <xQueueGenericReset+0x6e>
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800479a:	6923      	ldr	r3, [r4, #16]
 800479c:	b963      	cbnz	r3, 80047b8 <xQueueGenericReset+0x50>
	taskEXIT_CRITICAL();
 800479e:	f000 ff1b 	bl	80055d8 <vPortExitCritical>
}
 80047a2:	2001      	movs	r0, #1
 80047a4:	bd38      	pop	{r3, r4, r5, pc}

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 80047a6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80047aa:	f383 8811 	msr	BASEPRI, r3
 80047ae:	f3bf 8f6f 	isb	sy
 80047b2:	f3bf 8f4f 	dsb	sy
	configASSERT( pxQueue );
 80047b6:	e7fe      	b.n	80047b6 <xQueueGenericReset+0x4e>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80047b8:	f104 0010 	add.w	r0, r4, #16
 80047bc:	f000 fd80 	bl	80052c0 <xTaskRemoveFromEventList>
 80047c0:	2800      	cmp	r0, #0
 80047c2:	d0ec      	beq.n	800479e <xQueueGenericReset+0x36>
					queueYIELD_IF_USING_PREEMPTION();
 80047c4:	4b08      	ldr	r3, [pc, #32]	; (80047e8 <xQueueGenericReset+0x80>)
 80047c6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80047ca:	601a      	str	r2, [r3, #0]
 80047cc:	f3bf 8f4f 	dsb	sy
 80047d0:	f3bf 8f6f 	isb	sy
 80047d4:	e7e3      	b.n	800479e <xQueueGenericReset+0x36>
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 80047d6:	f104 0010 	add.w	r0, r4, #16
 80047da:	f7ff feff 	bl	80045dc <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 80047de:	f104 0024 	add.w	r0, r4, #36	; 0x24
 80047e2:	f7ff fefb 	bl	80045dc <vListInitialise>
 80047e6:	e7da      	b.n	800479e <xQueueGenericReset+0x36>
 80047e8:	e000ed04 	.word	0xe000ed04

080047ec <prvInitialiseNewQueue>:
{
 80047ec:	b510      	push	{r4, lr}
 80047ee:	4603      	mov	r3, r0
 80047f0:	9802      	ldr	r0, [sp, #8]
	if( uxItemSize == ( UBaseType_t ) 0 )
 80047f2:	460c      	mov	r4, r1
 80047f4:	b931      	cbnz	r1, 8004804 <prvInitialiseNewQueue+0x18>
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 80047f6:	6000      	str	r0, [r0, #0]
	pxNewQueue->uxLength = uxQueueLength;
 80047f8:	63c3      	str	r3, [r0, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 80047fa:	6404      	str	r4, [r0, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 80047fc:	2101      	movs	r1, #1
 80047fe:	f7ff ffb3 	bl	8004768 <xQueueGenericReset>
}
 8004802:	bd10      	pop	{r4, pc}
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8004804:	6002      	str	r2, [r0, #0]
 8004806:	e7f7      	b.n	80047f8 <prvInitialiseNewQueue+0xc>

08004808 <xQueueGenericCreateStatic>:
		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8004808:	b940      	cbnz	r0, 800481c <xQueueGenericCreateStatic+0x14>
 800480a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800480e:	f383 8811 	msr	BASEPRI, r3
 8004812:	f3bf 8f6f 	isb	sy
 8004816:	f3bf 8f4f 	dsb	sy
 800481a:	e7fe      	b.n	800481a <xQueueGenericCreateStatic+0x12>
	{
 800481c:	b530      	push	{r4, r5, lr}
 800481e:	b085      	sub	sp, #20
 8004820:	461c      	mov	r4, r3
 8004822:	4605      	mov	r5, r0
		configASSERT( pxStaticQueue != NULL );
 8004824:	b153      	cbz	r3, 800483c <xQueueGenericCreateStatic+0x34>
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8004826:	b192      	cbz	r2, 800484e <xQueueGenericCreateStatic+0x46>
 8004828:	b989      	cbnz	r1, 800484e <xQueueGenericCreateStatic+0x46>
 800482a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800482e:	f383 8811 	msr	BASEPRI, r3
 8004832:	f3bf 8f6f 	isb	sy
 8004836:	f3bf 8f4f 	dsb	sy
 800483a:	e7fe      	b.n	800483a <xQueueGenericCreateStatic+0x32>
 800483c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004840:	f383 8811 	msr	BASEPRI, r3
 8004844:	f3bf 8f6f 	isb	sy
 8004848:	f3bf 8f4f 	dsb	sy
		configASSERT( pxStaticQueue != NULL );
 800484c:	e7fe      	b.n	800484c <xQueueGenericCreateStatic+0x44>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800484e:	b16a      	cbz	r2, 800486c <xQueueGenericCreateStatic+0x64>
			volatile size_t xSize = sizeof( StaticQueue_t );
 8004850:	2348      	movs	r3, #72	; 0x48
 8004852:	9303      	str	r3, [sp, #12]
			configASSERT( xSize == sizeof( Queue_t ) );
 8004854:	9b03      	ldr	r3, [sp, #12]
 8004856:	2b48      	cmp	r3, #72	; 0x48
 8004858:	d013      	beq.n	8004882 <xQueueGenericCreateStatic+0x7a>
 800485a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800485e:	f383 8811 	msr	BASEPRI, r3
 8004862:	f3bf 8f6f 	isb	sy
 8004866:	f3bf 8f4f 	dsb	sy
 800486a:	e7fe      	b.n	800486a <xQueueGenericCreateStatic+0x62>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800486c:	2900      	cmp	r1, #0
 800486e:	d0ef      	beq.n	8004850 <xQueueGenericCreateStatic+0x48>
 8004870:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004874:	f383 8811 	msr	BASEPRI, r3
 8004878:	f3bf 8f6f 	isb	sy
 800487c:	f3bf 8f4f 	dsb	sy
 8004880:	e7fe      	b.n	8004880 <xQueueGenericCreateStatic+0x78>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8004882:	9b03      	ldr	r3, [sp, #12]
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8004884:	2301      	movs	r3, #1
 8004886:	f884 3046 	strb.w	r3, [r4, #70]	; 0x46
			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800488a:	9400      	str	r4, [sp, #0]
 800488c:	f89d 3020 	ldrb.w	r3, [sp, #32]
 8004890:	4628      	mov	r0, r5
 8004892:	f7ff ffab 	bl	80047ec <prvInitialiseNewQueue>
	}
 8004896:	4620      	mov	r0, r4
 8004898:	b005      	add	sp, #20
 800489a:	bd30      	pop	{r4, r5, pc}

0800489c <xQueueGenericCreate>:
		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800489c:	b940      	cbnz	r0, 80048b0 <xQueueGenericCreate+0x14>
 800489e:	f04f 0350 	mov.w	r3, #80	; 0x50
 80048a2:	f383 8811 	msr	BASEPRI, r3
 80048a6:	f3bf 8f6f 	isb	sy
 80048aa:	f3bf 8f4f 	dsb	sy
 80048ae:	e7fe      	b.n	80048ae <xQueueGenericCreate+0x12>
	{
 80048b0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80048b2:	b083      	sub	sp, #12
 80048b4:	460d      	mov	r5, r1
 80048b6:	4616      	mov	r6, r2
 80048b8:	4607      	mov	r7, r0
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80048ba:	fb01 f000 	mul.w	r0, r1, r0
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 80048be:	3048      	adds	r0, #72	; 0x48
 80048c0:	f001 f81e 	bl	8005900 <pvPortMalloc>
		if( pxNewQueue != NULL )
 80048c4:	4604      	mov	r4, r0
 80048c6:	b150      	cbz	r0, 80048de <xQueueGenericCreate+0x42>
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 80048c8:	2300      	movs	r3, #0
 80048ca:	f880 3046 	strb.w	r3, [r0, #70]	; 0x46
			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80048ce:	9000      	str	r0, [sp, #0]
 80048d0:	4633      	mov	r3, r6
 80048d2:	f100 0248 	add.w	r2, r0, #72	; 0x48
 80048d6:	4629      	mov	r1, r5
 80048d8:	4638      	mov	r0, r7
 80048da:	f7ff ff87 	bl	80047ec <prvInitialiseNewQueue>
	}
 80048de:	4620      	mov	r0, r4
 80048e0:	b003      	add	sp, #12
 80048e2:	bdf0      	pop	{r4, r5, r6, r7, pc}

080048e4 <xQueueGenericSend>:
{
 80048e4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80048e6:	b085      	sub	sp, #20
 80048e8:	9201      	str	r2, [sp, #4]
	configASSERT( pxQueue );
 80048ea:	b188      	cbz	r0, 8004910 <xQueueGenericSend+0x2c>
 80048ec:	460e      	mov	r6, r1
 80048ee:	461d      	mov	r5, r3
 80048f0:	4604      	mov	r4, r0
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80048f2:	b1b1      	cbz	r1, 8004922 <xQueueGenericSend+0x3e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80048f4:	2d02      	cmp	r5, #2
 80048f6:	d120      	bne.n	800493a <xQueueGenericSend+0x56>
 80048f8:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 80048fa:	2b01      	cmp	r3, #1
 80048fc:	d01d      	beq.n	800493a <xQueueGenericSend+0x56>
 80048fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004902:	f383 8811 	msr	BASEPRI, r3
 8004906:	f3bf 8f6f 	isb	sy
 800490a:	f3bf 8f4f 	dsb	sy
 800490e:	e7fe      	b.n	800490e <xQueueGenericSend+0x2a>
 8004910:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004914:	f383 8811 	msr	BASEPRI, r3
 8004918:	f3bf 8f6f 	isb	sy
 800491c:	f3bf 8f4f 	dsb	sy
	configASSERT( pxQueue );
 8004920:	e7fe      	b.n	8004920 <xQueueGenericSend+0x3c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8004922:	6c03      	ldr	r3, [r0, #64]	; 0x40
 8004924:	2b00      	cmp	r3, #0
 8004926:	d0e5      	beq.n	80048f4 <xQueueGenericSend+0x10>
 8004928:	f04f 0350 	mov.w	r3, #80	; 0x50
 800492c:	f383 8811 	msr	BASEPRI, r3
 8004930:	f3bf 8f6f 	isb	sy
 8004934:	f3bf 8f4f 	dsb	sy
 8004938:	e7fe      	b.n	8004938 <xQueueGenericSend+0x54>
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800493a:	f000 fd5b 	bl	80053f4 <xTaskGetSchedulerState>
 800493e:	4607      	mov	r7, r0
 8004940:	b958      	cbnz	r0, 800495a <xQueueGenericSend+0x76>
 8004942:	9b01      	ldr	r3, [sp, #4]
 8004944:	2b00      	cmp	r3, #0
 8004946:	d044      	beq.n	80049d2 <xQueueGenericSend+0xee>
 8004948:	f04f 0350 	mov.w	r3, #80	; 0x50
 800494c:	f383 8811 	msr	BASEPRI, r3
 8004950:	f3bf 8f6f 	isb	sy
 8004954:	f3bf 8f4f 	dsb	sy
 8004958:	e7fe      	b.n	8004958 <xQueueGenericSend+0x74>
 800495a:	2700      	movs	r7, #0
 800495c:	e039      	b.n	80049d2 <xQueueGenericSend+0xee>
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800495e:	462a      	mov	r2, r5
 8004960:	4631      	mov	r1, r6
 8004962:	4620      	mov	r0, r4
 8004964:	f7ff fe8e 	bl	8004684 <prvCopyDataToQueue>
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8004968:	6a62      	ldr	r2, [r4, #36]	; 0x24
 800496a:	b96a      	cbnz	r2, 8004988 <xQueueGenericSend+0xa4>
					else if( xYieldRequired != pdFALSE )
 800496c:	b138      	cbz	r0, 800497e <xQueueGenericSend+0x9a>
						queueYIELD_IF_USING_PREEMPTION();
 800496e:	4b3c      	ldr	r3, [pc, #240]	; (8004a60 <xQueueGenericSend+0x17c>)
 8004970:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004974:	601a      	str	r2, [r3, #0]
 8004976:	f3bf 8f4f 	dsb	sy
 800497a:	f3bf 8f6f 	isb	sy
				taskEXIT_CRITICAL();
 800497e:	f000 fe2b 	bl	80055d8 <vPortExitCritical>
				return pdPASS;
 8004982:	2001      	movs	r0, #1
}
 8004984:	b005      	add	sp, #20
 8004986:	bdf0      	pop	{r4, r5, r6, r7, pc}
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8004988:	f104 0024 	add.w	r0, r4, #36	; 0x24
 800498c:	f000 fc98 	bl	80052c0 <xTaskRemoveFromEventList>
 8004990:	2800      	cmp	r0, #0
 8004992:	d0f4      	beq.n	800497e <xQueueGenericSend+0x9a>
							queueYIELD_IF_USING_PREEMPTION();
 8004994:	4b32      	ldr	r3, [pc, #200]	; (8004a60 <xQueueGenericSend+0x17c>)
 8004996:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800499a:	601a      	str	r2, [r3, #0]
 800499c:	f3bf 8f4f 	dsb	sy
 80049a0:	f3bf 8f6f 	isb	sy
 80049a4:	e7eb      	b.n	800497e <xQueueGenericSend+0x9a>
					taskEXIT_CRITICAL();
 80049a6:	f000 fe17 	bl	80055d8 <vPortExitCritical>
					return errQUEUE_FULL;
 80049aa:	2000      	movs	r0, #0
 80049ac:	e7ea      	b.n	8004984 <xQueueGenericSend+0xa0>
					vTaskInternalSetTimeOutState( &xTimeOut );
 80049ae:	a802      	add	r0, sp, #8
 80049b0:	f000 fccc 	bl	800534c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80049b4:	2701      	movs	r7, #1
 80049b6:	e019      	b.n	80049ec <xQueueGenericSend+0x108>
		prvLockQueue( pxQueue );
 80049b8:	2300      	movs	r3, #0
 80049ba:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
 80049be:	e021      	b.n	8004a04 <xQueueGenericSend+0x120>
 80049c0:	2300      	movs	r3, #0
 80049c2:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80049c6:	e023      	b.n	8004a10 <xQueueGenericSend+0x12c>
				prvUnlockQueue( pxQueue );
 80049c8:	4620      	mov	r0, r4
 80049ca:	f7ff fe96 	bl	80046fa <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80049ce:	f000 fb71 	bl	80050b4 <xTaskResumeAll>
		taskENTER_CRITICAL();
 80049d2:	f000 fddf 	bl	8005594 <vPortEnterCritical>
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80049d6:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 80049d8:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 80049da:	429a      	cmp	r2, r3
 80049dc:	d3bf      	bcc.n	800495e <xQueueGenericSend+0x7a>
 80049de:	2d02      	cmp	r5, #2
 80049e0:	d0bd      	beq.n	800495e <xQueueGenericSend+0x7a>
				if( xTicksToWait == ( TickType_t ) 0 )
 80049e2:	9b01      	ldr	r3, [sp, #4]
 80049e4:	2b00      	cmp	r3, #0
 80049e6:	d0de      	beq.n	80049a6 <xQueueGenericSend+0xc2>
				else if( xEntryTimeSet == pdFALSE )
 80049e8:	2f00      	cmp	r7, #0
 80049ea:	d0e0      	beq.n	80049ae <xQueueGenericSend+0xca>
		taskEXIT_CRITICAL();
 80049ec:	f000 fdf4 	bl	80055d8 <vPortExitCritical>
		vTaskSuspendAll();
 80049f0:	f000 facc 	bl	8004f8c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80049f4:	f000 fdce 	bl	8005594 <vPortEnterCritical>
 80049f8:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 80049fc:	b25b      	sxtb	r3, r3
 80049fe:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004a02:	d0d9      	beq.n	80049b8 <xQueueGenericSend+0xd4>
 8004a04:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 8004a08:	b25b      	sxtb	r3, r3
 8004a0a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004a0e:	d0d7      	beq.n	80049c0 <xQueueGenericSend+0xdc>
 8004a10:	f000 fde2 	bl	80055d8 <vPortExitCritical>
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8004a14:	a901      	add	r1, sp, #4
 8004a16:	a802      	add	r0, sp, #8
 8004a18:	f000 fca4 	bl	8005364 <xTaskCheckForTimeOut>
 8004a1c:	b9c8      	cbnz	r0, 8004a52 <xQueueGenericSend+0x16e>
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8004a1e:	4620      	mov	r0, r4
 8004a20:	f7ff fe21 	bl	8004666 <prvIsQueueFull>
 8004a24:	2800      	cmp	r0, #0
 8004a26:	d0cf      	beq.n	80049c8 <xQueueGenericSend+0xe4>
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8004a28:	9901      	ldr	r1, [sp, #4]
 8004a2a:	f104 0010 	add.w	r0, r4, #16
 8004a2e:	f000 fc2f 	bl	8005290 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8004a32:	4620      	mov	r0, r4
 8004a34:	f7ff fe61 	bl	80046fa <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8004a38:	f000 fb3c 	bl	80050b4 <xTaskResumeAll>
 8004a3c:	2800      	cmp	r0, #0
 8004a3e:	d1c8      	bne.n	80049d2 <xQueueGenericSend+0xee>
					portYIELD_WITHIN_API();
 8004a40:	4b07      	ldr	r3, [pc, #28]	; (8004a60 <xQueueGenericSend+0x17c>)
 8004a42:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004a46:	601a      	str	r2, [r3, #0]
 8004a48:	f3bf 8f4f 	dsb	sy
 8004a4c:	f3bf 8f6f 	isb	sy
 8004a50:	e7bf      	b.n	80049d2 <xQueueGenericSend+0xee>
			prvUnlockQueue( pxQueue );
 8004a52:	4620      	mov	r0, r4
 8004a54:	f7ff fe51 	bl	80046fa <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8004a58:	f000 fb2c 	bl	80050b4 <xTaskResumeAll>
			return errQUEUE_FULL;
 8004a5c:	2000      	movs	r0, #0
 8004a5e:	e791      	b.n	8004984 <xQueueGenericSend+0xa0>
 8004a60:	e000ed04 	.word	0xe000ed04

08004a64 <xQueueGenericSendFromISR>:
{
 8004a64:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	configASSERT( pxQueue );
 8004a68:	b190      	cbz	r0, 8004a90 <xQueueGenericSendFromISR+0x2c>
 8004a6a:	4689      	mov	r9, r1
 8004a6c:	4690      	mov	r8, r2
 8004a6e:	461f      	mov	r7, r3
 8004a70:	4604      	mov	r4, r0
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8004a72:	b1b1      	cbz	r1, 8004aa2 <xQueueGenericSendFromISR+0x3e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8004a74:	2f02      	cmp	r7, #2
 8004a76:	d120      	bne.n	8004aba <xQueueGenericSendFromISR+0x56>
 8004a78:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8004a7a:	2b01      	cmp	r3, #1
 8004a7c:	d01d      	beq.n	8004aba <xQueueGenericSendFromISR+0x56>
 8004a7e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004a82:	f383 8811 	msr	BASEPRI, r3
 8004a86:	f3bf 8f6f 	isb	sy
 8004a8a:	f3bf 8f4f 	dsb	sy
 8004a8e:	e7fe      	b.n	8004a8e <xQueueGenericSendFromISR+0x2a>
 8004a90:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004a94:	f383 8811 	msr	BASEPRI, r3
 8004a98:	f3bf 8f6f 	isb	sy
 8004a9c:	f3bf 8f4f 	dsb	sy
	configASSERT( pxQueue );
 8004aa0:	e7fe      	b.n	8004aa0 <xQueueGenericSendFromISR+0x3c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8004aa2:	6c03      	ldr	r3, [r0, #64]	; 0x40
 8004aa4:	2b00      	cmp	r3, #0
 8004aa6:	d0e5      	beq.n	8004a74 <xQueueGenericSendFromISR+0x10>
 8004aa8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004aac:	f383 8811 	msr	BASEPRI, r3
 8004ab0:	f3bf 8f6f 	isb	sy
 8004ab4:	f3bf 8f4f 	dsb	sy
 8004ab8:	e7fe      	b.n	8004ab8 <xQueueGenericSendFromISR+0x54>
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8004aba:	f000 fe95 	bl	80057e8 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8004abe:	f3ef 8611 	mrs	r6, BASEPRI
 8004ac2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004ac6:	f383 8811 	msr	BASEPRI, r3
 8004aca:	f3bf 8f6f 	isb	sy
 8004ace:	f3bf 8f4f 	dsb	sy
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8004ad2:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 8004ad4:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8004ad6:	429a      	cmp	r2, r3
 8004ad8:	d306      	bcc.n	8004ae8 <xQueueGenericSendFromISR+0x84>
 8004ada:	2f02      	cmp	r7, #2
 8004adc:	d004      	beq.n	8004ae8 <xQueueGenericSendFromISR+0x84>
			xReturn = errQUEUE_FULL;
 8004ade:	2000      	movs	r0, #0
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8004ae0:	f386 8811 	msr	BASEPRI, r6
}
 8004ae4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
			const int8_t cTxLock = pxQueue->cTxLock;
 8004ae8:	f894 5045 	ldrb.w	r5, [r4, #69]	; 0x45
 8004aec:	b26d      	sxtb	r5, r5
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8004aee:	6ba3      	ldr	r3, [r4, #56]	; 0x38
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8004af0:	463a      	mov	r2, r7
 8004af2:	4649      	mov	r1, r9
 8004af4:	4620      	mov	r0, r4
 8004af6:	f7ff fdc5 	bl	8004684 <prvCopyDataToQueue>
			if( cTxLock == queueUNLOCKED )
 8004afa:	f1b5 3fff 	cmp.w	r5, #4294967295
 8004afe:	d005      	beq.n	8004b0c <xQueueGenericSendFromISR+0xa8>
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8004b00:	1c6b      	adds	r3, r5, #1
 8004b02:	b25b      	sxtb	r3, r3
 8004b04:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
			xReturn = pdPASS;
 8004b08:	2001      	movs	r0, #1
 8004b0a:	e7e9      	b.n	8004ae0 <xQueueGenericSendFromISR+0x7c>
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8004b0c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8004b0e:	b90b      	cbnz	r3, 8004b14 <xQueueGenericSendFromISR+0xb0>
			xReturn = pdPASS;
 8004b10:	2001      	movs	r0, #1
 8004b12:	e7e5      	b.n	8004ae0 <xQueueGenericSendFromISR+0x7c>
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8004b14:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8004b18:	f000 fbd2 	bl	80052c0 <xTaskRemoveFromEventList>
 8004b1c:	b130      	cbz	r0, 8004b2c <xQueueGenericSendFromISR+0xc8>
							if( pxHigherPriorityTaskWoken != NULL )
 8004b1e:	f1b8 0f00 	cmp.w	r8, #0
 8004b22:	d005      	beq.n	8004b30 <xQueueGenericSendFromISR+0xcc>
								*pxHigherPriorityTaskWoken = pdTRUE;
 8004b24:	2001      	movs	r0, #1
 8004b26:	f8c8 0000 	str.w	r0, [r8]
 8004b2a:	e7d9      	b.n	8004ae0 <xQueueGenericSendFromISR+0x7c>
			xReturn = pdPASS;
 8004b2c:	2001      	movs	r0, #1
 8004b2e:	e7d7      	b.n	8004ae0 <xQueueGenericSendFromISR+0x7c>
 8004b30:	2001      	movs	r0, #1
 8004b32:	e7d5      	b.n	8004ae0 <xQueueGenericSendFromISR+0x7c>

08004b34 <prvResetNextTaskUnblockTime>:

static void prvResetNextTaskUnblockTime( void )
{
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8004b34:	4b08      	ldr	r3, [pc, #32]	; (8004b58 <prvResetNextTaskUnblockTime+0x24>)
 8004b36:	681b      	ldr	r3, [r3, #0]
 8004b38:	681b      	ldr	r3, [r3, #0]
 8004b3a:	b923      	cbnz	r3, 8004b46 <prvResetNextTaskUnblockTime+0x12>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8004b3c:	4b07      	ldr	r3, [pc, #28]	; (8004b5c <prvResetNextTaskUnblockTime+0x28>)
 8004b3e:	f04f 32ff 	mov.w	r2, #4294967295
 8004b42:	601a      	str	r2, [r3, #0]
 8004b44:	4770      	bx	lr
	{
		/* The new current delayed list is not empty, get the value of
		the item at the head of the delayed list.  This is the time at
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004b46:	4b04      	ldr	r3, [pc, #16]	; (8004b58 <prvResetNextTaskUnblockTime+0x24>)
 8004b48:	681b      	ldr	r3, [r3, #0]
 8004b4a:	68db      	ldr	r3, [r3, #12]
 8004b4c:	68db      	ldr	r3, [r3, #12]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8004b4e:	685a      	ldr	r2, [r3, #4]
 8004b50:	4b02      	ldr	r3, [pc, #8]	; (8004b5c <prvResetNextTaskUnblockTime+0x28>)
 8004b52:	601a      	str	r2, [r3, #0]
	}
}
 8004b54:	4770      	bx	lr
 8004b56:	bf00      	nop
 8004b58:	200005e0 	.word	0x200005e0
 8004b5c:	200006b0 	.word	0x200006b0

08004b60 <prvInitialiseNewTask>:
{
 8004b60:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004b64:	4680      	mov	r8, r0
 8004b66:	4699      	mov	r9, r3
 8004b68:	9e08      	ldr	r6, [sp, #32]
 8004b6a:	f8dd a024 	ldr.w	sl, [sp, #36]	; 0x24
 8004b6e:	9c0a      	ldr	r4, [sp, #40]	; 0x28
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8004b70:	6b27      	ldr	r7, [r4, #48]	; 0x30
 8004b72:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
 8004b76:	3a01      	subs	r2, #1
 8004b78:	eb07 0782 	add.w	r7, r7, r2, lsl #2
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8004b7c:	f027 0707 	bic.w	r7, r7, #7
	if( pcName != NULL )
 8004b80:	b389      	cbz	r1, 8004be6 <prvInitialiseNewTask+0x86>
 8004b82:	460d      	mov	r5, r1
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8004b84:	2200      	movs	r2, #0
 8004b86:	2a0f      	cmp	r2, #15
 8004b88:	d807      	bhi.n	8004b9a <prvInitialiseNewTask+0x3a>
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8004b8a:	5ca9      	ldrb	r1, [r5, r2]
 8004b8c:	18a3      	adds	r3, r4, r2
 8004b8e:	f883 1034 	strb.w	r1, [r3, #52]	; 0x34
			if( pcName[ x ] == ( char ) 0x00 )
 8004b92:	5cab      	ldrb	r3, [r5, r2]
 8004b94:	b10b      	cbz	r3, 8004b9a <prvInitialiseNewTask+0x3a>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8004b96:	3201      	adds	r2, #1
 8004b98:	e7f5      	b.n	8004b86 <prvInitialiseNewTask+0x26>
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8004b9a:	2300      	movs	r3, #0
 8004b9c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8004ba0:	2e06      	cmp	r6, #6
 8004ba2:	d900      	bls.n	8004ba6 <prvInitialiseNewTask+0x46>
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8004ba4:	2606      	movs	r6, #6
	pxNewTCB->uxPriority = uxPriority;
 8004ba6:	62e6      	str	r6, [r4, #44]	; 0x2c
		pxNewTCB->uxBasePriority = uxPriority;
 8004ba8:	6466      	str	r6, [r4, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 8004baa:	2500      	movs	r5, #0
 8004bac:	64a5      	str	r5, [r4, #72]	; 0x48
	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8004bae:	1d20      	adds	r0, r4, #4
 8004bb0:	f7ff fd1f 	bl	80045f2 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8004bb4:	f104 0018 	add.w	r0, r4, #24
 8004bb8:	f7ff fd1b 	bl	80045f2 <vListInitialiseItem>
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8004bbc:	6124      	str	r4, [r4, #16]
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004bbe:	f1c6 0607 	rsb	r6, r6, #7
 8004bc2:	61a6      	str	r6, [r4, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8004bc4:	6264      	str	r4, [r4, #36]	; 0x24
		pxNewTCB->ulNotifiedValue = 0;
 8004bc6:	64e5      	str	r5, [r4, #76]	; 0x4c
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8004bc8:	f884 5050 	strb.w	r5, [r4, #80]	; 0x50
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8004bcc:	464a      	mov	r2, r9
 8004bce:	4641      	mov	r1, r8
 8004bd0:	4638      	mov	r0, r7
 8004bd2:	f000 fcb7 	bl	8005544 <pxPortInitialiseStack>
 8004bd6:	6020      	str	r0, [r4, #0]
	if( pxCreatedTask != NULL )
 8004bd8:	f1ba 0f00 	cmp.w	sl, #0
 8004bdc:	d001      	beq.n	8004be2 <prvInitialiseNewTask+0x82>
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8004bde:	f8ca 4000 	str.w	r4, [sl]
}
 8004be2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8004be6:	2300      	movs	r3, #0
 8004be8:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
 8004bec:	e7d8      	b.n	8004ba0 <prvInitialiseNewTask+0x40>
	...

08004bf0 <prvInitialiseTaskLists>:
{
 8004bf0:	b538      	push	{r3, r4, r5, lr}
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8004bf2:	2400      	movs	r4, #0
 8004bf4:	e007      	b.n	8004c06 <prvInitialiseTaskLists+0x16>
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8004bf6:	eb04 0284 	add.w	r2, r4, r4, lsl #2
 8004bfa:	0093      	lsls	r3, r2, #2
 8004bfc:	480e      	ldr	r0, [pc, #56]	; (8004c38 <prvInitialiseTaskLists+0x48>)
 8004bfe:	4418      	add	r0, r3
 8004c00:	f7ff fcec 	bl	80045dc <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8004c04:	3401      	adds	r4, #1
 8004c06:	2c06      	cmp	r4, #6
 8004c08:	d9f5      	bls.n	8004bf6 <prvInitialiseTaskLists+0x6>
	vListInitialise( &xDelayedTaskList1 );
 8004c0a:	4d0c      	ldr	r5, [pc, #48]	; (8004c3c <prvInitialiseTaskLists+0x4c>)
 8004c0c:	4628      	mov	r0, r5
 8004c0e:	f7ff fce5 	bl	80045dc <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8004c12:	4c0b      	ldr	r4, [pc, #44]	; (8004c40 <prvInitialiseTaskLists+0x50>)
 8004c14:	4620      	mov	r0, r4
 8004c16:	f7ff fce1 	bl	80045dc <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8004c1a:	480a      	ldr	r0, [pc, #40]	; (8004c44 <prvInitialiseTaskLists+0x54>)
 8004c1c:	f7ff fcde 	bl	80045dc <vListInitialise>
		vListInitialise( &xTasksWaitingTermination );
 8004c20:	4809      	ldr	r0, [pc, #36]	; (8004c48 <prvInitialiseTaskLists+0x58>)
 8004c22:	f7ff fcdb 	bl	80045dc <vListInitialise>
		vListInitialise( &xSuspendedTaskList );
 8004c26:	4809      	ldr	r0, [pc, #36]	; (8004c4c <prvInitialiseTaskLists+0x5c>)
 8004c28:	f7ff fcd8 	bl	80045dc <vListInitialise>
	pxDelayedTaskList = &xDelayedTaskList1;
 8004c2c:	4b08      	ldr	r3, [pc, #32]	; (8004c50 <prvInitialiseTaskLists+0x60>)
 8004c2e:	601d      	str	r5, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8004c30:	4b08      	ldr	r3, [pc, #32]	; (8004c54 <prvInitialiseTaskLists+0x64>)
 8004c32:	601c      	str	r4, [r3, #0]
}
 8004c34:	bd38      	pop	{r3, r4, r5, pc}
 8004c36:	bf00      	nop
 8004c38:	200005e8 	.word	0x200005e8
 8004c3c:	20000688 	.word	0x20000688
 8004c40:	2000069c 	.word	0x2000069c
 8004c44:	200006bc 	.word	0x200006bc
 8004c48:	200006e8 	.word	0x200006e8
 8004c4c:	200006d4 	.word	0x200006d4
 8004c50:	200005e0 	.word	0x200005e0
 8004c54:	200005e4 	.word	0x200005e4

08004c58 <prvAddNewTaskToReadyList>:
{
 8004c58:	b510      	push	{r4, lr}
 8004c5a:	4604      	mov	r4, r0
	taskENTER_CRITICAL();
 8004c5c:	f000 fc9a 	bl	8005594 <vPortEnterCritical>
		uxCurrentNumberOfTasks++;
 8004c60:	4a20      	ldr	r2, [pc, #128]	; (8004ce4 <prvAddNewTaskToReadyList+0x8c>)
 8004c62:	6813      	ldr	r3, [r2, #0]
 8004c64:	3301      	adds	r3, #1
 8004c66:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8004c68:	4b1f      	ldr	r3, [pc, #124]	; (8004ce8 <prvAddNewTaskToReadyList+0x90>)
 8004c6a:	681b      	ldr	r3, [r3, #0]
 8004c6c:	b15b      	cbz	r3, 8004c86 <prvAddNewTaskToReadyList+0x2e>
			if( xSchedulerRunning == pdFALSE )
 8004c6e:	4b1f      	ldr	r3, [pc, #124]	; (8004cec <prvAddNewTaskToReadyList+0x94>)
 8004c70:	681b      	ldr	r3, [r3, #0]
 8004c72:	b96b      	cbnz	r3, 8004c90 <prvAddNewTaskToReadyList+0x38>
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8004c74:	4b1c      	ldr	r3, [pc, #112]	; (8004ce8 <prvAddNewTaskToReadyList+0x90>)
 8004c76:	681b      	ldr	r3, [r3, #0]
 8004c78:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004c7a:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8004c7c:	429a      	cmp	r2, r3
 8004c7e:	d807      	bhi.n	8004c90 <prvAddNewTaskToReadyList+0x38>
					pxCurrentTCB = pxNewTCB;
 8004c80:	4b19      	ldr	r3, [pc, #100]	; (8004ce8 <prvAddNewTaskToReadyList+0x90>)
 8004c82:	601c      	str	r4, [r3, #0]
 8004c84:	e004      	b.n	8004c90 <prvAddNewTaskToReadyList+0x38>
			pxCurrentTCB = pxNewTCB;
 8004c86:	4b18      	ldr	r3, [pc, #96]	; (8004ce8 <prvAddNewTaskToReadyList+0x90>)
 8004c88:	601c      	str	r4, [r3, #0]
			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8004c8a:	6813      	ldr	r3, [r2, #0]
 8004c8c:	2b01      	cmp	r3, #1
 8004c8e:	d026      	beq.n	8004cde <prvAddNewTaskToReadyList+0x86>
		uxTaskNumber++;
 8004c90:	4a17      	ldr	r2, [pc, #92]	; (8004cf0 <prvAddNewTaskToReadyList+0x98>)
 8004c92:	6813      	ldr	r3, [r2, #0]
 8004c94:	3301      	adds	r3, #1
 8004c96:	6013      	str	r3, [r2, #0]
		prvAddTaskToReadyList( pxNewTCB );
 8004c98:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
 8004c9a:	2301      	movs	r3, #1
 8004c9c:	4083      	lsls	r3, r0
 8004c9e:	4a15      	ldr	r2, [pc, #84]	; (8004cf4 <prvAddNewTaskToReadyList+0x9c>)
 8004ca0:	6811      	ldr	r1, [r2, #0]
 8004ca2:	430b      	orrs	r3, r1
 8004ca4:	6013      	str	r3, [r2, #0]
 8004ca6:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8004caa:	1d21      	adds	r1, r4, #4
 8004cac:	4b12      	ldr	r3, [pc, #72]	; (8004cf8 <prvAddNewTaskToReadyList+0xa0>)
 8004cae:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 8004cb2:	f7ff fca1 	bl	80045f8 <vListInsertEnd>
	taskEXIT_CRITICAL();
 8004cb6:	f000 fc8f 	bl	80055d8 <vPortExitCritical>
	if( xSchedulerRunning != pdFALSE )
 8004cba:	4b0c      	ldr	r3, [pc, #48]	; (8004cec <prvAddNewTaskToReadyList+0x94>)
 8004cbc:	681b      	ldr	r3, [r3, #0]
 8004cbe:	b16b      	cbz	r3, 8004cdc <prvAddNewTaskToReadyList+0x84>
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8004cc0:	4b09      	ldr	r3, [pc, #36]	; (8004ce8 <prvAddNewTaskToReadyList+0x90>)
 8004cc2:	681b      	ldr	r3, [r3, #0]
 8004cc4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004cc6:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8004cc8:	429a      	cmp	r2, r3
 8004cca:	d207      	bcs.n	8004cdc <prvAddNewTaskToReadyList+0x84>
			taskYIELD_IF_USING_PREEMPTION();
 8004ccc:	4b0b      	ldr	r3, [pc, #44]	; (8004cfc <prvAddNewTaskToReadyList+0xa4>)
 8004cce:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004cd2:	601a      	str	r2, [r3, #0]
 8004cd4:	f3bf 8f4f 	dsb	sy
 8004cd8:	f3bf 8f6f 	isb	sy
}
 8004cdc:	bd10      	pop	{r4, pc}
				prvInitialiseTaskLists();
 8004cde:	f7ff ff87 	bl	8004bf0 <prvInitialiseTaskLists>
 8004ce2:	e7d5      	b.n	8004c90 <prvAddNewTaskToReadyList+0x38>
 8004ce4:	20000674 	.word	0x20000674
 8004ce8:	200005dc 	.word	0x200005dc
 8004cec:	200006d0 	.word	0x200006d0
 8004cf0:	20000680 	.word	0x20000680
 8004cf4:	20000684 	.word	0x20000684
 8004cf8:	200005e8 	.word	0x200005e8
 8004cfc:	e000ed04 	.word	0xe000ed04

08004d00 <prvDeleteTCB>:
	{
 8004d00:	b510      	push	{r4, lr}
 8004d02:	4604      	mov	r4, r0
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8004d04:	f890 3051 	ldrb.w	r3, [r0, #81]	; 0x51
 8004d08:	b163      	cbz	r3, 8004d24 <prvDeleteTCB+0x24>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8004d0a:	2b01      	cmp	r3, #1
 8004d0c:	d011      	beq.n	8004d32 <prvDeleteTCB+0x32>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8004d0e:	2b02      	cmp	r3, #2
 8004d10:	d00e      	beq.n	8004d30 <prvDeleteTCB+0x30>
	__asm volatile
 8004d12:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004d16:	f383 8811 	msr	BASEPRI, r3
 8004d1a:	f3bf 8f6f 	isb	sy
 8004d1e:	f3bf 8f4f 	dsb	sy
 8004d22:	e7fe      	b.n	8004d22 <prvDeleteTCB+0x22>
				vPortFree( pxTCB->pxStack );
 8004d24:	6b00      	ldr	r0, [r0, #48]	; 0x30
 8004d26:	f000 fe69 	bl	80059fc <vPortFree>
				vPortFree( pxTCB );
 8004d2a:	4620      	mov	r0, r4
 8004d2c:	f000 fe66 	bl	80059fc <vPortFree>
	}
 8004d30:	bd10      	pop	{r4, pc}
				vPortFree( pxTCB );
 8004d32:	f000 fe63 	bl	80059fc <vPortFree>
 8004d36:	e7fb      	b.n	8004d30 <prvDeleteTCB+0x30>

08004d38 <prvCheckTasksWaitingTermination>:
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8004d38:	4b0f      	ldr	r3, [pc, #60]	; (8004d78 <prvCheckTasksWaitingTermination+0x40>)
 8004d3a:	681b      	ldr	r3, [r3, #0]
 8004d3c:	b1d3      	cbz	r3, 8004d74 <prvCheckTasksWaitingTermination+0x3c>
{
 8004d3e:	b510      	push	{r4, lr}
			taskENTER_CRITICAL();
 8004d40:	f000 fc28 	bl	8005594 <vPortEnterCritical>
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004d44:	4b0d      	ldr	r3, [pc, #52]	; (8004d7c <prvCheckTasksWaitingTermination+0x44>)
 8004d46:	68db      	ldr	r3, [r3, #12]
 8004d48:	68dc      	ldr	r4, [r3, #12]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8004d4a:	1d20      	adds	r0, r4, #4
 8004d4c:	f7ff fc78 	bl	8004640 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8004d50:	4a0b      	ldr	r2, [pc, #44]	; (8004d80 <prvCheckTasksWaitingTermination+0x48>)
 8004d52:	6813      	ldr	r3, [r2, #0]
 8004d54:	3b01      	subs	r3, #1
 8004d56:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8004d58:	4a07      	ldr	r2, [pc, #28]	; (8004d78 <prvCheckTasksWaitingTermination+0x40>)
 8004d5a:	6813      	ldr	r3, [r2, #0]
 8004d5c:	3b01      	subs	r3, #1
 8004d5e:	6013      	str	r3, [r2, #0]
			taskEXIT_CRITICAL();
 8004d60:	f000 fc3a 	bl	80055d8 <vPortExitCritical>
			prvDeleteTCB( pxTCB );
 8004d64:	4620      	mov	r0, r4
 8004d66:	f7ff ffcb 	bl	8004d00 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8004d6a:	4b03      	ldr	r3, [pc, #12]	; (8004d78 <prvCheckTasksWaitingTermination+0x40>)
 8004d6c:	681b      	ldr	r3, [r3, #0]
 8004d6e:	2b00      	cmp	r3, #0
 8004d70:	d1e6      	bne.n	8004d40 <prvCheckTasksWaitingTermination+0x8>
}
 8004d72:	bd10      	pop	{r4, pc}
 8004d74:	4770      	bx	lr
 8004d76:	bf00      	nop
 8004d78:	20000678 	.word	0x20000678
 8004d7c:	200006e8 	.word	0x200006e8
 8004d80:	20000674 	.word	0x20000674

08004d84 <prvIdleTask>:
{
 8004d84:	b508      	push	{r3, lr}
		prvCheckTasksWaitingTermination();
 8004d86:	f7ff ffd7 	bl	8004d38 <prvCheckTasksWaitingTermination>
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8004d8a:	4b06      	ldr	r3, [pc, #24]	; (8004da4 <prvIdleTask+0x20>)
 8004d8c:	681b      	ldr	r3, [r3, #0]
 8004d8e:	2b01      	cmp	r3, #1
 8004d90:	d9f9      	bls.n	8004d86 <prvIdleTask+0x2>
				taskYIELD();
 8004d92:	4b05      	ldr	r3, [pc, #20]	; (8004da8 <prvIdleTask+0x24>)
 8004d94:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004d98:	601a      	str	r2, [r3, #0]
 8004d9a:	f3bf 8f4f 	dsb	sy
 8004d9e:	f3bf 8f6f 	isb	sy
 8004da2:	e7f0      	b.n	8004d86 <prvIdleTask+0x2>
 8004da4:	200005e8 	.word	0x200005e8
 8004da8:	e000ed04 	.word	0xe000ed04

08004dac <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8004dac:	b570      	push	{r4, r5, r6, lr}
 8004dae:	4604      	mov	r4, r0
 8004db0:	460d      	mov	r5, r1
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8004db2:	4b1d      	ldr	r3, [pc, #116]	; (8004e28 <prvAddCurrentTaskToDelayedList+0x7c>)
 8004db4:	681e      	ldr	r6, [r3, #0]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8004db6:	4b1d      	ldr	r3, [pc, #116]	; (8004e2c <prvAddCurrentTaskToDelayedList+0x80>)
 8004db8:	6818      	ldr	r0, [r3, #0]
 8004dba:	3004      	adds	r0, #4
 8004dbc:	f7ff fc40 	bl	8004640 <uxListRemove>
 8004dc0:	b950      	cbnz	r0, 8004dd8 <prvAddCurrentTaskToDelayedList+0x2c>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 8004dc2:	4b1a      	ldr	r3, [pc, #104]	; (8004e2c <prvAddCurrentTaskToDelayedList+0x80>)
 8004dc4:	681b      	ldr	r3, [r3, #0]
 8004dc6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004dc8:	2301      	movs	r3, #1
 8004dca:	fa03 f202 	lsl.w	r2, r3, r2
 8004dce:	4918      	ldr	r1, [pc, #96]	; (8004e30 <prvAddCurrentTaskToDelayedList+0x84>)
 8004dd0:	680b      	ldr	r3, [r1, #0]
 8004dd2:	ea23 0302 	bic.w	r3, r3, r2
 8004dd6:	600b      	str	r3, [r1, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8004dd8:	f1b4 3fff 	cmp.w	r4, #4294967295
 8004ddc:	d00d      	beq.n	8004dfa <prvAddCurrentTaskToDelayedList+0x4e>
		else
		{
			/* Calculate the time at which the task should be woken if the event
			does not occur.  This may overflow but this doesn't matter, the
			kernel will manage it correctly. */
			xTimeToWake = xConstTickCount + xTicksToWait;
 8004dde:	4434      	add	r4, r6

			/* The list item will be inserted in wake time order. */
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8004de0:	4b12      	ldr	r3, [pc, #72]	; (8004e2c <prvAddCurrentTaskToDelayedList+0x80>)
 8004de2:	681b      	ldr	r3, [r3, #0]
 8004de4:	605c      	str	r4, [r3, #4]

			if( xTimeToWake < xConstTickCount )
 8004de6:	42a6      	cmp	r6, r4
 8004de8:	d910      	bls.n	8004e0c <prvAddCurrentTaskToDelayedList+0x60>
			{
				/* Wake time has overflowed.  Place this item in the overflow
				list. */
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8004dea:	4b12      	ldr	r3, [pc, #72]	; (8004e34 <prvAddCurrentTaskToDelayedList+0x88>)
 8004dec:	6818      	ldr	r0, [r3, #0]
 8004dee:	4b0f      	ldr	r3, [pc, #60]	; (8004e2c <prvAddCurrentTaskToDelayedList+0x80>)
 8004df0:	6819      	ldr	r1, [r3, #0]
 8004df2:	3104      	adds	r1, #4
 8004df4:	f7ff fc0b 	bl	800460e <vListInsert>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8004df8:	bd70      	pop	{r4, r5, r6, pc}
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8004dfa:	2d00      	cmp	r5, #0
 8004dfc:	d0ef      	beq.n	8004dde <prvAddCurrentTaskToDelayedList+0x32>
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8004dfe:	4b0b      	ldr	r3, [pc, #44]	; (8004e2c <prvAddCurrentTaskToDelayedList+0x80>)
 8004e00:	6819      	ldr	r1, [r3, #0]
 8004e02:	3104      	adds	r1, #4
 8004e04:	480c      	ldr	r0, [pc, #48]	; (8004e38 <prvAddCurrentTaskToDelayedList+0x8c>)
 8004e06:	f7ff fbf7 	bl	80045f8 <vListInsertEnd>
 8004e0a:	e7f5      	b.n	8004df8 <prvAddCurrentTaskToDelayedList+0x4c>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8004e0c:	4b0b      	ldr	r3, [pc, #44]	; (8004e3c <prvAddCurrentTaskToDelayedList+0x90>)
 8004e0e:	6818      	ldr	r0, [r3, #0]
 8004e10:	4b06      	ldr	r3, [pc, #24]	; (8004e2c <prvAddCurrentTaskToDelayedList+0x80>)
 8004e12:	6819      	ldr	r1, [r3, #0]
 8004e14:	3104      	adds	r1, #4
 8004e16:	f7ff fbfa 	bl	800460e <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8004e1a:	4b09      	ldr	r3, [pc, #36]	; (8004e40 <prvAddCurrentTaskToDelayedList+0x94>)
 8004e1c:	681b      	ldr	r3, [r3, #0]
 8004e1e:	42a3      	cmp	r3, r4
 8004e20:	d9ea      	bls.n	8004df8 <prvAddCurrentTaskToDelayedList+0x4c>
					xNextTaskUnblockTime = xTimeToWake;
 8004e22:	4b07      	ldr	r3, [pc, #28]	; (8004e40 <prvAddCurrentTaskToDelayedList+0x94>)
 8004e24:	601c      	str	r4, [r3, #0]
}
 8004e26:	e7e7      	b.n	8004df8 <prvAddCurrentTaskToDelayedList+0x4c>
 8004e28:	200006fc 	.word	0x200006fc
 8004e2c:	200005dc 	.word	0x200005dc
 8004e30:	20000684 	.word	0x20000684
 8004e34:	200005e4 	.word	0x200005e4
 8004e38:	200006d4 	.word	0x200006d4
 8004e3c:	200005e0 	.word	0x200005e0
 8004e40:	200006b0 	.word	0x200006b0

08004e44 <xTaskCreateStatic>:
	{
 8004e44:	b570      	push	{r4, r5, r6, lr}
 8004e46:	b086      	sub	sp, #24
 8004e48:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 8004e4a:	9c0c      	ldr	r4, [sp, #48]	; 0x30
		configASSERT( puxStackBuffer != NULL );
 8004e4c:	b175      	cbz	r5, 8004e6c <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8004e4e:	b1b4      	cbz	r4, 8004e7e <xTaskCreateStatic+0x3a>
			volatile size_t xSize = sizeof( StaticTask_t );
 8004e50:	2654      	movs	r6, #84	; 0x54
 8004e52:	9604      	str	r6, [sp, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8004e54:	9e04      	ldr	r6, [sp, #16]
 8004e56:	2e54      	cmp	r6, #84	; 0x54
 8004e58:	d01a      	beq.n	8004e90 <xTaskCreateStatic+0x4c>
 8004e5a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004e5e:	f383 8811 	msr	BASEPRI, r3
 8004e62:	f3bf 8f6f 	isb	sy
 8004e66:	f3bf 8f4f 	dsb	sy
 8004e6a:	e7fe      	b.n	8004e6a <xTaskCreateStatic+0x26>
 8004e6c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004e70:	f383 8811 	msr	BASEPRI, r3
 8004e74:	f3bf 8f6f 	isb	sy
 8004e78:	f3bf 8f4f 	dsb	sy
		configASSERT( puxStackBuffer != NULL );
 8004e7c:	e7fe      	b.n	8004e7c <xTaskCreateStatic+0x38>
 8004e7e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004e82:	f383 8811 	msr	BASEPRI, r3
 8004e86:	f3bf 8f6f 	isb	sy
 8004e8a:	f3bf 8f4f 	dsb	sy
		configASSERT( pxTaskBuffer != NULL );
 8004e8e:	e7fe      	b.n	8004e8e <xTaskCreateStatic+0x4a>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8004e90:	9e04      	ldr	r6, [sp, #16]
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8004e92:	6325      	str	r5, [r4, #48]	; 0x30
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8004e94:	2502      	movs	r5, #2
 8004e96:	f884 5051 	strb.w	r5, [r4, #81]	; 0x51
			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8004e9a:	2500      	movs	r5, #0
 8004e9c:	9503      	str	r5, [sp, #12]
 8004e9e:	9402      	str	r4, [sp, #8]
 8004ea0:	ad05      	add	r5, sp, #20
 8004ea2:	9501      	str	r5, [sp, #4]
 8004ea4:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 8004ea6:	9500      	str	r5, [sp, #0]
 8004ea8:	f7ff fe5a 	bl	8004b60 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8004eac:	4620      	mov	r0, r4
 8004eae:	f7ff fed3 	bl	8004c58 <prvAddNewTaskToReadyList>
	}
 8004eb2:	9805      	ldr	r0, [sp, #20]
 8004eb4:	b006      	add	sp, #24
 8004eb6:	bd70      	pop	{r4, r5, r6, pc}

08004eb8 <xTaskCreate>:
	{
 8004eb8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8004ebc:	b085      	sub	sp, #20
 8004ebe:	4607      	mov	r7, r0
 8004ec0:	4688      	mov	r8, r1
 8004ec2:	4614      	mov	r4, r2
 8004ec4:	461e      	mov	r6, r3
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8004ec6:	0090      	lsls	r0, r2, #2
 8004ec8:	f000 fd1a 	bl	8005900 <pvPortMalloc>
			if( pxStack != NULL )
 8004ecc:	b300      	cbz	r0, 8004f10 <xTaskCreate+0x58>
 8004ece:	4681      	mov	r9, r0
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8004ed0:	2054      	movs	r0, #84	; 0x54
 8004ed2:	f000 fd15 	bl	8005900 <pvPortMalloc>
				if( pxNewTCB != NULL )
 8004ed6:	4605      	mov	r5, r0
 8004ed8:	b1b0      	cbz	r0, 8004f08 <xTaskCreate+0x50>
					pxNewTCB->pxStack = pxStack;
 8004eda:	f8c0 9030 	str.w	r9, [r0, #48]	; 0x30
		if( pxNewTCB != NULL )
 8004ede:	b1e5      	cbz	r5, 8004f1a <xTaskCreate+0x62>
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8004ee0:	2300      	movs	r3, #0
 8004ee2:	f885 3051 	strb.w	r3, [r5, #81]	; 0x51
			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8004ee6:	9303      	str	r3, [sp, #12]
 8004ee8:	9502      	str	r5, [sp, #8]
 8004eea:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8004eec:	9301      	str	r3, [sp, #4]
 8004eee:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8004ef0:	9300      	str	r3, [sp, #0]
 8004ef2:	4633      	mov	r3, r6
 8004ef4:	4622      	mov	r2, r4
 8004ef6:	4641      	mov	r1, r8
 8004ef8:	4638      	mov	r0, r7
 8004efa:	f7ff fe31 	bl	8004b60 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8004efe:	4628      	mov	r0, r5
 8004f00:	f7ff feaa 	bl	8004c58 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8004f04:	2001      	movs	r0, #1
 8004f06:	e005      	b.n	8004f14 <xTaskCreate+0x5c>
					vPortFree( pxStack );
 8004f08:	4648      	mov	r0, r9
 8004f0a:	f000 fd77 	bl	80059fc <vPortFree>
 8004f0e:	e7e6      	b.n	8004ede <xTaskCreate+0x26>
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8004f10:	f04f 30ff 	mov.w	r0, #4294967295
	}
 8004f14:	b005      	add	sp, #20
 8004f16:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8004f1a:	f04f 30ff 	mov.w	r0, #4294967295
		return xReturn;
 8004f1e:	e7f9      	b.n	8004f14 <xTaskCreate+0x5c>

08004f20 <vTaskStartScheduler>:
{
 8004f20:	b510      	push	{r4, lr}
 8004f22:	b088      	sub	sp, #32
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8004f24:	2400      	movs	r4, #0
 8004f26:	9405      	str	r4, [sp, #20]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8004f28:	9406      	str	r4, [sp, #24]
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8004f2a:	aa07      	add	r2, sp, #28
 8004f2c:	a906      	add	r1, sp, #24
 8004f2e:	a805      	add	r0, sp, #20
 8004f30:	f7fb fcf8 	bl	8000924 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8004f34:	9b05      	ldr	r3, [sp, #20]
 8004f36:	9302      	str	r3, [sp, #8]
 8004f38:	9b06      	ldr	r3, [sp, #24]
 8004f3a:	9301      	str	r3, [sp, #4]
 8004f3c:	9400      	str	r4, [sp, #0]
 8004f3e:	4623      	mov	r3, r4
 8004f40:	9a07      	ldr	r2, [sp, #28]
 8004f42:	490d      	ldr	r1, [pc, #52]	; (8004f78 <vTaskStartScheduler+0x58>)
 8004f44:	480d      	ldr	r0, [pc, #52]	; (8004f7c <vTaskStartScheduler+0x5c>)
 8004f46:	f7ff ff7d 	bl	8004e44 <xTaskCreateStatic>
		if( xIdleTaskHandle != NULL )
 8004f4a:	b190      	cbz	r0, 8004f72 <vTaskStartScheduler+0x52>
 8004f4c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004f50:	f383 8811 	msr	BASEPRI, r3
 8004f54:	f3bf 8f6f 	isb	sy
 8004f58:	f3bf 8f4f 	dsb	sy
		xNextTaskUnblockTime = portMAX_DELAY;
 8004f5c:	4b08      	ldr	r3, [pc, #32]	; (8004f80 <vTaskStartScheduler+0x60>)
 8004f5e:	f04f 32ff 	mov.w	r2, #4294967295
 8004f62:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8004f64:	4b07      	ldr	r3, [pc, #28]	; (8004f84 <vTaskStartScheduler+0x64>)
 8004f66:	2201      	movs	r2, #1
 8004f68:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8004f6a:	4b07      	ldr	r3, [pc, #28]	; (8004f88 <vTaskStartScheduler+0x68>)
 8004f6c:	601c      	str	r4, [r3, #0]
		if( xPortStartScheduler() != pdFALSE )
 8004f6e:	f000 fbb3 	bl	80056d8 <xPortStartScheduler>
}
 8004f72:	b008      	add	sp, #32
 8004f74:	bd10      	pop	{r4, pc}
 8004f76:	bf00      	nop
 8004f78:	080068e8 	.word	0x080068e8
 8004f7c:	08004d85 	.word	0x08004d85
 8004f80:	200006b0 	.word	0x200006b0
 8004f84:	200006d0 	.word	0x200006d0
 8004f88:	200006fc 	.word	0x200006fc

08004f8c <vTaskSuspendAll>:
	++uxSchedulerSuspended;
 8004f8c:	4a02      	ldr	r2, [pc, #8]	; (8004f98 <vTaskSuspendAll+0xc>)
 8004f8e:	6813      	ldr	r3, [r2, #0]
 8004f90:	3301      	adds	r3, #1
 8004f92:	6013      	str	r3, [r2, #0]
}
 8004f94:	4770      	bx	lr
 8004f96:	bf00      	nop
 8004f98:	2000067c 	.word	0x2000067c

08004f9c <xTaskIncrementTick>:
{
 8004f9c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004f9e:	4b3a      	ldr	r3, [pc, #232]	; (8005088 <xTaskIncrementTick+0xec>)
 8004fa0:	681b      	ldr	r3, [r3, #0]
 8004fa2:	2b00      	cmp	r3, #0
 8004fa4:	d169      	bne.n	800507a <xTaskIncrementTick+0xde>
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8004fa6:	4b39      	ldr	r3, [pc, #228]	; (800508c <xTaskIncrementTick+0xf0>)
 8004fa8:	681d      	ldr	r5, [r3, #0]
 8004faa:	3501      	adds	r5, #1
		xTickCount = xConstTickCount;
 8004fac:	601d      	str	r5, [r3, #0]
		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8004fae:	b9c5      	cbnz	r5, 8004fe2 <xTaskIncrementTick+0x46>
			taskSWITCH_DELAYED_LISTS();
 8004fb0:	4b37      	ldr	r3, [pc, #220]	; (8005090 <xTaskIncrementTick+0xf4>)
 8004fb2:	681b      	ldr	r3, [r3, #0]
 8004fb4:	681b      	ldr	r3, [r3, #0]
 8004fb6:	b143      	cbz	r3, 8004fca <xTaskIncrementTick+0x2e>
 8004fb8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004fbc:	f383 8811 	msr	BASEPRI, r3
 8004fc0:	f3bf 8f6f 	isb	sy
 8004fc4:	f3bf 8f4f 	dsb	sy
 8004fc8:	e7fe      	b.n	8004fc8 <xTaskIncrementTick+0x2c>
 8004fca:	4a31      	ldr	r2, [pc, #196]	; (8005090 <xTaskIncrementTick+0xf4>)
 8004fcc:	6811      	ldr	r1, [r2, #0]
 8004fce:	4b31      	ldr	r3, [pc, #196]	; (8005094 <xTaskIncrementTick+0xf8>)
 8004fd0:	6818      	ldr	r0, [r3, #0]
 8004fd2:	6010      	str	r0, [r2, #0]
 8004fd4:	6019      	str	r1, [r3, #0]
 8004fd6:	4a30      	ldr	r2, [pc, #192]	; (8005098 <xTaskIncrementTick+0xfc>)
 8004fd8:	6813      	ldr	r3, [r2, #0]
 8004fda:	3301      	adds	r3, #1
 8004fdc:	6013      	str	r3, [r2, #0]
 8004fde:	f7ff fda9 	bl	8004b34 <prvResetNextTaskUnblockTime>
		if( xConstTickCount >= xNextTaskUnblockTime )
 8004fe2:	4b2e      	ldr	r3, [pc, #184]	; (800509c <xTaskIncrementTick+0x100>)
 8004fe4:	681b      	ldr	r3, [r3, #0]
 8004fe6:	42ab      	cmp	r3, r5
 8004fe8:	d93d      	bls.n	8005066 <xTaskIncrementTick+0xca>
BaseType_t xSwitchRequired = pdFALSE;
 8004fea:	2400      	movs	r4, #0
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8004fec:	4b2c      	ldr	r3, [pc, #176]	; (80050a0 <xTaskIncrementTick+0x104>)
 8004fee:	681b      	ldr	r3, [r3, #0]
 8004ff0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004ff2:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8004ff6:	009a      	lsls	r2, r3, #2
 8004ff8:	4b2a      	ldr	r3, [pc, #168]	; (80050a4 <xTaskIncrementTick+0x108>)
 8004ffa:	589b      	ldr	r3, [r3, r2]
 8004ffc:	2b01      	cmp	r3, #1
 8004ffe:	d900      	bls.n	8005002 <xTaskIncrementTick+0x66>
				xSwitchRequired = pdTRUE;
 8005000:	2401      	movs	r4, #1
			if( xYieldPending != pdFALSE )
 8005002:	4b29      	ldr	r3, [pc, #164]	; (80050a8 <xTaskIncrementTick+0x10c>)
 8005004:	681b      	ldr	r3, [r3, #0]
 8005006:	2b00      	cmp	r3, #0
 8005008:	d03c      	beq.n	8005084 <xTaskIncrementTick+0xe8>
				xSwitchRequired = pdTRUE;
 800500a:	2401      	movs	r4, #1
	return xSwitchRequired;
 800500c:	e03a      	b.n	8005084 <xTaskIncrementTick+0xe8>
							xSwitchRequired = pdTRUE;
 800500e:	2401      	movs	r4, #1
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8005010:	4b1f      	ldr	r3, [pc, #124]	; (8005090 <xTaskIncrementTick+0xf4>)
 8005012:	681b      	ldr	r3, [r3, #0]
 8005014:	681b      	ldr	r3, [r3, #0]
 8005016:	b343      	cbz	r3, 800506a <xTaskIncrementTick+0xce>
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005018:	4b1d      	ldr	r3, [pc, #116]	; (8005090 <xTaskIncrementTick+0xf4>)
 800501a:	681b      	ldr	r3, [r3, #0]
 800501c:	68db      	ldr	r3, [r3, #12]
 800501e:	68de      	ldr	r6, [r3, #12]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8005020:	6873      	ldr	r3, [r6, #4]
					if( xConstTickCount < xItemValue )
 8005022:	429d      	cmp	r5, r3
 8005024:	d326      	bcc.n	8005074 <xTaskIncrementTick+0xd8>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005026:	1d37      	adds	r7, r6, #4
 8005028:	4638      	mov	r0, r7
 800502a:	f7ff fb09 	bl	8004640 <uxListRemove>
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800502e:	6ab3      	ldr	r3, [r6, #40]	; 0x28
 8005030:	b11b      	cbz	r3, 800503a <xTaskIncrementTick+0x9e>
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8005032:	f106 0018 	add.w	r0, r6, #24
 8005036:	f7ff fb03 	bl	8004640 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800503a:	6af3      	ldr	r3, [r6, #44]	; 0x2c
 800503c:	2201      	movs	r2, #1
 800503e:	409a      	lsls	r2, r3
 8005040:	491a      	ldr	r1, [pc, #104]	; (80050ac <xTaskIncrementTick+0x110>)
 8005042:	6808      	ldr	r0, [r1, #0]
 8005044:	4302      	orrs	r2, r0
 8005046:	600a      	str	r2, [r1, #0]
 8005048:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 800504c:	009a      	lsls	r2, r3, #2
 800504e:	4639      	mov	r1, r7
 8005050:	4814      	ldr	r0, [pc, #80]	; (80050a4 <xTaskIncrementTick+0x108>)
 8005052:	4410      	add	r0, r2
 8005054:	f7ff fad0 	bl	80045f8 <vListInsertEnd>
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8005058:	6af2      	ldr	r2, [r6, #44]	; 0x2c
 800505a:	4b11      	ldr	r3, [pc, #68]	; (80050a0 <xTaskIncrementTick+0x104>)
 800505c:	681b      	ldr	r3, [r3, #0]
 800505e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005060:	429a      	cmp	r2, r3
 8005062:	d2d4      	bcs.n	800500e <xTaskIncrementTick+0x72>
 8005064:	e7d4      	b.n	8005010 <xTaskIncrementTick+0x74>
BaseType_t xSwitchRequired = pdFALSE;
 8005066:	2400      	movs	r4, #0
 8005068:	e7d2      	b.n	8005010 <xTaskIncrementTick+0x74>
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800506a:	4b0c      	ldr	r3, [pc, #48]	; (800509c <xTaskIncrementTick+0x100>)
 800506c:	f04f 32ff 	mov.w	r2, #4294967295
 8005070:	601a      	str	r2, [r3, #0]
					break;
 8005072:	e7bb      	b.n	8004fec <xTaskIncrementTick+0x50>
						xNextTaskUnblockTime = xItemValue;
 8005074:	4a09      	ldr	r2, [pc, #36]	; (800509c <xTaskIncrementTick+0x100>)
 8005076:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8005078:	e7b8      	b.n	8004fec <xTaskIncrementTick+0x50>
		++xPendedTicks;
 800507a:	4a0d      	ldr	r2, [pc, #52]	; (80050b0 <xTaskIncrementTick+0x114>)
 800507c:	6813      	ldr	r3, [r2, #0]
 800507e:	3301      	adds	r3, #1
 8005080:	6013      	str	r3, [r2, #0]
BaseType_t xSwitchRequired = pdFALSE;
 8005082:	2400      	movs	r4, #0
}
 8005084:	4620      	mov	r0, r4
 8005086:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005088:	2000067c 	.word	0x2000067c
 800508c:	200006fc 	.word	0x200006fc
 8005090:	200005e0 	.word	0x200005e0
 8005094:	200005e4 	.word	0x200005e4
 8005098:	200006b4 	.word	0x200006b4
 800509c:	200006b0 	.word	0x200006b0
 80050a0:	200005dc 	.word	0x200005dc
 80050a4:	200005e8 	.word	0x200005e8
 80050a8:	20000700 	.word	0x20000700
 80050ac:	20000684 	.word	0x20000684
 80050b0:	200006b8 	.word	0x200006b8

080050b4 <xTaskResumeAll>:
{
 80050b4:	b538      	push	{r3, r4, r5, lr}
	configASSERT( uxSchedulerSuspended );
 80050b6:	4b34      	ldr	r3, [pc, #208]	; (8005188 <xTaskResumeAll+0xd4>)
 80050b8:	681b      	ldr	r3, [r3, #0]
 80050ba:	b943      	cbnz	r3, 80050ce <xTaskResumeAll+0x1a>
 80050bc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80050c0:	f383 8811 	msr	BASEPRI, r3
 80050c4:	f3bf 8f6f 	isb	sy
 80050c8:	f3bf 8f4f 	dsb	sy
 80050cc:	e7fe      	b.n	80050cc <xTaskResumeAll+0x18>
	taskENTER_CRITICAL();
 80050ce:	f000 fa61 	bl	8005594 <vPortEnterCritical>
		--uxSchedulerSuspended;
 80050d2:	4b2d      	ldr	r3, [pc, #180]	; (8005188 <xTaskResumeAll+0xd4>)
 80050d4:	681a      	ldr	r2, [r3, #0]
 80050d6:	3a01      	subs	r2, #1
 80050d8:	601a      	str	r2, [r3, #0]
		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80050da:	681b      	ldr	r3, [r3, #0]
 80050dc:	2b00      	cmp	r3, #0
 80050de:	d14d      	bne.n	800517c <xTaskResumeAll+0xc8>
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 80050e0:	4b2a      	ldr	r3, [pc, #168]	; (800518c <xTaskResumeAll+0xd8>)
 80050e2:	681b      	ldr	r3, [r3, #0]
 80050e4:	b90b      	cbnz	r3, 80050ea <xTaskResumeAll+0x36>
BaseType_t xAlreadyYielded = pdFALSE;
 80050e6:	2400      	movs	r4, #0
 80050e8:	e049      	b.n	800517e <xTaskResumeAll+0xca>
TCB_t *pxTCB = NULL;
 80050ea:	2400      	movs	r4, #0
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80050ec:	4b28      	ldr	r3, [pc, #160]	; (8005190 <xTaskResumeAll+0xdc>)
 80050ee:	681b      	ldr	r3, [r3, #0]
 80050f0:	b31b      	cbz	r3, 800513a <xTaskResumeAll+0x86>
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80050f2:	4b27      	ldr	r3, [pc, #156]	; (8005190 <xTaskResumeAll+0xdc>)
 80050f4:	68db      	ldr	r3, [r3, #12]
 80050f6:	68dc      	ldr	r4, [r3, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80050f8:	f104 0018 	add.w	r0, r4, #24
 80050fc:	f7ff faa0 	bl	8004640 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005100:	1d25      	adds	r5, r4, #4
 8005102:	4628      	mov	r0, r5
 8005104:	f7ff fa9c 	bl	8004640 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8005108:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
 800510a:	2301      	movs	r3, #1
 800510c:	4083      	lsls	r3, r0
 800510e:	4a21      	ldr	r2, [pc, #132]	; (8005194 <xTaskResumeAll+0xe0>)
 8005110:	6811      	ldr	r1, [r2, #0]
 8005112:	430b      	orrs	r3, r1
 8005114:	6013      	str	r3, [r2, #0]
 8005116:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 800511a:	4629      	mov	r1, r5
 800511c:	4b1e      	ldr	r3, [pc, #120]	; (8005198 <xTaskResumeAll+0xe4>)
 800511e:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 8005122:	f7ff fa69 	bl	80045f8 <vListInsertEnd>
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8005126:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8005128:	4b1c      	ldr	r3, [pc, #112]	; (800519c <xTaskResumeAll+0xe8>)
 800512a:	681b      	ldr	r3, [r3, #0]
 800512c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800512e:	429a      	cmp	r2, r3
 8005130:	d3dc      	bcc.n	80050ec <xTaskResumeAll+0x38>
						xYieldPending = pdTRUE;
 8005132:	4b1b      	ldr	r3, [pc, #108]	; (80051a0 <xTaskResumeAll+0xec>)
 8005134:	2201      	movs	r2, #1
 8005136:	601a      	str	r2, [r3, #0]
 8005138:	e7d8      	b.n	80050ec <xTaskResumeAll+0x38>
				if( pxTCB != NULL )
 800513a:	b10c      	cbz	r4, 8005140 <xTaskResumeAll+0x8c>
					prvResetNextTaskUnblockTime();
 800513c:	f7ff fcfa 	bl	8004b34 <prvResetNextTaskUnblockTime>
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8005140:	4b18      	ldr	r3, [pc, #96]	; (80051a4 <xTaskResumeAll+0xf0>)
 8005142:	681c      	ldr	r4, [r3, #0]
					if( xPendedCounts > ( TickType_t ) 0U )
 8005144:	b974      	cbnz	r4, 8005164 <xTaskResumeAll+0xb0>
				if( xYieldPending != pdFALSE )
 8005146:	4b16      	ldr	r3, [pc, #88]	; (80051a0 <xTaskResumeAll+0xec>)
 8005148:	681c      	ldr	r4, [r3, #0]
 800514a:	b1c4      	cbz	r4, 800517e <xTaskResumeAll+0xca>
					taskYIELD_IF_USING_PREEMPTION();
 800514c:	4b16      	ldr	r3, [pc, #88]	; (80051a8 <xTaskResumeAll+0xf4>)
 800514e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005152:	601a      	str	r2, [r3, #0]
 8005154:	f3bf 8f4f 	dsb	sy
 8005158:	f3bf 8f6f 	isb	sy
						xAlreadyYielded = pdTRUE;
 800515c:	2401      	movs	r4, #1
 800515e:	e00e      	b.n	800517e <xTaskResumeAll+0xca>
						} while( xPendedCounts > ( TickType_t ) 0U );
 8005160:	3c01      	subs	r4, #1
 8005162:	d007      	beq.n	8005174 <xTaskResumeAll+0xc0>
							if( xTaskIncrementTick() != pdFALSE )
 8005164:	f7ff ff1a 	bl	8004f9c <xTaskIncrementTick>
 8005168:	2800      	cmp	r0, #0
 800516a:	d0f9      	beq.n	8005160 <xTaskResumeAll+0xac>
								xYieldPending = pdTRUE;
 800516c:	4b0c      	ldr	r3, [pc, #48]	; (80051a0 <xTaskResumeAll+0xec>)
 800516e:	2201      	movs	r2, #1
 8005170:	601a      	str	r2, [r3, #0]
 8005172:	e7f5      	b.n	8005160 <xTaskResumeAll+0xac>
						xPendedTicks = 0;
 8005174:	4b0b      	ldr	r3, [pc, #44]	; (80051a4 <xTaskResumeAll+0xf0>)
 8005176:	2200      	movs	r2, #0
 8005178:	601a      	str	r2, [r3, #0]
 800517a:	e7e4      	b.n	8005146 <xTaskResumeAll+0x92>
BaseType_t xAlreadyYielded = pdFALSE;
 800517c:	2400      	movs	r4, #0
	taskEXIT_CRITICAL();
 800517e:	f000 fa2b 	bl	80055d8 <vPortExitCritical>
}
 8005182:	4620      	mov	r0, r4
 8005184:	bd38      	pop	{r3, r4, r5, pc}
 8005186:	bf00      	nop
 8005188:	2000067c 	.word	0x2000067c
 800518c:	20000674 	.word	0x20000674
 8005190:	200006bc 	.word	0x200006bc
 8005194:	20000684 	.word	0x20000684
 8005198:	200005e8 	.word	0x200005e8
 800519c:	200005dc 	.word	0x200005dc
 80051a0:	20000700 	.word	0x20000700
 80051a4:	200006b8 	.word	0x200006b8
 80051a8:	e000ed04 	.word	0xe000ed04

080051ac <vTaskDelay>:
	{
 80051ac:	b510      	push	{r4, lr}
		if( xTicksToDelay > ( TickType_t ) 0U )
 80051ae:	b1a8      	cbz	r0, 80051dc <vTaskDelay+0x30>
 80051b0:	4604      	mov	r4, r0
			configASSERT( uxSchedulerSuspended == 0 );
 80051b2:	4b0f      	ldr	r3, [pc, #60]	; (80051f0 <vTaskDelay+0x44>)
 80051b4:	681b      	ldr	r3, [r3, #0]
 80051b6:	b143      	cbz	r3, 80051ca <vTaskDelay+0x1e>
 80051b8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80051bc:	f383 8811 	msr	BASEPRI, r3
 80051c0:	f3bf 8f6f 	isb	sy
 80051c4:	f3bf 8f4f 	dsb	sy
 80051c8:	e7fe      	b.n	80051c8 <vTaskDelay+0x1c>
			vTaskSuspendAll();
 80051ca:	f7ff fedf 	bl	8004f8c <vTaskSuspendAll>
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 80051ce:	2100      	movs	r1, #0
 80051d0:	4620      	mov	r0, r4
 80051d2:	f7ff fdeb 	bl	8004dac <prvAddCurrentTaskToDelayedList>
			xAlreadyYielded = xTaskResumeAll();
 80051d6:	f7ff ff6d 	bl	80050b4 <xTaskResumeAll>
		if( xAlreadyYielded == pdFALSE )
 80051da:	b938      	cbnz	r0, 80051ec <vTaskDelay+0x40>
			portYIELD_WITHIN_API();
 80051dc:	4b05      	ldr	r3, [pc, #20]	; (80051f4 <vTaskDelay+0x48>)
 80051de:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80051e2:	601a      	str	r2, [r3, #0]
 80051e4:	f3bf 8f4f 	dsb	sy
 80051e8:	f3bf 8f6f 	isb	sy
	}
 80051ec:	bd10      	pop	{r4, pc}
 80051ee:	bf00      	nop
 80051f0:	2000067c 	.word	0x2000067c
 80051f4:	e000ed04 	.word	0xe000ed04

080051f8 <vTaskSwitchContext>:
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 80051f8:	4b20      	ldr	r3, [pc, #128]	; (800527c <vTaskSwitchContext+0x84>)
 80051fa:	681b      	ldr	r3, [r3, #0]
 80051fc:	b11b      	cbz	r3, 8005206 <vTaskSwitchContext+0xe>
		xYieldPending = pdTRUE;
 80051fe:	4b20      	ldr	r3, [pc, #128]	; (8005280 <vTaskSwitchContext+0x88>)
 8005200:	2201      	movs	r2, #1
 8005202:	601a      	str	r2, [r3, #0]
 8005204:	4770      	bx	lr
		xYieldPending = pdFALSE;
 8005206:	4b1e      	ldr	r3, [pc, #120]	; (8005280 <vTaskSwitchContext+0x88>)
 8005208:	2200      	movs	r2, #0
 800520a:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800520c:	4b1d      	ldr	r3, [pc, #116]	; (8005284 <vTaskSwitchContext+0x8c>)
 800520e:	681b      	ldr	r3, [r3, #0]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8005210:	fab3 f383 	clz	r3, r3
 8005214:	b2db      	uxtb	r3, r3
 8005216:	f1c3 031f 	rsb	r3, r3, #31
 800521a:	eb03 0183 	add.w	r1, r3, r3, lsl #2
 800521e:	008a      	lsls	r2, r1, #2
 8005220:	4919      	ldr	r1, [pc, #100]	; (8005288 <vTaskSwitchContext+0x90>)
 8005222:	588a      	ldr	r2, [r1, r2]
 8005224:	b942      	cbnz	r2, 8005238 <vTaskSwitchContext+0x40>
	__asm volatile
 8005226:	f04f 0350 	mov.w	r3, #80	; 0x50
 800522a:	f383 8811 	msr	BASEPRI, r3
 800522e:	f3bf 8f6f 	isb	sy
 8005232:	f3bf 8f4f 	dsb	sy
 8005236:	e7fe      	b.n	8005236 <vTaskSwitchContext+0x3e>
{
 8005238:	b410      	push	{r4}
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800523a:	4913      	ldr	r1, [pc, #76]	; (8005288 <vTaskSwitchContext+0x90>)
 800523c:	eb03 0083 	add.w	r0, r3, r3, lsl #2
 8005240:	0082      	lsls	r2, r0, #2
 8005242:	440a      	add	r2, r1
 8005244:	6850      	ldr	r0, [r2, #4]
 8005246:	6840      	ldr	r0, [r0, #4]
 8005248:	6050      	str	r0, [r2, #4]
 800524a:	eb03 0483 	add.w	r4, r3, r3, lsl #2
 800524e:	00a2      	lsls	r2, r4, #2
 8005250:	4614      	mov	r4, r2
 8005252:	3208      	adds	r2, #8
 8005254:	4411      	add	r1, r2
 8005256:	4288      	cmp	r0, r1
 8005258:	d00b      	beq.n	8005272 <vTaskSwitchContext+0x7a>
 800525a:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 800525e:	009a      	lsls	r2, r3, #2
 8005260:	4b09      	ldr	r3, [pc, #36]	; (8005288 <vTaskSwitchContext+0x90>)
 8005262:	4413      	add	r3, r2
 8005264:	685b      	ldr	r3, [r3, #4]
 8005266:	68da      	ldr	r2, [r3, #12]
 8005268:	4b08      	ldr	r3, [pc, #32]	; (800528c <vTaskSwitchContext+0x94>)
 800526a:	601a      	str	r2, [r3, #0]
}
 800526c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8005270:	4770      	bx	lr
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005272:	6840      	ldr	r0, [r0, #4]
 8005274:	4a04      	ldr	r2, [pc, #16]	; (8005288 <vTaskSwitchContext+0x90>)
 8005276:	4422      	add	r2, r4
 8005278:	6050      	str	r0, [r2, #4]
 800527a:	e7ee      	b.n	800525a <vTaskSwitchContext+0x62>
 800527c:	2000067c 	.word	0x2000067c
 8005280:	20000700 	.word	0x20000700
 8005284:	20000684 	.word	0x20000684
 8005288:	200005e8 	.word	0x200005e8
 800528c:	200005dc 	.word	0x200005dc

08005290 <vTaskPlaceOnEventList>:
	configASSERT( pxEventList );
 8005290:	b158      	cbz	r0, 80052aa <vTaskPlaceOnEventList+0x1a>
{
 8005292:	b510      	push	{r4, lr}
 8005294:	460c      	mov	r4, r1
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8005296:	4b09      	ldr	r3, [pc, #36]	; (80052bc <vTaskPlaceOnEventList+0x2c>)
 8005298:	6819      	ldr	r1, [r3, #0]
 800529a:	3118      	adds	r1, #24
 800529c:	f7ff f9b7 	bl	800460e <vListInsert>
	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 80052a0:	2101      	movs	r1, #1
 80052a2:	4620      	mov	r0, r4
 80052a4:	f7ff fd82 	bl	8004dac <prvAddCurrentTaskToDelayedList>
}
 80052a8:	bd10      	pop	{r4, pc}
 80052aa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80052ae:	f383 8811 	msr	BASEPRI, r3
 80052b2:	f3bf 8f6f 	isb	sy
 80052b6:	f3bf 8f4f 	dsb	sy
	configASSERT( pxEventList );
 80052ba:	e7fe      	b.n	80052ba <vTaskPlaceOnEventList+0x2a>
 80052bc:	200005dc 	.word	0x200005dc

080052c0 <xTaskRemoveFromEventList>:
{
 80052c0:	b538      	push	{r3, r4, r5, lr}
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80052c2:	68c3      	ldr	r3, [r0, #12]
 80052c4:	68dc      	ldr	r4, [r3, #12]
	configASSERT( pxUnblockedTCB );
 80052c6:	b324      	cbz	r4, 8005312 <xTaskRemoveFromEventList+0x52>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 80052c8:	f104 0518 	add.w	r5, r4, #24
 80052cc:	4628      	mov	r0, r5
 80052ce:	f7ff f9b7 	bl	8004640 <uxListRemove>
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80052d2:	4b18      	ldr	r3, [pc, #96]	; (8005334 <xTaskRemoveFromEventList+0x74>)
 80052d4:	681b      	ldr	r3, [r3, #0]
 80052d6:	bb2b      	cbnz	r3, 8005324 <xTaskRemoveFromEventList+0x64>
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 80052d8:	1d25      	adds	r5, r4, #4
 80052da:	4628      	mov	r0, r5
 80052dc:	f7ff f9b0 	bl	8004640 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 80052e0:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
 80052e2:	2301      	movs	r3, #1
 80052e4:	4083      	lsls	r3, r0
 80052e6:	4a14      	ldr	r2, [pc, #80]	; (8005338 <xTaskRemoveFromEventList+0x78>)
 80052e8:	6811      	ldr	r1, [r2, #0]
 80052ea:	430b      	orrs	r3, r1
 80052ec:	6013      	str	r3, [r2, #0]
 80052ee:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 80052f2:	4629      	mov	r1, r5
 80052f4:	4b11      	ldr	r3, [pc, #68]	; (800533c <xTaskRemoveFromEventList+0x7c>)
 80052f6:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 80052fa:	f7ff f97d 	bl	80045f8 <vListInsertEnd>
	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 80052fe:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8005300:	4b0f      	ldr	r3, [pc, #60]	; (8005340 <xTaskRemoveFromEventList+0x80>)
 8005302:	681b      	ldr	r3, [r3, #0]
 8005304:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005306:	429a      	cmp	r2, r3
 8005308:	d911      	bls.n	800532e <xTaskRemoveFromEventList+0x6e>
		xYieldPending = pdTRUE;
 800530a:	2001      	movs	r0, #1
 800530c:	4b0d      	ldr	r3, [pc, #52]	; (8005344 <xTaskRemoveFromEventList+0x84>)
 800530e:	6018      	str	r0, [r3, #0]
 8005310:	e00e      	b.n	8005330 <xTaskRemoveFromEventList+0x70>
 8005312:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005316:	f383 8811 	msr	BASEPRI, r3
 800531a:	f3bf 8f6f 	isb	sy
 800531e:	f3bf 8f4f 	dsb	sy
	configASSERT( pxUnblockedTCB );
 8005322:	e7fe      	b.n	8005322 <xTaskRemoveFromEventList+0x62>
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8005324:	4629      	mov	r1, r5
 8005326:	4808      	ldr	r0, [pc, #32]	; (8005348 <xTaskRemoveFromEventList+0x88>)
 8005328:	f7ff f966 	bl	80045f8 <vListInsertEnd>
 800532c:	e7e7      	b.n	80052fe <xTaskRemoveFromEventList+0x3e>
		xReturn = pdFALSE;
 800532e:	2000      	movs	r0, #0
}
 8005330:	bd38      	pop	{r3, r4, r5, pc}
 8005332:	bf00      	nop
 8005334:	2000067c 	.word	0x2000067c
 8005338:	20000684 	.word	0x20000684
 800533c:	200005e8 	.word	0x200005e8
 8005340:	200005dc 	.word	0x200005dc
 8005344:	20000700 	.word	0x20000700
 8005348:	200006bc 	.word	0x200006bc

0800534c <vTaskInternalSetTimeOutState>:
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800534c:	4b03      	ldr	r3, [pc, #12]	; (800535c <vTaskInternalSetTimeOutState+0x10>)
 800534e:	681b      	ldr	r3, [r3, #0]
 8005350:	6003      	str	r3, [r0, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8005352:	4b03      	ldr	r3, [pc, #12]	; (8005360 <vTaskInternalSetTimeOutState+0x14>)
 8005354:	681b      	ldr	r3, [r3, #0]
 8005356:	6043      	str	r3, [r0, #4]
}
 8005358:	4770      	bx	lr
 800535a:	bf00      	nop
 800535c:	200006b4 	.word	0x200006b4
 8005360:	200006fc 	.word	0x200006fc

08005364 <xTaskCheckForTimeOut>:
{
 8005364:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	configASSERT( pxTimeOut );
 8005366:	b1c8      	cbz	r0, 800539c <xTaskCheckForTimeOut+0x38>
 8005368:	460c      	mov	r4, r1
 800536a:	4605      	mov	r5, r0
	configASSERT( pxTicksToWait );
 800536c:	b1f9      	cbz	r1, 80053ae <xTaskCheckForTimeOut+0x4a>
	taskENTER_CRITICAL();
 800536e:	f000 f911 	bl	8005594 <vPortEnterCritical>
		const TickType_t xConstTickCount = xTickCount;
 8005372:	4b1b      	ldr	r3, [pc, #108]	; (80053e0 <xTaskCheckForTimeOut+0x7c>)
 8005374:	6819      	ldr	r1, [r3, #0]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8005376:	686b      	ldr	r3, [r5, #4]
 8005378:	1ac8      	subs	r0, r1, r3
			if( *pxTicksToWait == portMAX_DELAY )
 800537a:	6822      	ldr	r2, [r4, #0]
 800537c:	f1b2 3fff 	cmp.w	r2, #4294967295
 8005380:	d026      	beq.n	80053d0 <xTaskCheckForTimeOut+0x6c>
		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8005382:	682f      	ldr	r7, [r5, #0]
 8005384:	4e17      	ldr	r6, [pc, #92]	; (80053e4 <xTaskCheckForTimeOut+0x80>)
 8005386:	6836      	ldr	r6, [r6, #0]
 8005388:	42b7      	cmp	r7, r6
 800538a:	d001      	beq.n	8005390 <xTaskCheckForTimeOut+0x2c>
 800538c:	428b      	cmp	r3, r1
 800538e:	d924      	bls.n	80053da <xTaskCheckForTimeOut+0x76>
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8005390:	4282      	cmp	r2, r0
 8005392:	d815      	bhi.n	80053c0 <xTaskCheckForTimeOut+0x5c>
			*pxTicksToWait = 0;
 8005394:	2300      	movs	r3, #0
 8005396:	6023      	str	r3, [r4, #0]
			xReturn = pdTRUE;
 8005398:	2401      	movs	r4, #1
 800539a:	e01a      	b.n	80053d2 <xTaskCheckForTimeOut+0x6e>
 800539c:	f04f 0350 	mov.w	r3, #80	; 0x50
 80053a0:	f383 8811 	msr	BASEPRI, r3
 80053a4:	f3bf 8f6f 	isb	sy
 80053a8:	f3bf 8f4f 	dsb	sy
	configASSERT( pxTimeOut );
 80053ac:	e7fe      	b.n	80053ac <xTaskCheckForTimeOut+0x48>
 80053ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 80053b2:	f383 8811 	msr	BASEPRI, r3
 80053b6:	f3bf 8f6f 	isb	sy
 80053ba:	f3bf 8f4f 	dsb	sy
	configASSERT( pxTicksToWait );
 80053be:	e7fe      	b.n	80053be <xTaskCheckForTimeOut+0x5a>
			*pxTicksToWait -= xElapsedTime;
 80053c0:	1a5b      	subs	r3, r3, r1
 80053c2:	4413      	add	r3, r2
 80053c4:	6023      	str	r3, [r4, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 80053c6:	4628      	mov	r0, r5
 80053c8:	f7ff ffc0 	bl	800534c <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 80053cc:	2400      	movs	r4, #0
 80053ce:	e000      	b.n	80053d2 <xTaskCheckForTimeOut+0x6e>
				xReturn = pdFALSE;
 80053d0:	2400      	movs	r4, #0
	taskEXIT_CRITICAL();
 80053d2:	f000 f901 	bl	80055d8 <vPortExitCritical>
}
 80053d6:	4620      	mov	r0, r4
 80053d8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			xReturn = pdTRUE;
 80053da:	2401      	movs	r4, #1
 80053dc:	e7f9      	b.n	80053d2 <xTaskCheckForTimeOut+0x6e>
 80053de:	bf00      	nop
 80053e0:	200006fc 	.word	0x200006fc
 80053e4:	200006b4 	.word	0x200006b4

080053e8 <vTaskMissedYield>:
	xYieldPending = pdTRUE;
 80053e8:	4b01      	ldr	r3, [pc, #4]	; (80053f0 <vTaskMissedYield+0x8>)
 80053ea:	2201      	movs	r2, #1
 80053ec:	601a      	str	r2, [r3, #0]
}
 80053ee:	4770      	bx	lr
 80053f0:	20000700 	.word	0x20000700

080053f4 <xTaskGetSchedulerState>:
		if( xSchedulerRunning == pdFALSE )
 80053f4:	4b05      	ldr	r3, [pc, #20]	; (800540c <xTaskGetSchedulerState+0x18>)
 80053f6:	681b      	ldr	r3, [r3, #0]
 80053f8:	b133      	cbz	r3, 8005408 <xTaskGetSchedulerState+0x14>
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80053fa:	4b05      	ldr	r3, [pc, #20]	; (8005410 <xTaskGetSchedulerState+0x1c>)
 80053fc:	681b      	ldr	r3, [r3, #0]
 80053fe:	b10b      	cbz	r3, 8005404 <xTaskGetSchedulerState+0x10>
				xReturn = taskSCHEDULER_SUSPENDED;
 8005400:	2000      	movs	r0, #0
	}
 8005402:	4770      	bx	lr
				xReturn = taskSCHEDULER_RUNNING;
 8005404:	2002      	movs	r0, #2
 8005406:	4770      	bx	lr
			xReturn = taskSCHEDULER_NOT_STARTED;
 8005408:	2001      	movs	r0, #1
 800540a:	4770      	bx	lr
 800540c:	200006d0 	.word	0x200006d0
 8005410:	2000067c 	.word	0x2000067c

08005414 <xTaskPriorityDisinherit>:
		if( pxMutexHolder != NULL )
 8005414:	2800      	cmp	r0, #0
 8005416:	d04c      	beq.n	80054b2 <xTaskPriorityDisinherit+0x9e>
	{
 8005418:	b538      	push	{r3, r4, r5, lr}
 800541a:	4604      	mov	r4, r0
			configASSERT( pxTCB == pxCurrentTCB );
 800541c:	4b27      	ldr	r3, [pc, #156]	; (80054bc <xTaskPriorityDisinherit+0xa8>)
 800541e:	681b      	ldr	r3, [r3, #0]
 8005420:	4283      	cmp	r3, r0
 8005422:	d008      	beq.n	8005436 <xTaskPriorityDisinherit+0x22>
 8005424:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005428:	f383 8811 	msr	BASEPRI, r3
 800542c:	f3bf 8f6f 	isb	sy
 8005430:	f3bf 8f4f 	dsb	sy
 8005434:	e7fe      	b.n	8005434 <xTaskPriorityDisinherit+0x20>
			configASSERT( pxTCB->uxMutexesHeld );
 8005436:	6c83      	ldr	r3, [r0, #72]	; 0x48
 8005438:	b943      	cbnz	r3, 800544c <xTaskPriorityDisinherit+0x38>
 800543a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800543e:	f383 8811 	msr	BASEPRI, r3
 8005442:	f3bf 8f6f 	isb	sy
 8005446:	f3bf 8f4f 	dsb	sy
 800544a:	e7fe      	b.n	800544a <xTaskPriorityDisinherit+0x36>
			( pxTCB->uxMutexesHeld )--;
 800544c:	3b01      	subs	r3, #1
 800544e:	6483      	str	r3, [r0, #72]	; 0x48
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8005450:	6ac1      	ldr	r1, [r0, #44]	; 0x2c
 8005452:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8005454:	4291      	cmp	r1, r2
 8005456:	d02e      	beq.n	80054b6 <xTaskPriorityDisinherit+0xa2>
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8005458:	b10b      	cbz	r3, 800545e <xTaskPriorityDisinherit+0x4a>
	BaseType_t xReturn = pdFALSE;
 800545a:	2000      	movs	r0, #0
	}
 800545c:	bd38      	pop	{r3, r4, r5, pc}
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800545e:	1d05      	adds	r5, r0, #4
 8005460:	4628      	mov	r0, r5
 8005462:	f7ff f8ed 	bl	8004640 <uxListRemove>
 8005466:	b970      	cbnz	r0, 8005486 <xTaskPriorityDisinherit+0x72>
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 8005468:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 800546a:	eb02 0382 	add.w	r3, r2, r2, lsl #2
 800546e:	009b      	lsls	r3, r3, #2
 8005470:	4913      	ldr	r1, [pc, #76]	; (80054c0 <xTaskPriorityDisinherit+0xac>)
 8005472:	58cb      	ldr	r3, [r1, r3]
 8005474:	b93b      	cbnz	r3, 8005486 <xTaskPriorityDisinherit+0x72>
 8005476:	2301      	movs	r3, #1
 8005478:	fa03 f202 	lsl.w	r2, r3, r2
 800547c:	4911      	ldr	r1, [pc, #68]	; (80054c4 <xTaskPriorityDisinherit+0xb0>)
 800547e:	680b      	ldr	r3, [r1, #0]
 8005480:	ea23 0302 	bic.w	r3, r3, r2
 8005484:	600b      	str	r3, [r1, #0]
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8005486:	6c60      	ldr	r0, [r4, #68]	; 0x44
 8005488:	62e0      	str	r0, [r4, #44]	; 0x2c
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800548a:	f1c0 0307 	rsb	r3, r0, #7
 800548e:	61a3      	str	r3, [r4, #24]
					prvAddTaskToReadyList( pxTCB );
 8005490:	2401      	movs	r4, #1
 8005492:	fa04 f300 	lsl.w	r3, r4, r0
 8005496:	4a0b      	ldr	r2, [pc, #44]	; (80054c4 <xTaskPriorityDisinherit+0xb0>)
 8005498:	6811      	ldr	r1, [r2, #0]
 800549a:	430b      	orrs	r3, r1
 800549c:	6013      	str	r3, [r2, #0]
 800549e:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 80054a2:	4629      	mov	r1, r5
 80054a4:	4b06      	ldr	r3, [pc, #24]	; (80054c0 <xTaskPriorityDisinherit+0xac>)
 80054a6:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 80054aa:	f7ff f8a5 	bl	80045f8 <vListInsertEnd>
					xReturn = pdTRUE;
 80054ae:	4620      	mov	r0, r4
 80054b0:	e7d4      	b.n	800545c <xTaskPriorityDisinherit+0x48>
	BaseType_t xReturn = pdFALSE;
 80054b2:	2000      	movs	r0, #0
	}
 80054b4:	4770      	bx	lr
	BaseType_t xReturn = pdFALSE;
 80054b6:	2000      	movs	r0, #0
 80054b8:	e7d0      	b.n	800545c <xTaskPriorityDisinherit+0x48>
 80054ba:	bf00      	nop
 80054bc:	200005dc 	.word	0x200005dc
 80054c0:	200005e8 	.word	0x200005e8
 80054c4:	20000684 	.word	0x20000684

080054c8 <prvTaskExitError>:
	return pxTopOfStack;
}
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 80054c8:	b082      	sub	sp, #8
volatile uint32_t ulDummy = 0;
 80054ca:	2300      	movs	r3, #0
 80054cc:	9301      	str	r3, [sp, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 80054ce:	4b0d      	ldr	r3, [pc, #52]	; (8005504 <prvTaskExitError+0x3c>)
 80054d0:	681b      	ldr	r3, [r3, #0]
 80054d2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80054d6:	d008      	beq.n	80054ea <prvTaskExitError+0x22>
 80054d8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80054dc:	f383 8811 	msr	BASEPRI, r3
 80054e0:	f3bf 8f6f 	isb	sy
 80054e4:	f3bf 8f4f 	dsb	sy
 80054e8:	e7fe      	b.n	80054e8 <prvTaskExitError+0x20>
 80054ea:	f04f 0350 	mov.w	r3, #80	; 0x50
 80054ee:	f383 8811 	msr	BASEPRI, r3
 80054f2:	f3bf 8f6f 	isb	sy
 80054f6:	f3bf 8f4f 	dsb	sy
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 80054fa:	9b01      	ldr	r3, [sp, #4]
 80054fc:	2b00      	cmp	r3, #0
 80054fe:	d0fc      	beq.n	80054fa <prvTaskExitError+0x32>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8005500:	b002      	add	sp, #8
 8005502:	4770      	bx	lr
 8005504:	20000290 	.word	0x20000290

08005508 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8005508:	4808      	ldr	r0, [pc, #32]	; (800552c <prvPortStartFirstTask+0x24>)
 800550a:	6800      	ldr	r0, [r0, #0]
 800550c:	6800      	ldr	r0, [r0, #0]
 800550e:	f380 8808 	msr	MSP, r0
 8005512:	f04f 0000 	mov.w	r0, #0
 8005516:	f380 8814 	msr	CONTROL, r0
 800551a:	b662      	cpsie	i
 800551c:	b661      	cpsie	f
 800551e:	f3bf 8f4f 	dsb	sy
 8005522:	f3bf 8f6f 	isb	sy
 8005526:	df00      	svc	0
 8005528:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800552a:	0000      	.short	0x0000
 800552c:	e000ed08 	.word	0xe000ed08

08005530 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8005530:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8005540 <vPortEnableVFP+0x10>
 8005534:	6801      	ldr	r1, [r0, #0]
 8005536:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800553a:	6001      	str	r1, [r0, #0]
 800553c:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800553e:	0000      	.short	0x0000
 8005540:	e000ed88 	.word	0xe000ed88

08005544 <pxPortInitialiseStack>:
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8005544:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8005548:	f840 3c04 	str.w	r3, [r0, #-4]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800554c:	f021 0101 	bic.w	r1, r1, #1
 8005550:	f840 1c08 	str.w	r1, [r0, #-8]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8005554:	4b05      	ldr	r3, [pc, #20]	; (800556c <pxPortInitialiseStack+0x28>)
 8005556:	f840 3c0c 	str.w	r3, [r0, #-12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800555a:	f840 2c20 	str.w	r2, [r0, #-32]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800555e:	f06f 0302 	mvn.w	r3, #2
 8005562:	f840 3c24 	str.w	r3, [r0, #-36]
}
 8005566:	3844      	subs	r0, #68	; 0x44
 8005568:	4770      	bx	lr
 800556a:	bf00      	nop
 800556c:	080054c9 	.word	0x080054c9

08005570 <SVC_Handler>:
	__asm volatile (
 8005570:	4b07      	ldr	r3, [pc, #28]	; (8005590 <pxCurrentTCBConst2>)
 8005572:	6819      	ldr	r1, [r3, #0]
 8005574:	6808      	ldr	r0, [r1, #0]
 8005576:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800557a:	f380 8809 	msr	PSP, r0
 800557e:	f3bf 8f6f 	isb	sy
 8005582:	f04f 0000 	mov.w	r0, #0
 8005586:	f380 8811 	msr	BASEPRI, r0
 800558a:	4770      	bx	lr
 800558c:	f3af 8000 	nop.w

08005590 <pxCurrentTCBConst2>:
 8005590:	200005dc 	.word	0x200005dc

08005594 <vPortEnterCritical>:
 8005594:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005598:	f383 8811 	msr	BASEPRI, r3
 800559c:	f3bf 8f6f 	isb	sy
 80055a0:	f3bf 8f4f 	dsb	sy
	uxCriticalNesting++;
 80055a4:	4a0a      	ldr	r2, [pc, #40]	; (80055d0 <vPortEnterCritical+0x3c>)
 80055a6:	6813      	ldr	r3, [r2, #0]
 80055a8:	3301      	adds	r3, #1
 80055aa:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 1 )
 80055ac:	2b01      	cmp	r3, #1
 80055ae:	d000      	beq.n	80055b2 <vPortEnterCritical+0x1e>
}
 80055b0:	4770      	bx	lr
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 80055b2:	4b08      	ldr	r3, [pc, #32]	; (80055d4 <vPortEnterCritical+0x40>)
 80055b4:	681b      	ldr	r3, [r3, #0]
 80055b6:	f013 0fff 	tst.w	r3, #255	; 0xff
 80055ba:	d0f9      	beq.n	80055b0 <vPortEnterCritical+0x1c>
 80055bc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80055c0:	f383 8811 	msr	BASEPRI, r3
 80055c4:	f3bf 8f6f 	isb	sy
 80055c8:	f3bf 8f4f 	dsb	sy
 80055cc:	e7fe      	b.n	80055cc <vPortEnterCritical+0x38>
 80055ce:	bf00      	nop
 80055d0:	20000290 	.word	0x20000290
 80055d4:	e000ed04 	.word	0xe000ed04

080055d8 <vPortExitCritical>:
	configASSERT( uxCriticalNesting );
 80055d8:	4b09      	ldr	r3, [pc, #36]	; (8005600 <vPortExitCritical+0x28>)
 80055da:	681b      	ldr	r3, [r3, #0]
 80055dc:	b943      	cbnz	r3, 80055f0 <vPortExitCritical+0x18>
 80055de:	f04f 0350 	mov.w	r3, #80	; 0x50
 80055e2:	f383 8811 	msr	BASEPRI, r3
 80055e6:	f3bf 8f6f 	isb	sy
 80055ea:	f3bf 8f4f 	dsb	sy
 80055ee:	e7fe      	b.n	80055ee <vPortExitCritical+0x16>
	uxCriticalNesting--;
 80055f0:	3b01      	subs	r3, #1
 80055f2:	4a03      	ldr	r2, [pc, #12]	; (8005600 <vPortExitCritical+0x28>)
 80055f4:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 80055f6:	b90b      	cbnz	r3, 80055fc <vPortExitCritical+0x24>
	__asm volatile
 80055f8:	f383 8811 	msr	BASEPRI, r3
}
 80055fc:	4770      	bx	lr
 80055fe:	bf00      	nop
 8005600:	20000290 	.word	0x20000290
	...

08005610 <PendSV_Handler>:
	__asm volatile
 8005610:	f3ef 8009 	mrs	r0, PSP
 8005614:	f3bf 8f6f 	isb	sy
 8005618:	4b15      	ldr	r3, [pc, #84]	; (8005670 <pxCurrentTCBConst>)
 800561a:	681a      	ldr	r2, [r3, #0]
 800561c:	f01e 0f10 	tst.w	lr, #16
 8005620:	bf08      	it	eq
 8005622:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8005626:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800562a:	6010      	str	r0, [r2, #0]
 800562c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8005630:	f04f 0050 	mov.w	r0, #80	; 0x50
 8005634:	f380 8811 	msr	BASEPRI, r0
 8005638:	f3bf 8f4f 	dsb	sy
 800563c:	f3bf 8f6f 	isb	sy
 8005640:	f7ff fdda 	bl	80051f8 <vTaskSwitchContext>
 8005644:	f04f 0000 	mov.w	r0, #0
 8005648:	f380 8811 	msr	BASEPRI, r0
 800564c:	bc09      	pop	{r0, r3}
 800564e:	6819      	ldr	r1, [r3, #0]
 8005650:	6808      	ldr	r0, [r1, #0]
 8005652:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005656:	f01e 0f10 	tst.w	lr, #16
 800565a:	bf08      	it	eq
 800565c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8005660:	f380 8809 	msr	PSP, r0
 8005664:	f3bf 8f6f 	isb	sy
 8005668:	4770      	bx	lr
 800566a:	bf00      	nop
 800566c:	f3af 8000 	nop.w

08005670 <pxCurrentTCBConst>:
 8005670:	200005dc 	.word	0x200005dc

08005674 <xPortSysTickHandler>:
{
 8005674:	b508      	push	{r3, lr}
	__asm volatile
 8005676:	f04f 0350 	mov.w	r3, #80	; 0x50
 800567a:	f383 8811 	msr	BASEPRI, r3
 800567e:	f3bf 8f6f 	isb	sy
 8005682:	f3bf 8f4f 	dsb	sy
		if( xTaskIncrementTick() != pdFALSE )
 8005686:	f7ff fc89 	bl	8004f9c <xTaskIncrementTick>
 800568a:	b118      	cbz	r0, 8005694 <xPortSysTickHandler+0x20>
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800568c:	4b03      	ldr	r3, [pc, #12]	; (800569c <xPortSysTickHandler+0x28>)
 800568e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005692:	601a      	str	r2, [r3, #0]
	__asm volatile
 8005694:	2300      	movs	r3, #0
 8005696:	f383 8811 	msr	BASEPRI, r3
}
 800569a:	bd08      	pop	{r3, pc}
 800569c:	e000ed04 	.word	0xe000ed04

080056a0 <vPortSetupTimerInterrupt>:
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 80056a0:	4a08      	ldr	r2, [pc, #32]	; (80056c4 <vPortSetupTimerInterrupt+0x24>)
 80056a2:	2300      	movs	r3, #0
 80056a4:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 80056a6:	4908      	ldr	r1, [pc, #32]	; (80056c8 <vPortSetupTimerInterrupt+0x28>)
 80056a8:	600b      	str	r3, [r1, #0]
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 80056aa:	4b08      	ldr	r3, [pc, #32]	; (80056cc <vPortSetupTimerInterrupt+0x2c>)
 80056ac:	681b      	ldr	r3, [r3, #0]
 80056ae:	4908      	ldr	r1, [pc, #32]	; (80056d0 <vPortSetupTimerInterrupt+0x30>)
 80056b0:	fba1 1303 	umull	r1, r3, r1, r3
 80056b4:	099b      	lsrs	r3, r3, #6
 80056b6:	3b01      	subs	r3, #1
 80056b8:	4906      	ldr	r1, [pc, #24]	; (80056d4 <vPortSetupTimerInterrupt+0x34>)
 80056ba:	600b      	str	r3, [r1, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 80056bc:	2307      	movs	r3, #7
 80056be:	6013      	str	r3, [r2, #0]
}
 80056c0:	4770      	bx	lr
 80056c2:	bf00      	nop
 80056c4:	e000e010 	.word	0xe000e010
 80056c8:	e000e018 	.word	0xe000e018
 80056cc:	20000174 	.word	0x20000174
 80056d0:	10624dd3 	.word	0x10624dd3
 80056d4:	e000e014 	.word	0xe000e014

080056d8 <xPortStartScheduler>:
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 80056d8:	4b3a      	ldr	r3, [pc, #232]	; (80057c4 <xPortStartScheduler+0xec>)
 80056da:	681a      	ldr	r2, [r3, #0]
 80056dc:	4b3a      	ldr	r3, [pc, #232]	; (80057c8 <xPortStartScheduler+0xf0>)
 80056de:	429a      	cmp	r2, r3
 80056e0:	d029      	beq.n	8005736 <xPortStartScheduler+0x5e>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 80056e2:	4b38      	ldr	r3, [pc, #224]	; (80057c4 <xPortStartScheduler+0xec>)
 80056e4:	681a      	ldr	r2, [r3, #0]
 80056e6:	4b39      	ldr	r3, [pc, #228]	; (80057cc <xPortStartScheduler+0xf4>)
 80056e8:	429a      	cmp	r2, r3
 80056ea:	d02d      	beq.n	8005748 <xPortStartScheduler+0x70>
{
 80056ec:	b510      	push	{r4, lr}
 80056ee:	b082      	sub	sp, #8
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 80056f0:	4b37      	ldr	r3, [pc, #220]	; (80057d0 <xPortStartScheduler+0xf8>)
 80056f2:	781a      	ldrb	r2, [r3, #0]
 80056f4:	b2d2      	uxtb	r2, r2
 80056f6:	9201      	str	r2, [sp, #4]
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 80056f8:	22ff      	movs	r2, #255	; 0xff
 80056fa:	701a      	strb	r2, [r3, #0]
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 80056fc:	781b      	ldrb	r3, [r3, #0]
 80056fe:	b2db      	uxtb	r3, r3
 8005700:	f88d 3003 	strb.w	r3, [sp, #3]
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8005704:	f89d 3003 	ldrb.w	r3, [sp, #3]
 8005708:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800570c:	4a31      	ldr	r2, [pc, #196]	; (80057d4 <xPortStartScheduler+0xfc>)
 800570e:	7013      	strb	r3, [r2, #0]
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8005710:	4b31      	ldr	r3, [pc, #196]	; (80057d8 <xPortStartScheduler+0x100>)
 8005712:	2207      	movs	r2, #7
 8005714:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8005716:	f89d 3003 	ldrb.w	r3, [sp, #3]
 800571a:	f013 0f80 	tst.w	r3, #128	; 0x80
 800571e:	d01c      	beq.n	800575a <xPortStartScheduler+0x82>
			ulMaxPRIGROUPValue--;
 8005720:	4a2d      	ldr	r2, [pc, #180]	; (80057d8 <xPortStartScheduler+0x100>)
 8005722:	6813      	ldr	r3, [r2, #0]
 8005724:	3b01      	subs	r3, #1
 8005726:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8005728:	f89d 3003 	ldrb.w	r3, [sp, #3]
 800572c:	005b      	lsls	r3, r3, #1
 800572e:	b2db      	uxtb	r3, r3
 8005730:	f88d 3003 	strb.w	r3, [sp, #3]
 8005734:	e7ef      	b.n	8005716 <xPortStartScheduler+0x3e>
	__asm volatile
 8005736:	f04f 0350 	mov.w	r3, #80	; 0x50
 800573a:	f383 8811 	msr	BASEPRI, r3
 800573e:	f3bf 8f6f 	isb	sy
 8005742:	f3bf 8f4f 	dsb	sy
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8005746:	e7fe      	b.n	8005746 <xPortStartScheduler+0x6e>
 8005748:	f04f 0350 	mov.w	r3, #80	; 0x50
 800574c:	f383 8811 	msr	BASEPRI, r3
 8005750:	f3bf 8f6f 	isb	sy
 8005754:	f3bf 8f4f 	dsb	sy
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8005758:	e7fe      	b.n	8005758 <xPortStartScheduler+0x80>
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800575a:	4b1f      	ldr	r3, [pc, #124]	; (80057d8 <xPortStartScheduler+0x100>)
 800575c:	681b      	ldr	r3, [r3, #0]
 800575e:	2b03      	cmp	r3, #3
 8005760:	d008      	beq.n	8005774 <xPortStartScheduler+0x9c>
 8005762:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005766:	f383 8811 	msr	BASEPRI, r3
 800576a:	f3bf 8f6f 	isb	sy
 800576e:	f3bf 8f4f 	dsb	sy
 8005772:	e7fe      	b.n	8005772 <xPortStartScheduler+0x9a>
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8005774:	021b      	lsls	r3, r3, #8
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8005776:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800577a:	4a17      	ldr	r2, [pc, #92]	; (80057d8 <xPortStartScheduler+0x100>)
 800577c:	6013      	str	r3, [r2, #0]
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800577e:	9b01      	ldr	r3, [sp, #4]
 8005780:	b2db      	uxtb	r3, r3
 8005782:	4a13      	ldr	r2, [pc, #76]	; (80057d0 <xPortStartScheduler+0xf8>)
 8005784:	7013      	strb	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8005786:	4b15      	ldr	r3, [pc, #84]	; (80057dc <xPortStartScheduler+0x104>)
 8005788:	681a      	ldr	r2, [r3, #0]
 800578a:	f442 0270 	orr.w	r2, r2, #15728640	; 0xf00000
 800578e:	601a      	str	r2, [r3, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8005790:	681a      	ldr	r2, [r3, #0]
 8005792:	f042 4270 	orr.w	r2, r2, #4026531840	; 0xf0000000
 8005796:	601a      	str	r2, [r3, #0]
	vPortSetupTimerInterrupt();
 8005798:	f7ff ff82 	bl	80056a0 <vPortSetupTimerInterrupt>
	uxCriticalNesting = 0;
 800579c:	2400      	movs	r4, #0
 800579e:	4b10      	ldr	r3, [pc, #64]	; (80057e0 <xPortStartScheduler+0x108>)
 80057a0:	601c      	str	r4, [r3, #0]
	vPortEnableVFP();
 80057a2:	f7ff fec5 	bl	8005530 <vPortEnableVFP>
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 80057a6:	4a0f      	ldr	r2, [pc, #60]	; (80057e4 <xPortStartScheduler+0x10c>)
 80057a8:	6813      	ldr	r3, [r2, #0]
 80057aa:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 80057ae:	6013      	str	r3, [r2, #0]
	prvPortStartFirstTask();
 80057b0:	f7ff feaa 	bl	8005508 <prvPortStartFirstTask>
	vTaskSwitchContext();
 80057b4:	f7ff fd20 	bl	80051f8 <vTaskSwitchContext>
	prvTaskExitError();
 80057b8:	f7ff fe86 	bl	80054c8 <prvTaskExitError>
}
 80057bc:	4620      	mov	r0, r4
 80057be:	b002      	add	sp, #8
 80057c0:	bd10      	pop	{r4, pc}
 80057c2:	bf00      	nop
 80057c4:	e000ed00 	.word	0xe000ed00
 80057c8:	410fc271 	.word	0x410fc271
 80057cc:	410fc270 	.word	0x410fc270
 80057d0:	e000e400 	.word	0xe000e400
 80057d4:	20000704 	.word	0x20000704
 80057d8:	20000708 	.word	0x20000708
 80057dc:	e000ed20 	.word	0xe000ed20
 80057e0:	20000290 	.word	0x20000290
 80057e4:	e000ef34 	.word	0xe000ef34

080057e8 <vPortValidateInterruptPriority>:
	{
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 80057e8:	f3ef 8305 	mrs	r3, IPSR

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 80057ec:	2b0f      	cmp	r3, #15
 80057ee:	d90f      	bls.n	8005810 <vPortValidateInterruptPriority+0x28>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 80057f0:	4a10      	ldr	r2, [pc, #64]	; (8005834 <vPortValidateInterruptPriority+0x4c>)
 80057f2:	5c9b      	ldrb	r3, [r3, r2]
 80057f4:	b2db      	uxtb	r3, r3
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 80057f6:	4a10      	ldr	r2, [pc, #64]	; (8005838 <vPortValidateInterruptPriority+0x50>)
 80057f8:	7812      	ldrb	r2, [r2, #0]
 80057fa:	429a      	cmp	r2, r3
 80057fc:	d908      	bls.n	8005810 <vPortValidateInterruptPriority+0x28>
 80057fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005802:	f383 8811 	msr	BASEPRI, r3
 8005806:	f3bf 8f6f 	isb	sy
 800580a:	f3bf 8f4f 	dsb	sy
 800580e:	e7fe      	b.n	800580e <vPortValidateInterruptPriority+0x26>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8005810:	4b0a      	ldr	r3, [pc, #40]	; (800583c <vPortValidateInterruptPriority+0x54>)
 8005812:	681b      	ldr	r3, [r3, #0]
 8005814:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8005818:	4a09      	ldr	r2, [pc, #36]	; (8005840 <vPortValidateInterruptPriority+0x58>)
 800581a:	6812      	ldr	r2, [r2, #0]
 800581c:	4293      	cmp	r3, r2
 800581e:	d908      	bls.n	8005832 <vPortValidateInterruptPriority+0x4a>
 8005820:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005824:	f383 8811 	msr	BASEPRI, r3
 8005828:	f3bf 8f6f 	isb	sy
 800582c:	f3bf 8f4f 	dsb	sy
 8005830:	e7fe      	b.n	8005830 <vPortValidateInterruptPriority+0x48>
	}
 8005832:	4770      	bx	lr
 8005834:	e000e3f0 	.word	0xe000e3f0
 8005838:	20000704 	.word	0x20000704
 800583c:	e000ed0c 	.word	0xe000ed0c
 8005840:	20000708 	.word	0x20000708

08005844 <prvHeapInit>:
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8005844:	4a12      	ldr	r2, [pc, #72]	; (8005890 <prvHeapInit+0x4c>)

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8005846:	f012 0f07 	tst.w	r2, #7
 800584a:	d01e      	beq.n	800588a <prvHeapInit+0x46>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800584c:	1dd1      	adds	r1, r2, #7
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800584e:	f021 0107 	bic.w	r1, r1, #7
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8005852:	f5c1 5370 	rsb	r3, r1, #15360	; 0x3c00
 8005856:	4413      	add	r3, r2
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8005858:	460a      	mov	r2, r1

	pucAlignedHeap = ( uint8_t * ) uxAddress;

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800585a:	480e      	ldr	r0, [pc, #56]	; (8005894 <prvHeapInit+0x50>)
 800585c:	6002      	str	r2, [r0, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800585e:	2100      	movs	r1, #0
 8005860:	6041      	str	r1, [r0, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8005862:	4413      	add	r3, r2
	uxAddress -= xHeapStructSize;
 8005864:	3b08      	subs	r3, #8
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8005866:	f023 0307 	bic.w	r3, r3, #7
	pxEnd = ( void * ) uxAddress;
 800586a:	480b      	ldr	r0, [pc, #44]	; (8005898 <prvHeapInit+0x54>)
 800586c:	6003      	str	r3, [r0, #0]
	pxEnd->xBlockSize = 0;
 800586e:	6059      	str	r1, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8005870:	6019      	str	r1, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8005872:	1a99      	subs	r1, r3, r2
 8005874:	6051      	str	r1, [r2, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8005876:	6013      	str	r3, [r2, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8005878:	4b08      	ldr	r3, [pc, #32]	; (800589c <prvHeapInit+0x58>)
 800587a:	6019      	str	r1, [r3, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800587c:	4b08      	ldr	r3, [pc, #32]	; (80058a0 <prvHeapInit+0x5c>)
 800587e:	6019      	str	r1, [r3, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8005880:	4b08      	ldr	r3, [pc, #32]	; (80058a4 <prvHeapInit+0x60>)
 8005882:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8005886:	601a      	str	r2, [r3, #0]
}
 8005888:	4770      	bx	lr
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800588a:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 800588e:	e7e4      	b.n	800585a <prvHeapInit+0x16>
 8005890:	20000710 	.word	0x20000710
 8005894:	20004324 	.word	0x20004324
 8005898:	2000070c 	.word	0x2000070c
 800589c:	20004318 	.word	0x20004318
 80058a0:	20004314 	.word	0x20004314
 80058a4:	20004310 	.word	0x20004310

080058a8 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 80058a8:	b410      	push	{r4}
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 80058aa:	4b13      	ldr	r3, [pc, #76]	; (80058f8 <prvInsertBlockIntoFreeList+0x50>)
 80058ac:	461a      	mov	r2, r3
 80058ae:	681b      	ldr	r3, [r3, #0]
 80058b0:	4283      	cmp	r3, r0
 80058b2:	d3fb      	bcc.n	80058ac <prvInsertBlockIntoFreeList+0x4>
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 80058b4:	6851      	ldr	r1, [r2, #4]
 80058b6:	1854      	adds	r4, r2, r1
 80058b8:	4284      	cmp	r4, r0
 80058ba:	d00a      	beq.n	80058d2 <prvInsertBlockIntoFreeList+0x2a>
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 80058bc:	6841      	ldr	r1, [r0, #4]
 80058be:	1844      	adds	r4, r0, r1
 80058c0:	42a3      	cmp	r3, r4
 80058c2:	d00b      	beq.n	80058dc <prvInsertBlockIntoFreeList+0x34>
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 80058c4:	6003      	str	r3, [r0, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 80058c6:	4290      	cmp	r0, r2
 80058c8:	d000      	beq.n	80058cc <prvInsertBlockIntoFreeList+0x24>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 80058ca:	6010      	str	r0, [r2, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80058cc:	f85d 4b04 	ldr.w	r4, [sp], #4
 80058d0:	4770      	bx	lr
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 80058d2:	6840      	ldr	r0, [r0, #4]
 80058d4:	4401      	add	r1, r0
 80058d6:	6051      	str	r1, [r2, #4]
		pxBlockToInsert = pxIterator;
 80058d8:	4610      	mov	r0, r2
 80058da:	e7ef      	b.n	80058bc <prvInsertBlockIntoFreeList+0x14>
		if( pxIterator->pxNextFreeBlock != pxEnd )
 80058dc:	4c07      	ldr	r4, [pc, #28]	; (80058fc <prvInsertBlockIntoFreeList+0x54>)
 80058de:	6824      	ldr	r4, [r4, #0]
 80058e0:	42a3      	cmp	r3, r4
 80058e2:	d006      	beq.n	80058f2 <prvInsertBlockIntoFreeList+0x4a>
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 80058e4:	685b      	ldr	r3, [r3, #4]
 80058e6:	4419      	add	r1, r3
 80058e8:	6041      	str	r1, [r0, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 80058ea:	6813      	ldr	r3, [r2, #0]
 80058ec:	681b      	ldr	r3, [r3, #0]
 80058ee:	6003      	str	r3, [r0, #0]
 80058f0:	e7e9      	b.n	80058c6 <prvInsertBlockIntoFreeList+0x1e>
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 80058f2:	6004      	str	r4, [r0, #0]
 80058f4:	e7e7      	b.n	80058c6 <prvInsertBlockIntoFreeList+0x1e>
 80058f6:	bf00      	nop
 80058f8:	20004324 	.word	0x20004324
 80058fc:	2000070c 	.word	0x2000070c

08005900 <pvPortMalloc>:
{
 8005900:	b570      	push	{r4, r5, r6, lr}
 8005902:	4604      	mov	r4, r0
	vTaskSuspendAll();
 8005904:	f7ff fb42 	bl	8004f8c <vTaskSuspendAll>
		if( pxEnd == NULL )
 8005908:	4b36      	ldr	r3, [pc, #216]	; (80059e4 <pvPortMalloc+0xe4>)
 800590a:	681b      	ldr	r3, [r3, #0]
 800590c:	b1a3      	cbz	r3, 8005938 <pvPortMalloc+0x38>
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800590e:	4b36      	ldr	r3, [pc, #216]	; (80059e8 <pvPortMalloc+0xe8>)
 8005910:	681b      	ldr	r3, [r3, #0]
 8005912:	421c      	tst	r4, r3
 8005914:	d14e      	bne.n	80059b4 <pvPortMalloc+0xb4>
			if( xWantedSize > 0 )
 8005916:	b134      	cbz	r4, 8005926 <pvPortMalloc+0x26>
				xWantedSize += xHeapStructSize;
 8005918:	3408      	adds	r4, #8
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800591a:	f014 0f07 	tst.w	r4, #7
 800591e:	d002      	beq.n	8005926 <pvPortMalloc+0x26>
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8005920:	f024 0407 	bic.w	r4, r4, #7
 8005924:	3408      	adds	r4, #8
			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8005926:	2c00      	cmp	r4, #0
 8005928:	d046      	beq.n	80059b8 <pvPortMalloc+0xb8>
 800592a:	4b30      	ldr	r3, [pc, #192]	; (80059ec <pvPortMalloc+0xec>)
 800592c:	681b      	ldr	r3, [r3, #0]
 800592e:	42a3      	cmp	r3, r4
 8005930:	d351      	bcc.n	80059d6 <pvPortMalloc+0xd6>
				pxBlock = xStart.pxNextFreeBlock;
 8005932:	4b2f      	ldr	r3, [pc, #188]	; (80059f0 <pvPortMalloc+0xf0>)
 8005934:	681d      	ldr	r5, [r3, #0]
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8005936:	e004      	b.n	8005942 <pvPortMalloc+0x42>
			prvHeapInit();
 8005938:	f7ff ff84 	bl	8005844 <prvHeapInit>
 800593c:	e7e7      	b.n	800590e <pvPortMalloc+0xe>
					pxPreviousBlock = pxBlock;
 800593e:	462b      	mov	r3, r5
					pxBlock = pxBlock->pxNextFreeBlock;
 8005940:	4615      	mov	r5, r2
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8005942:	686a      	ldr	r2, [r5, #4]
 8005944:	42a2      	cmp	r2, r4
 8005946:	d202      	bcs.n	800594e <pvPortMalloc+0x4e>
 8005948:	682a      	ldr	r2, [r5, #0]
 800594a:	2a00      	cmp	r2, #0
 800594c:	d1f7      	bne.n	800593e <pvPortMalloc+0x3e>
				if( pxBlock != pxEnd )
 800594e:	4a25      	ldr	r2, [pc, #148]	; (80059e4 <pvPortMalloc+0xe4>)
 8005950:	6812      	ldr	r2, [r2, #0]
 8005952:	42aa      	cmp	r2, r5
 8005954:	d041      	beq.n	80059da <pvPortMalloc+0xda>
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8005956:	681e      	ldr	r6, [r3, #0]
 8005958:	3608      	adds	r6, #8
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800595a:	682a      	ldr	r2, [r5, #0]
 800595c:	601a      	str	r2, [r3, #0]
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800595e:	686b      	ldr	r3, [r5, #4]
 8005960:	1b1b      	subs	r3, r3, r4
 8005962:	2b10      	cmp	r3, #16
 8005964:	d910      	bls.n	8005988 <pvPortMalloc+0x88>
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8005966:	1928      	adds	r0, r5, r4
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8005968:	f010 0f07 	tst.w	r0, #7
 800596c:	d008      	beq.n	8005980 <pvPortMalloc+0x80>
 800596e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005972:	f383 8811 	msr	BASEPRI, r3
 8005976:	f3bf 8f6f 	isb	sy
 800597a:	f3bf 8f4f 	dsb	sy
 800597e:	e7fe      	b.n	800597e <pvPortMalloc+0x7e>
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8005980:	6043      	str	r3, [r0, #4]
						pxBlock->xBlockSize = xWantedSize;
 8005982:	606c      	str	r4, [r5, #4]
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8005984:	f7ff ff90 	bl	80058a8 <prvInsertBlockIntoFreeList>
					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8005988:	686a      	ldr	r2, [r5, #4]
 800598a:	4918      	ldr	r1, [pc, #96]	; (80059ec <pvPortMalloc+0xec>)
 800598c:	680b      	ldr	r3, [r1, #0]
 800598e:	1a9b      	subs	r3, r3, r2
 8005990:	600b      	str	r3, [r1, #0]
					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8005992:	4918      	ldr	r1, [pc, #96]	; (80059f4 <pvPortMalloc+0xf4>)
 8005994:	6809      	ldr	r1, [r1, #0]
 8005996:	428b      	cmp	r3, r1
 8005998:	d201      	bcs.n	800599e <pvPortMalloc+0x9e>
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800599a:	4916      	ldr	r1, [pc, #88]	; (80059f4 <pvPortMalloc+0xf4>)
 800599c:	600b      	str	r3, [r1, #0]
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800599e:	4b12      	ldr	r3, [pc, #72]	; (80059e8 <pvPortMalloc+0xe8>)
 80059a0:	681b      	ldr	r3, [r3, #0]
 80059a2:	4313      	orrs	r3, r2
 80059a4:	606b      	str	r3, [r5, #4]
					pxBlock->pxNextFreeBlock = NULL;
 80059a6:	2300      	movs	r3, #0
 80059a8:	602b      	str	r3, [r5, #0]
					xNumberOfSuccessfulAllocations++;
 80059aa:	4a13      	ldr	r2, [pc, #76]	; (80059f8 <pvPortMalloc+0xf8>)
 80059ac:	6813      	ldr	r3, [r2, #0]
 80059ae:	3301      	adds	r3, #1
 80059b0:	6013      	str	r3, [r2, #0]
 80059b2:	e002      	b.n	80059ba <pvPortMalloc+0xba>
void *pvReturn = NULL;
 80059b4:	2600      	movs	r6, #0
 80059b6:	e000      	b.n	80059ba <pvPortMalloc+0xba>
 80059b8:	2600      	movs	r6, #0
	( void ) xTaskResumeAll();
 80059ba:	f7ff fb7b 	bl	80050b4 <xTaskResumeAll>
	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 80059be:	f016 0f07 	tst.w	r6, #7
 80059c2:	d00c      	beq.n	80059de <pvPortMalloc+0xde>
 80059c4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80059c8:	f383 8811 	msr	BASEPRI, r3
 80059cc:	f3bf 8f6f 	isb	sy
 80059d0:	f3bf 8f4f 	dsb	sy
 80059d4:	e7fe      	b.n	80059d4 <pvPortMalloc+0xd4>
void *pvReturn = NULL;
 80059d6:	2600      	movs	r6, #0
 80059d8:	e7ef      	b.n	80059ba <pvPortMalloc+0xba>
 80059da:	2600      	movs	r6, #0
 80059dc:	e7ed      	b.n	80059ba <pvPortMalloc+0xba>
}
 80059de:	4630      	mov	r0, r6
 80059e0:	bd70      	pop	{r4, r5, r6, pc}
 80059e2:	bf00      	nop
 80059e4:	2000070c 	.word	0x2000070c
 80059e8:	20004310 	.word	0x20004310
 80059ec:	20004314 	.word	0x20004314
 80059f0:	20004324 	.word	0x20004324
 80059f4:	20004318 	.word	0x20004318
 80059f8:	2000431c 	.word	0x2000431c

080059fc <vPortFree>:
	if( pv != NULL )
 80059fc:	2800      	cmp	r0, #0
 80059fe:	d034      	beq.n	8005a6a <vPortFree+0x6e>
{
 8005a00:	b538      	push	{r3, r4, r5, lr}
 8005a02:	4604      	mov	r4, r0
		puc -= xHeapStructSize;
 8005a04:	f1a0 0508 	sub.w	r5, r0, #8
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8005a08:	f850 3c04 	ldr.w	r3, [r0, #-4]
 8005a0c:	4a17      	ldr	r2, [pc, #92]	; (8005a6c <vPortFree+0x70>)
 8005a0e:	6812      	ldr	r2, [r2, #0]
 8005a10:	4213      	tst	r3, r2
 8005a12:	d108      	bne.n	8005a26 <vPortFree+0x2a>
 8005a14:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005a18:	f383 8811 	msr	BASEPRI, r3
 8005a1c:	f3bf 8f6f 	isb	sy
 8005a20:	f3bf 8f4f 	dsb	sy
 8005a24:	e7fe      	b.n	8005a24 <vPortFree+0x28>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8005a26:	f850 1c08 	ldr.w	r1, [r0, #-8]
 8005a2a:	b141      	cbz	r1, 8005a3e <vPortFree+0x42>
 8005a2c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005a30:	f383 8811 	msr	BASEPRI, r3
 8005a34:	f3bf 8f6f 	isb	sy
 8005a38:	f3bf 8f4f 	dsb	sy
 8005a3c:	e7fe      	b.n	8005a3c <vPortFree+0x40>
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8005a3e:	ea23 0302 	bic.w	r3, r3, r2
 8005a42:	f840 3c04 	str.w	r3, [r0, #-4]
				vTaskSuspendAll();
 8005a46:	f7ff faa1 	bl	8004f8c <vTaskSuspendAll>
					xFreeBytesRemaining += pxLink->xBlockSize;
 8005a4a:	f854 1c04 	ldr.w	r1, [r4, #-4]
 8005a4e:	4a08      	ldr	r2, [pc, #32]	; (8005a70 <vPortFree+0x74>)
 8005a50:	6813      	ldr	r3, [r2, #0]
 8005a52:	440b      	add	r3, r1
 8005a54:	6013      	str	r3, [r2, #0]
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8005a56:	4628      	mov	r0, r5
 8005a58:	f7ff ff26 	bl	80058a8 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8005a5c:	4a05      	ldr	r2, [pc, #20]	; (8005a74 <vPortFree+0x78>)
 8005a5e:	6813      	ldr	r3, [r2, #0]
 8005a60:	3301      	adds	r3, #1
 8005a62:	6013      	str	r3, [r2, #0]
				( void ) xTaskResumeAll();
 8005a64:	f7ff fb26 	bl	80050b4 <xTaskResumeAll>
}
 8005a68:	bd38      	pop	{r3, r4, r5, pc}
 8005a6a:	4770      	bx	lr
 8005a6c:	20004310 	.word	0x20004310
 8005a70:	20004314 	.word	0x20004314
 8005a74:	20004320 	.word	0x20004320

08005a78 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 8005a78:	b508      	push	{r3, lr}
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 8005a7a:	2200      	movs	r2, #0
 8005a7c:	490f      	ldr	r1, [pc, #60]	; (8005abc <MX_USB_DEVICE_Init+0x44>)
 8005a7e:	4810      	ldr	r0, [pc, #64]	; (8005ac0 <MX_USB_DEVICE_Init+0x48>)
 8005a80:	f7fd ffeb 	bl	8003a5a <USBD_Init>
 8005a84:	b970      	cbnz	r0, 8005aa4 <MX_USB_DEVICE_Init+0x2c>
  {
    Error_Handler();
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 8005a86:	490f      	ldr	r1, [pc, #60]	; (8005ac4 <MX_USB_DEVICE_Init+0x4c>)
 8005a88:	480d      	ldr	r0, [pc, #52]	; (8005ac0 <MX_USB_DEVICE_Init+0x48>)
 8005a8a:	f7fd fffd 	bl	8003a88 <USBD_RegisterClass>
 8005a8e:	b960      	cbnz	r0, 8005aaa <MX_USB_DEVICE_Init+0x32>
  {
    Error_Handler();
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 8005a90:	490d      	ldr	r1, [pc, #52]	; (8005ac8 <MX_USB_DEVICE_Init+0x50>)
 8005a92:	480b      	ldr	r0, [pc, #44]	; (8005ac0 <MX_USB_DEVICE_Init+0x48>)
 8005a94:	f7fd ff93 	bl	80039be <USBD_CDC_RegisterInterface>
 8005a98:	b950      	cbnz	r0, 8005ab0 <MX_USB_DEVICE_Init+0x38>
  {
    Error_Handler();
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 8005a9a:	4809      	ldr	r0, [pc, #36]	; (8005ac0 <MX_USB_DEVICE_Init+0x48>)
 8005a9c:	f7fe f80b 	bl	8003ab6 <USBD_Start>
 8005aa0:	b948      	cbnz	r0, 8005ab6 <MX_USB_DEVICE_Init+0x3e>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 8005aa2:	bd08      	pop	{r3, pc}
    Error_Handler();
 8005aa4:	f7fa ffa4 	bl	80009f0 <Error_Handler>
 8005aa8:	e7ed      	b.n	8005a86 <MX_USB_DEVICE_Init+0xe>
    Error_Handler();
 8005aaa:	f7fa ffa1 	bl	80009f0 <Error_Handler>
 8005aae:	e7ef      	b.n	8005a90 <MX_USB_DEVICE_Init+0x18>
    Error_Handler();
 8005ab0:	f7fa ff9e 	bl	80009f0 <Error_Handler>
 8005ab4:	e7f1      	b.n	8005a9a <MX_USB_DEVICE_Init+0x22>
    Error_Handler();
 8005ab6:	f7fa ff9b 	bl	80009f0 <Error_Handler>
}
 8005aba:	e7f2      	b.n	8005aa2 <MX_USB_DEVICE_Init+0x2a>
 8005abc:	200002a8 	.word	0x200002a8
 8005ac0:	20004890 	.word	0x20004890
 8005ac4:	20000180 	.word	0x20000180
 8005ac8:	20000294 	.word	0x20000294

08005acc <CDC_DeInit_FS>:
static int8_t CDC_DeInit_FS(void)
{
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
  /* USER CODE END 4 */
}
 8005acc:	2000      	movs	r0, #0
 8005ace:	4770      	bx	lr

08005ad0 <CDC_Control_FS>:
    break;
  }

  return (USBD_OK);
  /* USER CODE END 5 */
}
 8005ad0:	2000      	movs	r0, #0
 8005ad2:	4770      	bx	lr

08005ad4 <CDC_TransmitCplt_FS>:
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
}
 8005ad4:	2000      	movs	r0, #0
 8005ad6:	4770      	bx	lr

08005ad8 <CDC_Receive_FS>:
{
 8005ad8:	b510      	push	{r4, lr}
 8005ada:	4601      	mov	r1, r0
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 8005adc:	4c04      	ldr	r4, [pc, #16]	; (8005af0 <CDC_Receive_FS+0x18>)
 8005ade:	4620      	mov	r0, r4
 8005ae0:	f7fd ff7f 	bl	80039e2 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 8005ae4:	4620      	mov	r0, r4
 8005ae6:	f7fd ff9f 	bl	8003a28 <USBD_CDC_ReceivePacket>
}
 8005aea:	2000      	movs	r0, #0
 8005aec:	bd10      	pop	{r4, pc}
 8005aee:	bf00      	nop
 8005af0:	20004890 	.word	0x20004890

08005af4 <CDC_Init_FS>:
{
 8005af4:	b510      	push	{r4, lr}
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 8005af6:	4c06      	ldr	r4, [pc, #24]	; (8005b10 <CDC_Init_FS+0x1c>)
 8005af8:	2200      	movs	r2, #0
 8005afa:	4906      	ldr	r1, [pc, #24]	; (8005b14 <CDC_Init_FS+0x20>)
 8005afc:	4620      	mov	r0, r4
 8005afe:	f7fd ff65 	bl	80039cc <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 8005b02:	4905      	ldr	r1, [pc, #20]	; (8005b18 <CDC_Init_FS+0x24>)
 8005b04:	4620      	mov	r0, r4
 8005b06:	f7fd ff6c 	bl	80039e2 <USBD_CDC_SetRxBuffer>
}
 8005b0a:	2000      	movs	r0, #0
 8005b0c:	bd10      	pop	{r4, pc}
 8005b0e:	bf00      	nop
 8005b10:	20004890 	.word	0x20004890
 8005b14:	20005360 	.word	0x20005360
 8005b18:	20004b60 	.word	0x20004b60

08005b1c <CDC_Transmit_FS>:
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 8005b1c:	4b09      	ldr	r3, [pc, #36]	; (8005b44 <CDC_Transmit_FS+0x28>)
 8005b1e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
  if (hcdc->TxState != 0){
 8005b22:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8005b26:	b10b      	cbz	r3, 8005b2c <CDC_Transmit_FS+0x10>
    return USBD_BUSY;
 8005b28:	2001      	movs	r0, #1
}
 8005b2a:	4770      	bx	lr
{
 8005b2c:	b510      	push	{r4, lr}
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 8005b2e:	4c05      	ldr	r4, [pc, #20]	; (8005b44 <CDC_Transmit_FS+0x28>)
 8005b30:	460a      	mov	r2, r1
 8005b32:	4601      	mov	r1, r0
 8005b34:	4620      	mov	r0, r4
 8005b36:	f7fd ff49 	bl	80039cc <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 8005b3a:	4620      	mov	r0, r4
 8005b3c:	f7fd ff5a 	bl	80039f4 <USBD_CDC_TransmitPacket>
}
 8005b40:	bd10      	pop	{r4, pc}
 8005b42:	bf00      	nop
 8005b44:	20004890 	.word	0x20004890

08005b48 <USBD_FS_DeviceDescriptor>:
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 8005b48:	2312      	movs	r3, #18
 8005b4a:	800b      	strh	r3, [r1, #0]
  return USBD_FS_DeviceDesc;
}
 8005b4c:	4800      	ldr	r0, [pc, #0]	; (8005b50 <USBD_FS_DeviceDescriptor+0x8>)
 8005b4e:	4770      	bx	lr
 8005b50:	200002c4 	.word	0x200002c4

08005b54 <USBD_FS_LangIDStrDescriptor>:
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8005b54:	2304      	movs	r3, #4
 8005b56:	800b      	strh	r3, [r1, #0]
  return USBD_LangIDDesc;
}
 8005b58:	4800      	ldr	r0, [pc, #0]	; (8005b5c <USBD_FS_LangIDStrDescriptor+0x8>)
 8005b5a:	4770      	bx	lr
 8005b5c:	200002d8 	.word	0x200002d8

08005b60 <IntToUnicode>:
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
  uint8_t idx = 0;

  for (idx = 0; idx < len; idx++)
 8005b60:	2300      	movs	r3, #0
 8005b62:	4293      	cmp	r3, r2
 8005b64:	d217      	bcs.n	8005b96 <IntToUnicode+0x36>
{
 8005b66:	b430      	push	{r4, r5}
 8005b68:	e00b      	b.n	8005b82 <IntToUnicode+0x22>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8005b6a:	3437      	adds	r4, #55	; 0x37
 8005b6c:	f801 4013 	strb.w	r4, [r1, r3, lsl #1]
    }

    value = value << 4;
 8005b70:	0100      	lsls	r0, r0, #4

    pbuf[2 * idx + 1] = 0;
 8005b72:	005c      	lsls	r4, r3, #1
 8005b74:	3401      	adds	r4, #1
 8005b76:	2500      	movs	r5, #0
 8005b78:	550d      	strb	r5, [r1, r4]
  for (idx = 0; idx < len; idx++)
 8005b7a:	3301      	adds	r3, #1
 8005b7c:	b2db      	uxtb	r3, r3
 8005b7e:	4293      	cmp	r3, r2
 8005b80:	d207      	bcs.n	8005b92 <IntToUnicode+0x32>
    if (((value >> 28)) < 0xA)
 8005b82:	0f04      	lsrs	r4, r0, #28
 8005b84:	f1b0 4f20 	cmp.w	r0, #2684354560	; 0xa0000000
 8005b88:	d2ef      	bcs.n	8005b6a <IntToUnicode+0xa>
      pbuf[2 * idx] = (value >> 28) + '0';
 8005b8a:	3430      	adds	r4, #48	; 0x30
 8005b8c:	f801 4013 	strb.w	r4, [r1, r3, lsl #1]
 8005b90:	e7ee      	b.n	8005b70 <IntToUnicode+0x10>
  }
}
 8005b92:	bc30      	pop	{r4, r5}
 8005b94:	4770      	bx	lr
 8005b96:	4770      	bx	lr

08005b98 <Get_SerialNum>:
{
 8005b98:	b538      	push	{r3, r4, r5, lr}
  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 8005b9a:	4b0a      	ldr	r3, [pc, #40]	; (8005bc4 <Get_SerialNum+0x2c>)
 8005b9c:	6818      	ldr	r0, [r3, #0]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8005b9e:	3304      	adds	r3, #4
 8005ba0:	681c      	ldr	r4, [r3, #0]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 8005ba2:	3304      	adds	r3, #4
 8005ba4:	681b      	ldr	r3, [r3, #0]
  if (deviceserial0 != 0)
 8005ba6:	18c0      	adds	r0, r0, r3
 8005ba8:	d100      	bne.n	8005bac <Get_SerialNum+0x14>
}
 8005baa:	bd38      	pop	{r3, r4, r5, pc}
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 8005bac:	4d06      	ldr	r5, [pc, #24]	; (8005bc8 <Get_SerialNum+0x30>)
 8005bae:	2208      	movs	r2, #8
 8005bb0:	1ca9      	adds	r1, r5, #2
 8005bb2:	f7ff ffd5 	bl	8005b60 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8005bb6:	2204      	movs	r2, #4
 8005bb8:	f105 0112 	add.w	r1, r5, #18
 8005bbc:	4620      	mov	r0, r4
 8005bbe:	f7ff ffcf 	bl	8005b60 <IntToUnicode>
}
 8005bc2:	e7f2      	b.n	8005baa <Get_SerialNum+0x12>
 8005bc4:	1fff7a10 	.word	0x1fff7a10
 8005bc8:	200002dc 	.word	0x200002dc

08005bcc <USBD_FS_SerialStrDescriptor>:
{
 8005bcc:	b508      	push	{r3, lr}
  *length = USB_SIZ_STRING_SERIAL;
 8005bce:	231a      	movs	r3, #26
 8005bd0:	800b      	strh	r3, [r1, #0]
  Get_SerialNum();
 8005bd2:	f7ff ffe1 	bl	8005b98 <Get_SerialNum>
}
 8005bd6:	4801      	ldr	r0, [pc, #4]	; (8005bdc <USBD_FS_SerialStrDescriptor+0x10>)
 8005bd8:	bd08      	pop	{r3, pc}
 8005bda:	bf00      	nop
 8005bdc:	200002dc 	.word	0x200002dc

08005be0 <USBD_FS_ProductStrDescriptor>:
{
 8005be0:	b508      	push	{r3, lr}
 8005be2:	460a      	mov	r2, r1
  if(speed == 0)
 8005be4:	b928      	cbnz	r0, 8005bf2 <USBD_FS_ProductStrDescriptor+0x12>
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8005be6:	4905      	ldr	r1, [pc, #20]	; (8005bfc <USBD_FS_ProductStrDescriptor+0x1c>)
 8005be8:	4805      	ldr	r0, [pc, #20]	; (8005c00 <USBD_FS_ProductStrDescriptor+0x20>)
 8005bea:	f7fe fc04 	bl	80043f6 <USBD_GetString>
}
 8005bee:	4803      	ldr	r0, [pc, #12]	; (8005bfc <USBD_FS_ProductStrDescriptor+0x1c>)
 8005bf0:	bd08      	pop	{r3, pc}
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8005bf2:	4902      	ldr	r1, [pc, #8]	; (8005bfc <USBD_FS_ProductStrDescriptor+0x1c>)
 8005bf4:	4802      	ldr	r0, [pc, #8]	; (8005c00 <USBD_FS_ProductStrDescriptor+0x20>)
 8005bf6:	f7fe fbfe 	bl	80043f6 <USBD_GetString>
 8005bfa:	e7f8      	b.n	8005bee <USBD_FS_ProductStrDescriptor+0xe>
 8005bfc:	20005b60 	.word	0x20005b60
 8005c00:	080068f0 	.word	0x080068f0

08005c04 <USBD_FS_ManufacturerStrDescriptor>:
{
 8005c04:	b510      	push	{r4, lr}
 8005c06:	460a      	mov	r2, r1
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8005c08:	4c03      	ldr	r4, [pc, #12]	; (8005c18 <USBD_FS_ManufacturerStrDescriptor+0x14>)
 8005c0a:	4621      	mov	r1, r4
 8005c0c:	4803      	ldr	r0, [pc, #12]	; (8005c1c <USBD_FS_ManufacturerStrDescriptor+0x18>)
 8005c0e:	f7fe fbf2 	bl	80043f6 <USBD_GetString>
}
 8005c12:	4620      	mov	r0, r4
 8005c14:	bd10      	pop	{r4, pc}
 8005c16:	bf00      	nop
 8005c18:	20005b60 	.word	0x20005b60
 8005c1c:	08006908 	.word	0x08006908

08005c20 <USBD_FS_ConfigStrDescriptor>:
{
 8005c20:	b508      	push	{r3, lr}
 8005c22:	460a      	mov	r2, r1
  if(speed == USBD_SPEED_HIGH)
 8005c24:	b928      	cbnz	r0, 8005c32 <USBD_FS_ConfigStrDescriptor+0x12>
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8005c26:	4905      	ldr	r1, [pc, #20]	; (8005c3c <USBD_FS_ConfigStrDescriptor+0x1c>)
 8005c28:	4805      	ldr	r0, [pc, #20]	; (8005c40 <USBD_FS_ConfigStrDescriptor+0x20>)
 8005c2a:	f7fe fbe4 	bl	80043f6 <USBD_GetString>
}
 8005c2e:	4803      	ldr	r0, [pc, #12]	; (8005c3c <USBD_FS_ConfigStrDescriptor+0x1c>)
 8005c30:	bd08      	pop	{r3, pc}
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8005c32:	4902      	ldr	r1, [pc, #8]	; (8005c3c <USBD_FS_ConfigStrDescriptor+0x1c>)
 8005c34:	4802      	ldr	r0, [pc, #8]	; (8005c40 <USBD_FS_ConfigStrDescriptor+0x20>)
 8005c36:	f7fe fbde 	bl	80043f6 <USBD_GetString>
 8005c3a:	e7f8      	b.n	8005c2e <USBD_FS_ConfigStrDescriptor+0xe>
 8005c3c:	20005b60 	.word	0x20005b60
 8005c40:	0800691c 	.word	0x0800691c

08005c44 <USBD_FS_InterfaceStrDescriptor>:
{
 8005c44:	b508      	push	{r3, lr}
 8005c46:	460a      	mov	r2, r1
  if(speed == 0)
 8005c48:	b928      	cbnz	r0, 8005c56 <USBD_FS_InterfaceStrDescriptor+0x12>
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8005c4a:	4905      	ldr	r1, [pc, #20]	; (8005c60 <USBD_FS_InterfaceStrDescriptor+0x1c>)
 8005c4c:	4805      	ldr	r0, [pc, #20]	; (8005c64 <USBD_FS_InterfaceStrDescriptor+0x20>)
 8005c4e:	f7fe fbd2 	bl	80043f6 <USBD_GetString>
}
 8005c52:	4803      	ldr	r0, [pc, #12]	; (8005c60 <USBD_FS_InterfaceStrDescriptor+0x1c>)
 8005c54:	bd08      	pop	{r3, pc}
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8005c56:	4902      	ldr	r1, [pc, #8]	; (8005c60 <USBD_FS_InterfaceStrDescriptor+0x1c>)
 8005c58:	4802      	ldr	r0, [pc, #8]	; (8005c64 <USBD_FS_InterfaceStrDescriptor+0x20>)
 8005c5a:	f7fe fbcc 	bl	80043f6 <USBD_GetString>
 8005c5e:	e7f8      	b.n	8005c52 <USBD_FS_InterfaceStrDescriptor+0xe>
 8005c60:	20005b60 	.word	0x20005b60
 8005c64:	08006928 	.word	0x08006928

08005c68 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8005c68:	b530      	push	{r4, r5, lr}
 8005c6a:	b089      	sub	sp, #36	; 0x24
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005c6c:	2300      	movs	r3, #0
 8005c6e:	9303      	str	r3, [sp, #12]
 8005c70:	9304      	str	r3, [sp, #16]
 8005c72:	9305      	str	r3, [sp, #20]
 8005c74:	9306      	str	r3, [sp, #24]
 8005c76:	9307      	str	r3, [sp, #28]
  if(pcdHandle->Instance==USB_OTG_FS)
 8005c78:	6803      	ldr	r3, [r0, #0]
 8005c7a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8005c7e:	d001      	beq.n	8005c84 <HAL_PCD_MspInit+0x1c>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 8005c80:	b009      	add	sp, #36	; 0x24
 8005c82:	bd30      	pop	{r4, r5, pc}
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8005c84:	2500      	movs	r5, #0
 8005c86:	9501      	str	r5, [sp, #4]
 8005c88:	4c17      	ldr	r4, [pc, #92]	; (8005ce8 <HAL_PCD_MspInit+0x80>)
 8005c8a:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8005c8c:	f043 0301 	orr.w	r3, r3, #1
 8005c90:	6323      	str	r3, [r4, #48]	; 0x30
 8005c92:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8005c94:	f003 0301 	and.w	r3, r3, #1
 8005c98:	9301      	str	r3, [sp, #4]
 8005c9a:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8005c9c:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8005ca0:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005ca2:	2302      	movs	r3, #2
 8005ca4:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005ca6:	9505      	str	r5, [sp, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005ca8:	2303      	movs	r3, #3
 8005caa:	9306      	str	r3, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8005cac:	230a      	movs	r3, #10
 8005cae:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005cb0:	a903      	add	r1, sp, #12
 8005cb2:	480e      	ldr	r0, [pc, #56]	; (8005cec <HAL_PCD_MspInit+0x84>)
 8005cb4:	f7fb fa48 	bl	8001148 <HAL_GPIO_Init>
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8005cb8:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8005cba:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005cbe:	6363      	str	r3, [r4, #52]	; 0x34
 8005cc0:	9502      	str	r5, [sp, #8]
 8005cc2:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8005cc4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8005cc8:	6463      	str	r3, [r4, #68]	; 0x44
 8005cca:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8005ccc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005cd0:	9302      	str	r3, [sp, #8]
 8005cd2:	9b02      	ldr	r3, [sp, #8]
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 5, 0);
 8005cd4:	462a      	mov	r2, r5
 8005cd6:	2105      	movs	r1, #5
 8005cd8:	2043      	movs	r0, #67	; 0x43
 8005cda:	f7fb f995 	bl	8001008 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 8005cde:	2043      	movs	r0, #67	; 0x43
 8005ce0:	f7fb f9c6 	bl	8001070 <HAL_NVIC_EnableIRQ>
}
 8005ce4:	e7cc      	b.n	8005c80 <HAL_PCD_MspInit+0x18>
 8005ce6:	bf00      	nop
 8005ce8:	40023800 	.word	0x40023800
 8005cec:	40020000 	.word	0x40020000

08005cf0 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8005cf0:	b508      	push	{r3, lr}
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8005cf2:	f500 7171 	add.w	r1, r0, #964	; 0x3c4
 8005cf6:	f8d0 0404 	ldr.w	r0, [r0, #1028]	; 0x404
 8005cfa:	f7fd fef1 	bl	8003ae0 <USBD_LL_SetupStage>
}
 8005cfe:	bd08      	pop	{r3, pc}

08005d00 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8005d00:	b508      	push	{r3, lr}
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8005d02:	ebc1 03c1 	rsb	r3, r1, r1, lsl #3
 8005d06:	eb00 0383 	add.w	r3, r0, r3, lsl #2
 8005d0a:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
 8005d0e:	f8d0 0404 	ldr.w	r0, [r0, #1028]	; 0x404
 8005d12:	f7fd ff11 	bl	8003b38 <USBD_LL_DataOutStage>
}
 8005d16:	bd08      	pop	{r3, pc}

08005d18 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8005d18:	b508      	push	{r3, lr}
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 8005d1a:	ebc1 03c1 	rsb	r3, r1, r1, lsl #3
 8005d1e:	eb00 0383 	add.w	r3, r0, r3, lsl #2
 8005d22:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8005d24:	f8d0 0404 	ldr.w	r0, [r0, #1028]	; 0x404
 8005d28:	f7fd ff42 	bl	8003bb0 <USBD_LL_DataInStage>
}
 8005d2c:	bd08      	pop	{r3, pc}

08005d2e <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8005d2e:	b508      	push	{r3, lr}
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 8005d30:	f8d0 0404 	ldr.w	r0, [r0, #1028]	; 0x404
 8005d34:	f7fd ffe2 	bl	8003cfc <USBD_LL_SOF>
}
 8005d38:	bd08      	pop	{r3, pc}

08005d3a <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8005d3a:	b510      	push	{r4, lr}
 8005d3c:	4604      	mov	r4, r0
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 8005d3e:	68c3      	ldr	r3, [r0, #12]
 8005d40:	b13b      	cbz	r3, 8005d52 <HAL_PCD_ResetCallback+0x18>
  {
    speed = USBD_SPEED_HIGH;
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 8005d42:	2b02      	cmp	r3, #2
 8005d44:	d101      	bne.n	8005d4a <HAL_PCD_ResetCallback+0x10>
  {
    speed = USBD_SPEED_FULL;
 8005d46:	2101      	movs	r1, #1
 8005d48:	e004      	b.n	8005d54 <HAL_PCD_ResetCallback+0x1a>
  }
  else
  {
    Error_Handler();
 8005d4a:	f7fa fe51 	bl	80009f0 <Error_Handler>
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 8005d4e:	2101      	movs	r1, #1
 8005d50:	e000      	b.n	8005d54 <HAL_PCD_ResetCallback+0x1a>
    speed = USBD_SPEED_HIGH;
 8005d52:	2100      	movs	r1, #0
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 8005d54:	f8d4 0404 	ldr.w	r0, [r4, #1028]	; 0x404
 8005d58:	f7fd ffb6 	bl	8003cc8 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8005d5c:	f8d4 0404 	ldr.w	r0, [r4, #1028]	; 0x404
 8005d60:	f7fd ff85 	bl	8003c6e <USBD_LL_Reset>
}
 8005d64:	bd10      	pop	{r4, pc}
	...

08005d68 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8005d68:	b510      	push	{r4, lr}
 8005d6a:	4604      	mov	r4, r0
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8005d6c:	f8d0 0404 	ldr.w	r0, [r0, #1028]	; 0x404
 8005d70:	f7fd ffad 	bl	8003cce <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 8005d74:	6822      	ldr	r2, [r4, #0]
 8005d76:	f8d2 3e00 	ldr.w	r3, [r2, #3584]	; 0xe00
 8005d7a:	f043 0301 	orr.w	r3, r3, #1
 8005d7e:	f8c2 3e00 	str.w	r3, [r2, #3584]	; 0xe00
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8005d82:	6a23      	ldr	r3, [r4, #32]
 8005d84:	b123      	cbz	r3, 8005d90 <HAL_PCD_SuspendCallback+0x28>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8005d86:	4a03      	ldr	r2, [pc, #12]	; (8005d94 <HAL_PCD_SuspendCallback+0x2c>)
 8005d88:	6913      	ldr	r3, [r2, #16]
 8005d8a:	f043 0306 	orr.w	r3, r3, #6
 8005d8e:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 8005d90:	bd10      	pop	{r4, pc}
 8005d92:	bf00      	nop
 8005d94:	e000ed00 	.word	0xe000ed00

08005d98 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8005d98:	b508      	push	{r3, lr}
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8005d9a:	f8d0 0404 	ldr.w	r0, [r0, #1028]	; 0x404
 8005d9e:	f7fd ffa0 	bl	8003ce2 <USBD_LL_Resume>
}
 8005da2:	bd08      	pop	{r3, pc}

08005da4 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8005da4:	b508      	push	{r3, lr}
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8005da6:	f8d0 0404 	ldr.w	r0, [r0, #1028]	; 0x404
 8005daa:	f7fd ffcf 	bl	8003d4c <USBD_LL_IsoOUTIncomplete>
}
 8005dae:	bd08      	pop	{r3, pc}

08005db0 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8005db0:	b508      	push	{r3, lr}
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8005db2:	f8d0 0404 	ldr.w	r0, [r0, #1028]	; 0x404
 8005db6:	f7fd ffb5 	bl	8003d24 <USBD_LL_IsoINIncomplete>
}
 8005dba:	bd08      	pop	{r3, pc}

08005dbc <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8005dbc:	b508      	push	{r3, lr}
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 8005dbe:	f8d0 0404 	ldr.w	r0, [r0, #1028]	; 0x404
 8005dc2:	f7fd ffd7 	bl	8003d74 <USBD_LL_DevConnected>
}
 8005dc6:	bd08      	pop	{r3, pc}

08005dc8 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8005dc8:	b508      	push	{r3, lr}
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 8005dca:	f8d0 0404 	ldr.w	r0, [r0, #1028]	; 0x404
 8005dce:	f7fd ffd3 	bl	8003d78 <USBD_LL_DevDisconnected>
}
 8005dd2:	bd08      	pop	{r3, pc}

08005dd4 <USBD_LL_Init>:
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 8005dd4:	7802      	ldrb	r2, [r0, #0]
 8005dd6:	b10a      	cbz	r2, 8005ddc <USBD_LL_Init+0x8>
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
  }
  return USBD_OK;
}
 8005dd8:	2000      	movs	r0, #0
 8005dda:	4770      	bx	lr
{
 8005ddc:	b510      	push	{r4, lr}
 8005dde:	4603      	mov	r3, r0
  hpcd_USB_OTG_FS.pData = pdev;
 8005de0:	4815      	ldr	r0, [pc, #84]	; (8005e38 <USBD_LL_Init+0x64>)
 8005de2:	f8c0 3404 	str.w	r3, [r0, #1028]	; 0x404
  pdev->pData = &hpcd_USB_OTG_FS;
 8005de6:	f8c3 02c4 	str.w	r0, [r3, #708]	; 0x2c4
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8005dea:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8005dee:	6003      	str	r3, [r0, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 8005df0:	2304      	movs	r3, #4
 8005df2:	6043      	str	r3, [r0, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8005df4:	2202      	movs	r2, #2
 8005df6:	60c2      	str	r2, [r0, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8005df8:	2300      	movs	r3, #0
 8005dfa:	6103      	str	r3, [r0, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8005dfc:	6182      	str	r2, [r0, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8005dfe:	61c3      	str	r3, [r0, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8005e00:	6203      	str	r3, [r0, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8005e02:	6243      	str	r3, [r0, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 8005e04:	62c3      	str	r3, [r0, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8005e06:	6303      	str	r3, [r0, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8005e08:	f7fb fde4 	bl	80019d4 <HAL_PCD_Init>
 8005e0c:	b980      	cbnz	r0, 8005e30 <USBD_LL_Init+0x5c>
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 8005e0e:	4c0a      	ldr	r4, [pc, #40]	; (8005e38 <USBD_LL_Init+0x64>)
 8005e10:	2180      	movs	r1, #128	; 0x80
 8005e12:	4620      	mov	r0, r4
 8005e14:	f7fc fb22 	bl	800245c <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 8005e18:	2240      	movs	r2, #64	; 0x40
 8005e1a:	2100      	movs	r1, #0
 8005e1c:	4620      	mov	r0, r4
 8005e1e:	f7fc faf9 	bl	8002414 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 8005e22:	2280      	movs	r2, #128	; 0x80
 8005e24:	2101      	movs	r1, #1
 8005e26:	4620      	mov	r0, r4
 8005e28:	f7fc faf4 	bl	8002414 <HAL_PCDEx_SetTxFiFo>
}
 8005e2c:	2000      	movs	r0, #0
 8005e2e:	bd10      	pop	{r4, pc}
    Error_Handler( );
 8005e30:	f7fa fdde 	bl	80009f0 <Error_Handler>
 8005e34:	e7eb      	b.n	8005e0e <USBD_LL_Init+0x3a>
 8005e36:	bf00      	nop
 8005e38:	20005d60 	.word	0x20005d60

08005e3c <USBD_LL_IsStallEP>:
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8005e3c:	f8d0 32c4 	ldr.w	r3, [r0, #708]	; 0x2c4

  if((ep_addr & 0x80) == 0x80)
 8005e40:	f011 0f80 	tst.w	r1, #128	; 0x80
 8005e44:	d108      	bne.n	8005e58 <USBD_LL_IsStallEP+0x1c>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 8005e46:	f001 017f 	and.w	r1, r1, #127	; 0x7f
 8005e4a:	ebc1 01c1 	rsb	r1, r1, r1, lsl #3
 8005e4e:	eb03 0181 	add.w	r1, r3, r1, lsl #2
 8005e52:	f891 01fe 	ldrb.w	r0, [r1, #510]	; 0x1fe
  }
}
 8005e56:	4770      	bx	lr
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 8005e58:	f001 017f 	and.w	r1, r1, #127	; 0x7f
 8005e5c:	ebc1 01c1 	rsb	r1, r1, r1, lsl #3
 8005e60:	eb03 0181 	add.w	r1, r3, r1, lsl #2
 8005e64:	f891 003e 	ldrb.w	r0, [r1, #62]	; 0x3e
 8005e68:	4770      	bx	lr

08005e6a <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8005e6a:	b508      	push	{r3, lr}
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 8005e6c:	f8d0 02c4 	ldr.w	r0, [r0, #708]	; 0x2c4
 8005e70:	f7fc fa1d 	bl	80022ae <HAL_PCD_EP_GetRxCount>
}
 8005e74:	bd08      	pop	{r3, pc}
	...

08005e78 <USBD_static_malloc>:
  */
void *USBD_static_malloc(uint32_t size)
{
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
}
 8005e78:	4800      	ldr	r0, [pc, #0]	; (8005e7c <USBD_static_malloc+0x4>)
 8005e7a:	4770      	bx	lr
 8005e7c:	2000432c 	.word	0x2000432c

08005e80 <USBD_static_free>:
  * @retval None
  */
void USBD_static_free(void *p)
{

}
 8005e80:	4770      	bx	lr

08005e82 <USBD_Get_USB_Status>:
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
  USBD_StatusTypeDef usb_status = USBD_OK;

  switch (hal_status)
 8005e82:	2803      	cmp	r0, #3
 8005e84:	d805      	bhi.n	8005e92 <USBD_Get_USB_Status+0x10>
 8005e86:	e8df f000 	tbb	[pc, r0]
 8005e8a:	0405      	.short	0x0405
 8005e8c:	0502      	.short	0x0502
    break;
    case HAL_ERROR :
      usb_status = USBD_FAIL;
    break;
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8005e8e:	2001      	movs	r0, #1
    break;
 8005e90:	4770      	bx	lr
      usb_status = USBD_FAIL;
 8005e92:	2003      	movs	r0, #3
    default :
      usb_status = USBD_FAIL;
    break;
  }
  return usb_status;
}
 8005e94:	4770      	bx	lr

08005e96 <USBD_LL_Start>:
{
 8005e96:	b508      	push	{r3, lr}
  hal_status = HAL_PCD_Start(pdev->pData);
 8005e98:	f8d0 02c4 	ldr.w	r0, [r0, #708]	; 0x2c4
 8005e9c:	f7fb fe2d 	bl	8001afa <HAL_PCD_Start>
  usb_status =  USBD_Get_USB_Status(hal_status);
 8005ea0:	f7ff ffef 	bl	8005e82 <USBD_Get_USB_Status>
}
 8005ea4:	bd08      	pop	{r3, pc}

08005ea6 <USBD_LL_OpenEP>:
{
 8005ea6:	b510      	push	{r4, lr}
 8005ea8:	4614      	mov	r4, r2
 8005eaa:	461a      	mov	r2, r3
  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8005eac:	4623      	mov	r3, r4
 8005eae:	f8d0 02c4 	ldr.w	r0, [r0, #708]	; 0x2c4
 8005eb2:	f7fc f951 	bl	8002158 <HAL_PCD_EP_Open>
  usb_status =  USBD_Get_USB_Status(hal_status);
 8005eb6:	f7ff ffe4 	bl	8005e82 <USBD_Get_USB_Status>
}
 8005eba:	bd10      	pop	{r4, pc}

08005ebc <USBD_LL_CloseEP>:
{
 8005ebc:	b508      	push	{r3, lr}
  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 8005ebe:	f8d0 02c4 	ldr.w	r0, [r0, #708]	; 0x2c4
 8005ec2:	f7fc f98c 	bl	80021de <HAL_PCD_EP_Close>
  usb_status =  USBD_Get_USB_Status(hal_status);
 8005ec6:	f7ff ffdc 	bl	8005e82 <USBD_Get_USB_Status>
}
 8005eca:	bd08      	pop	{r3, pc}

08005ecc <USBD_LL_StallEP>:
{
 8005ecc:	b508      	push	{r3, lr}
  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8005ece:	f8d0 02c4 	ldr.w	r0, [r0, #708]	; 0x2c4
 8005ed2:	f7fc fa20 	bl	8002316 <HAL_PCD_EP_SetStall>
  usb_status =  USBD_Get_USB_Status(hal_status);
 8005ed6:	f7ff ffd4 	bl	8005e82 <USBD_Get_USB_Status>
}
 8005eda:	bd08      	pop	{r3, pc}

08005edc <USBD_LL_ClearStallEP>:
{
 8005edc:	b508      	push	{r3, lr}
  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 8005ede:	f8d0 02c4 	ldr.w	r0, [r0, #708]	; 0x2c4
 8005ee2:	f7fc fa5c 	bl	800239e <HAL_PCD_EP_ClrStall>
  usb_status =  USBD_Get_USB_Status(hal_status);
 8005ee6:	f7ff ffcc 	bl	8005e82 <USBD_Get_USB_Status>
}
 8005eea:	bd08      	pop	{r3, pc}

08005eec <USBD_LL_SetUSBAddress>:
{
 8005eec:	b508      	push	{r3, lr}
  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8005eee:	f8d0 02c4 	ldr.w	r0, [r0, #708]	; 0x2c4
 8005ef2:	f7fc f91d 	bl	8002130 <HAL_PCD_SetAddress>
  usb_status =  USBD_Get_USB_Status(hal_status);
 8005ef6:	f7ff ffc4 	bl	8005e82 <USBD_Get_USB_Status>
}
 8005efa:	bd08      	pop	{r3, pc}

08005efc <USBD_LL_Transmit>:
{
 8005efc:	b508      	push	{r3, lr}
  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8005efe:	f8d0 02c4 	ldr.w	r0, [r0, #708]	; 0x2c4
 8005f02:	f7fc f9dd 	bl	80022c0 <HAL_PCD_EP_Transmit>
  usb_status =  USBD_Get_USB_Status(hal_status);
 8005f06:	f7ff ffbc 	bl	8005e82 <USBD_Get_USB_Status>
}
 8005f0a:	bd08      	pop	{r3, pc}

08005f0c <USBD_LL_PrepareReceive>:
{
 8005f0c:	b508      	push	{r3, lr}
  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8005f0e:	f8d0 02c4 	ldr.w	r0, [r0, #708]	; 0x2c4
 8005f12:	f7fc f99d 	bl	8002250 <HAL_PCD_EP_Receive>
  usb_status =  USBD_Get_USB_Status(hal_status);
 8005f16:	f7ff ffb4 	bl	8005e82 <USBD_Get_USB_Status>
}
 8005f1a:	bd08      	pop	{r3, pc}

08005f1c <__errno>:
 8005f1c:	4b01      	ldr	r3, [pc, #4]	; (8005f24 <__errno+0x8>)
 8005f1e:	6818      	ldr	r0, [r3, #0]
 8005f20:	4770      	bx	lr
 8005f22:	bf00      	nop
 8005f24:	200002f8 	.word	0x200002f8

08005f28 <__libc_init_array>:
 8005f28:	b570      	push	{r4, r5, r6, lr}
 8005f2a:	4d0d      	ldr	r5, [pc, #52]	; (8005f60 <__libc_init_array+0x38>)
 8005f2c:	4c0d      	ldr	r4, [pc, #52]	; (8005f64 <__libc_init_array+0x3c>)
 8005f2e:	1b64      	subs	r4, r4, r5
 8005f30:	10a4      	asrs	r4, r4, #2
 8005f32:	2600      	movs	r6, #0
 8005f34:	42a6      	cmp	r6, r4
 8005f36:	d109      	bne.n	8005f4c <__libc_init_array+0x24>
 8005f38:	4d0b      	ldr	r5, [pc, #44]	; (8005f68 <__libc_init_array+0x40>)
 8005f3a:	4c0c      	ldr	r4, [pc, #48]	; (8005f6c <__libc_init_array+0x44>)
 8005f3c:	f000 fc8a 	bl	8006854 <_init>
 8005f40:	1b64      	subs	r4, r4, r5
 8005f42:	10a4      	asrs	r4, r4, #2
 8005f44:	2600      	movs	r6, #0
 8005f46:	42a6      	cmp	r6, r4
 8005f48:	d105      	bne.n	8005f56 <__libc_init_array+0x2e>
 8005f4a:	bd70      	pop	{r4, r5, r6, pc}
 8005f4c:	f855 3b04 	ldr.w	r3, [r5], #4
 8005f50:	4798      	blx	r3
 8005f52:	3601      	adds	r6, #1
 8005f54:	e7ee      	b.n	8005f34 <__libc_init_array+0xc>
 8005f56:	f855 3b04 	ldr.w	r3, [r5], #4
 8005f5a:	4798      	blx	r3
 8005f5c:	3601      	adds	r6, #1
 8005f5e:	e7f2      	b.n	8005f46 <__libc_init_array+0x1e>
 8005f60:	08006974 	.word	0x08006974
 8005f64:	08006974 	.word	0x08006974
 8005f68:	08006974 	.word	0x08006974
 8005f6c:	08006978 	.word	0x08006978

08005f70 <malloc>:
 8005f70:	4b02      	ldr	r3, [pc, #8]	; (8005f7c <malloc+0xc>)
 8005f72:	4601      	mov	r1, r0
 8005f74:	6818      	ldr	r0, [r3, #0]
 8005f76:	f000 b869 	b.w	800604c <_malloc_r>
 8005f7a:	bf00      	nop
 8005f7c:	200002f8 	.word	0x200002f8

08005f80 <memcpy>:
 8005f80:	440a      	add	r2, r1
 8005f82:	4291      	cmp	r1, r2
 8005f84:	f100 33ff 	add.w	r3, r0, #4294967295
 8005f88:	d100      	bne.n	8005f8c <memcpy+0xc>
 8005f8a:	4770      	bx	lr
 8005f8c:	b510      	push	{r4, lr}
 8005f8e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005f92:	f803 4f01 	strb.w	r4, [r3, #1]!
 8005f96:	4291      	cmp	r1, r2
 8005f98:	d1f9      	bne.n	8005f8e <memcpy+0xe>
 8005f9a:	bd10      	pop	{r4, pc}

08005f9c <memset>:
 8005f9c:	4402      	add	r2, r0
 8005f9e:	4603      	mov	r3, r0
 8005fa0:	4293      	cmp	r3, r2
 8005fa2:	d100      	bne.n	8005fa6 <memset+0xa>
 8005fa4:	4770      	bx	lr
 8005fa6:	f803 1b01 	strb.w	r1, [r3], #1
 8005faa:	e7f9      	b.n	8005fa0 <memset+0x4>

08005fac <_free_r>:
 8005fac:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8005fae:	2900      	cmp	r1, #0
 8005fb0:	d048      	beq.n	8006044 <_free_r+0x98>
 8005fb2:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005fb6:	9001      	str	r0, [sp, #4]
 8005fb8:	2b00      	cmp	r3, #0
 8005fba:	f1a1 0404 	sub.w	r4, r1, #4
 8005fbe:	bfb8      	it	lt
 8005fc0:	18e4      	addlt	r4, r4, r3
 8005fc2:	f000 f901 	bl	80061c8 <__malloc_lock>
 8005fc6:	4a20      	ldr	r2, [pc, #128]	; (8006048 <_free_r+0x9c>)
 8005fc8:	9801      	ldr	r0, [sp, #4]
 8005fca:	6813      	ldr	r3, [r2, #0]
 8005fcc:	4615      	mov	r5, r2
 8005fce:	b933      	cbnz	r3, 8005fde <_free_r+0x32>
 8005fd0:	6063      	str	r3, [r4, #4]
 8005fd2:	6014      	str	r4, [r2, #0]
 8005fd4:	b003      	add	sp, #12
 8005fd6:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8005fda:	f000 b8fb 	b.w	80061d4 <__malloc_unlock>
 8005fde:	42a3      	cmp	r3, r4
 8005fe0:	d90b      	bls.n	8005ffa <_free_r+0x4e>
 8005fe2:	6821      	ldr	r1, [r4, #0]
 8005fe4:	1862      	adds	r2, r4, r1
 8005fe6:	4293      	cmp	r3, r2
 8005fe8:	bf04      	itt	eq
 8005fea:	681a      	ldreq	r2, [r3, #0]
 8005fec:	685b      	ldreq	r3, [r3, #4]
 8005fee:	6063      	str	r3, [r4, #4]
 8005ff0:	bf04      	itt	eq
 8005ff2:	1852      	addeq	r2, r2, r1
 8005ff4:	6022      	streq	r2, [r4, #0]
 8005ff6:	602c      	str	r4, [r5, #0]
 8005ff8:	e7ec      	b.n	8005fd4 <_free_r+0x28>
 8005ffa:	461a      	mov	r2, r3
 8005ffc:	685b      	ldr	r3, [r3, #4]
 8005ffe:	b10b      	cbz	r3, 8006004 <_free_r+0x58>
 8006000:	42a3      	cmp	r3, r4
 8006002:	d9fa      	bls.n	8005ffa <_free_r+0x4e>
 8006004:	6811      	ldr	r1, [r2, #0]
 8006006:	1855      	adds	r5, r2, r1
 8006008:	42a5      	cmp	r5, r4
 800600a:	d10b      	bne.n	8006024 <_free_r+0x78>
 800600c:	6824      	ldr	r4, [r4, #0]
 800600e:	4421      	add	r1, r4
 8006010:	1854      	adds	r4, r2, r1
 8006012:	42a3      	cmp	r3, r4
 8006014:	6011      	str	r1, [r2, #0]
 8006016:	d1dd      	bne.n	8005fd4 <_free_r+0x28>
 8006018:	681c      	ldr	r4, [r3, #0]
 800601a:	685b      	ldr	r3, [r3, #4]
 800601c:	6053      	str	r3, [r2, #4]
 800601e:	4421      	add	r1, r4
 8006020:	6011      	str	r1, [r2, #0]
 8006022:	e7d7      	b.n	8005fd4 <_free_r+0x28>
 8006024:	d902      	bls.n	800602c <_free_r+0x80>
 8006026:	230c      	movs	r3, #12
 8006028:	6003      	str	r3, [r0, #0]
 800602a:	e7d3      	b.n	8005fd4 <_free_r+0x28>
 800602c:	6825      	ldr	r5, [r4, #0]
 800602e:	1961      	adds	r1, r4, r5
 8006030:	428b      	cmp	r3, r1
 8006032:	bf04      	itt	eq
 8006034:	6819      	ldreq	r1, [r3, #0]
 8006036:	685b      	ldreq	r3, [r3, #4]
 8006038:	6063      	str	r3, [r4, #4]
 800603a:	bf04      	itt	eq
 800603c:	1949      	addeq	r1, r1, r5
 800603e:	6021      	streq	r1, [r4, #0]
 8006040:	6054      	str	r4, [r2, #4]
 8006042:	e7c7      	b.n	8005fd4 <_free_r+0x28>
 8006044:	b003      	add	sp, #12
 8006046:	bd30      	pop	{r4, r5, pc}
 8006048:	2000454c 	.word	0x2000454c

0800604c <_malloc_r>:
 800604c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800604e:	1ccd      	adds	r5, r1, #3
 8006050:	f025 0503 	bic.w	r5, r5, #3
 8006054:	3508      	adds	r5, #8
 8006056:	2d0c      	cmp	r5, #12
 8006058:	bf38      	it	cc
 800605a:	250c      	movcc	r5, #12
 800605c:	2d00      	cmp	r5, #0
 800605e:	4606      	mov	r6, r0
 8006060:	db01      	blt.n	8006066 <_malloc_r+0x1a>
 8006062:	42a9      	cmp	r1, r5
 8006064:	d903      	bls.n	800606e <_malloc_r+0x22>
 8006066:	230c      	movs	r3, #12
 8006068:	6033      	str	r3, [r6, #0]
 800606a:	2000      	movs	r0, #0
 800606c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800606e:	f000 f8ab 	bl	80061c8 <__malloc_lock>
 8006072:	4921      	ldr	r1, [pc, #132]	; (80060f8 <_malloc_r+0xac>)
 8006074:	680a      	ldr	r2, [r1, #0]
 8006076:	4614      	mov	r4, r2
 8006078:	b99c      	cbnz	r4, 80060a2 <_malloc_r+0x56>
 800607a:	4f20      	ldr	r7, [pc, #128]	; (80060fc <_malloc_r+0xb0>)
 800607c:	683b      	ldr	r3, [r7, #0]
 800607e:	b923      	cbnz	r3, 800608a <_malloc_r+0x3e>
 8006080:	4621      	mov	r1, r4
 8006082:	4630      	mov	r0, r6
 8006084:	f000 f83c 	bl	8006100 <_sbrk_r>
 8006088:	6038      	str	r0, [r7, #0]
 800608a:	4629      	mov	r1, r5
 800608c:	4630      	mov	r0, r6
 800608e:	f000 f837 	bl	8006100 <_sbrk_r>
 8006092:	1c43      	adds	r3, r0, #1
 8006094:	d123      	bne.n	80060de <_malloc_r+0x92>
 8006096:	230c      	movs	r3, #12
 8006098:	6033      	str	r3, [r6, #0]
 800609a:	4630      	mov	r0, r6
 800609c:	f000 f89a 	bl	80061d4 <__malloc_unlock>
 80060a0:	e7e3      	b.n	800606a <_malloc_r+0x1e>
 80060a2:	6823      	ldr	r3, [r4, #0]
 80060a4:	1b5b      	subs	r3, r3, r5
 80060a6:	d417      	bmi.n	80060d8 <_malloc_r+0x8c>
 80060a8:	2b0b      	cmp	r3, #11
 80060aa:	d903      	bls.n	80060b4 <_malloc_r+0x68>
 80060ac:	6023      	str	r3, [r4, #0]
 80060ae:	441c      	add	r4, r3
 80060b0:	6025      	str	r5, [r4, #0]
 80060b2:	e004      	b.n	80060be <_malloc_r+0x72>
 80060b4:	6863      	ldr	r3, [r4, #4]
 80060b6:	42a2      	cmp	r2, r4
 80060b8:	bf0c      	ite	eq
 80060ba:	600b      	streq	r3, [r1, #0]
 80060bc:	6053      	strne	r3, [r2, #4]
 80060be:	4630      	mov	r0, r6
 80060c0:	f000 f888 	bl	80061d4 <__malloc_unlock>
 80060c4:	f104 000b 	add.w	r0, r4, #11
 80060c8:	1d23      	adds	r3, r4, #4
 80060ca:	f020 0007 	bic.w	r0, r0, #7
 80060ce:	1ac2      	subs	r2, r0, r3
 80060d0:	d0cc      	beq.n	800606c <_malloc_r+0x20>
 80060d2:	1a1b      	subs	r3, r3, r0
 80060d4:	50a3      	str	r3, [r4, r2]
 80060d6:	e7c9      	b.n	800606c <_malloc_r+0x20>
 80060d8:	4622      	mov	r2, r4
 80060da:	6864      	ldr	r4, [r4, #4]
 80060dc:	e7cc      	b.n	8006078 <_malloc_r+0x2c>
 80060de:	1cc4      	adds	r4, r0, #3
 80060e0:	f024 0403 	bic.w	r4, r4, #3
 80060e4:	42a0      	cmp	r0, r4
 80060e6:	d0e3      	beq.n	80060b0 <_malloc_r+0x64>
 80060e8:	1a21      	subs	r1, r4, r0
 80060ea:	4630      	mov	r0, r6
 80060ec:	f000 f808 	bl	8006100 <_sbrk_r>
 80060f0:	3001      	adds	r0, #1
 80060f2:	d1dd      	bne.n	80060b0 <_malloc_r+0x64>
 80060f4:	e7cf      	b.n	8006096 <_malloc_r+0x4a>
 80060f6:	bf00      	nop
 80060f8:	2000454c 	.word	0x2000454c
 80060fc:	20004550 	.word	0x20004550

08006100 <_sbrk_r>:
 8006100:	b538      	push	{r3, r4, r5, lr}
 8006102:	4d06      	ldr	r5, [pc, #24]	; (800611c <_sbrk_r+0x1c>)
 8006104:	2300      	movs	r3, #0
 8006106:	4604      	mov	r4, r0
 8006108:	4608      	mov	r0, r1
 800610a:	602b      	str	r3, [r5, #0]
 800610c:	f7fa feac 	bl	8000e68 <_sbrk>
 8006110:	1c43      	adds	r3, r0, #1
 8006112:	d102      	bne.n	800611a <_sbrk_r+0x1a>
 8006114:	682b      	ldr	r3, [r5, #0]
 8006116:	b103      	cbz	r3, 800611a <_sbrk_r+0x1a>
 8006118:	6023      	str	r3, [r4, #0]
 800611a:	bd38      	pop	{r3, r4, r5, pc}
 800611c:	20006168 	.word	0x20006168

08006120 <sniprintf>:
 8006120:	b40c      	push	{r2, r3}
 8006122:	b530      	push	{r4, r5, lr}
 8006124:	4b17      	ldr	r3, [pc, #92]	; (8006184 <sniprintf+0x64>)
 8006126:	1e0c      	subs	r4, r1, #0
 8006128:	681d      	ldr	r5, [r3, #0]
 800612a:	b09d      	sub	sp, #116	; 0x74
 800612c:	da08      	bge.n	8006140 <sniprintf+0x20>
 800612e:	238b      	movs	r3, #139	; 0x8b
 8006130:	602b      	str	r3, [r5, #0]
 8006132:	f04f 30ff 	mov.w	r0, #4294967295
 8006136:	b01d      	add	sp, #116	; 0x74
 8006138:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800613c:	b002      	add	sp, #8
 800613e:	4770      	bx	lr
 8006140:	f44f 7302 	mov.w	r3, #520	; 0x208
 8006144:	f8ad 3014 	strh.w	r3, [sp, #20]
 8006148:	bf14      	ite	ne
 800614a:	f104 33ff 	addne.w	r3, r4, #4294967295
 800614e:	4623      	moveq	r3, r4
 8006150:	9304      	str	r3, [sp, #16]
 8006152:	9307      	str	r3, [sp, #28]
 8006154:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8006158:	9002      	str	r0, [sp, #8]
 800615a:	9006      	str	r0, [sp, #24]
 800615c:	f8ad 3016 	strh.w	r3, [sp, #22]
 8006160:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8006162:	ab21      	add	r3, sp, #132	; 0x84
 8006164:	a902      	add	r1, sp, #8
 8006166:	4628      	mov	r0, r5
 8006168:	9301      	str	r3, [sp, #4]
 800616a:	f000 f895 	bl	8006298 <_svfiprintf_r>
 800616e:	1c43      	adds	r3, r0, #1
 8006170:	bfbc      	itt	lt
 8006172:	238b      	movlt	r3, #139	; 0x8b
 8006174:	602b      	strlt	r3, [r5, #0]
 8006176:	2c00      	cmp	r4, #0
 8006178:	d0dd      	beq.n	8006136 <sniprintf+0x16>
 800617a:	9b02      	ldr	r3, [sp, #8]
 800617c:	2200      	movs	r2, #0
 800617e:	701a      	strb	r2, [r3, #0]
 8006180:	e7d9      	b.n	8006136 <sniprintf+0x16>
 8006182:	bf00      	nop
 8006184:	200002f8 	.word	0x200002f8

08006188 <siprintf>:
 8006188:	b40e      	push	{r1, r2, r3}
 800618a:	b500      	push	{lr}
 800618c:	b09c      	sub	sp, #112	; 0x70
 800618e:	ab1d      	add	r3, sp, #116	; 0x74
 8006190:	9002      	str	r0, [sp, #8]
 8006192:	9006      	str	r0, [sp, #24]
 8006194:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8006198:	4809      	ldr	r0, [pc, #36]	; (80061c0 <siprintf+0x38>)
 800619a:	9107      	str	r1, [sp, #28]
 800619c:	9104      	str	r1, [sp, #16]
 800619e:	4909      	ldr	r1, [pc, #36]	; (80061c4 <siprintf+0x3c>)
 80061a0:	f853 2b04 	ldr.w	r2, [r3], #4
 80061a4:	9105      	str	r1, [sp, #20]
 80061a6:	6800      	ldr	r0, [r0, #0]
 80061a8:	9301      	str	r3, [sp, #4]
 80061aa:	a902      	add	r1, sp, #8
 80061ac:	f000 f874 	bl	8006298 <_svfiprintf_r>
 80061b0:	9b02      	ldr	r3, [sp, #8]
 80061b2:	2200      	movs	r2, #0
 80061b4:	701a      	strb	r2, [r3, #0]
 80061b6:	b01c      	add	sp, #112	; 0x70
 80061b8:	f85d eb04 	ldr.w	lr, [sp], #4
 80061bc:	b003      	add	sp, #12
 80061be:	4770      	bx	lr
 80061c0:	200002f8 	.word	0x200002f8
 80061c4:	ffff0208 	.word	0xffff0208

080061c8 <__malloc_lock>:
 80061c8:	4801      	ldr	r0, [pc, #4]	; (80061d0 <__malloc_lock+0x8>)
 80061ca:	f000 baf9 	b.w	80067c0 <__retarget_lock_acquire_recursive>
 80061ce:	bf00      	nop
 80061d0:	20006170 	.word	0x20006170

080061d4 <__malloc_unlock>:
 80061d4:	4801      	ldr	r0, [pc, #4]	; (80061dc <__malloc_unlock+0x8>)
 80061d6:	f000 baf4 	b.w	80067c2 <__retarget_lock_release_recursive>
 80061da:	bf00      	nop
 80061dc:	20006170 	.word	0x20006170

080061e0 <__ssputs_r>:
 80061e0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80061e4:	688e      	ldr	r6, [r1, #8]
 80061e6:	429e      	cmp	r6, r3
 80061e8:	4682      	mov	sl, r0
 80061ea:	460c      	mov	r4, r1
 80061ec:	4690      	mov	r8, r2
 80061ee:	461f      	mov	r7, r3
 80061f0:	d838      	bhi.n	8006264 <__ssputs_r+0x84>
 80061f2:	898a      	ldrh	r2, [r1, #12]
 80061f4:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80061f8:	d032      	beq.n	8006260 <__ssputs_r+0x80>
 80061fa:	6825      	ldr	r5, [r4, #0]
 80061fc:	6909      	ldr	r1, [r1, #16]
 80061fe:	eba5 0901 	sub.w	r9, r5, r1
 8006202:	6965      	ldr	r5, [r4, #20]
 8006204:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8006208:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800620c:	3301      	adds	r3, #1
 800620e:	444b      	add	r3, r9
 8006210:	106d      	asrs	r5, r5, #1
 8006212:	429d      	cmp	r5, r3
 8006214:	bf38      	it	cc
 8006216:	461d      	movcc	r5, r3
 8006218:	0553      	lsls	r3, r2, #21
 800621a:	d531      	bpl.n	8006280 <__ssputs_r+0xa0>
 800621c:	4629      	mov	r1, r5
 800621e:	f7ff ff15 	bl	800604c <_malloc_r>
 8006222:	4606      	mov	r6, r0
 8006224:	b950      	cbnz	r0, 800623c <__ssputs_r+0x5c>
 8006226:	230c      	movs	r3, #12
 8006228:	f8ca 3000 	str.w	r3, [sl]
 800622c:	89a3      	ldrh	r3, [r4, #12]
 800622e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006232:	81a3      	strh	r3, [r4, #12]
 8006234:	f04f 30ff 	mov.w	r0, #4294967295
 8006238:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800623c:	6921      	ldr	r1, [r4, #16]
 800623e:	464a      	mov	r2, r9
 8006240:	f7ff fe9e 	bl	8005f80 <memcpy>
 8006244:	89a3      	ldrh	r3, [r4, #12]
 8006246:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800624a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800624e:	81a3      	strh	r3, [r4, #12]
 8006250:	6126      	str	r6, [r4, #16]
 8006252:	6165      	str	r5, [r4, #20]
 8006254:	444e      	add	r6, r9
 8006256:	eba5 0509 	sub.w	r5, r5, r9
 800625a:	6026      	str	r6, [r4, #0]
 800625c:	60a5      	str	r5, [r4, #8]
 800625e:	463e      	mov	r6, r7
 8006260:	42be      	cmp	r6, r7
 8006262:	d900      	bls.n	8006266 <__ssputs_r+0x86>
 8006264:	463e      	mov	r6, r7
 8006266:	4632      	mov	r2, r6
 8006268:	6820      	ldr	r0, [r4, #0]
 800626a:	4641      	mov	r1, r8
 800626c:	f000 faaa 	bl	80067c4 <memmove>
 8006270:	68a3      	ldr	r3, [r4, #8]
 8006272:	6822      	ldr	r2, [r4, #0]
 8006274:	1b9b      	subs	r3, r3, r6
 8006276:	4432      	add	r2, r6
 8006278:	60a3      	str	r3, [r4, #8]
 800627a:	6022      	str	r2, [r4, #0]
 800627c:	2000      	movs	r0, #0
 800627e:	e7db      	b.n	8006238 <__ssputs_r+0x58>
 8006280:	462a      	mov	r2, r5
 8006282:	f000 fab9 	bl	80067f8 <_realloc_r>
 8006286:	4606      	mov	r6, r0
 8006288:	2800      	cmp	r0, #0
 800628a:	d1e1      	bne.n	8006250 <__ssputs_r+0x70>
 800628c:	6921      	ldr	r1, [r4, #16]
 800628e:	4650      	mov	r0, sl
 8006290:	f7ff fe8c 	bl	8005fac <_free_r>
 8006294:	e7c7      	b.n	8006226 <__ssputs_r+0x46>
	...

08006298 <_svfiprintf_r>:
 8006298:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800629c:	4698      	mov	r8, r3
 800629e:	898b      	ldrh	r3, [r1, #12]
 80062a0:	061b      	lsls	r3, r3, #24
 80062a2:	b09d      	sub	sp, #116	; 0x74
 80062a4:	4607      	mov	r7, r0
 80062a6:	460d      	mov	r5, r1
 80062a8:	4614      	mov	r4, r2
 80062aa:	d50e      	bpl.n	80062ca <_svfiprintf_r+0x32>
 80062ac:	690b      	ldr	r3, [r1, #16]
 80062ae:	b963      	cbnz	r3, 80062ca <_svfiprintf_r+0x32>
 80062b0:	2140      	movs	r1, #64	; 0x40
 80062b2:	f7ff fecb 	bl	800604c <_malloc_r>
 80062b6:	6028      	str	r0, [r5, #0]
 80062b8:	6128      	str	r0, [r5, #16]
 80062ba:	b920      	cbnz	r0, 80062c6 <_svfiprintf_r+0x2e>
 80062bc:	230c      	movs	r3, #12
 80062be:	603b      	str	r3, [r7, #0]
 80062c0:	f04f 30ff 	mov.w	r0, #4294967295
 80062c4:	e0d1      	b.n	800646a <_svfiprintf_r+0x1d2>
 80062c6:	2340      	movs	r3, #64	; 0x40
 80062c8:	616b      	str	r3, [r5, #20]
 80062ca:	2300      	movs	r3, #0
 80062cc:	9309      	str	r3, [sp, #36]	; 0x24
 80062ce:	2320      	movs	r3, #32
 80062d0:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80062d4:	f8cd 800c 	str.w	r8, [sp, #12]
 80062d8:	2330      	movs	r3, #48	; 0x30
 80062da:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8006484 <_svfiprintf_r+0x1ec>
 80062de:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80062e2:	f04f 0901 	mov.w	r9, #1
 80062e6:	4623      	mov	r3, r4
 80062e8:	469a      	mov	sl, r3
 80062ea:	f813 2b01 	ldrb.w	r2, [r3], #1
 80062ee:	b10a      	cbz	r2, 80062f4 <_svfiprintf_r+0x5c>
 80062f0:	2a25      	cmp	r2, #37	; 0x25
 80062f2:	d1f9      	bne.n	80062e8 <_svfiprintf_r+0x50>
 80062f4:	ebba 0b04 	subs.w	fp, sl, r4
 80062f8:	d00b      	beq.n	8006312 <_svfiprintf_r+0x7a>
 80062fa:	465b      	mov	r3, fp
 80062fc:	4622      	mov	r2, r4
 80062fe:	4629      	mov	r1, r5
 8006300:	4638      	mov	r0, r7
 8006302:	f7ff ff6d 	bl	80061e0 <__ssputs_r>
 8006306:	3001      	adds	r0, #1
 8006308:	f000 80aa 	beq.w	8006460 <_svfiprintf_r+0x1c8>
 800630c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800630e:	445a      	add	r2, fp
 8006310:	9209      	str	r2, [sp, #36]	; 0x24
 8006312:	f89a 3000 	ldrb.w	r3, [sl]
 8006316:	2b00      	cmp	r3, #0
 8006318:	f000 80a2 	beq.w	8006460 <_svfiprintf_r+0x1c8>
 800631c:	2300      	movs	r3, #0
 800631e:	f04f 32ff 	mov.w	r2, #4294967295
 8006322:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8006326:	f10a 0a01 	add.w	sl, sl, #1
 800632a:	9304      	str	r3, [sp, #16]
 800632c:	9307      	str	r3, [sp, #28]
 800632e:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8006332:	931a      	str	r3, [sp, #104]	; 0x68
 8006334:	4654      	mov	r4, sl
 8006336:	2205      	movs	r2, #5
 8006338:	f814 1b01 	ldrb.w	r1, [r4], #1
 800633c:	4851      	ldr	r0, [pc, #324]	; (8006484 <_svfiprintf_r+0x1ec>)
 800633e:	f7f9 ff4f 	bl	80001e0 <memchr>
 8006342:	9a04      	ldr	r2, [sp, #16]
 8006344:	b9d8      	cbnz	r0, 800637e <_svfiprintf_r+0xe6>
 8006346:	06d0      	lsls	r0, r2, #27
 8006348:	bf44      	itt	mi
 800634a:	2320      	movmi	r3, #32
 800634c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8006350:	0711      	lsls	r1, r2, #28
 8006352:	bf44      	itt	mi
 8006354:	232b      	movmi	r3, #43	; 0x2b
 8006356:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800635a:	f89a 3000 	ldrb.w	r3, [sl]
 800635e:	2b2a      	cmp	r3, #42	; 0x2a
 8006360:	d015      	beq.n	800638e <_svfiprintf_r+0xf6>
 8006362:	9a07      	ldr	r2, [sp, #28]
 8006364:	4654      	mov	r4, sl
 8006366:	2000      	movs	r0, #0
 8006368:	f04f 0c0a 	mov.w	ip, #10
 800636c:	4621      	mov	r1, r4
 800636e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8006372:	3b30      	subs	r3, #48	; 0x30
 8006374:	2b09      	cmp	r3, #9
 8006376:	d94e      	bls.n	8006416 <_svfiprintf_r+0x17e>
 8006378:	b1b0      	cbz	r0, 80063a8 <_svfiprintf_r+0x110>
 800637a:	9207      	str	r2, [sp, #28]
 800637c:	e014      	b.n	80063a8 <_svfiprintf_r+0x110>
 800637e:	eba0 0308 	sub.w	r3, r0, r8
 8006382:	fa09 f303 	lsl.w	r3, r9, r3
 8006386:	4313      	orrs	r3, r2
 8006388:	9304      	str	r3, [sp, #16]
 800638a:	46a2      	mov	sl, r4
 800638c:	e7d2      	b.n	8006334 <_svfiprintf_r+0x9c>
 800638e:	9b03      	ldr	r3, [sp, #12]
 8006390:	1d19      	adds	r1, r3, #4
 8006392:	681b      	ldr	r3, [r3, #0]
 8006394:	9103      	str	r1, [sp, #12]
 8006396:	2b00      	cmp	r3, #0
 8006398:	bfbb      	ittet	lt
 800639a:	425b      	neglt	r3, r3
 800639c:	f042 0202 	orrlt.w	r2, r2, #2
 80063a0:	9307      	strge	r3, [sp, #28]
 80063a2:	9307      	strlt	r3, [sp, #28]
 80063a4:	bfb8      	it	lt
 80063a6:	9204      	strlt	r2, [sp, #16]
 80063a8:	7823      	ldrb	r3, [r4, #0]
 80063aa:	2b2e      	cmp	r3, #46	; 0x2e
 80063ac:	d10c      	bne.n	80063c8 <_svfiprintf_r+0x130>
 80063ae:	7863      	ldrb	r3, [r4, #1]
 80063b0:	2b2a      	cmp	r3, #42	; 0x2a
 80063b2:	d135      	bne.n	8006420 <_svfiprintf_r+0x188>
 80063b4:	9b03      	ldr	r3, [sp, #12]
 80063b6:	1d1a      	adds	r2, r3, #4
 80063b8:	681b      	ldr	r3, [r3, #0]
 80063ba:	9203      	str	r2, [sp, #12]
 80063bc:	2b00      	cmp	r3, #0
 80063be:	bfb8      	it	lt
 80063c0:	f04f 33ff 	movlt.w	r3, #4294967295
 80063c4:	3402      	adds	r4, #2
 80063c6:	9305      	str	r3, [sp, #20]
 80063c8:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8006494 <_svfiprintf_r+0x1fc>
 80063cc:	7821      	ldrb	r1, [r4, #0]
 80063ce:	2203      	movs	r2, #3
 80063d0:	4650      	mov	r0, sl
 80063d2:	f7f9 ff05 	bl	80001e0 <memchr>
 80063d6:	b140      	cbz	r0, 80063ea <_svfiprintf_r+0x152>
 80063d8:	2340      	movs	r3, #64	; 0x40
 80063da:	eba0 000a 	sub.w	r0, r0, sl
 80063de:	fa03 f000 	lsl.w	r0, r3, r0
 80063e2:	9b04      	ldr	r3, [sp, #16]
 80063e4:	4303      	orrs	r3, r0
 80063e6:	3401      	adds	r4, #1
 80063e8:	9304      	str	r3, [sp, #16]
 80063ea:	f814 1b01 	ldrb.w	r1, [r4], #1
 80063ee:	4826      	ldr	r0, [pc, #152]	; (8006488 <_svfiprintf_r+0x1f0>)
 80063f0:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80063f4:	2206      	movs	r2, #6
 80063f6:	f7f9 fef3 	bl	80001e0 <memchr>
 80063fa:	2800      	cmp	r0, #0
 80063fc:	d038      	beq.n	8006470 <_svfiprintf_r+0x1d8>
 80063fe:	4b23      	ldr	r3, [pc, #140]	; (800648c <_svfiprintf_r+0x1f4>)
 8006400:	bb1b      	cbnz	r3, 800644a <_svfiprintf_r+0x1b2>
 8006402:	9b03      	ldr	r3, [sp, #12]
 8006404:	3307      	adds	r3, #7
 8006406:	f023 0307 	bic.w	r3, r3, #7
 800640a:	3308      	adds	r3, #8
 800640c:	9303      	str	r3, [sp, #12]
 800640e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006410:	4433      	add	r3, r6
 8006412:	9309      	str	r3, [sp, #36]	; 0x24
 8006414:	e767      	b.n	80062e6 <_svfiprintf_r+0x4e>
 8006416:	fb0c 3202 	mla	r2, ip, r2, r3
 800641a:	460c      	mov	r4, r1
 800641c:	2001      	movs	r0, #1
 800641e:	e7a5      	b.n	800636c <_svfiprintf_r+0xd4>
 8006420:	2300      	movs	r3, #0
 8006422:	3401      	adds	r4, #1
 8006424:	9305      	str	r3, [sp, #20]
 8006426:	4619      	mov	r1, r3
 8006428:	f04f 0c0a 	mov.w	ip, #10
 800642c:	4620      	mov	r0, r4
 800642e:	f810 2b01 	ldrb.w	r2, [r0], #1
 8006432:	3a30      	subs	r2, #48	; 0x30
 8006434:	2a09      	cmp	r2, #9
 8006436:	d903      	bls.n	8006440 <_svfiprintf_r+0x1a8>
 8006438:	2b00      	cmp	r3, #0
 800643a:	d0c5      	beq.n	80063c8 <_svfiprintf_r+0x130>
 800643c:	9105      	str	r1, [sp, #20]
 800643e:	e7c3      	b.n	80063c8 <_svfiprintf_r+0x130>
 8006440:	fb0c 2101 	mla	r1, ip, r1, r2
 8006444:	4604      	mov	r4, r0
 8006446:	2301      	movs	r3, #1
 8006448:	e7f0      	b.n	800642c <_svfiprintf_r+0x194>
 800644a:	ab03      	add	r3, sp, #12
 800644c:	9300      	str	r3, [sp, #0]
 800644e:	462a      	mov	r2, r5
 8006450:	4b0f      	ldr	r3, [pc, #60]	; (8006490 <_svfiprintf_r+0x1f8>)
 8006452:	a904      	add	r1, sp, #16
 8006454:	4638      	mov	r0, r7
 8006456:	f3af 8000 	nop.w
 800645a:	1c42      	adds	r2, r0, #1
 800645c:	4606      	mov	r6, r0
 800645e:	d1d6      	bne.n	800640e <_svfiprintf_r+0x176>
 8006460:	89ab      	ldrh	r3, [r5, #12]
 8006462:	065b      	lsls	r3, r3, #25
 8006464:	f53f af2c 	bmi.w	80062c0 <_svfiprintf_r+0x28>
 8006468:	9809      	ldr	r0, [sp, #36]	; 0x24
 800646a:	b01d      	add	sp, #116	; 0x74
 800646c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006470:	ab03      	add	r3, sp, #12
 8006472:	9300      	str	r3, [sp, #0]
 8006474:	462a      	mov	r2, r5
 8006476:	4b06      	ldr	r3, [pc, #24]	; (8006490 <_svfiprintf_r+0x1f8>)
 8006478:	a904      	add	r1, sp, #16
 800647a:	4638      	mov	r0, r7
 800647c:	f000 f87a 	bl	8006574 <_printf_i>
 8006480:	e7eb      	b.n	800645a <_svfiprintf_r+0x1c2>
 8006482:	bf00      	nop
 8006484:	08006936 	.word	0x08006936
 8006488:	08006940 	.word	0x08006940
 800648c:	00000000 	.word	0x00000000
 8006490:	080061e1 	.word	0x080061e1
 8006494:	0800693c 	.word	0x0800693c

08006498 <_printf_common>:
 8006498:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800649c:	4616      	mov	r6, r2
 800649e:	4699      	mov	r9, r3
 80064a0:	688a      	ldr	r2, [r1, #8]
 80064a2:	690b      	ldr	r3, [r1, #16]
 80064a4:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80064a8:	4293      	cmp	r3, r2
 80064aa:	bfb8      	it	lt
 80064ac:	4613      	movlt	r3, r2
 80064ae:	6033      	str	r3, [r6, #0]
 80064b0:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80064b4:	4607      	mov	r7, r0
 80064b6:	460c      	mov	r4, r1
 80064b8:	b10a      	cbz	r2, 80064be <_printf_common+0x26>
 80064ba:	3301      	adds	r3, #1
 80064bc:	6033      	str	r3, [r6, #0]
 80064be:	6823      	ldr	r3, [r4, #0]
 80064c0:	0699      	lsls	r1, r3, #26
 80064c2:	bf42      	ittt	mi
 80064c4:	6833      	ldrmi	r3, [r6, #0]
 80064c6:	3302      	addmi	r3, #2
 80064c8:	6033      	strmi	r3, [r6, #0]
 80064ca:	6825      	ldr	r5, [r4, #0]
 80064cc:	f015 0506 	ands.w	r5, r5, #6
 80064d0:	d106      	bne.n	80064e0 <_printf_common+0x48>
 80064d2:	f104 0a19 	add.w	sl, r4, #25
 80064d6:	68e3      	ldr	r3, [r4, #12]
 80064d8:	6832      	ldr	r2, [r6, #0]
 80064da:	1a9b      	subs	r3, r3, r2
 80064dc:	42ab      	cmp	r3, r5
 80064de:	dc26      	bgt.n	800652e <_printf_common+0x96>
 80064e0:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80064e4:	1e13      	subs	r3, r2, #0
 80064e6:	6822      	ldr	r2, [r4, #0]
 80064e8:	bf18      	it	ne
 80064ea:	2301      	movne	r3, #1
 80064ec:	0692      	lsls	r2, r2, #26
 80064ee:	d42b      	bmi.n	8006548 <_printf_common+0xb0>
 80064f0:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80064f4:	4649      	mov	r1, r9
 80064f6:	4638      	mov	r0, r7
 80064f8:	47c0      	blx	r8
 80064fa:	3001      	adds	r0, #1
 80064fc:	d01e      	beq.n	800653c <_printf_common+0xa4>
 80064fe:	6823      	ldr	r3, [r4, #0]
 8006500:	68e5      	ldr	r5, [r4, #12]
 8006502:	6832      	ldr	r2, [r6, #0]
 8006504:	f003 0306 	and.w	r3, r3, #6
 8006508:	2b04      	cmp	r3, #4
 800650a:	bf08      	it	eq
 800650c:	1aad      	subeq	r5, r5, r2
 800650e:	68a3      	ldr	r3, [r4, #8]
 8006510:	6922      	ldr	r2, [r4, #16]
 8006512:	bf0c      	ite	eq
 8006514:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8006518:	2500      	movne	r5, #0
 800651a:	4293      	cmp	r3, r2
 800651c:	bfc4      	itt	gt
 800651e:	1a9b      	subgt	r3, r3, r2
 8006520:	18ed      	addgt	r5, r5, r3
 8006522:	2600      	movs	r6, #0
 8006524:	341a      	adds	r4, #26
 8006526:	42b5      	cmp	r5, r6
 8006528:	d11a      	bne.n	8006560 <_printf_common+0xc8>
 800652a:	2000      	movs	r0, #0
 800652c:	e008      	b.n	8006540 <_printf_common+0xa8>
 800652e:	2301      	movs	r3, #1
 8006530:	4652      	mov	r2, sl
 8006532:	4649      	mov	r1, r9
 8006534:	4638      	mov	r0, r7
 8006536:	47c0      	blx	r8
 8006538:	3001      	adds	r0, #1
 800653a:	d103      	bne.n	8006544 <_printf_common+0xac>
 800653c:	f04f 30ff 	mov.w	r0, #4294967295
 8006540:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006544:	3501      	adds	r5, #1
 8006546:	e7c6      	b.n	80064d6 <_printf_common+0x3e>
 8006548:	18e1      	adds	r1, r4, r3
 800654a:	1c5a      	adds	r2, r3, #1
 800654c:	2030      	movs	r0, #48	; 0x30
 800654e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8006552:	4422      	add	r2, r4
 8006554:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8006558:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800655c:	3302      	adds	r3, #2
 800655e:	e7c7      	b.n	80064f0 <_printf_common+0x58>
 8006560:	2301      	movs	r3, #1
 8006562:	4622      	mov	r2, r4
 8006564:	4649      	mov	r1, r9
 8006566:	4638      	mov	r0, r7
 8006568:	47c0      	blx	r8
 800656a:	3001      	adds	r0, #1
 800656c:	d0e6      	beq.n	800653c <_printf_common+0xa4>
 800656e:	3601      	adds	r6, #1
 8006570:	e7d9      	b.n	8006526 <_printf_common+0x8e>
	...

08006574 <_printf_i>:
 8006574:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8006578:	460c      	mov	r4, r1
 800657a:	4691      	mov	r9, r2
 800657c:	7e27      	ldrb	r7, [r4, #24]
 800657e:	990c      	ldr	r1, [sp, #48]	; 0x30
 8006580:	2f78      	cmp	r7, #120	; 0x78
 8006582:	4680      	mov	r8, r0
 8006584:	469a      	mov	sl, r3
 8006586:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800658a:	d807      	bhi.n	800659c <_printf_i+0x28>
 800658c:	2f62      	cmp	r7, #98	; 0x62
 800658e:	d80a      	bhi.n	80065a6 <_printf_i+0x32>
 8006590:	2f00      	cmp	r7, #0
 8006592:	f000 80d8 	beq.w	8006746 <_printf_i+0x1d2>
 8006596:	2f58      	cmp	r7, #88	; 0x58
 8006598:	f000 80a3 	beq.w	80066e2 <_printf_i+0x16e>
 800659c:	f104 0642 	add.w	r6, r4, #66	; 0x42
 80065a0:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80065a4:	e03a      	b.n	800661c <_printf_i+0xa8>
 80065a6:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80065aa:	2b15      	cmp	r3, #21
 80065ac:	d8f6      	bhi.n	800659c <_printf_i+0x28>
 80065ae:	a001      	add	r0, pc, #4	; (adr r0, 80065b4 <_printf_i+0x40>)
 80065b0:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 80065b4:	0800660d 	.word	0x0800660d
 80065b8:	08006621 	.word	0x08006621
 80065bc:	0800659d 	.word	0x0800659d
 80065c0:	0800659d 	.word	0x0800659d
 80065c4:	0800659d 	.word	0x0800659d
 80065c8:	0800659d 	.word	0x0800659d
 80065cc:	08006621 	.word	0x08006621
 80065d0:	0800659d 	.word	0x0800659d
 80065d4:	0800659d 	.word	0x0800659d
 80065d8:	0800659d 	.word	0x0800659d
 80065dc:	0800659d 	.word	0x0800659d
 80065e0:	0800672d 	.word	0x0800672d
 80065e4:	08006651 	.word	0x08006651
 80065e8:	0800670f 	.word	0x0800670f
 80065ec:	0800659d 	.word	0x0800659d
 80065f0:	0800659d 	.word	0x0800659d
 80065f4:	0800674f 	.word	0x0800674f
 80065f8:	0800659d 	.word	0x0800659d
 80065fc:	08006651 	.word	0x08006651
 8006600:	0800659d 	.word	0x0800659d
 8006604:	0800659d 	.word	0x0800659d
 8006608:	08006717 	.word	0x08006717
 800660c:	680b      	ldr	r3, [r1, #0]
 800660e:	1d1a      	adds	r2, r3, #4
 8006610:	681b      	ldr	r3, [r3, #0]
 8006612:	600a      	str	r2, [r1, #0]
 8006614:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8006618:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800661c:	2301      	movs	r3, #1
 800661e:	e0a3      	b.n	8006768 <_printf_i+0x1f4>
 8006620:	6825      	ldr	r5, [r4, #0]
 8006622:	6808      	ldr	r0, [r1, #0]
 8006624:	062e      	lsls	r6, r5, #24
 8006626:	f100 0304 	add.w	r3, r0, #4
 800662a:	d50a      	bpl.n	8006642 <_printf_i+0xce>
 800662c:	6805      	ldr	r5, [r0, #0]
 800662e:	600b      	str	r3, [r1, #0]
 8006630:	2d00      	cmp	r5, #0
 8006632:	da03      	bge.n	800663c <_printf_i+0xc8>
 8006634:	232d      	movs	r3, #45	; 0x2d
 8006636:	426d      	negs	r5, r5
 8006638:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800663c:	485e      	ldr	r0, [pc, #376]	; (80067b8 <_printf_i+0x244>)
 800663e:	230a      	movs	r3, #10
 8006640:	e019      	b.n	8006676 <_printf_i+0x102>
 8006642:	f015 0f40 	tst.w	r5, #64	; 0x40
 8006646:	6805      	ldr	r5, [r0, #0]
 8006648:	600b      	str	r3, [r1, #0]
 800664a:	bf18      	it	ne
 800664c:	b22d      	sxthne	r5, r5
 800664e:	e7ef      	b.n	8006630 <_printf_i+0xbc>
 8006650:	680b      	ldr	r3, [r1, #0]
 8006652:	6825      	ldr	r5, [r4, #0]
 8006654:	1d18      	adds	r0, r3, #4
 8006656:	6008      	str	r0, [r1, #0]
 8006658:	0628      	lsls	r0, r5, #24
 800665a:	d501      	bpl.n	8006660 <_printf_i+0xec>
 800665c:	681d      	ldr	r5, [r3, #0]
 800665e:	e002      	b.n	8006666 <_printf_i+0xf2>
 8006660:	0669      	lsls	r1, r5, #25
 8006662:	d5fb      	bpl.n	800665c <_printf_i+0xe8>
 8006664:	881d      	ldrh	r5, [r3, #0]
 8006666:	4854      	ldr	r0, [pc, #336]	; (80067b8 <_printf_i+0x244>)
 8006668:	2f6f      	cmp	r7, #111	; 0x6f
 800666a:	bf0c      	ite	eq
 800666c:	2308      	moveq	r3, #8
 800666e:	230a      	movne	r3, #10
 8006670:	2100      	movs	r1, #0
 8006672:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8006676:	6866      	ldr	r6, [r4, #4]
 8006678:	60a6      	str	r6, [r4, #8]
 800667a:	2e00      	cmp	r6, #0
 800667c:	bfa2      	ittt	ge
 800667e:	6821      	ldrge	r1, [r4, #0]
 8006680:	f021 0104 	bicge.w	r1, r1, #4
 8006684:	6021      	strge	r1, [r4, #0]
 8006686:	b90d      	cbnz	r5, 800668c <_printf_i+0x118>
 8006688:	2e00      	cmp	r6, #0
 800668a:	d04d      	beq.n	8006728 <_printf_i+0x1b4>
 800668c:	4616      	mov	r6, r2
 800668e:	fbb5 f1f3 	udiv	r1, r5, r3
 8006692:	fb03 5711 	mls	r7, r3, r1, r5
 8006696:	5dc7      	ldrb	r7, [r0, r7]
 8006698:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800669c:	462f      	mov	r7, r5
 800669e:	42bb      	cmp	r3, r7
 80066a0:	460d      	mov	r5, r1
 80066a2:	d9f4      	bls.n	800668e <_printf_i+0x11a>
 80066a4:	2b08      	cmp	r3, #8
 80066a6:	d10b      	bne.n	80066c0 <_printf_i+0x14c>
 80066a8:	6823      	ldr	r3, [r4, #0]
 80066aa:	07df      	lsls	r7, r3, #31
 80066ac:	d508      	bpl.n	80066c0 <_printf_i+0x14c>
 80066ae:	6923      	ldr	r3, [r4, #16]
 80066b0:	6861      	ldr	r1, [r4, #4]
 80066b2:	4299      	cmp	r1, r3
 80066b4:	bfde      	ittt	le
 80066b6:	2330      	movle	r3, #48	; 0x30
 80066b8:	f806 3c01 	strble.w	r3, [r6, #-1]
 80066bc:	f106 36ff 	addle.w	r6, r6, #4294967295
 80066c0:	1b92      	subs	r2, r2, r6
 80066c2:	6122      	str	r2, [r4, #16]
 80066c4:	f8cd a000 	str.w	sl, [sp]
 80066c8:	464b      	mov	r3, r9
 80066ca:	aa03      	add	r2, sp, #12
 80066cc:	4621      	mov	r1, r4
 80066ce:	4640      	mov	r0, r8
 80066d0:	f7ff fee2 	bl	8006498 <_printf_common>
 80066d4:	3001      	adds	r0, #1
 80066d6:	d14c      	bne.n	8006772 <_printf_i+0x1fe>
 80066d8:	f04f 30ff 	mov.w	r0, #4294967295
 80066dc:	b004      	add	sp, #16
 80066de:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80066e2:	4835      	ldr	r0, [pc, #212]	; (80067b8 <_printf_i+0x244>)
 80066e4:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 80066e8:	6823      	ldr	r3, [r4, #0]
 80066ea:	680e      	ldr	r6, [r1, #0]
 80066ec:	061f      	lsls	r7, r3, #24
 80066ee:	f856 5b04 	ldr.w	r5, [r6], #4
 80066f2:	600e      	str	r6, [r1, #0]
 80066f4:	d514      	bpl.n	8006720 <_printf_i+0x1ac>
 80066f6:	07d9      	lsls	r1, r3, #31
 80066f8:	bf44      	itt	mi
 80066fa:	f043 0320 	orrmi.w	r3, r3, #32
 80066fe:	6023      	strmi	r3, [r4, #0]
 8006700:	b91d      	cbnz	r5, 800670a <_printf_i+0x196>
 8006702:	6823      	ldr	r3, [r4, #0]
 8006704:	f023 0320 	bic.w	r3, r3, #32
 8006708:	6023      	str	r3, [r4, #0]
 800670a:	2310      	movs	r3, #16
 800670c:	e7b0      	b.n	8006670 <_printf_i+0xfc>
 800670e:	6823      	ldr	r3, [r4, #0]
 8006710:	f043 0320 	orr.w	r3, r3, #32
 8006714:	6023      	str	r3, [r4, #0]
 8006716:	2378      	movs	r3, #120	; 0x78
 8006718:	4828      	ldr	r0, [pc, #160]	; (80067bc <_printf_i+0x248>)
 800671a:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800671e:	e7e3      	b.n	80066e8 <_printf_i+0x174>
 8006720:	065e      	lsls	r6, r3, #25
 8006722:	bf48      	it	mi
 8006724:	b2ad      	uxthmi	r5, r5
 8006726:	e7e6      	b.n	80066f6 <_printf_i+0x182>
 8006728:	4616      	mov	r6, r2
 800672a:	e7bb      	b.n	80066a4 <_printf_i+0x130>
 800672c:	680b      	ldr	r3, [r1, #0]
 800672e:	6826      	ldr	r6, [r4, #0]
 8006730:	6960      	ldr	r0, [r4, #20]
 8006732:	1d1d      	adds	r5, r3, #4
 8006734:	600d      	str	r5, [r1, #0]
 8006736:	0635      	lsls	r5, r6, #24
 8006738:	681b      	ldr	r3, [r3, #0]
 800673a:	d501      	bpl.n	8006740 <_printf_i+0x1cc>
 800673c:	6018      	str	r0, [r3, #0]
 800673e:	e002      	b.n	8006746 <_printf_i+0x1d2>
 8006740:	0671      	lsls	r1, r6, #25
 8006742:	d5fb      	bpl.n	800673c <_printf_i+0x1c8>
 8006744:	8018      	strh	r0, [r3, #0]
 8006746:	2300      	movs	r3, #0
 8006748:	6123      	str	r3, [r4, #16]
 800674a:	4616      	mov	r6, r2
 800674c:	e7ba      	b.n	80066c4 <_printf_i+0x150>
 800674e:	680b      	ldr	r3, [r1, #0]
 8006750:	1d1a      	adds	r2, r3, #4
 8006752:	600a      	str	r2, [r1, #0]
 8006754:	681e      	ldr	r6, [r3, #0]
 8006756:	6862      	ldr	r2, [r4, #4]
 8006758:	2100      	movs	r1, #0
 800675a:	4630      	mov	r0, r6
 800675c:	f7f9 fd40 	bl	80001e0 <memchr>
 8006760:	b108      	cbz	r0, 8006766 <_printf_i+0x1f2>
 8006762:	1b80      	subs	r0, r0, r6
 8006764:	6060      	str	r0, [r4, #4]
 8006766:	6863      	ldr	r3, [r4, #4]
 8006768:	6123      	str	r3, [r4, #16]
 800676a:	2300      	movs	r3, #0
 800676c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006770:	e7a8      	b.n	80066c4 <_printf_i+0x150>
 8006772:	6923      	ldr	r3, [r4, #16]
 8006774:	4632      	mov	r2, r6
 8006776:	4649      	mov	r1, r9
 8006778:	4640      	mov	r0, r8
 800677a:	47d0      	blx	sl
 800677c:	3001      	adds	r0, #1
 800677e:	d0ab      	beq.n	80066d8 <_printf_i+0x164>
 8006780:	6823      	ldr	r3, [r4, #0]
 8006782:	079b      	lsls	r3, r3, #30
 8006784:	d413      	bmi.n	80067ae <_printf_i+0x23a>
 8006786:	68e0      	ldr	r0, [r4, #12]
 8006788:	9b03      	ldr	r3, [sp, #12]
 800678a:	4298      	cmp	r0, r3
 800678c:	bfb8      	it	lt
 800678e:	4618      	movlt	r0, r3
 8006790:	e7a4      	b.n	80066dc <_printf_i+0x168>
 8006792:	2301      	movs	r3, #1
 8006794:	4632      	mov	r2, r6
 8006796:	4649      	mov	r1, r9
 8006798:	4640      	mov	r0, r8
 800679a:	47d0      	blx	sl
 800679c:	3001      	adds	r0, #1
 800679e:	d09b      	beq.n	80066d8 <_printf_i+0x164>
 80067a0:	3501      	adds	r5, #1
 80067a2:	68e3      	ldr	r3, [r4, #12]
 80067a4:	9903      	ldr	r1, [sp, #12]
 80067a6:	1a5b      	subs	r3, r3, r1
 80067a8:	42ab      	cmp	r3, r5
 80067aa:	dcf2      	bgt.n	8006792 <_printf_i+0x21e>
 80067ac:	e7eb      	b.n	8006786 <_printf_i+0x212>
 80067ae:	2500      	movs	r5, #0
 80067b0:	f104 0619 	add.w	r6, r4, #25
 80067b4:	e7f5      	b.n	80067a2 <_printf_i+0x22e>
 80067b6:	bf00      	nop
 80067b8:	08006947 	.word	0x08006947
 80067bc:	08006958 	.word	0x08006958

080067c0 <__retarget_lock_acquire_recursive>:
 80067c0:	4770      	bx	lr

080067c2 <__retarget_lock_release_recursive>:
 80067c2:	4770      	bx	lr

080067c4 <memmove>:
 80067c4:	4288      	cmp	r0, r1
 80067c6:	b510      	push	{r4, lr}
 80067c8:	eb01 0402 	add.w	r4, r1, r2
 80067cc:	d902      	bls.n	80067d4 <memmove+0x10>
 80067ce:	4284      	cmp	r4, r0
 80067d0:	4623      	mov	r3, r4
 80067d2:	d807      	bhi.n	80067e4 <memmove+0x20>
 80067d4:	1e43      	subs	r3, r0, #1
 80067d6:	42a1      	cmp	r1, r4
 80067d8:	d008      	beq.n	80067ec <memmove+0x28>
 80067da:	f811 2b01 	ldrb.w	r2, [r1], #1
 80067de:	f803 2f01 	strb.w	r2, [r3, #1]!
 80067e2:	e7f8      	b.n	80067d6 <memmove+0x12>
 80067e4:	4402      	add	r2, r0
 80067e6:	4601      	mov	r1, r0
 80067e8:	428a      	cmp	r2, r1
 80067ea:	d100      	bne.n	80067ee <memmove+0x2a>
 80067ec:	bd10      	pop	{r4, pc}
 80067ee:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80067f2:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80067f6:	e7f7      	b.n	80067e8 <memmove+0x24>

080067f8 <_realloc_r>:
 80067f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80067fa:	4607      	mov	r7, r0
 80067fc:	4614      	mov	r4, r2
 80067fe:	460e      	mov	r6, r1
 8006800:	b921      	cbnz	r1, 800680c <_realloc_r+0x14>
 8006802:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8006806:	4611      	mov	r1, r2
 8006808:	f7ff bc20 	b.w	800604c <_malloc_r>
 800680c:	b922      	cbnz	r2, 8006818 <_realloc_r+0x20>
 800680e:	f7ff fbcd 	bl	8005fac <_free_r>
 8006812:	4625      	mov	r5, r4
 8006814:	4628      	mov	r0, r5
 8006816:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006818:	f000 f814 	bl	8006844 <_malloc_usable_size_r>
 800681c:	42a0      	cmp	r0, r4
 800681e:	d20f      	bcs.n	8006840 <_realloc_r+0x48>
 8006820:	4621      	mov	r1, r4
 8006822:	4638      	mov	r0, r7
 8006824:	f7ff fc12 	bl	800604c <_malloc_r>
 8006828:	4605      	mov	r5, r0
 800682a:	2800      	cmp	r0, #0
 800682c:	d0f2      	beq.n	8006814 <_realloc_r+0x1c>
 800682e:	4631      	mov	r1, r6
 8006830:	4622      	mov	r2, r4
 8006832:	f7ff fba5 	bl	8005f80 <memcpy>
 8006836:	4631      	mov	r1, r6
 8006838:	4638      	mov	r0, r7
 800683a:	f7ff fbb7 	bl	8005fac <_free_r>
 800683e:	e7e9      	b.n	8006814 <_realloc_r+0x1c>
 8006840:	4635      	mov	r5, r6
 8006842:	e7e7      	b.n	8006814 <_realloc_r+0x1c>

08006844 <_malloc_usable_size_r>:
 8006844:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006848:	1f18      	subs	r0, r3, #4
 800684a:	2b00      	cmp	r3, #0
 800684c:	bfbc      	itt	lt
 800684e:	580b      	ldrlt	r3, [r1, r0]
 8006850:	18c0      	addlt	r0, r0, r3
 8006852:	4770      	bx	lr

08006854 <_init>:
 8006854:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006856:	bf00      	nop
 8006858:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800685a:	bc08      	pop	{r3}
 800685c:	469e      	mov	lr, r3
 800685e:	4770      	bx	lr

08006860 <_fini>:
 8006860:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006862:	bf00      	nop
 8006864:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006866:	bc08      	pop	{r3}
 8006868:	469e      	mov	lr, r3
 800686a:	4770      	bx	lr
