
test-virtual-comport.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006564  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000168  080066f4  080066f4  000166f4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800685c  0800685c  000201e8  2**0
                  CONTENTS
  4 .ARM          00000008  0800685c  0800685c  0001685c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08006864  08006864  000201e8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006864  08006864  00016864  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08006868  08006868  00016868  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001e8  20000000  0800686c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  000201e8  2**0
                  CONTENTS
 10 .bss          00005b4c  200001e8  200001e8  000201e8  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  20005d34  20005d34  000201e8  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  000201e8  2**0
                  CONTENTS, READONLY
 13 .debug_info   000278a3  00000000  00000000  00020218  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000050fe  00000000  00000000  00047abb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000013f0  00000000  00000000  0004cbc0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00001460  00000000  00000000  0004dfb0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000262b2  00000000  00000000  0004f410  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00020131  00000000  00000000  000756c2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000d0ccf  00000000  00000000  000957f3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000053  00000000  00000000  001664c2  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00003b74  00000000  00000000  00166518  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_loc    00011fbf  00000000  00000000  0016a08c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200001e8 	.word	0x200001e8
 80001ac:	00000000 	.word	0x00000000
 80001b0:	080066dc 	.word	0x080066dc

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200001ec 	.word	0x200001ec
 80001cc:	080066dc 	.word	0x080066dc

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_uldivmod>:
 8000280:	b953      	cbnz	r3, 8000298 <__aeabi_uldivmod+0x18>
 8000282:	b94a      	cbnz	r2, 8000298 <__aeabi_uldivmod+0x18>
 8000284:	2900      	cmp	r1, #0
 8000286:	bf08      	it	eq
 8000288:	2800      	cmpeq	r0, #0
 800028a:	bf1c      	itt	ne
 800028c:	f04f 31ff 	movne.w	r1, #4294967295
 8000290:	f04f 30ff 	movne.w	r0, #4294967295
 8000294:	f000 b96e 	b.w	8000574 <__aeabi_idiv0>
 8000298:	f1ad 0c08 	sub.w	ip, sp, #8
 800029c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002a0:	f000 f806 	bl	80002b0 <__udivmoddi4>
 80002a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ac:	b004      	add	sp, #16
 80002ae:	4770      	bx	lr

080002b0 <__udivmoddi4>:
 80002b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002b4:	9d08      	ldr	r5, [sp, #32]
 80002b6:	4604      	mov	r4, r0
 80002b8:	468c      	mov	ip, r1
 80002ba:	2b00      	cmp	r3, #0
 80002bc:	f040 8083 	bne.w	80003c6 <__udivmoddi4+0x116>
 80002c0:	428a      	cmp	r2, r1
 80002c2:	4617      	mov	r7, r2
 80002c4:	d947      	bls.n	8000356 <__udivmoddi4+0xa6>
 80002c6:	fab2 f282 	clz	r2, r2
 80002ca:	b142      	cbz	r2, 80002de <__udivmoddi4+0x2e>
 80002cc:	f1c2 0020 	rsb	r0, r2, #32
 80002d0:	fa24 f000 	lsr.w	r0, r4, r0
 80002d4:	4091      	lsls	r1, r2
 80002d6:	4097      	lsls	r7, r2
 80002d8:	ea40 0c01 	orr.w	ip, r0, r1
 80002dc:	4094      	lsls	r4, r2
 80002de:	ea4f 4817 	mov.w	r8, r7, lsr #16
 80002e2:	0c23      	lsrs	r3, r4, #16
 80002e4:	fbbc f6f8 	udiv	r6, ip, r8
 80002e8:	fa1f fe87 	uxth.w	lr, r7
 80002ec:	fb08 c116 	mls	r1, r8, r6, ip
 80002f0:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002f4:	fb06 f10e 	mul.w	r1, r6, lr
 80002f8:	4299      	cmp	r1, r3
 80002fa:	d909      	bls.n	8000310 <__udivmoddi4+0x60>
 80002fc:	18fb      	adds	r3, r7, r3
 80002fe:	f106 30ff 	add.w	r0, r6, #4294967295
 8000302:	f080 8119 	bcs.w	8000538 <__udivmoddi4+0x288>
 8000306:	4299      	cmp	r1, r3
 8000308:	f240 8116 	bls.w	8000538 <__udivmoddi4+0x288>
 800030c:	3e02      	subs	r6, #2
 800030e:	443b      	add	r3, r7
 8000310:	1a5b      	subs	r3, r3, r1
 8000312:	b2a4      	uxth	r4, r4
 8000314:	fbb3 f0f8 	udiv	r0, r3, r8
 8000318:	fb08 3310 	mls	r3, r8, r0, r3
 800031c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000320:	fb00 fe0e 	mul.w	lr, r0, lr
 8000324:	45a6      	cmp	lr, r4
 8000326:	d909      	bls.n	800033c <__udivmoddi4+0x8c>
 8000328:	193c      	adds	r4, r7, r4
 800032a:	f100 33ff 	add.w	r3, r0, #4294967295
 800032e:	f080 8105 	bcs.w	800053c <__udivmoddi4+0x28c>
 8000332:	45a6      	cmp	lr, r4
 8000334:	f240 8102 	bls.w	800053c <__udivmoddi4+0x28c>
 8000338:	3802      	subs	r0, #2
 800033a:	443c      	add	r4, r7
 800033c:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000340:	eba4 040e 	sub.w	r4, r4, lr
 8000344:	2600      	movs	r6, #0
 8000346:	b11d      	cbz	r5, 8000350 <__udivmoddi4+0xa0>
 8000348:	40d4      	lsrs	r4, r2
 800034a:	2300      	movs	r3, #0
 800034c:	e9c5 4300 	strd	r4, r3, [r5]
 8000350:	4631      	mov	r1, r6
 8000352:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000356:	b902      	cbnz	r2, 800035a <__udivmoddi4+0xaa>
 8000358:	deff      	udf	#255	; 0xff
 800035a:	fab2 f282 	clz	r2, r2
 800035e:	2a00      	cmp	r2, #0
 8000360:	d150      	bne.n	8000404 <__udivmoddi4+0x154>
 8000362:	1bcb      	subs	r3, r1, r7
 8000364:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000368:	fa1f f887 	uxth.w	r8, r7
 800036c:	2601      	movs	r6, #1
 800036e:	fbb3 fcfe 	udiv	ip, r3, lr
 8000372:	0c21      	lsrs	r1, r4, #16
 8000374:	fb0e 331c 	mls	r3, lr, ip, r3
 8000378:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800037c:	fb08 f30c 	mul.w	r3, r8, ip
 8000380:	428b      	cmp	r3, r1
 8000382:	d907      	bls.n	8000394 <__udivmoddi4+0xe4>
 8000384:	1879      	adds	r1, r7, r1
 8000386:	f10c 30ff 	add.w	r0, ip, #4294967295
 800038a:	d202      	bcs.n	8000392 <__udivmoddi4+0xe2>
 800038c:	428b      	cmp	r3, r1
 800038e:	f200 80e9 	bhi.w	8000564 <__udivmoddi4+0x2b4>
 8000392:	4684      	mov	ip, r0
 8000394:	1ac9      	subs	r1, r1, r3
 8000396:	b2a3      	uxth	r3, r4
 8000398:	fbb1 f0fe 	udiv	r0, r1, lr
 800039c:	fb0e 1110 	mls	r1, lr, r0, r1
 80003a0:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 80003a4:	fb08 f800 	mul.w	r8, r8, r0
 80003a8:	45a0      	cmp	r8, r4
 80003aa:	d907      	bls.n	80003bc <__udivmoddi4+0x10c>
 80003ac:	193c      	adds	r4, r7, r4
 80003ae:	f100 33ff 	add.w	r3, r0, #4294967295
 80003b2:	d202      	bcs.n	80003ba <__udivmoddi4+0x10a>
 80003b4:	45a0      	cmp	r8, r4
 80003b6:	f200 80d9 	bhi.w	800056c <__udivmoddi4+0x2bc>
 80003ba:	4618      	mov	r0, r3
 80003bc:	eba4 0408 	sub.w	r4, r4, r8
 80003c0:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 80003c4:	e7bf      	b.n	8000346 <__udivmoddi4+0x96>
 80003c6:	428b      	cmp	r3, r1
 80003c8:	d909      	bls.n	80003de <__udivmoddi4+0x12e>
 80003ca:	2d00      	cmp	r5, #0
 80003cc:	f000 80b1 	beq.w	8000532 <__udivmoddi4+0x282>
 80003d0:	2600      	movs	r6, #0
 80003d2:	e9c5 0100 	strd	r0, r1, [r5]
 80003d6:	4630      	mov	r0, r6
 80003d8:	4631      	mov	r1, r6
 80003da:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003de:	fab3 f683 	clz	r6, r3
 80003e2:	2e00      	cmp	r6, #0
 80003e4:	d14a      	bne.n	800047c <__udivmoddi4+0x1cc>
 80003e6:	428b      	cmp	r3, r1
 80003e8:	d302      	bcc.n	80003f0 <__udivmoddi4+0x140>
 80003ea:	4282      	cmp	r2, r0
 80003ec:	f200 80b8 	bhi.w	8000560 <__udivmoddi4+0x2b0>
 80003f0:	1a84      	subs	r4, r0, r2
 80003f2:	eb61 0103 	sbc.w	r1, r1, r3
 80003f6:	2001      	movs	r0, #1
 80003f8:	468c      	mov	ip, r1
 80003fa:	2d00      	cmp	r5, #0
 80003fc:	d0a8      	beq.n	8000350 <__udivmoddi4+0xa0>
 80003fe:	e9c5 4c00 	strd	r4, ip, [r5]
 8000402:	e7a5      	b.n	8000350 <__udivmoddi4+0xa0>
 8000404:	f1c2 0320 	rsb	r3, r2, #32
 8000408:	fa20 f603 	lsr.w	r6, r0, r3
 800040c:	4097      	lsls	r7, r2
 800040e:	fa01 f002 	lsl.w	r0, r1, r2
 8000412:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000416:	40d9      	lsrs	r1, r3
 8000418:	4330      	orrs	r0, r6
 800041a:	0c03      	lsrs	r3, r0, #16
 800041c:	fbb1 f6fe 	udiv	r6, r1, lr
 8000420:	fa1f f887 	uxth.w	r8, r7
 8000424:	fb0e 1116 	mls	r1, lr, r6, r1
 8000428:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800042c:	fb06 f108 	mul.w	r1, r6, r8
 8000430:	4299      	cmp	r1, r3
 8000432:	fa04 f402 	lsl.w	r4, r4, r2
 8000436:	d909      	bls.n	800044c <__udivmoddi4+0x19c>
 8000438:	18fb      	adds	r3, r7, r3
 800043a:	f106 3cff 	add.w	ip, r6, #4294967295
 800043e:	f080 808d 	bcs.w	800055c <__udivmoddi4+0x2ac>
 8000442:	4299      	cmp	r1, r3
 8000444:	f240 808a 	bls.w	800055c <__udivmoddi4+0x2ac>
 8000448:	3e02      	subs	r6, #2
 800044a:	443b      	add	r3, r7
 800044c:	1a5b      	subs	r3, r3, r1
 800044e:	b281      	uxth	r1, r0
 8000450:	fbb3 f0fe 	udiv	r0, r3, lr
 8000454:	fb0e 3310 	mls	r3, lr, r0, r3
 8000458:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800045c:	fb00 f308 	mul.w	r3, r0, r8
 8000460:	428b      	cmp	r3, r1
 8000462:	d907      	bls.n	8000474 <__udivmoddi4+0x1c4>
 8000464:	1879      	adds	r1, r7, r1
 8000466:	f100 3cff 	add.w	ip, r0, #4294967295
 800046a:	d273      	bcs.n	8000554 <__udivmoddi4+0x2a4>
 800046c:	428b      	cmp	r3, r1
 800046e:	d971      	bls.n	8000554 <__udivmoddi4+0x2a4>
 8000470:	3802      	subs	r0, #2
 8000472:	4439      	add	r1, r7
 8000474:	1acb      	subs	r3, r1, r3
 8000476:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 800047a:	e778      	b.n	800036e <__udivmoddi4+0xbe>
 800047c:	f1c6 0c20 	rsb	ip, r6, #32
 8000480:	fa03 f406 	lsl.w	r4, r3, r6
 8000484:	fa22 f30c 	lsr.w	r3, r2, ip
 8000488:	431c      	orrs	r4, r3
 800048a:	fa20 f70c 	lsr.w	r7, r0, ip
 800048e:	fa01 f306 	lsl.w	r3, r1, r6
 8000492:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000496:	fa21 f10c 	lsr.w	r1, r1, ip
 800049a:	431f      	orrs	r7, r3
 800049c:	0c3b      	lsrs	r3, r7, #16
 800049e:	fbb1 f9fe 	udiv	r9, r1, lr
 80004a2:	fa1f f884 	uxth.w	r8, r4
 80004a6:	fb0e 1119 	mls	r1, lr, r9, r1
 80004aa:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 80004ae:	fb09 fa08 	mul.w	sl, r9, r8
 80004b2:	458a      	cmp	sl, r1
 80004b4:	fa02 f206 	lsl.w	r2, r2, r6
 80004b8:	fa00 f306 	lsl.w	r3, r0, r6
 80004bc:	d908      	bls.n	80004d0 <__udivmoddi4+0x220>
 80004be:	1861      	adds	r1, r4, r1
 80004c0:	f109 30ff 	add.w	r0, r9, #4294967295
 80004c4:	d248      	bcs.n	8000558 <__udivmoddi4+0x2a8>
 80004c6:	458a      	cmp	sl, r1
 80004c8:	d946      	bls.n	8000558 <__udivmoddi4+0x2a8>
 80004ca:	f1a9 0902 	sub.w	r9, r9, #2
 80004ce:	4421      	add	r1, r4
 80004d0:	eba1 010a 	sub.w	r1, r1, sl
 80004d4:	b2bf      	uxth	r7, r7
 80004d6:	fbb1 f0fe 	udiv	r0, r1, lr
 80004da:	fb0e 1110 	mls	r1, lr, r0, r1
 80004de:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 80004e2:	fb00 f808 	mul.w	r8, r0, r8
 80004e6:	45b8      	cmp	r8, r7
 80004e8:	d907      	bls.n	80004fa <__udivmoddi4+0x24a>
 80004ea:	19e7      	adds	r7, r4, r7
 80004ec:	f100 31ff 	add.w	r1, r0, #4294967295
 80004f0:	d22e      	bcs.n	8000550 <__udivmoddi4+0x2a0>
 80004f2:	45b8      	cmp	r8, r7
 80004f4:	d92c      	bls.n	8000550 <__udivmoddi4+0x2a0>
 80004f6:	3802      	subs	r0, #2
 80004f8:	4427      	add	r7, r4
 80004fa:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80004fe:	eba7 0708 	sub.w	r7, r7, r8
 8000502:	fba0 8902 	umull	r8, r9, r0, r2
 8000506:	454f      	cmp	r7, r9
 8000508:	46c6      	mov	lr, r8
 800050a:	4649      	mov	r1, r9
 800050c:	d31a      	bcc.n	8000544 <__udivmoddi4+0x294>
 800050e:	d017      	beq.n	8000540 <__udivmoddi4+0x290>
 8000510:	b15d      	cbz	r5, 800052a <__udivmoddi4+0x27a>
 8000512:	ebb3 020e 	subs.w	r2, r3, lr
 8000516:	eb67 0701 	sbc.w	r7, r7, r1
 800051a:	fa07 fc0c 	lsl.w	ip, r7, ip
 800051e:	40f2      	lsrs	r2, r6
 8000520:	ea4c 0202 	orr.w	r2, ip, r2
 8000524:	40f7      	lsrs	r7, r6
 8000526:	e9c5 2700 	strd	r2, r7, [r5]
 800052a:	2600      	movs	r6, #0
 800052c:	4631      	mov	r1, r6
 800052e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000532:	462e      	mov	r6, r5
 8000534:	4628      	mov	r0, r5
 8000536:	e70b      	b.n	8000350 <__udivmoddi4+0xa0>
 8000538:	4606      	mov	r6, r0
 800053a:	e6e9      	b.n	8000310 <__udivmoddi4+0x60>
 800053c:	4618      	mov	r0, r3
 800053e:	e6fd      	b.n	800033c <__udivmoddi4+0x8c>
 8000540:	4543      	cmp	r3, r8
 8000542:	d2e5      	bcs.n	8000510 <__udivmoddi4+0x260>
 8000544:	ebb8 0e02 	subs.w	lr, r8, r2
 8000548:	eb69 0104 	sbc.w	r1, r9, r4
 800054c:	3801      	subs	r0, #1
 800054e:	e7df      	b.n	8000510 <__udivmoddi4+0x260>
 8000550:	4608      	mov	r0, r1
 8000552:	e7d2      	b.n	80004fa <__udivmoddi4+0x24a>
 8000554:	4660      	mov	r0, ip
 8000556:	e78d      	b.n	8000474 <__udivmoddi4+0x1c4>
 8000558:	4681      	mov	r9, r0
 800055a:	e7b9      	b.n	80004d0 <__udivmoddi4+0x220>
 800055c:	4666      	mov	r6, ip
 800055e:	e775      	b.n	800044c <__udivmoddi4+0x19c>
 8000560:	4630      	mov	r0, r6
 8000562:	e74a      	b.n	80003fa <__udivmoddi4+0x14a>
 8000564:	f1ac 0c02 	sub.w	ip, ip, #2
 8000568:	4439      	add	r1, r7
 800056a:	e713      	b.n	8000394 <__udivmoddi4+0xe4>
 800056c:	3802      	subs	r0, #2
 800056e:	443c      	add	r4, r7
 8000570:	e724      	b.n	80003bc <__udivmoddi4+0x10c>
 8000572:	bf00      	nop

08000574 <__aeabi_idiv0>:
 8000574:	4770      	bx	lr
 8000576:	bf00      	nop

08000578 <vApplicationGetIdleTaskMemory>:
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 8000578:	4b03      	ldr	r3, [pc, #12]	; (8000588 <vApplicationGetIdleTaskMemory+0x10>)
 800057a:	6003      	str	r3, [r0, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 800057c:	4b03      	ldr	r3, [pc, #12]	; (800058c <vApplicationGetIdleTaskMemory+0x14>)
 800057e:	600b      	str	r3, [r1, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 8000580:	2380      	movs	r3, #128	; 0x80
 8000582:	6013      	str	r3, [r2, #0]
  /* place for user code */
}
 8000584:	4770      	bx	lr
 8000586:	bf00      	nop
 8000588:	20000404 	.word	0x20000404
 800058c:	20000204 	.word	0x20000204

08000590 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000590:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000594:	b08d      	sub	sp, #52	; 0x34
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000596:	2400      	movs	r4, #0
 8000598:	9407      	str	r4, [sp, #28]
 800059a:	9408      	str	r4, [sp, #32]
 800059c:	9409      	str	r4, [sp, #36]	; 0x24
 800059e:	940a      	str	r4, [sp, #40]	; 0x28
 80005a0:	940b      	str	r4, [sp, #44]	; 0x2c

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80005a2:	9401      	str	r4, [sp, #4]
 80005a4:	4b68      	ldr	r3, [pc, #416]	; (8000748 <MX_GPIO_Init+0x1b8>)
 80005a6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80005a8:	f042 0210 	orr.w	r2, r2, #16
 80005ac:	631a      	str	r2, [r3, #48]	; 0x30
 80005ae:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80005b0:	f002 0210 	and.w	r2, r2, #16
 80005b4:	9201      	str	r2, [sp, #4]
 80005b6:	9a01      	ldr	r2, [sp, #4]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80005b8:	9402      	str	r4, [sp, #8]
 80005ba:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80005bc:	f042 0204 	orr.w	r2, r2, #4
 80005c0:	631a      	str	r2, [r3, #48]	; 0x30
 80005c2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80005c4:	f002 0204 	and.w	r2, r2, #4
 80005c8:	9202      	str	r2, [sp, #8]
 80005ca:	9a02      	ldr	r2, [sp, #8]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80005cc:	9403      	str	r4, [sp, #12]
 80005ce:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80005d0:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80005d4:	631a      	str	r2, [r3, #48]	; 0x30
 80005d6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80005d8:	f002 0280 	and.w	r2, r2, #128	; 0x80
 80005dc:	9203      	str	r2, [sp, #12]
 80005de:	9a03      	ldr	r2, [sp, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80005e0:	9404      	str	r4, [sp, #16]
 80005e2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80005e4:	f042 0201 	orr.w	r2, r2, #1
 80005e8:	631a      	str	r2, [r3, #48]	; 0x30
 80005ea:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80005ec:	f002 0201 	and.w	r2, r2, #1
 80005f0:	9204      	str	r2, [sp, #16]
 80005f2:	9a04      	ldr	r2, [sp, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80005f4:	9405      	str	r4, [sp, #20]
 80005f6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80005f8:	f042 0202 	orr.w	r2, r2, #2
 80005fc:	631a      	str	r2, [r3, #48]	; 0x30
 80005fe:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000600:	f002 0202 	and.w	r2, r2, #2
 8000604:	9205      	str	r2, [sp, #20]
 8000606:	9a05      	ldr	r2, [sp, #20]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000608:	9406      	str	r4, [sp, #24]
 800060a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800060c:	f042 0208 	orr.w	r2, r2, #8
 8000610:	631a      	str	r2, [r3, #48]	; 0x30
 8000612:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000614:	f003 0308 	and.w	r3, r3, #8
 8000618:	9306      	str	r3, [sp, #24]
 800061a:	9b06      	ldr	r3, [sp, #24]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CS_I2C_SPI_GPIO_Port, CS_I2C_SPI_Pin, GPIO_PIN_RESET);
 800061c:	f8df 8130 	ldr.w	r8, [pc, #304]	; 8000750 <MX_GPIO_Init+0x1c0>
 8000620:	4622      	mov	r2, r4
 8000622:	2108      	movs	r1, #8
 8000624:	4640      	mov	r0, r8
 8000626:	f000 fccb 	bl	8000fc0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_SET);
 800062a:	4f48      	ldr	r7, [pc, #288]	; (800074c <MX_GPIO_Init+0x1bc>)
 800062c:	2201      	movs	r2, #1
 800062e:	4611      	mov	r1, r2
 8000630:	4638      	mov	r0, r7
 8000632:	f000 fcc5 	bl	8000fc0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 8000636:	f8df 911c 	ldr.w	r9, [pc, #284]	; 8000754 <MX_GPIO_Init+0x1c4>
 800063a:	4622      	mov	r2, r4
 800063c:	f24f 0110 	movw	r1, #61456	; 0xf010
 8000640:	4648      	mov	r0, r9
 8000642:	f000 fcbd 	bl	8000fc0 <HAL_GPIO_WritePin>
                          |Audio_RST_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : CS_I2C_SPI_Pin */
  GPIO_InitStruct.Pin = CS_I2C_SPI_Pin;
 8000646:	2508      	movs	r5, #8
 8000648:	9507      	str	r5, [sp, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800064a:	2601      	movs	r6, #1
 800064c:	9608      	str	r6, [sp, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800064e:	9409      	str	r4, [sp, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000650:	940a      	str	r4, [sp, #40]	; 0x28
  HAL_GPIO_Init(CS_I2C_SPI_GPIO_Port, &GPIO_InitStruct);
 8000652:	a907      	add	r1, sp, #28
 8000654:	4640      	mov	r0, r8
 8000656:	f000 fbc9 	bl	8000dec <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin;
 800065a:	9607      	str	r6, [sp, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800065c:	9608      	str	r6, [sp, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800065e:	9409      	str	r4, [sp, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000660:	940a      	str	r4, [sp, #40]	; 0x28
  HAL_GPIO_Init(OTG_FS_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8000662:	a907      	add	r1, sp, #28
 8000664:	4638      	mov	r0, r7
 8000666:	f000 fbc1 	bl	8000dec <HAL_GPIO_Init>

  /*Configure GPIO pin : PDM_OUT_Pin */
  GPIO_InitStruct.Pin = PDM_OUT_Pin;
 800066a:	9507      	str	r5, [sp, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800066c:	2502      	movs	r5, #2
 800066e:	9508      	str	r5, [sp, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000670:	9409      	str	r4, [sp, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000672:	940a      	str	r4, [sp, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000674:	f04f 0a05 	mov.w	sl, #5
 8000678:	f8cd a02c 	str.w	sl, [sp, #44]	; 0x2c
  HAL_GPIO_Init(PDM_OUT_GPIO_Port, &GPIO_InitStruct);
 800067c:	a907      	add	r1, sp, #28
 800067e:	4638      	mov	r0, r7
 8000680:	f000 fbb4 	bl	8000dec <HAL_GPIO_Init>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000684:	9607      	str	r6, [sp, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8000686:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 800068a:	9308      	str	r3, [sp, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800068c:	9409      	str	r4, [sp, #36]	; 0x24
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 800068e:	f8df b0c8 	ldr.w	fp, [pc, #200]	; 8000758 <MX_GPIO_Init+0x1c8>
 8000692:	a907      	add	r1, sp, #28
 8000694:	4658      	mov	r0, fp
 8000696:	f000 fba9 	bl	8000dec <HAL_GPIO_Init>

  /*Configure GPIO pin : I2S3_WS_Pin */
  GPIO_InitStruct.Pin = I2S3_WS_Pin;
 800069a:	2310      	movs	r3, #16
 800069c:	9307      	str	r3, [sp, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800069e:	9508      	str	r5, [sp, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006a0:	9409      	str	r4, [sp, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80006a2:	940a      	str	r4, [sp, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 80006a4:	2306      	movs	r3, #6
 80006a6:	930b      	str	r3, [sp, #44]	; 0x2c
  HAL_GPIO_Init(I2S3_WS_GPIO_Port, &GPIO_InitStruct);
 80006a8:	a907      	add	r1, sp, #28
 80006aa:	4658      	mov	r0, fp
 80006ac:	f000 fb9e 	bl	8000dec <HAL_GPIO_Init>

  /*Configure GPIO pins : SPI1_SCK_Pin SPI1_MISO_Pin SPI1_MOSI_Pin */
  GPIO_InitStruct.Pin = SPI1_SCK_Pin|SPI1_MISO_Pin|SPI1_MOSI_Pin;
 80006b0:	23e0      	movs	r3, #224	; 0xe0
 80006b2:	9307      	str	r3, [sp, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80006b4:	9508      	str	r5, [sp, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006b6:	9409      	str	r4, [sp, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80006b8:	940a      	str	r4, [sp, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80006ba:	f8cd a02c 	str.w	sl, [sp, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80006be:	a907      	add	r1, sp, #28
 80006c0:	4658      	mov	r0, fp
 80006c2:	f000 fb93 	bl	8000dec <HAL_GPIO_Init>

  /*Configure GPIO pin : BOOT1_Pin */
  GPIO_InitStruct.Pin = BOOT1_Pin;
 80006c6:	2304      	movs	r3, #4
 80006c8:	9307      	str	r3, [sp, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80006ca:	9408      	str	r4, [sp, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006cc:	9409      	str	r4, [sp, #36]	; 0x24
  HAL_GPIO_Init(BOOT1_GPIO_Port, &GPIO_InitStruct);
 80006ce:	f50b 6b80 	add.w	fp, fp, #1024	; 0x400
 80006d2:	a907      	add	r1, sp, #28
 80006d4:	4658      	mov	r0, fp
 80006d6:	f000 fb89 	bl	8000dec <HAL_GPIO_Init>

  /*Configure GPIO pin : CLK_IN_Pin */
  GPIO_InitStruct.Pin = CLK_IN_Pin;
 80006da:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80006de:	9307      	str	r3, [sp, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80006e0:	9508      	str	r5, [sp, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006e2:	9409      	str	r4, [sp, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80006e4:	940a      	str	r4, [sp, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80006e6:	f8cd a02c 	str.w	sl, [sp, #44]	; 0x2c
  HAL_GPIO_Init(CLK_IN_GPIO_Port, &GPIO_InitStruct);
 80006ea:	a907      	add	r1, sp, #28
 80006ec:	4658      	mov	r0, fp
 80006ee:	f000 fb7d 	bl	8000dec <HAL_GPIO_Init>

  /*Configure GPIO pins : LD4_Pin LD3_Pin LD5_Pin LD6_Pin
                           Audio_RST_Pin */
  GPIO_InitStruct.Pin = LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 80006f2:	f24f 0310 	movw	r3, #61456	; 0xf010
 80006f6:	9307      	str	r3, [sp, #28]
                          |Audio_RST_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80006f8:	9608      	str	r6, [sp, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006fa:	9409      	str	r4, [sp, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80006fc:	940a      	str	r4, [sp, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80006fe:	a907      	add	r1, sp, #28
 8000700:	4648      	mov	r0, r9
 8000702:	f000 fb73 	bl	8000dec <HAL_GPIO_Init>

  /*Configure GPIO pins : I2S3_MCK_Pin I2S3_SCK_Pin I2S3_SD_Pin */
  GPIO_InitStruct.Pin = I2S3_MCK_Pin|I2S3_SCK_Pin|I2S3_SD_Pin;
 8000706:	f44f 53a4 	mov.w	r3, #5248	; 0x1480
 800070a:	9307      	str	r3, [sp, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800070c:	9508      	str	r5, [sp, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800070e:	9409      	str	r4, [sp, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000710:	940a      	str	r4, [sp, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8000712:	2306      	movs	r3, #6
 8000714:	930b      	str	r3, [sp, #44]	; 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000716:	a907      	add	r1, sp, #28
 8000718:	4638      	mov	r0, r7
 800071a:	f000 fb67 	bl	8000dec <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_OverCurrent_Pin */
  GPIO_InitStruct.Pin = OTG_FS_OverCurrent_Pin;
 800071e:	2320      	movs	r3, #32
 8000720:	9307      	str	r3, [sp, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000722:	9408      	str	r4, [sp, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000724:	9409      	str	r4, [sp, #36]	; 0x24
  HAL_GPIO_Init(OTG_FS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8000726:	a907      	add	r1, sp, #28
 8000728:	4648      	mov	r0, r9
 800072a:	f000 fb5f 	bl	8000dec <HAL_GPIO_Init>

  /*Configure GPIO pin : MEMS_INT2_Pin */
  GPIO_InitStruct.Pin = MEMS_INT2_Pin;
 800072e:	9507      	str	r5, [sp, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8000730:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 8000734:	9308      	str	r3, [sp, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000736:	9409      	str	r4, [sp, #36]	; 0x24
  HAL_GPIO_Init(MEMS_INT2_GPIO_Port, &GPIO_InitStruct);
 8000738:	a907      	add	r1, sp, #28
 800073a:	4640      	mov	r0, r8
 800073c:	f000 fb56 	bl	8000dec <HAL_GPIO_Init>

}
 8000740:	b00d      	add	sp, #52	; 0x34
 8000742:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8000746:	bf00      	nop
 8000748:	40023800 	.word	0x40023800
 800074c:	40020800 	.word	0x40020800
 8000750:	40021000 	.word	0x40021000
 8000754:	40020c00 	.word	0x40020c00
 8000758:	40020000 	.word	0x40020000

0800075c <LoggerTask>:
}



void LoggerTask(void const * argument)
{
 800075c:	b510      	push	{r4, lr}
 800075e:	b084      	sub	sp, #16
 8000760:	e007      	b.n	8000772 <LoggerTask+0x16>
    for(;;)
    {
        event = osMessageGet(pos_Queue, osWaitForever);
        if (event.status == osEventMessage)
        {
            CDC_Transmit_FS((uint8_t *) (char*) event.value.v, strlen((char*) event.value.v));
 8000762:	9c02      	ldr	r4, [sp, #8]
 8000764:	4620      	mov	r0, r4
 8000766:	f7ff fd33 	bl	80001d0 <strlen>
 800076a:	b281      	uxth	r1, r0
 800076c:	4620      	mov	r0, r4
 800076e:	f005 f945 	bl	80059fc <CDC_Transmit_FS>
        event = osMessageGet(pos_Queue, osWaitForever);
 8000772:	f04f 32ff 	mov.w	r2, #4294967295
 8000776:	4b04      	ldr	r3, [pc, #16]	; (8000788 <LoggerTask+0x2c>)
 8000778:	6819      	ldr	r1, [r3, #0]
 800077a:	a801      	add	r0, sp, #4
 800077c:	f003 fd36 	bl	80041ec <osMessageGet>
        if (event.status == osEventMessage)
 8000780:	9b01      	ldr	r3, [sp, #4]
 8000782:	2b10      	cmp	r3, #16
 8000784:	d1f5      	bne.n	8000772 <LoggerTask+0x16>
 8000786:	e7ec      	b.n	8000762 <LoggerTask+0x6>
 8000788:	20004434 	.word	0x20004434

0800078c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800078c:	b510      	push	{r4, lr}
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800078e:	b672      	cpsid	i
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  char * str = (char*) malloc(sizeof (char) * 100);
 8000790:	2064      	movs	r0, #100	; 0x64
 8000792:	f005 fb65 	bl	8005e60 <malloc>
 8000796:	4604      	mov	r4, r0
  while (1)
  {
      osDelay(1000);
 8000798:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800079c:	f003 fcd6 	bl	800414c <osDelay>
      sprintf(str, "%s!\n\r", "Error initializing I2C");
 80007a0:	4a06      	ldr	r2, [pc, #24]	; (80007bc <Error_Handler+0x30>)
 80007a2:	4907      	ldr	r1, [pc, #28]	; (80007c0 <Error_Handler+0x34>)
 80007a4:	4620      	mov	r0, r4
 80007a6:	f005 fc33 	bl	8006010 <siprintf>
      osMessagePut(pos_Queue, (uint32_t) str, osWaitForever);
 80007aa:	f04f 32ff 	mov.w	r2, #4294967295
 80007ae:	4621      	mov	r1, r4
 80007b0:	4b04      	ldr	r3, [pc, #16]	; (80007c4 <Error_Handler+0x38>)
 80007b2:	6818      	ldr	r0, [r3, #0]
 80007b4:	f003 fce6 	bl	8004184 <osMessagePut>
  while (1)
 80007b8:	e7ee      	b.n	8000798 <Error_Handler+0xc>
 80007ba:	bf00      	nop
 80007bc:	08006750 	.word	0x08006750
 80007c0:	08006768 	.word	0x08006768
 80007c4:	20004434 	.word	0x20004434

080007c8 <SystemClock_Config>:
{
 80007c8:	b500      	push	{lr}
 80007ca:	b095      	sub	sp, #84	; 0x54
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80007cc:	2230      	movs	r2, #48	; 0x30
 80007ce:	2100      	movs	r1, #0
 80007d0:	a808      	add	r0, sp, #32
 80007d2:	f005 fb5b 	bl	8005e8c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80007d6:	2300      	movs	r3, #0
 80007d8:	9303      	str	r3, [sp, #12]
 80007da:	9304      	str	r3, [sp, #16]
 80007dc:	9305      	str	r3, [sp, #20]
 80007de:	9306      	str	r3, [sp, #24]
 80007e0:	9307      	str	r3, [sp, #28]
  __HAL_RCC_PWR_CLK_ENABLE();
 80007e2:	9301      	str	r3, [sp, #4]
 80007e4:	4a21      	ldr	r2, [pc, #132]	; (800086c <SystemClock_Config+0xa4>)
 80007e6:	6c11      	ldr	r1, [r2, #64]	; 0x40
 80007e8:	f041 5180 	orr.w	r1, r1, #268435456	; 0x10000000
 80007ec:	6411      	str	r1, [r2, #64]	; 0x40
 80007ee:	6c12      	ldr	r2, [r2, #64]	; 0x40
 80007f0:	f002 5280 	and.w	r2, r2, #268435456	; 0x10000000
 80007f4:	9201      	str	r2, [sp, #4]
 80007f6:	9a01      	ldr	r2, [sp, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80007f8:	9302      	str	r3, [sp, #8]
 80007fa:	4b1d      	ldr	r3, [pc, #116]	; (8000870 <SystemClock_Config+0xa8>)
 80007fc:	681a      	ldr	r2, [r3, #0]
 80007fe:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8000802:	601a      	str	r2, [r3, #0]
 8000804:	681b      	ldr	r3, [r3, #0]
 8000806:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800080a:	9302      	str	r3, [sp, #8]
 800080c:	9b02      	ldr	r3, [sp, #8]
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800080e:	2301      	movs	r3, #1
 8000810:	9308      	str	r3, [sp, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000812:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000816:	9309      	str	r3, [sp, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000818:	2302      	movs	r3, #2
 800081a:	930e      	str	r3, [sp, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800081c:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 8000820:	920f      	str	r2, [sp, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8000822:	2208      	movs	r2, #8
 8000824:	9210      	str	r2, [sp, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 8000826:	f44f 72a8 	mov.w	r2, #336	; 0x150
 800082a:	9211      	str	r2, [sp, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800082c:	9312      	str	r3, [sp, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 800082e:	2307      	movs	r3, #7
 8000830:	9313      	str	r3, [sp, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000832:	a808      	add	r0, sp, #32
 8000834:	f001 fc6e 	bl	8002114 <HAL_RCC_OscConfig>
 8000838:	b998      	cbnz	r0, 8000862 <SystemClock_Config+0x9a>
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800083a:	230f      	movs	r3, #15
 800083c:	9303      	str	r3, [sp, #12]
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800083e:	2302      	movs	r3, #2
 8000840:	9304      	str	r3, [sp, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000842:	2300      	movs	r3, #0
 8000844:	9305      	str	r3, [sp, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000846:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 800084a:	9306      	str	r3, [sp, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 800084c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000850:	9307      	str	r3, [sp, #28]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8000852:	2105      	movs	r1, #5
 8000854:	a803      	add	r0, sp, #12
 8000856:	f001 febf 	bl	80025d8 <HAL_RCC_ClockConfig>
 800085a:	b920      	cbnz	r0, 8000866 <SystemClock_Config+0x9e>
}
 800085c:	b015      	add	sp, #84	; 0x54
 800085e:	f85d fb04 	ldr.w	pc, [sp], #4
    Error_Handler();
 8000862:	f7ff ff93 	bl	800078c <Error_Handler>
    Error_Handler();
 8000866:	f7ff ff91 	bl	800078c <Error_Handler>
 800086a:	bf00      	nop
 800086c:	40023800 	.word	0x40023800
 8000870:	40007000 	.word	0x40007000

08000874 <main>:
{
 8000874:	b500      	push	{lr}
 8000876:	b093      	sub	sp, #76	; 0x4c
  HAL_Init();
 8000878:	f000 fa0e 	bl	8000c98 <HAL_Init>
  SystemClock_Config();
 800087c:	f7ff ffa4 	bl	80007c8 <SystemClock_Config>
  MX_GPIO_Init();
 8000880:	f7ff fe86 	bl	8000590 <MX_GPIO_Init>
  MX_USB_DEVICE_Init();
 8000884:	f005 f868 	bl	8005958 <MX_USB_DEVICE_Init>
  osMessageQDef(pos_Queue, QUEUE_SIZE, const char*);
 8000888:	4c15      	ldr	r4, [pc, #84]	; (80008e0 <main+0x6c>)
 800088a:	ad0e      	add	r5, sp, #56	; 0x38
 800088c:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8000890:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
  pos_Queue = osMessageCreate(osMessageQ(pos_Queue), NULL);
 8000894:	2100      	movs	r1, #0
 8000896:	4628      	mov	r0, r5
 8000898:	f003 fc5f 	bl	800415a <osMessageCreate>
 800089c:	4b11      	ldr	r3, [pc, #68]	; (80008e4 <main+0x70>)
 800089e:	6018      	str	r0, [r3, #0]
  osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 128);
 80008a0:	ad07      	add	r5, sp, #28
 80008a2:	f104 0610 	add.w	r6, r4, #16
 80008a6:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 80008a8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80008aa:	e896 0007 	ldmia.w	r6, {r0, r1, r2}
 80008ae:	e885 0007 	stmia.w	r5, {r0, r1, r2}
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 80008b2:	2100      	movs	r1, #0
 80008b4:	a807      	add	r0, sp, #28
 80008b6:	f003 fc14 	bl	80040e2 <osThreadCreate>
 80008ba:	4b0b      	ldr	r3, [pc, #44]	; (80008e8 <main+0x74>)
 80008bc:	6018      	str	r0, [r3, #0]
  osThreadDef(logger, LoggerTask, osPriorityNormal, 0, 128);
 80008be:	466d      	mov	r5, sp
 80008c0:	342c      	adds	r4, #44	; 0x2c
 80008c2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80008c4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80008c6:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 80008ca:	e885 0007 	stmia.w	r5, {r0, r1, r2}
  logThread = osThreadCreate(osThread(logger), NULL);
 80008ce:	2100      	movs	r1, #0
 80008d0:	4668      	mov	r0, sp
 80008d2:	f003 fc06 	bl	80040e2 <osThreadCreate>
 80008d6:	4b05      	ldr	r3, [pc, #20]	; (80008ec <main+0x78>)
 80008d8:	6018      	str	r0, [r3, #0]
  osKernelStart();
 80008da:	f003 fbfd 	bl	80040d8 <osKernelStart>
  while (1)
 80008de:	e7fe      	b.n	80008de <main+0x6a>
 80008e0:	080066f4 	.word	0x080066f4
 80008e4:	20004434 	.word	0x20004434
 80008e8:	200043d8 	.word	0x200043d8
 80008ec:	200043dc 	.word	0x200043dc

080008f0 <MX_I2C1_Init>:
{
 80008f0:	b508      	push	{r3, lr}
  hi2c1.Instance = I2C1;
 80008f2:	480b      	ldr	r0, [pc, #44]	; (8000920 <MX_I2C1_Init+0x30>)
 80008f4:	4b0b      	ldr	r3, [pc, #44]	; (8000924 <MX_I2C1_Init+0x34>)
 80008f6:	6003      	str	r3, [r0, #0]
  hi2c1.Init.ClockSpeed = 100000;
 80008f8:	4b0b      	ldr	r3, [pc, #44]	; (8000928 <MX_I2C1_Init+0x38>)
 80008fa:	6043      	str	r3, [r0, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80008fc:	2300      	movs	r3, #0
 80008fe:	6083      	str	r3, [r0, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8000900:	60c3      	str	r3, [r0, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000902:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000906:	6102      	str	r2, [r0, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000908:	6143      	str	r3, [r0, #20]
  hi2c1.Init.OwnAddress2 = 0;
 800090a:	6183      	str	r3, [r0, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800090c:	61c3      	str	r3, [r0, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800090e:	6203      	str	r3, [r0, #32]
  status = HAL_I2C_Init(&hi2c1);
 8000910:	f000 fcb2 	bl	8001278 <HAL_I2C_Init>
 8000914:	4b05      	ldr	r3, [pc, #20]	; (800092c <MX_I2C1_Init+0x3c>)
 8000916:	7018      	strb	r0, [r3, #0]
  if (status != HAL_OK)
 8000918:	b900      	cbnz	r0, 800091c <MX_I2C1_Init+0x2c>
}
 800091a:	bd08      	pop	{r3, pc}
    Error_Handler();
 800091c:	f7ff ff36 	bl	800078c <Error_Handler>
 8000920:	200043e0 	.word	0x200043e0
 8000924:	40005400 	.word	0x40005400
 8000928:	000186a0 	.word	0x000186a0
 800092c:	20004438 	.word	0x20004438

08000930 <StartDefaultTask>:
{
 8000930:	b570      	push	{r4, r5, r6, lr}
 8000932:	b082      	sub	sp, #8
  MX_USB_DEVICE_Init();
 8000934:	f005 f810 	bl	8005958 <MX_USB_DEVICE_Init>
  MX_I2C1_Init();
 8000938:	f7ff ffda 	bl	80008f0 <MX_I2C1_Init>
  char * str = (char*) malloc(sizeof (char) * 100);
 800093c:	2064      	movs	r0, #100	; 0x64
 800093e:	f005 fa8f 	bl	8005e60 <malloc>
 8000942:	4604      	mov	r4, r0
 8000944:	e02f      	b.n	80009a6 <StartDefaultTask+0x76>
            osDelay(1000);
 8000946:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800094a:	f003 fbff 	bl	800414c <osDelay>
            sprintf(str, "%s!\n\r", "Setup is not ok");
 800094e:	4e2c      	ldr	r6, [pc, #176]	; (8000a00 <StartDefaultTask+0xd0>)
 8000950:	4a2c      	ldr	r2, [pc, #176]	; (8000a04 <StartDefaultTask+0xd4>)
 8000952:	4631      	mov	r1, r6
 8000954:	4620      	mov	r0, r4
 8000956:	f005 fb5b 	bl	8006010 <siprintf>
            osMessagePut(pos_Queue, (uint32_t) str, osWaitForever);
 800095a:	4d2b      	ldr	r5, [pc, #172]	; (8000a08 <StartDefaultTask+0xd8>)
 800095c:	f04f 32ff 	mov.w	r2, #4294967295
 8000960:	4621      	mov	r1, r4
 8000962:	6828      	ldr	r0, [r5, #0]
 8000964:	f003 fc0e 	bl	8004184 <osMessagePut>
            osDelay(100);
 8000968:	2064      	movs	r0, #100	; 0x64
 800096a:	f003 fbef 	bl	800414c <osDelay>
            sprintf(str, "%s %d!\n\r", "status is ", status.status);
 800096e:	f89d 3004 	ldrb.w	r3, [sp, #4]
 8000972:	4a26      	ldr	r2, [pc, #152]	; (8000a0c <StartDefaultTask+0xdc>)
 8000974:	4926      	ldr	r1, [pc, #152]	; (8000a10 <StartDefaultTask+0xe0>)
 8000976:	4620      	mov	r0, r4
 8000978:	f005 fb4a 	bl	8006010 <siprintf>
            osMessagePut(pos_Queue, (uint32_t) str, osWaitForever);
 800097c:	f04f 32ff 	mov.w	r2, #4294967295
 8000980:	4621      	mov	r1, r4
 8000982:	6828      	ldr	r0, [r5, #0]
 8000984:	f003 fbfe 	bl	8004184 <osMessagePut>
            osDelay(100);
 8000988:	2064      	movs	r0, #100	; 0x64
 800098a:	f003 fbdf 	bl	800414c <osDelay>
            sprintf(str, "%s!\n\r", hi2c1.Init.DualAddressMode);
 800098e:	4b21      	ldr	r3, [pc, #132]	; (8000a14 <StartDefaultTask+0xe4>)
 8000990:	695a      	ldr	r2, [r3, #20]
 8000992:	4631      	mov	r1, r6
 8000994:	4620      	mov	r0, r4
 8000996:	f005 fb3b 	bl	8006010 <siprintf>
            osMessagePut(pos_Queue, (uint32_t) str, osWaitForever);
 800099a:	f04f 32ff 	mov.w	r2, #4294967295
 800099e:	4621      	mov	r1, r4
 80009a0:	6828      	ldr	r0, [r5, #0]
 80009a2:	f003 fbef 	bl	8004184 <osMessagePut>
        osDelay(1000);
 80009a6:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80009aa:	f003 fbcf 	bl	800414c <osDelay>
        sprintf(str, "%s! %d\n\r", "wait for setup", status);
 80009ae:	4b1a      	ldr	r3, [pc, #104]	; (8000a18 <StartDefaultTask+0xe8>)
 80009b0:	781b      	ldrb	r3, [r3, #0]
 80009b2:	4a1a      	ldr	r2, [pc, #104]	; (8000a1c <StartDefaultTask+0xec>)
 80009b4:	491a      	ldr	r1, [pc, #104]	; (8000a20 <StartDefaultTask+0xf0>)
 80009b6:	4620      	mov	r0, r4
 80009b8:	f005 fb2a 	bl	8006010 <siprintf>
        osMessagePut(pos_Queue, (uint32_t) str, osWaitForever);
 80009bc:	f04f 32ff 	mov.w	r2, #4294967295
 80009c0:	4621      	mov	r1, r4
 80009c2:	4b11      	ldr	r3, [pc, #68]	; (8000a08 <StartDefaultTask+0xd8>)
 80009c4:	6818      	ldr	r0, [r3, #0]
 80009c6:	f003 fbdd 	bl	8004184 <osMessagePut>
        struct StatusStruct status = setup(&hi2c1, RESOLUTION_QQVGA_160x120, PIXEL_RGB565);
 80009ca:	2200      	movs	r2, #0
 80009cc:	21a0      	movs	r1, #160	; 0xa0
 80009ce:	4811      	ldr	r0, [pc, #68]	; (8000a14 <StartDefaultTask+0xe4>)
 80009d0:	f000 f852 	bl	8000a78 <setup>
 80009d4:	f8ad 0004 	strh.w	r0, [sp, #4]
        if (status.value) {
 80009d8:	f410 4f7f 	tst.w	r0, #65280	; 0xff00
 80009dc:	d0b3      	beq.n	8000946 <StartDefaultTask+0x16>
            osDelay(1000);
 80009de:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80009e2:	f003 fbb3 	bl	800414c <osDelay>
            sprintf(str, "%s!\n\r", "Setup is ok");
 80009e6:	4a0f      	ldr	r2, [pc, #60]	; (8000a24 <StartDefaultTask+0xf4>)
 80009e8:	4905      	ldr	r1, [pc, #20]	; (8000a00 <StartDefaultTask+0xd0>)
 80009ea:	4620      	mov	r0, r4
 80009ec:	f005 fb10 	bl	8006010 <siprintf>
            osMessagePut(pos_Queue, (uint32_t) str, osWaitForever);
 80009f0:	f04f 32ff 	mov.w	r2, #4294967295
 80009f4:	4621      	mov	r1, r4
 80009f6:	4b04      	ldr	r3, [pc, #16]	; (8000a08 <StartDefaultTask+0xd8>)
 80009f8:	6818      	ldr	r0, [r3, #0]
 80009fa:	f003 fbc3 	bl	8004184 <osMessagePut>
 80009fe:	e7d2      	b.n	80009a6 <StartDefaultTask+0x76>
 8000a00:	08006768 	.word	0x08006768
 8000a04:	08006798 	.word	0x08006798
 8000a08:	20004434 	.word	0x20004434
 8000a0c:	080067a8 	.word	0x080067a8
 8000a10:	080067b4 	.word	0x080067b4
 8000a14:	200043e0 	.word	0x200043e0
 8000a18:	20004438 	.word	0x20004438
 8000a1c:	08006770 	.word	0x08006770
 8000a20:	08006780 	.word	0x08006780
 8000a24:	0800678c 	.word	0x0800678c

08000a28 <setI2cHandleTypeDef>:
uint8_t writeBuf[2];
uint8_t readBuf;
I2C_HandleTypeDef * baseHi2c1;

void setI2cHandleTypeDef(I2C_HandleTypeDef * hi2c1) {
    baseHi2c1 = hi2c1;
 8000a28:	4b01      	ldr	r3, [pc, #4]	; (8000a30 <setI2cHandleTypeDef+0x8>)
 8000a2a:	6018      	str	r0, [r3, #0]
}
 8000a2c:	4770      	bx	lr
 8000a2e:	bf00      	nop
 8000a30:	20004440 	.word	0x20004440

08000a34 <setRegister>:
      programMemPointer++;
    }
  }
}

HAL_StatusTypeDef setRegister(uint8_t addr, uint8_t val) {
 8000a34:	b500      	push	{lr}
 8000a36:	b083      	sub	sp, #12
    *(writeBuf + 0) = addr;
 8000a38:	4a07      	ldr	r2, [pc, #28]	; (8000a58 <setRegister+0x24>)
 8000a3a:	7010      	strb	r0, [r2, #0]
    *(writeBuf + 1) = val;
 8000a3c:	7051      	strb	r1, [r2, #1]
    HAL_StatusTypeDef status = HAL_I2C_Master_Transmit(
 8000a3e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000a42:	9300      	str	r3, [sp, #0]
 8000a44:	2302      	movs	r3, #2
 8000a46:	2121      	movs	r1, #33	; 0x21
 8000a48:	4804      	ldr	r0, [pc, #16]	; (8000a5c <setRegister+0x28>)
 8000a4a:	6800      	ldr	r0, [r0, #0]
 8000a4c:	f000 fcf2 	bl	8001434 <HAL_I2C_Master_Transmit>
            baseHi2c1, i2cAddress, writeBuf, 2 * sizeof (uint8_t), 1000);

  return status;
}
 8000a50:	b003      	add	sp, #12
 8000a52:	f85d fb04 	ldr.w	pc, [sp], #4
 8000a56:	bf00      	nop
 8000a58:	2000443c 	.word	0x2000443c
 8000a5c:	20004440 	.word	0x20004440

08000a60 <resetSettings>:
HAL_StatusTypeDef resetSettings() {
 8000a60:	b510      	push	{r4, lr}
  HAL_StatusTypeDef status = setRegister(REG_COM7, COM7_RESET);
 8000a62:	2180      	movs	r1, #128	; 0x80
 8000a64:	2012      	movs	r0, #18
 8000a66:	f7ff ffe5 	bl	8000a34 <setRegister>
 8000a6a:	4604      	mov	r4, r0
  HAL_Delay(500);
 8000a6c:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000a70:	f000 f93e 	bl	8000cf0 <HAL_Delay>
}
 8000a74:	4620      	mov	r0, r4
 8000a76:	bd10      	pop	{r4, pc}

08000a78 <setup>:
#include "registers.h"
#include <stm32f4xx.h>
#include "ov7670configs/configs.h"
#include "ov7670configs/default_configs.h"

struct StatusStruct setup(I2C_HandleTypeDef * hi2c1, enum Resolution resolution, enum PixelFormat pixelFormat) {
 8000a78:	b500      	push	{lr}
 8000a7a:	b083      	sub	sp, #12
    setI2cHandleTypeDef(hi2c1);
 8000a7c:	f7ff ffd4 	bl	8000a28 <setI2cHandleTypeDef>
    struct StatusStruct status;
    status.status = resetSettings();
 8000a80:	f7ff ffee 	bl	8000a60 <resetSettings>
 8000a84:	f88d 0000 	strb.w	r0, [sp]
    status.value = false;
 8000a88:	2300      	movs	r3, #0
 8000a8a:	f88d 3001 	strb.w	r3, [sp, #1]
    if (status.status == HAL_OK) {
 8000a8e:	b910      	cbnz	r0, 8000a96 <setup+0x1e>
        //setRegisters(regsDefault);
        status.value = true;
 8000a90:	2301      	movs	r3, #1
 8000a92:	f88d 3001 	strb.w	r3, [sp, #1]
    }

    return status;
 8000a96:	f8bd 3000 	ldrh.w	r3, [sp]
 8000a9a:	2000      	movs	r0, #0
 8000a9c:	b2da      	uxtb	r2, r3
 8000a9e:	f362 0007 	bfi	r0, r2, #0, #8
 8000aa2:	f3c3 2307 	ubfx	r3, r3, #8, #8
 8000aa6:	f363 200f 	bfi	r0, r3, #8, #8
}
 8000aaa:	b003      	add	sp, #12
 8000aac:	f85d fb04 	ldr.w	pc, [sp], #4

08000ab0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000ab0:	b500      	push	{lr}
 8000ab2:	b083      	sub	sp, #12
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000ab4:	2200      	movs	r2, #0
 8000ab6:	9200      	str	r2, [sp, #0]
 8000ab8:	4b0d      	ldr	r3, [pc, #52]	; (8000af0 <HAL_MspInit+0x40>)
 8000aba:	6c59      	ldr	r1, [r3, #68]	; 0x44
 8000abc:	f441 4180 	orr.w	r1, r1, #16384	; 0x4000
 8000ac0:	6459      	str	r1, [r3, #68]	; 0x44
 8000ac2:	6c59      	ldr	r1, [r3, #68]	; 0x44
 8000ac4:	f401 4180 	and.w	r1, r1, #16384	; 0x4000
 8000ac8:	9100      	str	r1, [sp, #0]
 8000aca:	9900      	ldr	r1, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000acc:	9201      	str	r2, [sp, #4]
 8000ace:	6c19      	ldr	r1, [r3, #64]	; 0x40
 8000ad0:	f041 5180 	orr.w	r1, r1, #268435456	; 0x10000000
 8000ad4:	6419      	str	r1, [r3, #64]	; 0x40
 8000ad6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ad8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000adc:	9301      	str	r3, [sp, #4]
 8000ade:	9b01      	ldr	r3, [sp, #4]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000ae0:	210f      	movs	r1, #15
 8000ae2:	f06f 0001 	mvn.w	r0, #1
 8000ae6:	f000 f929 	bl	8000d3c <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000aea:	b003      	add	sp, #12
 8000aec:	f85d fb04 	ldr.w	pc, [sp], #4
 8000af0:	40023800 	.word	0x40023800

08000af4 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000af4:	b530      	push	{r4, r5, lr}
 8000af6:	b089      	sub	sp, #36	; 0x24
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000af8:	2300      	movs	r3, #0
 8000afa:	9303      	str	r3, [sp, #12]
 8000afc:	9304      	str	r3, [sp, #16]
 8000afe:	9305      	str	r3, [sp, #20]
 8000b00:	9306      	str	r3, [sp, #24]
 8000b02:	9307      	str	r3, [sp, #28]
  if(hi2c->Instance==I2C1)
 8000b04:	6802      	ldr	r2, [r0, #0]
 8000b06:	4b15      	ldr	r3, [pc, #84]	; (8000b5c <HAL_I2C_MspInit+0x68>)
 8000b08:	429a      	cmp	r2, r3
 8000b0a:	d001      	beq.n	8000b10 <HAL_I2C_MspInit+0x1c>
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8000b0c:	b009      	add	sp, #36	; 0x24
 8000b0e:	bd30      	pop	{r4, r5, pc}
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000b10:	2500      	movs	r5, #0
 8000b12:	9501      	str	r5, [sp, #4]
 8000b14:	4c12      	ldr	r4, [pc, #72]	; (8000b60 <HAL_I2C_MspInit+0x6c>)
 8000b16:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8000b18:	f043 0302 	orr.w	r3, r3, #2
 8000b1c:	6323      	str	r3, [r4, #48]	; 0x30
 8000b1e:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8000b20:	f003 0302 	and.w	r3, r3, #2
 8000b24:	9301      	str	r3, [sp, #4]
 8000b26:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Pin = Audio_SCL_Pin|Audio_SDA_Pin;
 8000b28:	f44f 7310 	mov.w	r3, #576	; 0x240
 8000b2c:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000b2e:	2312      	movs	r3, #18
 8000b30:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000b32:	2301      	movs	r3, #1
 8000b34:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b36:	9506      	str	r5, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000b38:	2304      	movs	r3, #4
 8000b3a:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000b3c:	a903      	add	r1, sp, #12
 8000b3e:	4809      	ldr	r0, [pc, #36]	; (8000b64 <HAL_I2C_MspInit+0x70>)
 8000b40:	f000 f954 	bl	8000dec <HAL_GPIO_Init>
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000b44:	9502      	str	r5, [sp, #8]
 8000b46:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8000b48:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000b4c:	6423      	str	r3, [r4, #64]	; 0x40
 8000b4e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8000b50:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000b54:	9302      	str	r3, [sp, #8]
 8000b56:	9b02      	ldr	r3, [sp, #8]
}
 8000b58:	e7d8      	b.n	8000b0c <HAL_I2C_MspInit+0x18>
 8000b5a:	bf00      	nop
 8000b5c:	40005400 	.word	0x40005400
 8000b60:	40023800 	.word	0x40023800
 8000b64:	40020400 	.word	0x40020400

08000b68 <NMI_Handler>:
{
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000b68:	e7fe      	b.n	8000b68 <NMI_Handler>

08000b6a <HardFault_Handler>:
void HardFault_Handler(void)
{
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000b6a:	e7fe      	b.n	8000b6a <HardFault_Handler>

08000b6c <MemManage_Handler>:
void MemManage_Handler(void)
{
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000b6c:	e7fe      	b.n	8000b6c <MemManage_Handler>

08000b6e <BusFault_Handler>:
void BusFault_Handler(void)
{
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000b6e:	e7fe      	b.n	8000b6e <BusFault_Handler>

08000b70 <UsageFault_Handler>:
void UsageFault_Handler(void)
{
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000b70:	e7fe      	b.n	8000b70 <UsageFault_Handler>

08000b72 <DebugMon_Handler>:

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000b72:	4770      	bx	lr

08000b74 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000b74:	b508      	push	{r3, lr}
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000b76:	f000 f8a9 	bl	8000ccc <HAL_IncTick>
#if (INCLUDE_xTaskGetSchedulerState == 1 )
  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
 8000b7a:	f004 fbab 	bl	80052d4 <xTaskGetSchedulerState>
 8000b7e:	2801      	cmp	r0, #1
 8000b80:	d100      	bne.n	8000b84 <SysTick_Handler+0x10>
  }
#endif /* INCLUDE_xTaskGetSchedulerState */
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000b82:	bd08      	pop	{r3, pc}
  xPortSysTickHandler();
 8000b84:	f004 fce6 	bl	8005554 <xPortSysTickHandler>
}
 8000b88:	e7fb      	b.n	8000b82 <SysTick_Handler+0xe>
	...

08000b8c <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8000b8c:	b508      	push	{r3, lr}
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 8000b8e:	4802      	ldr	r0, [pc, #8]	; (8000b98 <OTG_FS_IRQHandler+0xc>)
 8000b90:	f000 fece 	bl	8001930 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8000b94:	bd08      	pop	{r3, pc}
 8000b96:	bf00      	nop
 8000b98:	2000591c 	.word	0x2000591c

08000b9c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000b9c:	b510      	push	{r4, lr}
 8000b9e:	4603      	mov	r3, r0
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000ba0:	4a0c      	ldr	r2, [pc, #48]	; (8000bd4 <_sbrk+0x38>)
 8000ba2:	490d      	ldr	r1, [pc, #52]	; (8000bd8 <_sbrk+0x3c>)
  const uint8_t *max_heap = (uint8_t *)stack_limit;
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000ba4:	480d      	ldr	r0, [pc, #52]	; (8000bdc <_sbrk+0x40>)
 8000ba6:	6800      	ldr	r0, [r0, #0]
 8000ba8:	b140      	cbz	r0, 8000bbc <_sbrk+0x20>
  {
    __sbrk_heap_end = &_end;
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000baa:	480c      	ldr	r0, [pc, #48]	; (8000bdc <_sbrk+0x40>)
 8000bac:	6800      	ldr	r0, [r0, #0]
 8000bae:	4403      	add	r3, r0
 8000bb0:	1a52      	subs	r2, r2, r1
 8000bb2:	4293      	cmp	r3, r2
 8000bb4:	d806      	bhi.n	8000bc4 <_sbrk+0x28>
    errno = ENOMEM;
    return (void *)-1;
  }

  prev_heap_end = __sbrk_heap_end;
  __sbrk_heap_end += incr;
 8000bb6:	4a09      	ldr	r2, [pc, #36]	; (8000bdc <_sbrk+0x40>)
 8000bb8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
}
 8000bba:	bd10      	pop	{r4, pc}
    __sbrk_heap_end = &_end;
 8000bbc:	4807      	ldr	r0, [pc, #28]	; (8000bdc <_sbrk+0x40>)
 8000bbe:	4c08      	ldr	r4, [pc, #32]	; (8000be0 <_sbrk+0x44>)
 8000bc0:	6004      	str	r4, [r0, #0]
 8000bc2:	e7f2      	b.n	8000baa <_sbrk+0xe>
    errno = ENOMEM;
 8000bc4:	f005 f922 	bl	8005e0c <__errno>
 8000bc8:	230c      	movs	r3, #12
 8000bca:	6003      	str	r3, [r0, #0]
    return (void *)-1;
 8000bcc:	f04f 30ff 	mov.w	r0, #4294967295
 8000bd0:	e7f3      	b.n	8000bba <_sbrk+0x1e>
 8000bd2:	bf00      	nop
 8000bd4:	20020000 	.word	0x20020000
 8000bd8:	00000400 	.word	0x00000400
 8000bdc:	20000458 	.word	0x20000458
 8000be0:	20005d38 	.word	0x20005d38

08000be4 <SystemInit>:
  */
void SystemInit(void)
{
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000be4:	4a03      	ldr	r2, [pc, #12]	; (8000bf4 <SystemInit+0x10>)
 8000be6:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 8000bea:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000bee:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000bf2:	4770      	bx	lr
 8000bf4:	e000ed00 	.word	0xe000ed00

08000bf8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8000bf8:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000c30 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000bfc:	480d      	ldr	r0, [pc, #52]	; (8000c34 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000bfe:	490e      	ldr	r1, [pc, #56]	; (8000c38 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000c00:	4a0e      	ldr	r2, [pc, #56]	; (8000c3c <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000c02:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000c04:	e002      	b.n	8000c0c <LoopCopyDataInit>

08000c06 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000c06:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000c08:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000c0a:	3304      	adds	r3, #4

08000c0c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000c0c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000c0e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000c10:	d3f9      	bcc.n	8000c06 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000c12:	4a0b      	ldr	r2, [pc, #44]	; (8000c40 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000c14:	4c0b      	ldr	r4, [pc, #44]	; (8000c44 <LoopFillZerobss+0x26>)
  movs r3, #0
 8000c16:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000c18:	e001      	b.n	8000c1e <LoopFillZerobss>

08000c1a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000c1a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000c1c:	3204      	adds	r2, #4

08000c1e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000c1e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000c20:	d3fb      	bcc.n	8000c1a <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8000c22:	f7ff ffdf 	bl	8000be4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000c26:	f005 f8f7 	bl	8005e18 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000c2a:	f7ff fe23 	bl	8000874 <main>
  bx  lr    
 8000c2e:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8000c30:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000c34:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000c38:	200001e8 	.word	0x200001e8
  ldr r2, =_sidata
 8000c3c:	0800686c 	.word	0x0800686c
  ldr r2, =_sbss
 8000c40:	200001e8 	.word	0x200001e8
  ldr r4, =_ebss
 8000c44:	20005d34 	.word	0x20005d34

08000c48 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000c48:	e7fe      	b.n	8000c48 <ADC_IRQHandler>
	...

08000c4c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000c4c:	b510      	push	{r4, lr}
 8000c4e:	4604      	mov	r4, r0
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000c50:	4b0e      	ldr	r3, [pc, #56]	; (8000c8c <HAL_InitTick+0x40>)
 8000c52:	7818      	ldrb	r0, [r3, #0]
 8000c54:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000c58:	fbb3 f3f0 	udiv	r3, r3, r0
 8000c5c:	4a0c      	ldr	r2, [pc, #48]	; (8000c90 <HAL_InitTick+0x44>)
 8000c5e:	6810      	ldr	r0, [r2, #0]
 8000c60:	fbb0 f0f3 	udiv	r0, r0, r3
 8000c64:	f000 f8ac 	bl	8000dc0 <HAL_SYSTICK_Config>
 8000c68:	b968      	cbnz	r0, 8000c86 <HAL_InitTick+0x3a>
  {
    return HAL_ERROR;
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000c6a:	2c0f      	cmp	r4, #15
 8000c6c:	d901      	bls.n	8000c72 <HAL_InitTick+0x26>
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
    uwTickPrio = TickPriority;
  }
  else
  {
    return HAL_ERROR;
 8000c6e:	2001      	movs	r0, #1
 8000c70:	e00a      	b.n	8000c88 <HAL_InitTick+0x3c>
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000c72:	2200      	movs	r2, #0
 8000c74:	4621      	mov	r1, r4
 8000c76:	f04f 30ff 	mov.w	r0, #4294967295
 8000c7a:	f000 f85f 	bl	8000d3c <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000c7e:	4b05      	ldr	r3, [pc, #20]	; (8000c94 <HAL_InitTick+0x48>)
 8000c80:	601c      	str	r4, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8000c82:	2000      	movs	r0, #0
 8000c84:	e000      	b.n	8000c88 <HAL_InitTick+0x3c>
    return HAL_ERROR;
 8000c86:	2001      	movs	r0, #1
}
 8000c88:	bd10      	pop	{r4, pc}
 8000c8a:	bf00      	nop
 8000c8c:	20000004 	.word	0x20000004
 8000c90:	20000000 	.word	0x20000000
 8000c94:	20000008 	.word	0x20000008

08000c98 <HAL_Init>:
{
 8000c98:	b508      	push	{r3, lr}
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000c9a:	4b0b      	ldr	r3, [pc, #44]	; (8000cc8 <HAL_Init+0x30>)
 8000c9c:	681a      	ldr	r2, [r3, #0]
 8000c9e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8000ca2:	601a      	str	r2, [r3, #0]
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000ca4:	681a      	ldr	r2, [r3, #0]
 8000ca6:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8000caa:	601a      	str	r2, [r3, #0]
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000cac:	681a      	ldr	r2, [r3, #0]
 8000cae:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8000cb2:	601a      	str	r2, [r3, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000cb4:	2003      	movs	r0, #3
 8000cb6:	f000 f82f 	bl	8000d18 <HAL_NVIC_SetPriorityGrouping>
  HAL_InitTick(TICK_INT_PRIORITY);
 8000cba:	200f      	movs	r0, #15
 8000cbc:	f7ff ffc6 	bl	8000c4c <HAL_InitTick>
  HAL_MspInit();
 8000cc0:	f7ff fef6 	bl	8000ab0 <HAL_MspInit>
}
 8000cc4:	2000      	movs	r0, #0
 8000cc6:	bd08      	pop	{r3, pc}
 8000cc8:	40023c00 	.word	0x40023c00

08000ccc <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 8000ccc:	4a03      	ldr	r2, [pc, #12]	; (8000cdc <HAL_IncTick+0x10>)
 8000cce:	6811      	ldr	r1, [r2, #0]
 8000cd0:	4b03      	ldr	r3, [pc, #12]	; (8000ce0 <HAL_IncTick+0x14>)
 8000cd2:	781b      	ldrb	r3, [r3, #0]
 8000cd4:	440b      	add	r3, r1
 8000cd6:	6013      	str	r3, [r2, #0]
}
 8000cd8:	4770      	bx	lr
 8000cda:	bf00      	nop
 8000cdc:	20004448 	.word	0x20004448
 8000ce0:	20000004 	.word	0x20000004

08000ce4 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 8000ce4:	4b01      	ldr	r3, [pc, #4]	; (8000cec <HAL_GetTick+0x8>)
 8000ce6:	6818      	ldr	r0, [r3, #0]
}
 8000ce8:	4770      	bx	lr
 8000cea:	bf00      	nop
 8000cec:	20004448 	.word	0x20004448

08000cf0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000cf0:	b538      	push	{r3, r4, r5, lr}
 8000cf2:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 8000cf4:	f7ff fff6 	bl	8000ce4 <HAL_GetTick>
 8000cf8:	4605      	mov	r5, r0
  uint32_t wait = Delay;

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000cfa:	f1b4 3fff 	cmp.w	r4, #4294967295
 8000cfe:	d002      	beq.n	8000d06 <HAL_Delay+0x16>
  {
    wait += (uint32_t)(uwTickFreq);
 8000d00:	4b04      	ldr	r3, [pc, #16]	; (8000d14 <HAL_Delay+0x24>)
 8000d02:	781b      	ldrb	r3, [r3, #0]
 8000d04:	441c      	add	r4, r3
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000d06:	f7ff ffed 	bl	8000ce4 <HAL_GetTick>
 8000d0a:	1b40      	subs	r0, r0, r5
 8000d0c:	42a0      	cmp	r0, r4
 8000d0e:	d3fa      	bcc.n	8000d06 <HAL_Delay+0x16>
  {
  }
}
 8000d10:	bd38      	pop	{r3, r4, r5, pc}
 8000d12:	bf00      	nop
 8000d14:	20000004 	.word	0x20000004

08000d18 <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000d18:	4a07      	ldr	r2, [pc, #28]	; (8000d38 <HAL_NVIC_SetPriorityGrouping+0x20>)
 8000d1a:	68d3      	ldr	r3, [r2, #12]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000d1c:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8000d20:	041b      	lsls	r3, r3, #16
 8000d22:	0c1b      	lsrs	r3, r3, #16
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000d24:	0200      	lsls	r0, r0, #8
 8000d26:	f400 60e0 	and.w	r0, r0, #1792	; 0x700
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000d2a:	4303      	orrs	r3, r0
  reg_value  =  (reg_value                                   |
 8000d2c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000d30:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
  SCB->AIRCR =  reg_value;
 8000d34:	60d3      	str	r3, [r2, #12]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
}
 8000d36:	4770      	bx	lr
 8000d38:	e000ed00 	.word	0xe000ed00

08000d3c <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000d3c:	b430      	push	{r4, r5}
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000d3e:	4b17      	ldr	r3, [pc, #92]	; (8000d9c <HAL_NVIC_SetPriority+0x60>)
 8000d40:	68db      	ldr	r3, [r3, #12]
 8000d42:	f3c3 2302 	ubfx	r3, r3, #8, #3
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000d46:	f1c3 0407 	rsb	r4, r3, #7
 8000d4a:	2c04      	cmp	r4, #4
 8000d4c:	bf28      	it	cs
 8000d4e:	2404      	movcs	r4, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000d50:	1d1d      	adds	r5, r3, #4
 8000d52:	2d06      	cmp	r5, #6
 8000d54:	d918      	bls.n	8000d88 <HAL_NVIC_SetPriority+0x4c>
 8000d56:	3b03      	subs	r3, #3

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000d58:	f04f 35ff 	mov.w	r5, #4294967295
 8000d5c:	fa05 f404 	lsl.w	r4, r5, r4
 8000d60:	ea21 0104 	bic.w	r1, r1, r4
 8000d64:	4099      	lsls	r1, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000d66:	fa05 f303 	lsl.w	r3, r5, r3
 8000d6a:	ea22 0303 	bic.w	r3, r2, r3
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000d6e:	4319      	orrs	r1, r3
  if ((int32_t)(IRQn) >= 0)
 8000d70:	2800      	cmp	r0, #0
 8000d72:	db0b      	blt.n	8000d8c <HAL_NVIC_SetPriority+0x50>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000d74:	0109      	lsls	r1, r1, #4
 8000d76:	b2c9      	uxtb	r1, r1
 8000d78:	f100 4060 	add.w	r0, r0, #3758096384	; 0xe0000000
 8000d7c:	f500 4061 	add.w	r0, r0, #57600	; 0xe100
 8000d80:	f880 1300 	strb.w	r1, [r0, #768]	; 0x300
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
}
 8000d84:	bc30      	pop	{r4, r5}
 8000d86:	4770      	bx	lr
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000d88:	2300      	movs	r3, #0
 8000d8a:	e7e5      	b.n	8000d58 <HAL_NVIC_SetPriority+0x1c>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000d8c:	f000 000f 	and.w	r0, r0, #15
 8000d90:	0109      	lsls	r1, r1, #4
 8000d92:	b2c9      	uxtb	r1, r1
 8000d94:	4b02      	ldr	r3, [pc, #8]	; (8000da0 <HAL_NVIC_SetPriority+0x64>)
 8000d96:	5419      	strb	r1, [r3, r0]
 8000d98:	e7f4      	b.n	8000d84 <HAL_NVIC_SetPriority+0x48>
 8000d9a:	bf00      	nop
 8000d9c:	e000ed00 	.word	0xe000ed00
 8000da0:	e000ed14 	.word	0xe000ed14

08000da4 <HAL_NVIC_EnableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 8000da4:	2800      	cmp	r0, #0
 8000da6:	db07      	blt.n	8000db8 <HAL_NVIC_EnableIRQ+0x14>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000da8:	f000 021f 	and.w	r2, r0, #31
 8000dac:	0940      	lsrs	r0, r0, #5
 8000dae:	2301      	movs	r3, #1
 8000db0:	4093      	lsls	r3, r2
 8000db2:	4a02      	ldr	r2, [pc, #8]	; (8000dbc <HAL_NVIC_EnableIRQ+0x18>)
 8000db4:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
}
 8000db8:	4770      	bx	lr
 8000dba:	bf00      	nop
 8000dbc:	e000e100 	.word	0xe000e100

08000dc0 <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000dc0:	3801      	subs	r0, #1
 8000dc2:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000dc6:	d20a      	bcs.n	8000dde <HAL_SYSTICK_Config+0x1e>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000dc8:	4b06      	ldr	r3, [pc, #24]	; (8000de4 <HAL_SYSTICK_Config+0x24>)
 8000dca:	6058      	str	r0, [r3, #4]
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000dcc:	4a06      	ldr	r2, [pc, #24]	; (8000de8 <HAL_SYSTICK_Config+0x28>)
 8000dce:	21f0      	movs	r1, #240	; 0xf0
 8000dd0:	f882 1023 	strb.w	r1, [r2, #35]	; 0x23
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000dd4:	2000      	movs	r0, #0
 8000dd6:	6098      	str	r0, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000dd8:	2207      	movs	r2, #7
 8000dda:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000ddc:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 8000dde:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 8000de0:	4770      	bx	lr
 8000de2:	bf00      	nop
 8000de4:	e000e010 	.word	0xe000e010
 8000de8:	e000ed00 	.word	0xe000ed00

08000dec <HAL_GPIO_Init>:
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000dec:	2300      	movs	r3, #0
 8000dee:	2b0f      	cmp	r3, #15
 8000df0:	f200 80dd 	bhi.w	8000fae <HAL_GPIO_Init+0x1c2>
{
 8000df4:	b4f0      	push	{r4, r5, r6, r7}
 8000df6:	b082      	sub	sp, #8
 8000df8:	e05d      	b.n	8000eb6 <HAL_GPIO_Init+0xca>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8000dfa:	6886      	ldr	r6, [r0, #8]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000dfc:	005f      	lsls	r7, r3, #1
 8000dfe:	2403      	movs	r4, #3
 8000e00:	40bc      	lsls	r4, r7
 8000e02:	ea26 0604 	bic.w	r6, r6, r4
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000e06:	68cc      	ldr	r4, [r1, #12]
 8000e08:	40bc      	lsls	r4, r7
 8000e0a:	4334      	orrs	r4, r6
        GPIOx->OSPEEDR = temp;
 8000e0c:	6084      	str	r4, [r0, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000e0e:	6846      	ldr	r6, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000e10:	ea26 0602 	bic.w	r6, r6, r2
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000e14:	684c      	ldr	r4, [r1, #4]
 8000e16:	f3c4 1200 	ubfx	r2, r4, #4, #1
 8000e1a:	409a      	lsls	r2, r3
 8000e1c:	4332      	orrs	r2, r6
        GPIOx->OTYPER = temp;
 8000e1e:	6042      	str	r2, [r0, #4]
 8000e20:	e057      	b.n	8000ed2 <HAL_GPIO_Init+0xe6>
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8000e22:	08dc      	lsrs	r4, r3, #3
 8000e24:	3408      	adds	r4, #8
 8000e26:	f850 7024 	ldr.w	r7, [r0, r4, lsl #2]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8000e2a:	f003 0207 	and.w	r2, r3, #7
 8000e2e:	0096      	lsls	r6, r2, #2
 8000e30:	220f      	movs	r2, #15
 8000e32:	40b2      	lsls	r2, r6
 8000e34:	ea27 0702 	bic.w	r7, r7, r2
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8000e38:	690a      	ldr	r2, [r1, #16]
 8000e3a:	40b2      	lsls	r2, r6
 8000e3c:	433a      	orrs	r2, r7
        GPIOx->AFR[position >> 3U] = temp;
 8000e3e:	f840 2024 	str.w	r2, [r0, r4, lsl #2]
 8000e42:	e05a      	b.n	8000efa <HAL_GPIO_Init+0x10e>
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();

        temp = SYSCFG->EXTICR[position >> 2U];
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000e44:	2207      	movs	r2, #7
 8000e46:	e000      	b.n	8000e4a <HAL_GPIO_Init+0x5e>
 8000e48:	2200      	movs	r2, #0
 8000e4a:	40b2      	lsls	r2, r6
 8000e4c:	433a      	orrs	r2, r7
        SYSCFG->EXTICR[position >> 2U] = temp;
 8000e4e:	3402      	adds	r4, #2
 8000e50:	4e57      	ldr	r6, [pc, #348]	; (8000fb0 <HAL_GPIO_Init+0x1c4>)
 8000e52:	f846 2024 	str.w	r2, [r6, r4, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000e56:	4a57      	ldr	r2, [pc, #348]	; (8000fb4 <HAL_GPIO_Init+0x1c8>)
 8000e58:	6814      	ldr	r4, [r2, #0]
        temp &= ~((uint32_t)iocurrent);
 8000e5a:	43ea      	mvns	r2, r5
 8000e5c:	ea24 0605 	bic.w	r6, r4, r5
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8000e60:	684f      	ldr	r7, [r1, #4]
 8000e62:	f417 3f80 	tst.w	r7, #65536	; 0x10000
 8000e66:	d001      	beq.n	8000e6c <HAL_GPIO_Init+0x80>
        {
          temp |= iocurrent;
 8000e68:	ea45 0604 	orr.w	r6, r5, r4
        }
        EXTI->IMR = temp;
 8000e6c:	4c51      	ldr	r4, [pc, #324]	; (8000fb4 <HAL_GPIO_Init+0x1c8>)
 8000e6e:	6026      	str	r6, [r4, #0]

        temp = EXTI->EMR;
 8000e70:	6864      	ldr	r4, [r4, #4]
        temp &= ~((uint32_t)iocurrent);
 8000e72:	ea02 0604 	and.w	r6, r2, r4
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8000e76:	684f      	ldr	r7, [r1, #4]
 8000e78:	f417 3f00 	tst.w	r7, #131072	; 0x20000
 8000e7c:	d001      	beq.n	8000e82 <HAL_GPIO_Init+0x96>
        {
          temp |= iocurrent;
 8000e7e:	ea45 0604 	orr.w	r6, r5, r4
        }
        EXTI->EMR = temp;
 8000e82:	4c4c      	ldr	r4, [pc, #304]	; (8000fb4 <HAL_GPIO_Init+0x1c8>)
 8000e84:	6066      	str	r6, [r4, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000e86:	68a4      	ldr	r4, [r4, #8]
        temp &= ~((uint32_t)iocurrent);
 8000e88:	ea02 0604 	and.w	r6, r2, r4
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8000e8c:	684f      	ldr	r7, [r1, #4]
 8000e8e:	f417 1f80 	tst.w	r7, #1048576	; 0x100000
 8000e92:	d001      	beq.n	8000e98 <HAL_GPIO_Init+0xac>
        {
          temp |= iocurrent;
 8000e94:	ea45 0604 	orr.w	r6, r5, r4
        }
        EXTI->RTSR = temp;
 8000e98:	4c46      	ldr	r4, [pc, #280]	; (8000fb4 <HAL_GPIO_Init+0x1c8>)
 8000e9a:	60a6      	str	r6, [r4, #8]

        temp = EXTI->FTSR;
 8000e9c:	68e4      	ldr	r4, [r4, #12]
        temp &= ~((uint32_t)iocurrent);
 8000e9e:	4022      	ands	r2, r4
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8000ea0:	684e      	ldr	r6, [r1, #4]
 8000ea2:	f416 1f00 	tst.w	r6, #2097152	; 0x200000
 8000ea6:	d001      	beq.n	8000eac <HAL_GPIO_Init+0xc0>
        {
          temp |= iocurrent;
 8000ea8:	ea45 0204 	orr.w	r2, r5, r4
        }
        EXTI->FTSR = temp;
 8000eac:	4c41      	ldr	r4, [pc, #260]	; (8000fb4 <HAL_GPIO_Init+0x1c8>)
 8000eae:	60e2      	str	r2, [r4, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000eb0:	3301      	adds	r3, #1
 8000eb2:	2b0f      	cmp	r3, #15
 8000eb4:	d878      	bhi.n	8000fa8 <HAL_GPIO_Init+0x1bc>
    ioposition = 0x01U << position;
 8000eb6:	2201      	movs	r2, #1
 8000eb8:	409a      	lsls	r2, r3
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000eba:	680c      	ldr	r4, [r1, #0]
 8000ebc:	ea04 0502 	and.w	r5, r4, r2
    if(iocurrent == ioposition)
 8000ec0:	ea32 0404 	bics.w	r4, r2, r4
 8000ec4:	d1f4      	bne.n	8000eb0 <HAL_GPIO_Init+0xc4>
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000ec6:	684c      	ldr	r4, [r1, #4]
 8000ec8:	f004 0403 	and.w	r4, r4, #3
 8000ecc:	3c01      	subs	r4, #1
 8000ece:	2c01      	cmp	r4, #1
 8000ed0:	d993      	bls.n	8000dfa <HAL_GPIO_Init+0xe>
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000ed2:	684a      	ldr	r2, [r1, #4]
 8000ed4:	f002 0203 	and.w	r2, r2, #3
 8000ed8:	2a03      	cmp	r2, #3
 8000eda:	d009      	beq.n	8000ef0 <HAL_GPIO_Init+0x104>
        temp = GPIOx->PUPDR;
 8000edc:	68c4      	ldr	r4, [r0, #12]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8000ede:	005e      	lsls	r6, r3, #1
 8000ee0:	2203      	movs	r2, #3
 8000ee2:	40b2      	lsls	r2, r6
 8000ee4:	ea24 0402 	bic.w	r4, r4, r2
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000ee8:	688a      	ldr	r2, [r1, #8]
 8000eea:	40b2      	lsls	r2, r6
 8000eec:	4322      	orrs	r2, r4
        GPIOx->PUPDR = temp;
 8000eee:	60c2      	str	r2, [r0, #12]
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000ef0:	684a      	ldr	r2, [r1, #4]
 8000ef2:	f002 0203 	and.w	r2, r2, #3
 8000ef6:	2a02      	cmp	r2, #2
 8000ef8:	d093      	beq.n	8000e22 <HAL_GPIO_Init+0x36>
      temp = GPIOx->MODER;
 8000efa:	6804      	ldr	r4, [r0, #0]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8000efc:	005e      	lsls	r6, r3, #1
 8000efe:	2203      	movs	r2, #3
 8000f00:	40b2      	lsls	r2, r6
 8000f02:	ea24 0402 	bic.w	r4, r4, r2
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000f06:	684a      	ldr	r2, [r1, #4]
 8000f08:	f002 0203 	and.w	r2, r2, #3
 8000f0c:	40b2      	lsls	r2, r6
 8000f0e:	4322      	orrs	r2, r4
      GPIOx->MODER = temp;
 8000f10:	6002      	str	r2, [r0, #0]
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8000f12:	684a      	ldr	r2, [r1, #4]
 8000f14:	f412 3f40 	tst.w	r2, #196608	; 0x30000
 8000f18:	d0ca      	beq.n	8000eb0 <HAL_GPIO_Init+0xc4>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000f1a:	2200      	movs	r2, #0
 8000f1c:	9201      	str	r2, [sp, #4]
 8000f1e:	4a26      	ldr	r2, [pc, #152]	; (8000fb8 <HAL_GPIO_Init+0x1cc>)
 8000f20:	6c54      	ldr	r4, [r2, #68]	; 0x44
 8000f22:	f444 4480 	orr.w	r4, r4, #16384	; 0x4000
 8000f26:	6454      	str	r4, [r2, #68]	; 0x44
 8000f28:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8000f2a:	f402 4280 	and.w	r2, r2, #16384	; 0x4000
 8000f2e:	9201      	str	r2, [sp, #4]
 8000f30:	9a01      	ldr	r2, [sp, #4]
        temp = SYSCFG->EXTICR[position >> 2U];
 8000f32:	089c      	lsrs	r4, r3, #2
 8000f34:	1ca6      	adds	r6, r4, #2
 8000f36:	4a1e      	ldr	r2, [pc, #120]	; (8000fb0 <HAL_GPIO_Init+0x1c4>)
 8000f38:	f852 7026 	ldr.w	r7, [r2, r6, lsl #2]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8000f3c:	f003 0203 	and.w	r2, r3, #3
 8000f40:	0096      	lsls	r6, r2, #2
 8000f42:	220f      	movs	r2, #15
 8000f44:	40b2      	lsls	r2, r6
 8000f46:	ea27 0702 	bic.w	r7, r7, r2
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000f4a:	4a1c      	ldr	r2, [pc, #112]	; (8000fbc <HAL_GPIO_Init+0x1d0>)
 8000f4c:	4290      	cmp	r0, r2
 8000f4e:	f43f af7b 	beq.w	8000e48 <HAL_GPIO_Init+0x5c>
 8000f52:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8000f56:	4290      	cmp	r0, r2
 8000f58:	d01a      	beq.n	8000f90 <HAL_GPIO_Init+0x1a4>
 8000f5a:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8000f5e:	4290      	cmp	r0, r2
 8000f60:	d018      	beq.n	8000f94 <HAL_GPIO_Init+0x1a8>
 8000f62:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8000f66:	4290      	cmp	r0, r2
 8000f68:	d016      	beq.n	8000f98 <HAL_GPIO_Init+0x1ac>
 8000f6a:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8000f6e:	4290      	cmp	r0, r2
 8000f70:	d014      	beq.n	8000f9c <HAL_GPIO_Init+0x1b0>
 8000f72:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8000f76:	4290      	cmp	r0, r2
 8000f78:	d012      	beq.n	8000fa0 <HAL_GPIO_Init+0x1b4>
 8000f7a:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8000f7e:	4290      	cmp	r0, r2
 8000f80:	d010      	beq.n	8000fa4 <HAL_GPIO_Init+0x1b8>
 8000f82:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8000f86:	4290      	cmp	r0, r2
 8000f88:	f43f af5c 	beq.w	8000e44 <HAL_GPIO_Init+0x58>
 8000f8c:	2208      	movs	r2, #8
 8000f8e:	e75c      	b.n	8000e4a <HAL_GPIO_Init+0x5e>
 8000f90:	2201      	movs	r2, #1
 8000f92:	e75a      	b.n	8000e4a <HAL_GPIO_Init+0x5e>
 8000f94:	2202      	movs	r2, #2
 8000f96:	e758      	b.n	8000e4a <HAL_GPIO_Init+0x5e>
 8000f98:	2203      	movs	r2, #3
 8000f9a:	e756      	b.n	8000e4a <HAL_GPIO_Init+0x5e>
 8000f9c:	2204      	movs	r2, #4
 8000f9e:	e754      	b.n	8000e4a <HAL_GPIO_Init+0x5e>
 8000fa0:	2205      	movs	r2, #5
 8000fa2:	e752      	b.n	8000e4a <HAL_GPIO_Init+0x5e>
 8000fa4:	2206      	movs	r2, #6
 8000fa6:	e750      	b.n	8000e4a <HAL_GPIO_Init+0x5e>
      }
    }
  }
}
 8000fa8:	b002      	add	sp, #8
 8000faa:	bcf0      	pop	{r4, r5, r6, r7}
 8000fac:	4770      	bx	lr
 8000fae:	4770      	bx	lr
 8000fb0:	40013800 	.word	0x40013800
 8000fb4:	40013c00 	.word	0x40013c00
 8000fb8:	40023800 	.word	0x40023800
 8000fbc:	40020000 	.word	0x40020000

08000fc0 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8000fc0:	b10a      	cbz	r2, 8000fc6 <HAL_GPIO_WritePin+0x6>
  {
    GPIOx->BSRR = GPIO_Pin;
 8000fc2:	6181      	str	r1, [r0, #24]
 8000fc4:	4770      	bx	lr
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8000fc6:	0409      	lsls	r1, r1, #16
 8000fc8:	6181      	str	r1, [r0, #24]
  }
}
 8000fca:	4770      	bx	lr

08000fcc <I2C_IsAcknowledgeFailed>:
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8000fcc:	6803      	ldr	r3, [r0, #0]
 8000fce:	695a      	ldr	r2, [r3, #20]
 8000fd0:	f412 6f80 	tst.w	r2, #1024	; 0x400
 8000fd4:	d101      	bne.n	8000fda <I2C_IsAcknowledgeFailed+0xe>
    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);

    return HAL_ERROR;
  }
  return HAL_OK;
 8000fd6:	2000      	movs	r0, #0
}
 8000fd8:	4770      	bx	lr
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8000fda:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8000fde:	615a      	str	r2, [r3, #20]
    hi2c->PreviousState       = I2C_STATE_NONE;
 8000fe0:	2300      	movs	r3, #0
 8000fe2:	6303      	str	r3, [r0, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8000fe4:	2220      	movs	r2, #32
 8000fe6:	f880 203d 	strb.w	r2, [r0, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8000fea:	f880 303e 	strb.w	r3, [r0, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8000fee:	6c02      	ldr	r2, [r0, #64]	; 0x40
 8000ff0:	f042 0204 	orr.w	r2, r2, #4
 8000ff4:	6402      	str	r2, [r0, #64]	; 0x40
    __HAL_UNLOCK(hi2c);
 8000ff6:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
    return HAL_ERROR;
 8000ffa:	2001      	movs	r0, #1
 8000ffc:	4770      	bx	lr

08000ffe <I2C_WaitOnFlagUntilTimeout>:
{
 8000ffe:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001002:	4607      	mov	r7, r0
 8001004:	460d      	mov	r5, r1
 8001006:	4690      	mov	r8, r2
 8001008:	461e      	mov	r6, r3
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800100a:	e022      	b.n	8001052 <I2C_WaitOnFlagUntilTimeout+0x54>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800100c:	f7ff fe6a 	bl	8000ce4 <HAL_GetTick>
 8001010:	9b06      	ldr	r3, [sp, #24]
 8001012:	1ac0      	subs	r0, r0, r3
 8001014:	42b0      	cmp	r0, r6
 8001016:	d800      	bhi.n	800101a <I2C_WaitOnFlagUntilTimeout+0x1c>
 8001018:	b9de      	cbnz	r6, 8001052 <I2C_WaitOnFlagUntilTimeout+0x54>
        hi2c->PreviousState     = I2C_STATE_NONE;
 800101a:	2300      	movs	r3, #0
 800101c:	633b      	str	r3, [r7, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 800101e:	2220      	movs	r2, #32
 8001020:	f887 203d 	strb.w	r2, [r7, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8001024:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8001028:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800102a:	f042 0220 	orr.w	r2, r2, #32
 800102e:	643a      	str	r2, [r7, #64]	; 0x40
        __HAL_UNLOCK(hi2c);
 8001030:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c
        return HAL_ERROR;
 8001034:	2001      	movs	r0, #1
 8001036:	e01a      	b.n	800106e <I2C_WaitOnFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8001038:	683b      	ldr	r3, [r7, #0]
 800103a:	699c      	ldr	r4, [r3, #24]
 800103c:	ea25 0404 	bic.w	r4, r5, r4
 8001040:	b2a4      	uxth	r4, r4
 8001042:	fab4 f484 	clz	r4, r4
 8001046:	0964      	lsrs	r4, r4, #5
 8001048:	45a0      	cmp	r8, r4
 800104a:	d10f      	bne.n	800106c <I2C_WaitOnFlagUntilTimeout+0x6e>
    if (Timeout != HAL_MAX_DELAY)
 800104c:	f1b6 3fff 	cmp.w	r6, #4294967295
 8001050:	d1dc      	bne.n	800100c <I2C_WaitOnFlagUntilTimeout+0xe>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8001052:	f3c5 4307 	ubfx	r3, r5, #16, #8
 8001056:	2b01      	cmp	r3, #1
 8001058:	d1ee      	bne.n	8001038 <I2C_WaitOnFlagUntilTimeout+0x3a>
 800105a:	683b      	ldr	r3, [r7, #0]
 800105c:	695c      	ldr	r4, [r3, #20]
 800105e:	ea25 0404 	bic.w	r4, r5, r4
 8001062:	b2a4      	uxth	r4, r4
 8001064:	fab4 f484 	clz	r4, r4
 8001068:	0964      	lsrs	r4, r4, #5
 800106a:	e7ed      	b.n	8001048 <I2C_WaitOnFlagUntilTimeout+0x4a>
  return HAL_OK;
 800106c:	2000      	movs	r0, #0
}
 800106e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08001072 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
{
 8001072:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001076:	4605      	mov	r5, r0
 8001078:	460e      	mov	r6, r1
 800107a:	4617      	mov	r7, r2
 800107c:	4698      	mov	r8, r3
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800107e:	e03d      	b.n	80010fc <I2C_WaitOnMasterAddressFlagUntilTimeout+0x8a>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001080:	681a      	ldr	r2, [r3, #0]
 8001082:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001086:	601a      	str	r2, [r3, #0]
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001088:	682b      	ldr	r3, [r5, #0]
 800108a:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800108e:	615a      	str	r2, [r3, #20]
      hi2c->PreviousState       = I2C_STATE_NONE;
 8001090:	2300      	movs	r3, #0
 8001092:	632b      	str	r3, [r5, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8001094:	2220      	movs	r2, #32
 8001096:	f885 203d 	strb.w	r2, [r5, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800109a:	f885 303e 	strb.w	r3, [r5, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800109e:	6c2a      	ldr	r2, [r5, #64]	; 0x40
 80010a0:	f042 0204 	orr.w	r2, r2, #4
 80010a4:	642a      	str	r2, [r5, #64]	; 0x40
      __HAL_UNLOCK(hi2c);
 80010a6:	f885 303c 	strb.w	r3, [r5, #60]	; 0x3c
      return HAL_ERROR;
 80010aa:	2001      	movs	r0, #1
 80010ac:	e034      	b.n	8001118 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xa6>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80010ae:	f7ff fe19 	bl	8000ce4 <HAL_GetTick>
 80010b2:	eba0 0008 	sub.w	r0, r0, r8
 80010b6:	42b8      	cmp	r0, r7
 80010b8:	d800      	bhi.n	80010bc <I2C_WaitOnMasterAddressFlagUntilTimeout+0x4a>
 80010ba:	b9ff      	cbnz	r7, 80010fc <I2C_WaitOnMasterAddressFlagUntilTimeout+0x8a>
        hi2c->PreviousState       = I2C_STATE_NONE;
 80010bc:	2300      	movs	r3, #0
 80010be:	632b      	str	r3, [r5, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80010c0:	2220      	movs	r2, #32
 80010c2:	f885 203d 	strb.w	r2, [r5, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80010c6:	f885 303e 	strb.w	r3, [r5, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80010ca:	6c2a      	ldr	r2, [r5, #64]	; 0x40
 80010cc:	f042 0220 	orr.w	r2, r2, #32
 80010d0:	642a      	str	r2, [r5, #64]	; 0x40
        __HAL_UNLOCK(hi2c);
 80010d2:	f885 303c 	strb.w	r3, [r5, #60]	; 0x3c
        return HAL_ERROR;
 80010d6:	2001      	movs	r0, #1
 80010d8:	e01e      	b.n	8001118 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80010da:	682b      	ldr	r3, [r5, #0]
 80010dc:	699c      	ldr	r4, [r3, #24]
 80010de:	ea26 0404 	bic.w	r4, r6, r4
 80010e2:	b2a4      	uxth	r4, r4
 80010e4:	3c00      	subs	r4, #0
 80010e6:	bf18      	it	ne
 80010e8:	2401      	movne	r4, #1
 80010ea:	b1a4      	cbz	r4, 8001116 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xa4>
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80010ec:	682b      	ldr	r3, [r5, #0]
 80010ee:	695a      	ldr	r2, [r3, #20]
 80010f0:	f412 6f80 	tst.w	r2, #1024	; 0x400
 80010f4:	d1c4      	bne.n	8001080 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xe>
    if (Timeout != HAL_MAX_DELAY)
 80010f6:	f1b7 3fff 	cmp.w	r7, #4294967295
 80010fa:	d1d8      	bne.n	80010ae <I2C_WaitOnMasterAddressFlagUntilTimeout+0x3c>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80010fc:	f3c6 4307 	ubfx	r3, r6, #16, #8
 8001100:	2b01      	cmp	r3, #1
 8001102:	d1ea      	bne.n	80010da <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
 8001104:	682b      	ldr	r3, [r5, #0]
 8001106:	695c      	ldr	r4, [r3, #20]
 8001108:	ea26 0404 	bic.w	r4, r6, r4
 800110c:	b2a4      	uxth	r4, r4
 800110e:	3c00      	subs	r4, #0
 8001110:	bf18      	it	ne
 8001112:	2401      	movne	r4, #1
 8001114:	e7e9      	b.n	80010ea <I2C_WaitOnMasterAddressFlagUntilTimeout+0x78>
  return HAL_OK;
 8001116:	2000      	movs	r0, #0
}
 8001118:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800111c <I2C_MasterRequestWrite>:
{
 800111c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800111e:	b083      	sub	sp, #12
 8001120:	4604      	mov	r4, r0
 8001122:	460d      	mov	r5, r1
 8001124:	4616      	mov	r6, r2
 8001126:	461f      	mov	r7, r3
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8001128:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 800112a:	2b08      	cmp	r3, #8
 800112c:	d00d      	beq.n	800114a <I2C_MasterRequestWrite+0x2e>
 800112e:	2b01      	cmp	r3, #1
 8001130:	d00b      	beq.n	800114a <I2C_MasterRequestWrite+0x2e>
 8001132:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8001136:	d008      	beq.n	800114a <I2C_MasterRequestWrite+0x2e>
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8001138:	6b03      	ldr	r3, [r0, #48]	; 0x30
 800113a:	2b12      	cmp	r3, #18
 800113c:	d10a      	bne.n	8001154 <I2C_MasterRequestWrite+0x38>
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800113e:	6802      	ldr	r2, [r0, #0]
 8001140:	6813      	ldr	r3, [r2, #0]
 8001142:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001146:	6013      	str	r3, [r2, #0]
 8001148:	e004      	b.n	8001154 <I2C_MasterRequestWrite+0x38>
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800114a:	6822      	ldr	r2, [r4, #0]
 800114c:	6813      	ldr	r3, [r2, #0]
 800114e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001152:	6013      	str	r3, [r2, #0]
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8001154:	9700      	str	r7, [sp, #0]
 8001156:	4633      	mov	r3, r6
 8001158:	2200      	movs	r2, #0
 800115a:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800115e:	4620      	mov	r0, r4
 8001160:	f7ff ff4d 	bl	8000ffe <I2C_WaitOnFlagUntilTimeout>
 8001164:	b980      	cbnz	r0, 8001188 <I2C_MasterRequestWrite+0x6c>
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8001166:	6923      	ldr	r3, [r4, #16]
 8001168:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800116c:	d116      	bne.n	800119c <I2C_MasterRequestWrite+0x80>
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800116e:	6823      	ldr	r3, [r4, #0]
 8001170:	f005 05fe 	and.w	r5, r5, #254	; 0xfe
 8001174:	611d      	str	r5, [r3, #16]
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8001176:	463b      	mov	r3, r7
 8001178:	4632      	mov	r2, r6
 800117a:	4913      	ldr	r1, [pc, #76]	; (80011c8 <I2C_MasterRequestWrite+0xac>)
 800117c:	4620      	mov	r0, r4
 800117e:	f7ff ff78 	bl	8001072 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8001182:	b9f8      	cbnz	r0, 80011c4 <I2C_MasterRequestWrite+0xa8>
}
 8001184:	b003      	add	sp, #12
 8001186:	bdf0      	pop	{r4, r5, r6, r7, pc}
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8001188:	6823      	ldr	r3, [r4, #0]
 800118a:	681b      	ldr	r3, [r3, #0]
 800118c:	f413 7f80 	tst.w	r3, #256	; 0x100
 8001190:	d002      	beq.n	8001198 <I2C_MasterRequestWrite+0x7c>
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8001192:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001196:	6423      	str	r3, [r4, #64]	; 0x40
    return HAL_TIMEOUT;
 8001198:	2003      	movs	r0, #3
 800119a:	e7f3      	b.n	8001184 <I2C_MasterRequestWrite+0x68>
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 800119c:	11eb      	asrs	r3, r5, #7
 800119e:	6822      	ldr	r2, [r4, #0]
 80011a0:	f003 0306 	and.w	r3, r3, #6
 80011a4:	f043 03f0 	orr.w	r3, r3, #240	; 0xf0
 80011a8:	6113      	str	r3, [r2, #16]
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 80011aa:	463b      	mov	r3, r7
 80011ac:	4632      	mov	r2, r6
 80011ae:	4907      	ldr	r1, [pc, #28]	; (80011cc <I2C_MasterRequestWrite+0xb0>)
 80011b0:	4620      	mov	r0, r4
 80011b2:	f7ff ff5e 	bl	8001072 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80011b6:	b918      	cbnz	r0, 80011c0 <I2C_MasterRequestWrite+0xa4>
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 80011b8:	6823      	ldr	r3, [r4, #0]
 80011ba:	b2ed      	uxtb	r5, r5
 80011bc:	611d      	str	r5, [r3, #16]
 80011be:	e7da      	b.n	8001176 <I2C_MasterRequestWrite+0x5a>
      return HAL_ERROR;
 80011c0:	2001      	movs	r0, #1
 80011c2:	e7df      	b.n	8001184 <I2C_MasterRequestWrite+0x68>
    return HAL_ERROR;
 80011c4:	2001      	movs	r0, #1
 80011c6:	e7dd      	b.n	8001184 <I2C_MasterRequestWrite+0x68>
 80011c8:	00010002 	.word	0x00010002
 80011cc:	00010008 	.word	0x00010008

080011d0 <I2C_WaitOnTXEFlagUntilTimeout>:
{
 80011d0:	b570      	push	{r4, r5, r6, lr}
 80011d2:	4604      	mov	r4, r0
 80011d4:	460d      	mov	r5, r1
 80011d6:	4616      	mov	r6, r2
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80011d8:	6823      	ldr	r3, [r4, #0]
 80011da:	695b      	ldr	r3, [r3, #20]
 80011dc:	f013 0f80 	tst.w	r3, #128	; 0x80
 80011e0:	d11c      	bne.n	800121c <I2C_WaitOnTXEFlagUntilTimeout+0x4c>
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80011e2:	4620      	mov	r0, r4
 80011e4:	f7ff fef2 	bl	8000fcc <I2C_IsAcknowledgeFailed>
 80011e8:	b9d0      	cbnz	r0, 8001220 <I2C_WaitOnTXEFlagUntilTimeout+0x50>
    if (Timeout != HAL_MAX_DELAY)
 80011ea:	f1b5 3fff 	cmp.w	r5, #4294967295
 80011ee:	d0f3      	beq.n	80011d8 <I2C_WaitOnTXEFlagUntilTimeout+0x8>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80011f0:	f7ff fd78 	bl	8000ce4 <HAL_GetTick>
 80011f4:	1b80      	subs	r0, r0, r6
 80011f6:	42a8      	cmp	r0, r5
 80011f8:	d801      	bhi.n	80011fe <I2C_WaitOnTXEFlagUntilTimeout+0x2e>
 80011fa:	2d00      	cmp	r5, #0
 80011fc:	d1ec      	bne.n	80011d8 <I2C_WaitOnTXEFlagUntilTimeout+0x8>
        hi2c->PreviousState       = I2C_STATE_NONE;
 80011fe:	2300      	movs	r3, #0
 8001200:	6323      	str	r3, [r4, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8001202:	2220      	movs	r2, #32
 8001204:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8001208:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800120c:	6c22      	ldr	r2, [r4, #64]	; 0x40
 800120e:	f042 0220 	orr.w	r2, r2, #32
 8001212:	6422      	str	r2, [r4, #64]	; 0x40
        __HAL_UNLOCK(hi2c);
 8001214:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
        return HAL_ERROR;
 8001218:	2001      	movs	r0, #1
 800121a:	e000      	b.n	800121e <I2C_WaitOnTXEFlagUntilTimeout+0x4e>
  return HAL_OK;
 800121c:	2000      	movs	r0, #0
}
 800121e:	bd70      	pop	{r4, r5, r6, pc}
      return HAL_ERROR;
 8001220:	2001      	movs	r0, #1
 8001222:	e7fc      	b.n	800121e <I2C_WaitOnTXEFlagUntilTimeout+0x4e>

08001224 <I2C_WaitOnBTFFlagUntilTimeout>:
{
 8001224:	b570      	push	{r4, r5, r6, lr}
 8001226:	4604      	mov	r4, r0
 8001228:	460d      	mov	r5, r1
 800122a:	4616      	mov	r6, r2
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800122c:	6823      	ldr	r3, [r4, #0]
 800122e:	695b      	ldr	r3, [r3, #20]
 8001230:	f013 0f04 	tst.w	r3, #4
 8001234:	d11c      	bne.n	8001270 <I2C_WaitOnBTFFlagUntilTimeout+0x4c>
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8001236:	4620      	mov	r0, r4
 8001238:	f7ff fec8 	bl	8000fcc <I2C_IsAcknowledgeFailed>
 800123c:	b9d0      	cbnz	r0, 8001274 <I2C_WaitOnBTFFlagUntilTimeout+0x50>
    if (Timeout != HAL_MAX_DELAY)
 800123e:	f1b5 3fff 	cmp.w	r5, #4294967295
 8001242:	d0f3      	beq.n	800122c <I2C_WaitOnBTFFlagUntilTimeout+0x8>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001244:	f7ff fd4e 	bl	8000ce4 <HAL_GetTick>
 8001248:	1b80      	subs	r0, r0, r6
 800124a:	42a8      	cmp	r0, r5
 800124c:	d801      	bhi.n	8001252 <I2C_WaitOnBTFFlagUntilTimeout+0x2e>
 800124e:	2d00      	cmp	r5, #0
 8001250:	d1ec      	bne.n	800122c <I2C_WaitOnBTFFlagUntilTimeout+0x8>
        hi2c->PreviousState       = I2C_STATE_NONE;
 8001252:	2300      	movs	r3, #0
 8001254:	6323      	str	r3, [r4, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8001256:	2220      	movs	r2, #32
 8001258:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800125c:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8001260:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8001262:	f042 0220 	orr.w	r2, r2, #32
 8001266:	6422      	str	r2, [r4, #64]	; 0x40
        __HAL_UNLOCK(hi2c);
 8001268:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
        return HAL_ERROR;
 800126c:	2001      	movs	r0, #1
 800126e:	e000      	b.n	8001272 <I2C_WaitOnBTFFlagUntilTimeout+0x4e>
  return HAL_OK;
 8001270:	2000      	movs	r0, #0
}
 8001272:	bd70      	pop	{r4, r5, r6, pc}
      return HAL_ERROR;
 8001274:	2001      	movs	r0, #1
 8001276:	e7fc      	b.n	8001272 <I2C_WaitOnBTFFlagUntilTimeout+0x4e>

08001278 <HAL_I2C_Init>:
  if (hi2c == NULL)
 8001278:	2800      	cmp	r0, #0
 800127a:	f000 80cc 	beq.w	8001416 <HAL_I2C_Init+0x19e>
{
 800127e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001280:	4604      	mov	r4, r0
  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001282:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8001286:	2b00      	cmp	r3, #0
 8001288:	d077      	beq.n	800137a <HAL_I2C_Init+0x102>
  hi2c->State = HAL_I2C_STATE_BUSY;
 800128a:	2324      	movs	r3, #36	; 0x24
 800128c:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  __HAL_I2C_DISABLE(hi2c);
 8001290:	6822      	ldr	r2, [r4, #0]
 8001292:	6813      	ldr	r3, [r2, #0]
 8001294:	f023 0301 	bic.w	r3, r3, #1
 8001298:	6013      	str	r3, [r2, #0]
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 800129a:	6822      	ldr	r2, [r4, #0]
 800129c:	6813      	ldr	r3, [r2, #0]
 800129e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80012a2:	6013      	str	r3, [r2, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80012a4:	6822      	ldr	r2, [r4, #0]
 80012a6:	6813      	ldr	r3, [r2, #0]
 80012a8:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80012ac:	6013      	str	r3, [r2, #0]
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80012ae:	f001 fa49 	bl	8002744 <HAL_RCC_GetPCLK1Freq>
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80012b2:	6862      	ldr	r2, [r4, #4]
 80012b4:	4b5a      	ldr	r3, [pc, #360]	; (8001420 <HAL_I2C_Init+0x1a8>)
 80012b6:	429a      	cmp	r2, r3
 80012b8:	d864      	bhi.n	8001384 <HAL_I2C_Init+0x10c>
 80012ba:	4b5a      	ldr	r3, [pc, #360]	; (8001424 <HAL_I2C_Init+0x1ac>)
 80012bc:	4298      	cmp	r0, r3
 80012be:	bf8c      	ite	hi
 80012c0:	2300      	movhi	r3, #0
 80012c2:	2301      	movls	r3, #1
 80012c4:	2b00      	cmp	r3, #0
 80012c6:	f040 80a8 	bne.w	800141a <HAL_I2C_Init+0x1a2>
  freqrange = I2C_FREQRANGE(pclk1);
 80012ca:	4d57      	ldr	r5, [pc, #348]	; (8001428 <HAL_I2C_Init+0x1b0>)
 80012cc:	fba5 3500 	umull	r3, r5, r5, r0
 80012d0:	0caf      	lsrs	r7, r5, #18
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80012d2:	6826      	ldr	r6, [r4, #0]
 80012d4:	6871      	ldr	r1, [r6, #4]
 80012d6:	f021 013f 	bic.w	r1, r1, #63	; 0x3f
 80012da:	ea41 4195 	orr.w	r1, r1, r5, lsr #18
 80012de:	6071      	str	r1, [r6, #4]
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80012e0:	6821      	ldr	r1, [r4, #0]
 80012e2:	6a0b      	ldr	r3, [r1, #32]
 80012e4:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80012e8:	6865      	ldr	r5, [r4, #4]
 80012ea:	4a4d      	ldr	r2, [pc, #308]	; (8001420 <HAL_I2C_Init+0x1a8>)
 80012ec:	4295      	cmp	r5, r2
 80012ee:	d84f      	bhi.n	8001390 <HAL_I2C_Init+0x118>
 80012f0:	1c7a      	adds	r2, r7, #1
 80012f2:	4313      	orrs	r3, r2
 80012f4:	620b      	str	r3, [r1, #32]
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80012f6:	6825      	ldr	r5, [r4, #0]
 80012f8:	69e9      	ldr	r1, [r5, #28]
 80012fa:	f421 414f 	bic.w	r1, r1, #52992	; 0xcf00
 80012fe:	f021 01ff 	bic.w	r1, r1, #255	; 0xff
 8001302:	6863      	ldr	r3, [r4, #4]
 8001304:	4a46      	ldr	r2, [pc, #280]	; (8001420 <HAL_I2C_Init+0x1a8>)
 8001306:	4293      	cmp	r3, r2
 8001308:	d84c      	bhi.n	80013a4 <HAL_I2C_Init+0x12c>
 800130a:	3801      	subs	r0, #1
 800130c:	005b      	lsls	r3, r3, #1
 800130e:	fbb0 f0f3 	udiv	r0, r0, r3
 8001312:	3001      	adds	r0, #1
 8001314:	f640 73fc 	movw	r3, #4092	; 0xffc
 8001318:	4218      	tst	r0, r3
 800131a:	d078      	beq.n	800140e <HAL_I2C_Init+0x196>
 800131c:	f3c0 030b 	ubfx	r3, r0, #0, #12
 8001320:	430b      	orrs	r3, r1
 8001322:	61eb      	str	r3, [r5, #28]
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8001324:	6821      	ldr	r1, [r4, #0]
 8001326:	680b      	ldr	r3, [r1, #0]
 8001328:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 800132c:	69e2      	ldr	r2, [r4, #28]
 800132e:	6a20      	ldr	r0, [r4, #32]
 8001330:	4302      	orrs	r2, r0
 8001332:	4313      	orrs	r3, r2
 8001334:	600b      	str	r3, [r1, #0]
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8001336:	6821      	ldr	r1, [r4, #0]
 8001338:	688b      	ldr	r3, [r1, #8]
 800133a:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 800133e:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8001342:	6922      	ldr	r2, [r4, #16]
 8001344:	68e0      	ldr	r0, [r4, #12]
 8001346:	4302      	orrs	r2, r0
 8001348:	4313      	orrs	r3, r2
 800134a:	608b      	str	r3, [r1, #8]
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 800134c:	6821      	ldr	r1, [r4, #0]
 800134e:	68cb      	ldr	r3, [r1, #12]
 8001350:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8001354:	6962      	ldr	r2, [r4, #20]
 8001356:	69a0      	ldr	r0, [r4, #24]
 8001358:	4302      	orrs	r2, r0
 800135a:	4313      	orrs	r3, r2
 800135c:	60cb      	str	r3, [r1, #12]
  __HAL_I2C_ENABLE(hi2c);
 800135e:	6822      	ldr	r2, [r4, #0]
 8001360:	6813      	ldr	r3, [r2, #0]
 8001362:	f043 0301 	orr.w	r3, r3, #1
 8001366:	6013      	str	r3, [r2, #0]
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001368:	2000      	movs	r0, #0
 800136a:	6420      	str	r0, [r4, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800136c:	2320      	movs	r3, #32
 800136e:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8001372:	6320      	str	r0, [r4, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001374:	f884 003e 	strb.w	r0, [r4, #62]	; 0x3e
}
 8001378:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    hi2c->Lock = HAL_UNLOCKED;
 800137a:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
    HAL_I2C_MspInit(hi2c);
 800137e:	f7ff fbb9 	bl	8000af4 <HAL_I2C_MspInit>
 8001382:	e782      	b.n	800128a <HAL_I2C_Init+0x12>
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8001384:	4b29      	ldr	r3, [pc, #164]	; (800142c <HAL_I2C_Init+0x1b4>)
 8001386:	4298      	cmp	r0, r3
 8001388:	bf8c      	ite	hi
 800138a:	2300      	movhi	r3, #0
 800138c:	2301      	movls	r3, #1
 800138e:	e799      	b.n	80012c4 <HAL_I2C_Init+0x4c>
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8001390:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8001394:	fb02 f207 	mul.w	r2, r2, r7
 8001398:	4d25      	ldr	r5, [pc, #148]	; (8001430 <HAL_I2C_Init+0x1b8>)
 800139a:	fba5 5202 	umull	r5, r2, r5, r2
 800139e:	0992      	lsrs	r2, r2, #6
 80013a0:	3201      	adds	r2, #1
 80013a2:	e7a6      	b.n	80012f2 <HAL_I2C_Init+0x7a>
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80013a4:	68a2      	ldr	r2, [r4, #8]
 80013a6:	b9ba      	cbnz	r2, 80013d8 <HAL_I2C_Init+0x160>
 80013a8:	1e46      	subs	r6, r0, #1
 80013aa:	eb03 0743 	add.w	r7, r3, r3, lsl #1
 80013ae:	fbb6 f6f7 	udiv	r6, r6, r7
 80013b2:	3601      	adds	r6, #1
 80013b4:	f3c6 060b 	ubfx	r6, r6, #0, #12
 80013b8:	fab6 f686 	clz	r6, r6
 80013bc:	0976      	lsrs	r6, r6, #5
 80013be:	bb46      	cbnz	r6, 8001412 <HAL_I2C_Init+0x19a>
 80013c0:	b9c2      	cbnz	r2, 80013f4 <HAL_I2C_Init+0x17c>
 80013c2:	1e42      	subs	r2, r0, #1
 80013c4:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 80013c8:	fbb2 f2f3 	udiv	r2, r2, r3
 80013cc:	3201      	adds	r2, #1
 80013ce:	f3c2 020b 	ubfx	r2, r2, #0, #12
 80013d2:	f442 4300 	orr.w	r3, r2, #32768	; 0x8000
 80013d6:	e7a3      	b.n	8001320 <HAL_I2C_Init+0xa8>
 80013d8:	1e46      	subs	r6, r0, #1
 80013da:	eb03 0783 	add.w	r7, r3, r3, lsl #2
 80013de:	eb07 0787 	add.w	r7, r7, r7, lsl #2
 80013e2:	fbb6 f6f7 	udiv	r6, r6, r7
 80013e6:	3601      	adds	r6, #1
 80013e8:	f3c6 060b 	ubfx	r6, r6, #0, #12
 80013ec:	fab6 f686 	clz	r6, r6
 80013f0:	0976      	lsrs	r6, r6, #5
 80013f2:	e7e4      	b.n	80013be <HAL_I2C_Init+0x146>
 80013f4:	1e42      	subs	r2, r0, #1
 80013f6:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 80013fa:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 80013fe:	fbb2 f2f3 	udiv	r2, r2, r3
 8001402:	3201      	adds	r2, #1
 8001404:	f3c2 020b 	ubfx	r2, r2, #0, #12
 8001408:	f442 4340 	orr.w	r3, r2, #49152	; 0xc000
 800140c:	e788      	b.n	8001320 <HAL_I2C_Init+0xa8>
 800140e:	2304      	movs	r3, #4
 8001410:	e786      	b.n	8001320 <HAL_I2C_Init+0xa8>
 8001412:	2301      	movs	r3, #1
 8001414:	e784      	b.n	8001320 <HAL_I2C_Init+0xa8>
    return HAL_ERROR;
 8001416:	2001      	movs	r0, #1
}
 8001418:	4770      	bx	lr
    return HAL_ERROR;
 800141a:	2001      	movs	r0, #1
 800141c:	e7ac      	b.n	8001378 <HAL_I2C_Init+0x100>
 800141e:	bf00      	nop
 8001420:	000186a0 	.word	0x000186a0
 8001424:	001e847f 	.word	0x001e847f
 8001428:	431bde83 	.word	0x431bde83
 800142c:	003d08ff 	.word	0x003d08ff
 8001430:	10624dd3 	.word	0x10624dd3

08001434 <HAL_I2C_Master_Transmit>:
{
 8001434:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8001438:	b085      	sub	sp, #20
 800143a:	4604      	mov	r4, r0
 800143c:	460f      	mov	r7, r1
 800143e:	4691      	mov	r9, r2
 8001440:	4698      	mov	r8, r3
 8001442:	9e0c      	ldr	r6, [sp, #48]	; 0x30
  uint32_t tickstart = HAL_GetTick();
 8001444:	f7ff fc4e 	bl	8000ce4 <HAL_GetTick>
 8001448:	4605      	mov	r5, r0
  if (hi2c->State == HAL_I2C_STATE_READY)
 800144a:	f894 003d 	ldrb.w	r0, [r4, #61]	; 0x3d
 800144e:	b2c0      	uxtb	r0, r0
 8001450:	2820      	cmp	r0, #32
 8001452:	d004      	beq.n	800145e <HAL_I2C_Master_Transmit+0x2a>
    return HAL_BUSY;
 8001454:	2702      	movs	r7, #2
}
 8001456:	4638      	mov	r0, r7
 8001458:	b005      	add	sp, #20
 800145a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800145e:	9500      	str	r5, [sp, #0]
 8001460:	2319      	movs	r3, #25
 8001462:	2201      	movs	r2, #1
 8001464:	494f      	ldr	r1, [pc, #316]	; (80015a4 <HAL_I2C_Master_Transmit+0x170>)
 8001466:	4620      	mov	r0, r4
 8001468:	f7ff fdc9 	bl	8000ffe <I2C_WaitOnFlagUntilTimeout>
 800146c:	2800      	cmp	r0, #0
 800146e:	f040 8092 	bne.w	8001596 <HAL_I2C_Master_Transmit+0x162>
    __HAL_LOCK(hi2c);
 8001472:	f894 303c 	ldrb.w	r3, [r4, #60]	; 0x3c
 8001476:	2b01      	cmp	r3, #1
 8001478:	f000 808f 	beq.w	800159a <HAL_I2C_Master_Transmit+0x166>
 800147c:	2301      	movs	r3, #1
 800147e:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8001482:	6823      	ldr	r3, [r4, #0]
 8001484:	681a      	ldr	r2, [r3, #0]
 8001486:	f012 0f01 	tst.w	r2, #1
 800148a:	d103      	bne.n	8001494 <HAL_I2C_Master_Transmit+0x60>
      __HAL_I2C_ENABLE(hi2c);
 800148c:	681a      	ldr	r2, [r3, #0]
 800148e:	f042 0201 	orr.w	r2, r2, #1
 8001492:	601a      	str	r2, [r3, #0]
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8001494:	6822      	ldr	r2, [r4, #0]
 8001496:	6813      	ldr	r3, [r2, #0]
 8001498:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800149c:	6013      	str	r3, [r2, #0]
    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 800149e:	2321      	movs	r3, #33	; 0x21
 80014a0:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 80014a4:	2310      	movs	r3, #16
 80014a6:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 80014aa:	2300      	movs	r3, #0
 80014ac:	6423      	str	r3, [r4, #64]	; 0x40
    hi2c->pBuffPtr    = pData;
 80014ae:	f8c4 9024 	str.w	r9, [r4, #36]	; 0x24
    hi2c->XferCount   = Size;
 80014b2:	f8a4 802a 	strh.w	r8, [r4, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80014b6:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 80014b8:	8523      	strh	r3, [r4, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80014ba:	4b3b      	ldr	r3, [pc, #236]	; (80015a8 <HAL_I2C_Master_Transmit+0x174>)
 80014bc:	62e3      	str	r3, [r4, #44]	; 0x2c
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 80014be:	462b      	mov	r3, r5
 80014c0:	4632      	mov	r2, r6
 80014c2:	4639      	mov	r1, r7
 80014c4:	4620      	mov	r0, r4
 80014c6:	f7ff fe29 	bl	800111c <I2C_MasterRequestWrite>
 80014ca:	4607      	mov	r7, r0
 80014cc:	2800      	cmp	r0, #0
 80014ce:	d166      	bne.n	800159e <HAL_I2C_Master_Transmit+0x16a>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80014d0:	2300      	movs	r3, #0
 80014d2:	9303      	str	r3, [sp, #12]
 80014d4:	6823      	ldr	r3, [r4, #0]
 80014d6:	695a      	ldr	r2, [r3, #20]
 80014d8:	9203      	str	r2, [sp, #12]
 80014da:	699b      	ldr	r3, [r3, #24]
 80014dc:	9303      	str	r3, [sp, #12]
 80014de:	9b03      	ldr	r3, [sp, #12]
    while (hi2c->XferSize > 0U)
 80014e0:	e011      	b.n	8001506 <HAL_I2C_Master_Transmit+0xd2>
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80014e2:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80014e4:	2b04      	cmp	r3, #4
 80014e6:	d001      	beq.n	80014ec <HAL_I2C_Master_Transmit+0xb8>
        return HAL_ERROR;
 80014e8:	2701      	movs	r7, #1
 80014ea:	e7b4      	b.n	8001456 <HAL_I2C_Master_Transmit+0x22>
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80014ec:	6822      	ldr	r2, [r4, #0]
 80014ee:	6813      	ldr	r3, [r2, #0]
 80014f0:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80014f4:	6013      	str	r3, [r2, #0]
 80014f6:	e7f7      	b.n	80014e8 <HAL_I2C_Master_Transmit+0xb4>
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80014f8:	462a      	mov	r2, r5
 80014fa:	4631      	mov	r1, r6
 80014fc:	4620      	mov	r0, r4
 80014fe:	f7ff fe91 	bl	8001224 <I2C_WaitOnBTFFlagUntilTimeout>
 8001502:	2800      	cmp	r0, #0
 8001504:	d12e      	bne.n	8001564 <HAL_I2C_Master_Transmit+0x130>
    while (hi2c->XferSize > 0U)
 8001506:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 8001508:	2b00      	cmp	r3, #0
 800150a:	d036      	beq.n	800157a <HAL_I2C_Master_Transmit+0x146>
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800150c:	462a      	mov	r2, r5
 800150e:	4631      	mov	r1, r6
 8001510:	4620      	mov	r0, r4
 8001512:	f7ff fe5d 	bl	80011d0 <I2C_WaitOnTXEFlagUntilTimeout>
 8001516:	2800      	cmp	r0, #0
 8001518:	d1e3      	bne.n	80014e2 <HAL_I2C_Master_Transmit+0xae>
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800151a:	6a62      	ldr	r2, [r4, #36]	; 0x24
 800151c:	6823      	ldr	r3, [r4, #0]
 800151e:	7812      	ldrb	r2, [r2, #0]
 8001520:	611a      	str	r2, [r3, #16]
      hi2c->pBuffPtr++;
 8001522:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8001524:	1c4b      	adds	r3, r1, #1
 8001526:	6263      	str	r3, [r4, #36]	; 0x24
      hi2c->XferCount--;
 8001528:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 800152a:	b29b      	uxth	r3, r3
 800152c:	3b01      	subs	r3, #1
 800152e:	b29b      	uxth	r3, r3
 8001530:	8563      	strh	r3, [r4, #42]	; 0x2a
      hi2c->XferSize--;
 8001532:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 8001534:	3b01      	subs	r3, #1
 8001536:	b29b      	uxth	r3, r3
 8001538:	8523      	strh	r3, [r4, #40]	; 0x28
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 800153a:	6822      	ldr	r2, [r4, #0]
 800153c:	6950      	ldr	r0, [r2, #20]
 800153e:	f010 0f04 	tst.w	r0, #4
 8001542:	d0d9      	beq.n	80014f8 <HAL_I2C_Master_Transmit+0xc4>
 8001544:	2b00      	cmp	r3, #0
 8001546:	d0d7      	beq.n	80014f8 <HAL_I2C_Master_Transmit+0xc4>
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8001548:	784b      	ldrb	r3, [r1, #1]
 800154a:	6113      	str	r3, [r2, #16]
        hi2c->pBuffPtr++;
 800154c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800154e:	3301      	adds	r3, #1
 8001550:	6263      	str	r3, [r4, #36]	; 0x24
        hi2c->XferCount--;
 8001552:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8001554:	b29b      	uxth	r3, r3
 8001556:	3b01      	subs	r3, #1
 8001558:	b29b      	uxth	r3, r3
 800155a:	8563      	strh	r3, [r4, #42]	; 0x2a
        hi2c->XferSize--;
 800155c:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 800155e:	3b01      	subs	r3, #1
 8001560:	8523      	strh	r3, [r4, #40]	; 0x28
 8001562:	e7c9      	b.n	80014f8 <HAL_I2C_Master_Transmit+0xc4>
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001564:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8001566:	2b04      	cmp	r3, #4
 8001568:	d001      	beq.n	800156e <HAL_I2C_Master_Transmit+0x13a>
        return HAL_ERROR;
 800156a:	2701      	movs	r7, #1
 800156c:	e773      	b.n	8001456 <HAL_I2C_Master_Transmit+0x22>
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800156e:	6822      	ldr	r2, [r4, #0]
 8001570:	6813      	ldr	r3, [r2, #0]
 8001572:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001576:	6013      	str	r3, [r2, #0]
 8001578:	e7f7      	b.n	800156a <HAL_I2C_Master_Transmit+0x136>
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800157a:	6822      	ldr	r2, [r4, #0]
 800157c:	6813      	ldr	r3, [r2, #0]
 800157e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001582:	6013      	str	r3, [r2, #0]
    hi2c->State = HAL_I2C_STATE_READY;
 8001584:	2320      	movs	r3, #32
 8001586:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800158a:	2300      	movs	r3, #0
 800158c:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
    __HAL_UNLOCK(hi2c);
 8001590:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
    return HAL_OK;
 8001594:	e75f      	b.n	8001456 <HAL_I2C_Master_Transmit+0x22>
      return HAL_BUSY;
 8001596:	2702      	movs	r7, #2
 8001598:	e75d      	b.n	8001456 <HAL_I2C_Master_Transmit+0x22>
    __HAL_LOCK(hi2c);
 800159a:	2702      	movs	r7, #2
 800159c:	e75b      	b.n	8001456 <HAL_I2C_Master_Transmit+0x22>
      return HAL_ERROR;
 800159e:	2701      	movs	r7, #1
 80015a0:	e759      	b.n	8001456 <HAL_I2C_Master_Transmit+0x22>
 80015a2:	bf00      	nop
 80015a4:	00100002 	.word	0x00100002
 80015a8:	ffff0000 	.word	0xffff0000

080015ac <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80015ac:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80015b0:	b082      	sub	sp, #8
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80015b2:	f8d0 8000 	ldr.w	r8, [r0]
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];

  if (ep->xfer_count > ep->xfer_len)
 80015b6:	ebc1 03c1 	rsb	r3, r1, r1, lsl #3
 80015ba:	eb00 0383 	add.w	r3, r0, r3, lsl #2
 80015be:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80015c0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80015c2:	429a      	cmp	r2, r3
 80015c4:	d855      	bhi.n	8001672 <PCD_WriteEmptyTxFifo+0xc6>
 80015c6:	4607      	mov	r7, r0
 80015c8:	460c      	mov	r4, r1
 80015ca:	46c1      	mov	r9, r8
  {
    return HAL_ERROR;
  }

  len = ep->xfer_len - ep->xfer_count;
 80015cc:	1a9b      	subs	r3, r3, r2

  if (len > ep->maxpacket)
 80015ce:	ebc1 02c1 	rsb	r2, r1, r1, lsl #3
 80015d2:	eb00 0282 	add.w	r2, r0, r2, lsl #2
 80015d6:	6c52      	ldr	r2, [r2, #68]	; 0x44
 80015d8:	429a      	cmp	r2, r3
 80015da:	d300      	bcc.n	80015de <PCD_WriteEmptyTxFifo+0x32>
  len = ep->xfer_len - ep->xfer_count;
 80015dc:	461a      	mov	r2, r3
  {
    len = ep->maxpacket;
  }

  len32b = (len + 3U) / 4U;
 80015de:	f102 0a03 	add.w	sl, r2, #3
 80015e2:	ea4f 0a9a 	mov.w	sl, sl, lsr #2

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80015e6:	e015      	b.n	8001614 <PCD_WriteEmptyTxFifo+0x68>

    if (len > ep->maxpacket)
    {
      len = ep->maxpacket;
    }
    len32b = (len + 3U) / 4U;
 80015e8:	f106 0a03 	add.w	sl, r6, #3
 80015ec:	ea4f 0a9a 	mov.w	sl, sl, lsr #2

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 80015f0:	ebc4 05c4 	rsb	r5, r4, r4, lsl #3
 80015f4:	eb07 0585 	add.w	r5, r7, r5, lsl #2
 80015f8:	6ca9      	ldr	r1, [r5, #72]	; 0x48
 80015fa:	7c3b      	ldrb	r3, [r7, #16]
 80015fc:	9300      	str	r3, [sp, #0]
 80015fe:	b2b3      	uxth	r3, r6
 8001600:	b2e2      	uxtb	r2, r4
 8001602:	4640      	mov	r0, r8
 8001604:	f001 fbf2 	bl	8002dec <USB_WritePacket>
                          (uint8_t)hpcd->Init.dma_enable);

    ep->xfer_buff  += len;
 8001608:	6cab      	ldr	r3, [r5, #72]	; 0x48
 800160a:	4433      	add	r3, r6
 800160c:	64ab      	str	r3, [r5, #72]	; 0x48
    ep->xfer_count += len;
 800160e:	6d6b      	ldr	r3, [r5, #84]	; 0x54
 8001610:	441e      	add	r6, r3
 8001612:	656e      	str	r6, [r5, #84]	; 0x54
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8001614:	eb09 1344 	add.w	r3, r9, r4, lsl #5
 8001618:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800161c:	699b      	ldr	r3, [r3, #24]
 800161e:	b29b      	uxth	r3, r3
 8001620:	4553      	cmp	r3, sl
 8001622:	d312      	bcc.n	800164a <PCD_WriteEmptyTxFifo+0x9e>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8001624:	ebc4 02c4 	rsb	r2, r4, r4, lsl #3
 8001628:	eb07 0282 	add.w	r2, r7, r2, lsl #2
 800162c:	6d51      	ldr	r1, [r2, #84]	; 0x54
 800162e:	6d13      	ldr	r3, [r2, #80]	; 0x50
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8001630:	4299      	cmp	r1, r3
 8001632:	d20a      	bcs.n	800164a <PCD_WriteEmptyTxFifo+0x9e>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8001634:	b14b      	cbz	r3, 800164a <PCD_WriteEmptyTxFifo+0x9e>
    len = ep->xfer_len - ep->xfer_count;
 8001636:	1a5b      	subs	r3, r3, r1
    if (len > ep->maxpacket)
 8001638:	ebc4 02c4 	rsb	r2, r4, r4, lsl #3
 800163c:	eb07 0282 	add.w	r2, r7, r2, lsl #2
 8001640:	6c56      	ldr	r6, [r2, #68]	; 0x44
 8001642:	429e      	cmp	r6, r3
 8001644:	d3d0      	bcc.n	80015e8 <PCD_WriteEmptyTxFifo+0x3c>
    len = ep->xfer_len - ep->xfer_count;
 8001646:	461e      	mov	r6, r3
 8001648:	e7ce      	b.n	80015e8 <PCD_WriteEmptyTxFifo+0x3c>
  }

  if (ep->xfer_len <= ep->xfer_count)
 800164a:	ebc4 00c4 	rsb	r0, r4, r4, lsl #3
 800164e:	eb07 0780 	add.w	r7, r7, r0, lsl #2
 8001652:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8001654:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001656:	429a      	cmp	r2, r3
 8001658:	d80f      	bhi.n	800167a <PCD_WriteEmptyTxFifo+0xce>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 800165a:	f004 040f 	and.w	r4, r4, #15
 800165e:	2301      	movs	r3, #1
 8001660:	40a3      	lsls	r3, r4
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8001662:	f8d8 4834 	ldr.w	r4, [r8, #2100]	; 0x834
 8001666:	ea24 0403 	bic.w	r4, r4, r3
 800166a:	f8c8 4834 	str.w	r4, [r8, #2100]	; 0x834
  }

  return HAL_OK;
 800166e:	2000      	movs	r0, #0
 8001670:	e000      	b.n	8001674 <PCD_WriteEmptyTxFifo+0xc8>
    return HAL_ERROR;
 8001672:	2001      	movs	r0, #1
}
 8001674:	b002      	add	sp, #8
 8001676:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  return HAL_OK;
 800167a:	2000      	movs	r0, #0
 800167c:	e7fa      	b.n	8001674 <PCD_WriteEmptyTxFifo+0xc8>

0800167e <HAL_PCD_Init>:
{
 800167e:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001680:	b08b      	sub	sp, #44	; 0x2c
  if (hpcd == NULL)
 8001682:	2800      	cmp	r0, #0
 8001684:	f000 808c 	beq.w	80017a0 <HAL_PCD_Init+0x122>
 8001688:	4605      	mov	r5, r0
  USBx = hpcd->Instance;
 800168a:	6804      	ldr	r4, [r0, #0]
  if (hpcd->State == HAL_PCD_STATE_RESET)
 800168c:	f890 33bd 	ldrb.w	r3, [r0, #957]	; 0x3bd
 8001690:	b32b      	cbz	r3, 80016de <HAL_PCD_Init+0x60>
  hpcd->State = HAL_PCD_STATE_BUSY;
 8001692:	2303      	movs	r3, #3
 8001694:	f885 33bd 	strb.w	r3, [r5, #957]	; 0x3bd
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8001698:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 800169a:	f413 7f80 	tst.w	r3, #256	; 0x100
 800169e:	d101      	bne.n	80016a4 <HAL_PCD_Init+0x26>
    hpcd->Init.dma_enable = 0U;
 80016a0:	2300      	movs	r3, #0
 80016a2:	612b      	str	r3, [r5, #16]
  __HAL_PCD_DISABLE(hpcd);
 80016a4:	6828      	ldr	r0, [r5, #0]
 80016a6:	f001 f941 	bl	800292c <USB_DisableGlobalInt>
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80016aa:	462c      	mov	r4, r5
 80016ac:	f854 7b10 	ldr.w	r7, [r4], #16
 80016b0:	466e      	mov	r6, sp
 80016b2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80016b4:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 80016b6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80016b8:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 80016ba:	e894 0003 	ldmia.w	r4, {r0, r1}
 80016be:	e886 0003 	stmia.w	r6, {r0, r1}
 80016c2:	1d2b      	adds	r3, r5, #4
 80016c4:	cb0e      	ldmia	r3, {r1, r2, r3}
 80016c6:	4638      	mov	r0, r7
 80016c8:	f001 f872 	bl	80027b0 <USB_CoreInit>
 80016cc:	4604      	mov	r4, r0
 80016ce:	b158      	cbz	r0, 80016e8 <HAL_PCD_Init+0x6a>
    hpcd->State = HAL_PCD_STATE_ERROR;
 80016d0:	2302      	movs	r3, #2
 80016d2:	f885 33bd 	strb.w	r3, [r5, #957]	; 0x3bd
    return HAL_ERROR;
 80016d6:	2401      	movs	r4, #1
}
 80016d8:	4620      	mov	r0, r4
 80016da:	b00b      	add	sp, #44	; 0x2c
 80016dc:	bdf0      	pop	{r4, r5, r6, r7, pc}
    hpcd->Lock = HAL_UNLOCKED;
 80016de:	f880 33bc 	strb.w	r3, [r0, #956]	; 0x3bc
    HAL_PCD_MspInit(hpcd);
 80016e2:	f004 fa31 	bl	8005b48 <HAL_PCD_MspInit>
 80016e6:	e7d4      	b.n	8001692 <HAL_PCD_Init+0x14>
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 80016e8:	2100      	movs	r1, #0
 80016ea:	6828      	ldr	r0, [r5, #0]
 80016ec:	f001 fd80 	bl	80031f0 <USB_SetCurrentMode>
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80016f0:	4623      	mov	r3, r4
 80016f2:	e016      	b.n	8001722 <HAL_PCD_Init+0xa4>
    hpcd->IN_ep[i].is_in = 1U;
 80016f4:	ebc3 02c3 	rsb	r2, r3, r3, lsl #3
 80016f8:	eb05 0282 	add.w	r2, r5, r2, lsl #2
 80016fc:	2101      	movs	r1, #1
 80016fe:	f882 103d 	strb.w	r1, [r2, #61]	; 0x3d
    hpcd->IN_ep[i].num = i;
 8001702:	f882 303c 	strb.w	r3, [r2, #60]	; 0x3c
    hpcd->IN_ep[i].tx_fifo_num = i;
 8001706:	f8a2 3042 	strh.w	r3, [r2, #66]	; 0x42
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 800170a:	2100      	movs	r1, #0
 800170c:	f882 103f 	strb.w	r1, [r2, #63]	; 0x3f
    hpcd->IN_ep[i].maxpacket = 0U;
 8001710:	6451      	str	r1, [r2, #68]	; 0x44
    hpcd->IN_ep[i].xfer_buff = 0U;
 8001712:	6491      	str	r1, [r2, #72]	; 0x48
    hpcd->IN_ep[i].xfer_len = 0U;
 8001714:	ebc3 02c3 	rsb	r2, r3, r3, lsl #3
 8001718:	eb05 0282 	add.w	r2, r5, r2, lsl #2
 800171c:	6511      	str	r1, [r2, #80]	; 0x50
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800171e:	3301      	adds	r3, #1
 8001720:	b2db      	uxtb	r3, r3
 8001722:	6869      	ldr	r1, [r5, #4]
 8001724:	428b      	cmp	r3, r1
 8001726:	d3e5      	bcc.n	80016f4 <HAL_PCD_Init+0x76>
 8001728:	e016      	b.n	8001758 <HAL_PCD_Init+0xda>
    hpcd->OUT_ep[i].is_in = 0U;
 800172a:	ebc4 03c4 	rsb	r3, r4, r4, lsl #3
 800172e:	eb05 0383 	add.w	r3, r5, r3, lsl #2
 8001732:	2200      	movs	r2, #0
 8001734:	f883 21fd 	strb.w	r2, [r3, #509]	; 0x1fd
    hpcd->OUT_ep[i].num = i;
 8001738:	f883 41fc 	strb.w	r4, [r3, #508]	; 0x1fc
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 800173c:	f883 21ff 	strb.w	r2, [r3, #511]	; 0x1ff
    hpcd->OUT_ep[i].maxpacket = 0U;
 8001740:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8001744:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
    hpcd->OUT_ep[i].xfer_len = 0U;
 8001748:	ebc4 03c4 	rsb	r3, r4, r4, lsl #3
 800174c:	eb05 0383 	add.w	r3, r5, r3, lsl #2
 8001750:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001754:	3401      	adds	r4, #1
 8001756:	b2e4      	uxtb	r4, r4
 8001758:	42a1      	cmp	r1, r4
 800175a:	d8e6      	bhi.n	800172a <HAL_PCD_Init+0xac>
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800175c:	462c      	mov	r4, r5
 800175e:	f854 7b10 	ldr.w	r7, [r4], #16
 8001762:	466e      	mov	r6, sp
 8001764:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001766:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 8001768:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800176a:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 800176c:	e894 0003 	ldmia.w	r4, {r0, r1}
 8001770:	e886 0003 	stmia.w	r6, {r0, r1}
 8001774:	1d2b      	adds	r3, r5, #4
 8001776:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001778:	4638      	mov	r0, r7
 800177a:	f001 f913 	bl	80029a4 <USB_DevInit>
 800177e:	4604      	mov	r4, r0
 8001780:	b120      	cbz	r0, 800178c <HAL_PCD_Init+0x10e>
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001782:	2302      	movs	r3, #2
 8001784:	f885 33bd 	strb.w	r3, [r5, #957]	; 0x3bd
    return HAL_ERROR;
 8001788:	2401      	movs	r4, #1
 800178a:	e7a5      	b.n	80016d8 <HAL_PCD_Init+0x5a>
  hpcd->USB_Address = 0U;
 800178c:	2300      	movs	r3, #0
 800178e:	f885 3038 	strb.w	r3, [r5, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8001792:	2301      	movs	r3, #1
 8001794:	f885 33bd 	strb.w	r3, [r5, #957]	; 0x3bd
  (void)USB_DevDisconnect(hpcd->Instance);
 8001798:	6828      	ldr	r0, [r5, #0]
 800179a:	f001 fce6 	bl	800316a <USB_DevDisconnect>
  return HAL_OK;
 800179e:	e79b      	b.n	80016d8 <HAL_PCD_Init+0x5a>
    return HAL_ERROR;
 80017a0:	2401      	movs	r4, #1
 80017a2:	e799      	b.n	80016d8 <HAL_PCD_Init+0x5a>

080017a4 <HAL_PCD_Start>:
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80017a4:	6802      	ldr	r2, [r0, #0]
  __HAL_LOCK(hpcd);
 80017a6:	f890 33bc 	ldrb.w	r3, [r0, #956]	; 0x3bc
 80017aa:	2b01      	cmp	r3, #1
 80017ac:	d019      	beq.n	80017e2 <HAL_PCD_Start+0x3e>
{
 80017ae:	b510      	push	{r4, lr}
 80017b0:	4604      	mov	r4, r0
  __HAL_LOCK(hpcd);
 80017b2:	2301      	movs	r3, #1
 80017b4:	f880 33bc 	strb.w	r3, [r0, #956]	; 0x3bc
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 80017b8:	6a83      	ldr	r3, [r0, #40]	; 0x28
 80017ba:	2b01      	cmp	r3, #1
 80017bc:	d009      	beq.n	80017d2 <HAL_PCD_Start+0x2e>
  __HAL_PCD_ENABLE(hpcd);
 80017be:	6820      	ldr	r0, [r4, #0]
 80017c0:	f001 f8ae 	bl	8002920 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 80017c4:	6820      	ldr	r0, [r4, #0]
 80017c6:	f001 fcc2 	bl	800314e <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 80017ca:	2000      	movs	r0, #0
 80017cc:	f884 03bc 	strb.w	r0, [r4, #956]	; 0x3bc
}
 80017d0:	bd10      	pop	{r4, pc}
      (hpcd->Init.phy_itface != USB_OTG_ULPI_PHY))
 80017d2:	6983      	ldr	r3, [r0, #24]
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 80017d4:	2b01      	cmp	r3, #1
 80017d6:	d0f2      	beq.n	80017be <HAL_PCD_Start+0x1a>
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 80017d8:	6b93      	ldr	r3, [r2, #56]	; 0x38
 80017da:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80017de:	6393      	str	r3, [r2, #56]	; 0x38
 80017e0:	e7ed      	b.n	80017be <HAL_PCD_Start+0x1a>
  __HAL_LOCK(hpcd);
 80017e2:	2002      	movs	r0, #2
}
 80017e4:	4770      	bx	lr
	...

080017e8 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80017e8:	b570      	push	{r4, r5, r6, lr}
 80017ea:	4604      	mov	r4, r0
 80017ec:	460d      	mov	r5, r1
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80017ee:	6800      	ldr	r0, [r0, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 80017f0:	6c06      	ldr	r6, [r0, #64]	; 0x40
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 80017f2:	eb00 1341 	add.w	r3, r0, r1, lsl #5
 80017f6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80017fa:	689a      	ldr	r2, [r3, #8]

  if (hpcd->Init.dma_enable == 1U)
 80017fc:	6921      	ldr	r1, [r4, #16]
 80017fe:	2901      	cmp	r1, #1
 8001800:	d011      	beq.n	8001826 <PCD_EP_OutXfrComplete_int+0x3e>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 8001802:	4935      	ldr	r1, [pc, #212]	; (80018d8 <PCD_EP_OutXfrComplete_int+0xf0>)
 8001804:	428e      	cmp	r6, r1
 8001806:	d050      	beq.n	80018aa <PCD_EP_OutXfrComplete_int+0xc2>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8001808:	b93d      	cbnz	r5, 800181a <PCD_EP_OutXfrComplete_int+0x32>
 800180a:	ebc5 03c5 	rsb	r3, r5, r5, lsl #3
 800180e:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8001812:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 8001816:	2b00      	cmp	r3, #0
 8001818:	d058      	beq.n	80018cc <PCD_EP_OutXfrComplete_int+0xe4>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 800181a:	b2e9      	uxtb	r1, r5
 800181c:	4620      	mov	r0, r4
 800181e:	f004 f9e7 	bl	8005bf0 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
}
 8001822:	2000      	movs	r0, #0
 8001824:	bd70      	pop	{r4, r5, r6, pc}
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 8001826:	f012 0f08 	tst.w	r2, #8
 800182a:	d009      	beq.n	8001840 <PCD_EP_OutXfrComplete_int+0x58>
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800182c:	492b      	ldr	r1, [pc, #172]	; (80018dc <PCD_EP_OutXfrComplete_int+0xf4>)
 800182e:	428e      	cmp	r6, r1
 8001830:	d9f7      	bls.n	8001822 <PCD_EP_OutXfrComplete_int+0x3a>
 8001832:	f412 4f00 	tst.w	r2, #32768	; 0x8000
 8001836:	d0f4      	beq.n	8001822 <PCD_EP_OutXfrComplete_int+0x3a>
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8001838:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 800183c:	609a      	str	r2, [r3, #8]
 800183e:	e7f0      	b.n	8001822 <PCD_EP_OutXfrComplete_int+0x3a>
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 8001840:	f012 0f20 	tst.w	r2, #32
 8001844:	d002      	beq.n	800184c <PCD_EP_OutXfrComplete_int+0x64>
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8001846:	2220      	movs	r2, #32
 8001848:	609a      	str	r2, [r3, #8]
 800184a:	e7ea      	b.n	8001822 <PCD_EP_OutXfrComplete_int+0x3a>
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 800184c:	f012 0f28 	tst.w	r2, #40	; 0x28
 8001850:	d1e7      	bne.n	8001822 <PCD_EP_OutXfrComplete_int+0x3a>
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8001852:	4922      	ldr	r1, [pc, #136]	; (80018dc <PCD_EP_OutXfrComplete_int+0xf4>)
 8001854:	428e      	cmp	r6, r1
 8001856:	d906      	bls.n	8001866 <PCD_EP_OutXfrComplete_int+0x7e>
 8001858:	f412 4f00 	tst.w	r2, #32768	; 0x8000
 800185c:	d003      	beq.n	8001866 <PCD_EP_OutXfrComplete_int+0x7e>
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800185e:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8001862:	609a      	str	r2, [r3, #8]
 8001864:	e7dd      	b.n	8001822 <PCD_EP_OutXfrComplete_int+0x3a>
          hpcd->OUT_ep[epnum].maxpacket -
 8001866:	ebc5 02c5 	rsb	r2, r5, r5, lsl #3
 800186a:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 800186e:	f8d2 1204 	ldr.w	r1, [r2, #516]	; 0x204
          (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 8001872:	691b      	ldr	r3, [r3, #16]
 8001874:	f3c3 0312 	ubfx	r3, r3, #0, #19
          hpcd->OUT_ep[epnum].maxpacket -
 8001878:	1ac9      	subs	r1, r1, r3
        hpcd->OUT_ep[epnum].xfer_count =
 800187a:	f8c2 1214 	str.w	r1, [r2, #532]	; 0x214
        hpcd->OUT_ep[epnum].xfer_buff += hpcd->OUT_ep[epnum].maxpacket;
 800187e:	f8d2 1204 	ldr.w	r1, [r2, #516]	; 0x204
 8001882:	f8d2 3208 	ldr.w	r3, [r2, #520]	; 0x208
 8001886:	440b      	add	r3, r1
 8001888:	f8c2 3208 	str.w	r3, [r2, #520]	; 0x208
        if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 800188c:	b915      	cbnz	r5, 8001894 <PCD_EP_OutXfrComplete_int+0xac>
 800188e:	f8d2 3210 	ldr.w	r3, [r2, #528]	; 0x210
 8001892:	b123      	cbz	r3, 800189e <PCD_EP_OutXfrComplete_int+0xb6>
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8001894:	b2e9      	uxtb	r1, r5
 8001896:	4620      	mov	r0, r4
 8001898:	f004 f9aa 	bl	8005bf0 <HAL_PCD_DataOutStageCallback>
 800189c:	e7c1      	b.n	8001822 <PCD_EP_OutXfrComplete_int+0x3a>
          (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800189e:	f504 7271 	add.w	r2, r4, #964	; 0x3c4
 80018a2:	2101      	movs	r1, #1
 80018a4:	f001 fce6 	bl	8003274 <USB_EP0_OutStart>
 80018a8:	e7f4      	b.n	8001894 <PCD_EP_OutXfrComplete_int+0xac>
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 80018aa:	f412 4f00 	tst.w	r2, #32768	; 0x8000
 80018ae:	d003      	beq.n	80018b8 <PCD_EP_OutXfrComplete_int+0xd0>
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80018b0:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 80018b4:	609a      	str	r2, [r3, #8]
 80018b6:	e7b4      	b.n	8001822 <PCD_EP_OutXfrComplete_int+0x3a>
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 80018b8:	f012 0f20 	tst.w	r2, #32
 80018bc:	d001      	beq.n	80018c2 <PCD_EP_OutXfrComplete_int+0xda>
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80018be:	2220      	movs	r2, #32
 80018c0:	609a      	str	r2, [r3, #8]
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80018c2:	b2e9      	uxtb	r1, r5
 80018c4:	4620      	mov	r0, r4
 80018c6:	f004 f993 	bl	8005bf0 <HAL_PCD_DataOutStageCallback>
 80018ca:	e7aa      	b.n	8001822 <PCD_EP_OutXfrComplete_int+0x3a>
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 80018cc:	f504 7271 	add.w	r2, r4, #964	; 0x3c4
 80018d0:	2100      	movs	r1, #0
 80018d2:	f001 fccf 	bl	8003274 <USB_EP0_OutStart>
 80018d6:	e7a0      	b.n	800181a <PCD_EP_OutXfrComplete_int+0x32>
 80018d8:	4f54310a 	.word	0x4f54310a
 80018dc:	4f54300a 	.word	0x4f54300a

080018e0 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80018e0:	b538      	push	{r3, r4, r5, lr}
 80018e2:	4604      	mov	r4, r0
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80018e4:	6803      	ldr	r3, [r0, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 80018e6:	6c1d      	ldr	r5, [r3, #64]	; 0x40
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 80018e8:	eb03 1341 	add.w	r3, r3, r1, lsl #5
 80018ec:	f8d3 1b08 	ldr.w	r1, [r3, #2824]	; 0xb08

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80018f0:	4a0e      	ldr	r2, [pc, #56]	; (800192c <PCD_EP_OutSetupPacket_int+0x4c>)
 80018f2:	4295      	cmp	r5, r2
 80018f4:	d907      	bls.n	8001906 <PCD_EP_OutSetupPacket_int+0x26>
 80018f6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80018fa:	f411 4f00 	tst.w	r1, #32768	; 0x8000
 80018fe:	d002      	beq.n	8001906 <PCD_EP_OutSetupPacket_int+0x26>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8001900:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8001904:	609a      	str	r2, [r3, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 8001906:	4620      	mov	r0, r4
 8001908:	f004 f96a 	bl	8005be0 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 800190c:	4b07      	ldr	r3, [pc, #28]	; (800192c <PCD_EP_OutSetupPacket_int+0x4c>)
 800190e:	429d      	cmp	r5, r3
 8001910:	d902      	bls.n	8001918 <PCD_EP_OutSetupPacket_int+0x38>
 8001912:	6923      	ldr	r3, [r4, #16]
 8001914:	2b01      	cmp	r3, #1
 8001916:	d001      	beq.n	800191c <PCD_EP_OutSetupPacket_int+0x3c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
  }

  return HAL_OK;
}
 8001918:	2000      	movs	r0, #0
 800191a:	bd38      	pop	{r3, r4, r5, pc}
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800191c:	f504 7271 	add.w	r2, r4, #964	; 0x3c4
 8001920:	2101      	movs	r1, #1
 8001922:	6820      	ldr	r0, [r4, #0]
 8001924:	f001 fca6 	bl	8003274 <USB_EP0_OutStart>
 8001928:	e7f6      	b.n	8001918 <PCD_EP_OutSetupPacket_int+0x38>
 800192a:	bf00      	nop
 800192c:	4f54300a 	.word	0x4f54300a

08001930 <HAL_PCD_IRQHandler>:
{
 8001930:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001934:	b083      	sub	sp, #12
 8001936:	4604      	mov	r4, r0
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8001938:	6805      	ldr	r5, [r0, #0]
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 800193a:	4628      	mov	r0, r5
 800193c:	f001 fc54 	bl	80031e8 <USB_GetMode>
 8001940:	b110      	cbz	r0, 8001948 <HAL_PCD_IRQHandler+0x18>
}
 8001942:	b003      	add	sp, #12
 8001944:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8001948:	462f      	mov	r7, r5
 800194a:	4606      	mov	r6, r0
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 800194c:	6820      	ldr	r0, [r4, #0]
 800194e:	f001 fc1a 	bl	8003186 <USB_ReadInterrupts>
 8001952:	2800      	cmp	r0, #0
 8001954:	d0f5      	beq.n	8001942 <HAL_PCD_IRQHandler+0x12>
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 8001956:	6820      	ldr	r0, [r4, #0]
 8001958:	f001 fc15 	bl	8003186 <USB_ReadInterrupts>
 800195c:	f010 0f02 	tst.w	r0, #2
 8001960:	d004      	beq.n	800196c <HAL_PCD_IRQHandler+0x3c>
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 8001962:	6822      	ldr	r2, [r4, #0]
 8001964:	6953      	ldr	r3, [r2, #20]
 8001966:	f003 0302 	and.w	r3, r3, #2
 800196a:	6153      	str	r3, [r2, #20]
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 800196c:	6820      	ldr	r0, [r4, #0]
 800196e:	f001 fc0a 	bl	8003186 <USB_ReadInterrupts>
 8001972:	f010 0f10 	tst.w	r0, #16
 8001976:	d014      	beq.n	80019a2 <HAL_PCD_IRQHandler+0x72>
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8001978:	6822      	ldr	r2, [r4, #0]
 800197a:	6993      	ldr	r3, [r2, #24]
 800197c:	f023 0310 	bic.w	r3, r3, #16
 8001980:	6193      	str	r3, [r2, #24]
      temp = USBx->GRXSTSP;
 8001982:	f8d5 8020 	ldr.w	r8, [r5, #32]
      ep = &hpcd->OUT_ep[temp & USB_OTG_GRXSTSP_EPNUM];
 8001986:	f008 090f 	and.w	r9, r8, #15
      if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 800198a:	f3c8 4343 	ubfx	r3, r8, #17, #4
 800198e:	2b02      	cmp	r3, #2
 8001990:	d068      	beq.n	8001a64 <HAL_PCD_IRQHandler+0x134>
      else if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_SETUP_UPDT)
 8001992:	2b06      	cmp	r3, #6
 8001994:	f000 808d 	beq.w	8001ab2 <HAL_PCD_IRQHandler+0x182>
      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8001998:	6822      	ldr	r2, [r4, #0]
 800199a:	6993      	ldr	r3, [r2, #24]
 800199c:	f043 0310 	orr.w	r3, r3, #16
 80019a0:	6193      	str	r3, [r2, #24]
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 80019a2:	6820      	ldr	r0, [r4, #0]
 80019a4:	f001 fbef 	bl	8003186 <USB_ReadInterrupts>
 80019a8:	f410 2f00 	tst.w	r0, #524288	; 0x80000
 80019ac:	f040 8093 	bne.w	8001ad6 <HAL_PCD_IRQHandler+0x1a6>
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 80019b0:	6820      	ldr	r0, [r4, #0]
 80019b2:	f001 fbe8 	bl	8003186 <USB_ReadInterrupts>
 80019b6:	f410 2f80 	tst.w	r0, #262144	; 0x40000
 80019ba:	f040 80d7 	bne.w	8001b6c <HAL_PCD_IRQHandler+0x23c>
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 80019be:	6820      	ldr	r0, [r4, #0]
 80019c0:	f001 fbe1 	bl	8003186 <USB_ReadInterrupts>
 80019c4:	2800      	cmp	r0, #0
 80019c6:	f2c0 8143 	blt.w	8001c50 <HAL_PCD_IRQHandler+0x320>
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 80019ca:	6820      	ldr	r0, [r4, #0]
 80019cc:	f001 fbdb 	bl	8003186 <USB_ReadInterrupts>
 80019d0:	f410 6f00 	tst.w	r0, #2048	; 0x800
 80019d4:	d00a      	beq.n	80019ec <HAL_PCD_IRQHandler+0xbc>
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 80019d6:	f8d5 3808 	ldr.w	r3, [r5, #2056]	; 0x808
 80019da:	f013 0f01 	tst.w	r3, #1
 80019de:	f040 8151 	bne.w	8001c84 <HAL_PCD_IRQHandler+0x354>
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 80019e2:	6822      	ldr	r2, [r4, #0]
 80019e4:	6953      	ldr	r3, [r2, #20]
 80019e6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80019ea:	6153      	str	r3, [r2, #20]
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 80019ec:	6820      	ldr	r0, [r4, #0]
 80019ee:	f001 fbca 	bl	8003186 <USB_ReadInterrupts>
 80019f2:	f410 5f80 	tst.w	r0, #4096	; 0x1000
 80019f6:	f040 8149 	bne.w	8001c8c <HAL_PCD_IRQHandler+0x35c>
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 80019fa:	6820      	ldr	r0, [r4, #0]
 80019fc:	f001 fbc3 	bl	8003186 <USB_ReadInterrupts>
 8001a00:	f410 5f00 	tst.w	r0, #8192	; 0x2000
 8001a04:	f040 81a8 	bne.w	8001d58 <HAL_PCD_IRQHandler+0x428>
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 8001a08:	6820      	ldr	r0, [r4, #0]
 8001a0a:	f001 fbbc 	bl	8003186 <USB_ReadInterrupts>
 8001a0e:	f010 0f08 	tst.w	r0, #8
 8001a12:	f040 81b9 	bne.w	8001d88 <HAL_PCD_IRQHandler+0x458>
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 8001a16:	6820      	ldr	r0, [r4, #0]
 8001a18:	f001 fbb5 	bl	8003186 <USB_ReadInterrupts>
 8001a1c:	f410 1f80 	tst.w	r0, #1048576	; 0x100000
 8001a20:	f040 81bb 	bne.w	8001d9a <HAL_PCD_IRQHandler+0x46a>
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8001a24:	6820      	ldr	r0, [r4, #0]
 8001a26:	f001 fbae 	bl	8003186 <USB_ReadInterrupts>
 8001a2a:	f410 1f00 	tst.w	r0, #2097152	; 0x200000
 8001a2e:	f040 81be 	bne.w	8001dae <HAL_PCD_IRQHandler+0x47e>
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8001a32:	6820      	ldr	r0, [r4, #0]
 8001a34:	f001 fba7 	bl	8003186 <USB_ReadInterrupts>
 8001a38:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8001a3c:	f040 81c1 	bne.w	8001dc2 <HAL_PCD_IRQHandler+0x492>
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8001a40:	6820      	ldr	r0, [r4, #0]
 8001a42:	f001 fba0 	bl	8003186 <USB_ReadInterrupts>
 8001a46:	f010 0f04 	tst.w	r0, #4
 8001a4a:	f43f af7a 	beq.w	8001942 <HAL_PCD_IRQHandler+0x12>
      temp = hpcd->Instance->GOTGINT;
 8001a4e:	6823      	ldr	r3, [r4, #0]
 8001a50:	685d      	ldr	r5, [r3, #4]
      if ((temp & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8001a52:	f015 0f04 	tst.w	r5, #4
 8001a56:	f040 81bd 	bne.w	8001dd4 <HAL_PCD_IRQHandler+0x4a4>
      hpcd->Instance->GOTGINT |= temp;
 8001a5a:	6822      	ldr	r2, [r4, #0]
 8001a5c:	6853      	ldr	r3, [r2, #4]
 8001a5e:	432b      	orrs	r3, r5
 8001a60:	6053      	str	r3, [r2, #4]
 8001a62:	e76e      	b.n	8001942 <HAL_PCD_IRQHandler+0x12>
        if ((temp & USB_OTG_GRXSTSP_BCNT) != 0U)
 8001a64:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 8001a68:	ea18 0f03 	tst.w	r8, r3
 8001a6c:	d094      	beq.n	8001998 <HAL_PCD_IRQHandler+0x68>
                               (uint16_t)((temp & USB_OTG_GRXSTSP_BCNT) >> 4));
 8001a6e:	ea4f 1b18 	mov.w	fp, r8, lsr #4
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8001a72:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8001a76:	9301      	str	r3, [sp, #4]
 8001a78:	ebc9 0ac9 	rsb	sl, r9, r9, lsl #3
 8001a7c:	eb04 0a8a 	add.w	sl, r4, sl, lsl #2
 8001a80:	f3c8 120a 	ubfx	r2, r8, #4, #11
 8001a84:	f8da 1208 	ldr.w	r1, [sl, #520]	; 0x208
 8001a88:	4628      	mov	r0, r5
 8001a8a:	f001 facf 	bl	800302c <USB_ReadPacket>
          ep->xfer_buff += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8001a8e:	f3cb 0b0a 	ubfx	fp, fp, #0, #11
 8001a92:	f8da 3208 	ldr.w	r3, [sl, #520]	; 0x208
 8001a96:	445b      	add	r3, fp
 8001a98:	f8ca 3208 	str.w	r3, [sl, #520]	; 0x208
          ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8001a9c:	9b01      	ldr	r3, [sp, #4]
 8001a9e:	eba3 0309 	sub.w	r3, r3, r9
 8001aa2:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8001aa6:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8001aaa:	445b      	add	r3, fp
 8001aac:	f8ca 3214 	str.w	r3, [sl, #532]	; 0x214
 8001ab0:	e772      	b.n	8001998 <HAL_PCD_IRQHandler+0x68>
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 8001ab2:	2208      	movs	r2, #8
 8001ab4:	f504 7171 	add.w	r1, r4, #964	; 0x3c4
 8001ab8:	4628      	mov	r0, r5
 8001aba:	f001 fab7 	bl	800302c <USB_ReadPacket>
        ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8001abe:	f3c8 180a 	ubfx	r8, r8, #4, #11
 8001ac2:	ebc9 02c9 	rsb	r2, r9, r9, lsl #3
 8001ac6:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 8001aca:	f8d2 3214 	ldr.w	r3, [r2, #532]	; 0x214
 8001ace:	4443      	add	r3, r8
 8001ad0:	f8c2 3214 	str.w	r3, [r2, #532]	; 0x214
 8001ad4:	e760      	b.n	8001998 <HAL_PCD_IRQHandler+0x68>
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 8001ad6:	6820      	ldr	r0, [r4, #0]
 8001ad8:	f001 fb59 	bl	800318e <USB_ReadDevAllOutEpInterrupt>
 8001adc:	4680      	mov	r8, r0
      epnum = 0U;
 8001ade:	46b1      	mov	r9, r6
      while (ep_intr != 0U)
 8001ae0:	e017      	b.n	8001b12 <HAL_PCD_IRQHandler+0x1e2>
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 8001ae2:	eb07 1349 	add.w	r3, r7, r9, lsl #5
 8001ae6:	2201      	movs	r2, #1
 8001ae8:	f8c3 2b08 	str.w	r2, [r3, #2824]	; 0xb08
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 8001aec:	4649      	mov	r1, r9
 8001aee:	4620      	mov	r0, r4
 8001af0:	f7ff fe7a 	bl	80017e8 <PCD_EP_OutXfrComplete_int>
 8001af4:	e01d      	b.n	8001b32 <HAL_PCD_IRQHandler+0x202>
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8001af6:	eb07 1349 	add.w	r3, r7, r9, lsl #5
 8001afa:	2208      	movs	r2, #8
 8001afc:	f8c3 2b08 	str.w	r2, [r3, #2824]	; 0xb08
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 8001b00:	4649      	mov	r1, r9
 8001b02:	4620      	mov	r0, r4
 8001b04:	f7ff feec 	bl	80018e0 <PCD_EP_OutSetupPacket_int>
 8001b08:	e016      	b.n	8001b38 <HAL_PCD_IRQHandler+0x208>
        epnum++;
 8001b0a:	f109 0901 	add.w	r9, r9, #1
        ep_intr >>= 1U;
 8001b0e:	ea4f 0858 	mov.w	r8, r8, lsr #1
      while (ep_intr != 0U)
 8001b12:	f1b8 0f00 	cmp.w	r8, #0
 8001b16:	f43f af4b 	beq.w	80019b0 <HAL_PCD_IRQHandler+0x80>
        if ((ep_intr & 0x1U) != 0U)
 8001b1a:	f018 0f01 	tst.w	r8, #1
 8001b1e:	d0f4      	beq.n	8001b0a <HAL_PCD_IRQHandler+0x1da>
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8001b20:	fa5f f189 	uxtb.w	r1, r9
 8001b24:	6820      	ldr	r0, [r4, #0]
 8001b26:	f001 fb42 	bl	80031ae <USB_ReadDevOutEPInterrupt>
 8001b2a:	4682      	mov	sl, r0
          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8001b2c:	f010 0f01 	tst.w	r0, #1
 8001b30:	d1d7      	bne.n	8001ae2 <HAL_PCD_IRQHandler+0x1b2>
          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 8001b32:	f01a 0f08 	tst.w	sl, #8
 8001b36:	d1de      	bne.n	8001af6 <HAL_PCD_IRQHandler+0x1c6>
          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 8001b38:	f01a 0f10 	tst.w	sl, #16
 8001b3c:	d004      	beq.n	8001b48 <HAL_PCD_IRQHandler+0x218>
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 8001b3e:	eb07 1349 	add.w	r3, r7, r9, lsl #5
 8001b42:	2210      	movs	r2, #16
 8001b44:	f8c3 2b08 	str.w	r2, [r3, #2824]	; 0xb08
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8001b48:	f01a 0f20 	tst.w	sl, #32
 8001b4c:	d004      	beq.n	8001b58 <HAL_PCD_IRQHandler+0x228>
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8001b4e:	eb07 1349 	add.w	r3, r7, r9, lsl #5
 8001b52:	2220      	movs	r2, #32
 8001b54:	f8c3 2b08 	str.w	r2, [r3, #2824]	; 0xb08
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 8001b58:	f41a 5f00 	tst.w	sl, #8192	; 0x2000
 8001b5c:	d0d5      	beq.n	8001b0a <HAL_PCD_IRQHandler+0x1da>
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 8001b5e:	eb07 1349 	add.w	r3, r7, r9, lsl #5
 8001b62:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001b66:	f8c3 2b08 	str.w	r2, [r3, #2824]	; 0xb08
 8001b6a:	e7ce      	b.n	8001b0a <HAL_PCD_IRQHandler+0x1da>
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 8001b6c:	6820      	ldr	r0, [r4, #0]
 8001b6e:	f001 fb16 	bl	800319e <USB_ReadDevAllInEpInterrupt>
 8001b72:	4680      	mov	r8, r0
      epnum = 0U;
 8001b74:	46b1      	mov	r9, r6
      while (ep_intr != 0U)
 8001b76:	e02a      	b.n	8001bce <HAL_PCD_IRQHandler+0x29e>
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 8001b78:	4659      	mov	r1, fp
 8001b7a:	4620      	mov	r0, r4
 8001b7c:	f004 f844 	bl	8005c08 <HAL_PCD_DataInStageCallback>
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 8001b80:	f01a 0f08 	tst.w	sl, #8
 8001b84:	d004      	beq.n	8001b90 <HAL_PCD_IRQHandler+0x260>
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 8001b86:	eb07 1349 	add.w	r3, r7, r9, lsl #5
 8001b8a:	2208      	movs	r2, #8
 8001b8c:	f8c3 2908 	str.w	r2, [r3, #2312]	; 0x908
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 8001b90:	f01a 0f10 	tst.w	sl, #16
 8001b94:	d004      	beq.n	8001ba0 <HAL_PCD_IRQHandler+0x270>
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 8001b96:	eb07 1349 	add.w	r3, r7, r9, lsl #5
 8001b9a:	2210      	movs	r2, #16
 8001b9c:	f8c3 2908 	str.w	r2, [r3, #2312]	; 0x908
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 8001ba0:	f01a 0f40 	tst.w	sl, #64	; 0x40
 8001ba4:	d004      	beq.n	8001bb0 <HAL_PCD_IRQHandler+0x280>
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 8001ba6:	eb07 1349 	add.w	r3, r7, r9, lsl #5
 8001baa:	2240      	movs	r2, #64	; 0x40
 8001bac:	f8c3 2908 	str.w	r2, [r3, #2312]	; 0x908
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 8001bb0:	f01a 0f02 	tst.w	sl, #2
 8001bb4:	d004      	beq.n	8001bc0 <HAL_PCD_IRQHandler+0x290>
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 8001bb6:	eb07 1349 	add.w	r3, r7, r9, lsl #5
 8001bba:	2202      	movs	r2, #2
 8001bbc:	f8c3 2908 	str.w	r2, [r3, #2312]	; 0x908
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 8001bc0:	f01a 0f80 	tst.w	sl, #128	; 0x80
 8001bc4:	d13f      	bne.n	8001c46 <HAL_PCD_IRQHandler+0x316>
        epnum++;
 8001bc6:	f109 0901 	add.w	r9, r9, #1
        ep_intr >>= 1U;
 8001bca:	ea4f 0858 	mov.w	r8, r8, lsr #1
      while (ep_intr != 0U)
 8001bce:	f1b8 0f00 	cmp.w	r8, #0
 8001bd2:	f43f aef4 	beq.w	80019be <HAL_PCD_IRQHandler+0x8e>
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 8001bd6:	f018 0f01 	tst.w	r8, #1
 8001bda:	d0f4      	beq.n	8001bc6 <HAL_PCD_IRQHandler+0x296>
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8001bdc:	fa5f fb89 	uxtb.w	fp, r9
 8001be0:	4659      	mov	r1, fp
 8001be2:	6820      	ldr	r0, [r4, #0]
 8001be4:	f001 faec 	bl	80031c0 <USB_ReadDevInEPInterrupt>
 8001be8:	4682      	mov	sl, r0
          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 8001bea:	f010 0f01 	tst.w	r0, #1
 8001bee:	d0c7      	beq.n	8001b80 <HAL_PCD_IRQHandler+0x250>
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8001bf0:	f009 030f 	and.w	r3, r9, #15
 8001bf4:	2101      	movs	r1, #1
 8001bf6:	fa01 f203 	lsl.w	r2, r1, r3
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8001bfa:	f8d7 3834 	ldr.w	r3, [r7, #2100]	; 0x834
 8001bfe:	ea23 0302 	bic.w	r3, r3, r2
 8001c02:	f8c7 3834 	str.w	r3, [r7, #2100]	; 0x834
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 8001c06:	eb07 1349 	add.w	r3, r7, r9, lsl #5
 8001c0a:	f8c3 1908 	str.w	r1, [r3, #2312]	; 0x908
            if (hpcd->Init.dma_enable == 1U)
 8001c0e:	6923      	ldr	r3, [r4, #16]
 8001c10:	428b      	cmp	r3, r1
 8001c12:	d1b1      	bne.n	8001b78 <HAL_PCD_IRQHandler+0x248>
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 8001c14:	ebc9 03c9 	rsb	r3, r9, r9, lsl #3
 8001c18:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8001c1c:	6c59      	ldr	r1, [r3, #68]	; 0x44
 8001c1e:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8001c20:	440a      	add	r2, r1
 8001c22:	649a      	str	r2, [r3, #72]	; 0x48
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 8001c24:	f1b9 0f00 	cmp.w	r9, #0
 8001c28:	d1a6      	bne.n	8001b78 <HAL_PCD_IRQHandler+0x248>
 8001c2a:	ebc9 03c9 	rsb	r3, r9, r9, lsl #3
 8001c2e:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8001c32:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001c34:	2b00      	cmp	r3, #0
 8001c36:	d19f      	bne.n	8001b78 <HAL_PCD_IRQHandler+0x248>
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8001c38:	f504 7271 	add.w	r2, r4, #964	; 0x3c4
 8001c3c:	2101      	movs	r1, #1
 8001c3e:	6820      	ldr	r0, [r4, #0]
 8001c40:	f001 fb18 	bl	8003274 <USB_EP0_OutStart>
 8001c44:	e798      	b.n	8001b78 <HAL_PCD_IRQHandler+0x248>
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 8001c46:	4649      	mov	r1, r9
 8001c48:	4620      	mov	r0, r4
 8001c4a:	f7ff fcaf 	bl	80015ac <PCD_WriteEmptyTxFifo>
 8001c4e:	e7ba      	b.n	8001bc6 <HAL_PCD_IRQHandler+0x296>
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8001c50:	f8d5 3804 	ldr.w	r3, [r5, #2052]	; 0x804
 8001c54:	f023 0301 	bic.w	r3, r3, #1
 8001c58:	f8c5 3804 	str.w	r3, [r5, #2052]	; 0x804
      if (hpcd->LPM_State == LPM_L1)
 8001c5c:	f894 33f4 	ldrb.w	r3, [r4, #1012]	; 0x3f4
 8001c60:	2b01      	cmp	r3, #1
 8001c62:	d008      	beq.n	8001c76 <HAL_PCD_IRQHandler+0x346>
        HAL_PCD_ResumeCallback(hpcd);
 8001c64:	4620      	mov	r0, r4
 8001c66:	f004 f80f 	bl	8005c88 <HAL_PCD_ResumeCallback>
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 8001c6a:	6822      	ldr	r2, [r4, #0]
 8001c6c:	6953      	ldr	r3, [r2, #20]
 8001c6e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8001c72:	6153      	str	r3, [r2, #20]
 8001c74:	e6a9      	b.n	80019ca <HAL_PCD_IRQHandler+0x9a>
        hpcd->LPM_State = LPM_L0;
 8001c76:	2100      	movs	r1, #0
 8001c78:	f884 13f4 	strb.w	r1, [r4, #1012]	; 0x3f4
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8001c7c:	4620      	mov	r0, r4
 8001c7e:	f000 fa47 	bl	8002110 <HAL_PCDEx_LPM_Callback>
 8001c82:	e7f2      	b.n	8001c6a <HAL_PCD_IRQHandler+0x33a>
        HAL_PCD_SuspendCallback(hpcd);
 8001c84:	4620      	mov	r0, r4
 8001c86:	f003 ffe7 	bl	8005c58 <HAL_PCD_SuspendCallback>
 8001c8a:	e6aa      	b.n	80019e2 <HAL_PCD_IRQHandler+0xb2>
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8001c8c:	f505 6800 	add.w	r8, r5, #2048	; 0x800
 8001c90:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8001c94:	f023 0301 	bic.w	r3, r3, #1
 8001c98:	f8c8 3004 	str.w	r3, [r8, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8001c9c:	2110      	movs	r1, #16
 8001c9e:	6820      	ldr	r0, [r4, #0]
 8001ca0:	f000 fe4a 	bl	8002938 <USB_FlushTxFifo>
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001ca4:	e020      	b.n	8001ce8 <HAL_PCD_IRQHandler+0x3b8>
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 8001ca6:	eb07 1346 	add.w	r3, r7, r6, lsl #5
 8001caa:	f64f 317f 	movw	r1, #64383	; 0xfb7f
 8001cae:	f8c3 1908 	str.w	r1, [r3, #2312]	; 0x908
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8001cb2:	f8d3 2900 	ldr.w	r2, [r3, #2304]	; 0x900
 8001cb6:	f422 1200 	bic.w	r2, r2, #2097152	; 0x200000
 8001cba:	f8c3 2900 	str.w	r2, [r3, #2304]	; 0x900
        USBx_INEP(i)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8001cbe:	f8d3 2900 	ldr.w	r2, [r3, #2304]	; 0x900
 8001cc2:	f042 6200 	orr.w	r2, r2, #134217728	; 0x8000000
 8001cc6:	f8c3 2900 	str.w	r2, [r3, #2304]	; 0x900
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 8001cca:	f8c3 1b08 	str.w	r1, [r3, #2824]	; 0xb08
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8001cce:	f8d3 2b00 	ldr.w	r2, [r3, #2816]	; 0xb00
 8001cd2:	f422 1200 	bic.w	r2, r2, #2097152	; 0x200000
 8001cd6:	f8c3 2b00 	str.w	r2, [r3, #2816]	; 0xb00
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8001cda:	f8d3 2b00 	ldr.w	r2, [r3, #2816]	; 0xb00
 8001cde:	f042 6200 	orr.w	r2, r2, #134217728	; 0x8000000
 8001ce2:	f8c3 2b00 	str.w	r2, [r3, #2816]	; 0xb00
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001ce6:	3601      	adds	r6, #1
 8001ce8:	6863      	ldr	r3, [r4, #4]
 8001cea:	42b3      	cmp	r3, r6
 8001cec:	d8db      	bhi.n	8001ca6 <HAL_PCD_IRQHandler+0x376>
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 8001cee:	f8d8 301c 	ldr.w	r3, [r8, #28]
 8001cf2:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 8001cf6:	f8c8 301c 	str.w	r3, [r8, #28]
      if (hpcd->Init.use_dedicated_ep1 != 0U)
 8001cfa:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8001cfc:	b1eb      	cbz	r3, 8001d3a <HAL_PCD_IRQHandler+0x40a>
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 8001cfe:	f8d8 3084 	ldr.w	r3, [r8, #132]	; 0x84
 8001d02:	f043 030b 	orr.w	r3, r3, #11
 8001d06:	f8c8 3084 	str.w	r3, [r8, #132]	; 0x84
        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 8001d0a:	f8d8 3044 	ldr.w	r3, [r8, #68]	; 0x44
 8001d0e:	f043 030b 	orr.w	r3, r3, #11
 8001d12:	f8c8 3044 	str.w	r3, [r8, #68]	; 0x44
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8001d16:	f8d5 3800 	ldr.w	r3, [r5, #2048]	; 0x800
 8001d1a:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8001d1e:	f8c5 3800 	str.w	r3, [r5, #2048]	; 0x800
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8001d22:	f504 7271 	add.w	r2, r4, #964	; 0x3c4
 8001d26:	7c21      	ldrb	r1, [r4, #16]
 8001d28:	6820      	ldr	r0, [r4, #0]
 8001d2a:	f001 faa3 	bl	8003274 <USB_EP0_OutStart>
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 8001d2e:	6822      	ldr	r2, [r4, #0]
 8001d30:	6953      	ldr	r3, [r2, #20]
 8001d32:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001d36:	6153      	str	r3, [r2, #20]
 8001d38:	e65f      	b.n	80019fa <HAL_PCD_IRQHandler+0xca>
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 8001d3a:	f8d8 3014 	ldr.w	r3, [r8, #20]
 8001d3e:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8001d42:	f043 032b 	orr.w	r3, r3, #43	; 0x2b
 8001d46:	f8c8 3014 	str.w	r3, [r8, #20]
        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 8001d4a:	f8d8 3010 	ldr.w	r3, [r8, #16]
 8001d4e:	f043 030b 	orr.w	r3, r3, #11
 8001d52:	f8c8 3010 	str.w	r3, [r8, #16]
 8001d56:	e7de      	b.n	8001d16 <HAL_PCD_IRQHandler+0x3e6>
      (void)USB_ActivateSetup(hpcd->Instance);
 8001d58:	6820      	ldr	r0, [r4, #0]
 8001d5a:	f001 fa7a 	bl	8003252 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 8001d5e:	6820      	ldr	r0, [r4, #0]
 8001d60:	f000 feec 	bl	8002b3c <USB_GetDevSpeed>
 8001d64:	60e0      	str	r0, [r4, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8001d66:	6825      	ldr	r5, [r4, #0]
 8001d68:	f000 fce6 	bl	8002738 <HAL_RCC_GetHCLKFreq>
 8001d6c:	4601      	mov	r1, r0
 8001d6e:	7b22      	ldrb	r2, [r4, #12]
 8001d70:	4628      	mov	r0, r5
 8001d72:	f000 fd63 	bl	800283c <USB_SetTurnaroundTime>
      HAL_PCD_ResetCallback(hpcd);
 8001d76:	4620      	mov	r0, r4
 8001d78:	f003 ff57 	bl	8005c2a <HAL_PCD_ResetCallback>
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 8001d7c:	6822      	ldr	r2, [r4, #0]
 8001d7e:	6953      	ldr	r3, [r2, #20]
 8001d80:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001d84:	6153      	str	r3, [r2, #20]
 8001d86:	e63f      	b.n	8001a08 <HAL_PCD_IRQHandler+0xd8>
      HAL_PCD_SOFCallback(hpcd);
 8001d88:	4620      	mov	r0, r4
 8001d8a:	f003 ff48 	bl	8005c1e <HAL_PCD_SOFCallback>
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8001d8e:	6822      	ldr	r2, [r4, #0]
 8001d90:	6953      	ldr	r3, [r2, #20]
 8001d92:	f003 0308 	and.w	r3, r3, #8
 8001d96:	6153      	str	r3, [r2, #20]
 8001d98:	e63d      	b.n	8001a16 <HAL_PCD_IRQHandler+0xe6>
      HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 8001d9a:	2100      	movs	r1, #0
 8001d9c:	4620      	mov	r0, r4
 8001d9e:	f003 ff7f 	bl	8005ca0 <HAL_PCD_ISOINIncompleteCallback>
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8001da2:	6822      	ldr	r2, [r4, #0]
 8001da4:	6953      	ldr	r3, [r2, #20]
 8001da6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001daa:	6153      	str	r3, [r2, #20]
 8001dac:	e63a      	b.n	8001a24 <HAL_PCD_IRQHandler+0xf4>
      HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 8001dae:	2100      	movs	r1, #0
 8001db0:	4620      	mov	r0, r4
 8001db2:	f003 ff6f 	bl	8005c94 <HAL_PCD_ISOOUTIncompleteCallback>
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8001db6:	6822      	ldr	r2, [r4, #0]
 8001db8:	6953      	ldr	r3, [r2, #20]
 8001dba:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001dbe:	6153      	str	r3, [r2, #20]
 8001dc0:	e637      	b.n	8001a32 <HAL_PCD_IRQHandler+0x102>
      HAL_PCD_ConnectCallback(hpcd);
 8001dc2:	4620      	mov	r0, r4
 8001dc4:	f003 ff72 	bl	8005cac <HAL_PCD_ConnectCallback>
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8001dc8:	6822      	ldr	r2, [r4, #0]
 8001dca:	6953      	ldr	r3, [r2, #20]
 8001dcc:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8001dd0:	6153      	str	r3, [r2, #20]
 8001dd2:	e635      	b.n	8001a40 <HAL_PCD_IRQHandler+0x110>
        HAL_PCD_DisconnectCallback(hpcd);
 8001dd4:	4620      	mov	r0, r4
 8001dd6:	f003 ff6f 	bl	8005cb8 <HAL_PCD_DisconnectCallback>
 8001dda:	e63e      	b.n	8001a5a <HAL_PCD_IRQHandler+0x12a>

08001ddc <HAL_PCD_SetAddress>:
  __HAL_LOCK(hpcd);
 8001ddc:	f890 33bc 	ldrb.w	r3, [r0, #956]	; 0x3bc
 8001de0:	2b01      	cmp	r3, #1
 8001de2:	d00d      	beq.n	8001e00 <HAL_PCD_SetAddress+0x24>
{
 8001de4:	b510      	push	{r4, lr}
 8001de6:	4604      	mov	r4, r0
  __HAL_LOCK(hpcd);
 8001de8:	2301      	movs	r3, #1
 8001dea:	f880 33bc 	strb.w	r3, [r0, #956]	; 0x3bc
  hpcd->USB_Address = address;
 8001dee:	f880 1038 	strb.w	r1, [r0, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8001df2:	6800      	ldr	r0, [r0, #0]
 8001df4:	f001 f99b 	bl	800312e <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8001df8:	2000      	movs	r0, #0
 8001dfa:	f884 03bc 	strb.w	r0, [r4, #956]	; 0x3bc
}
 8001dfe:	bd10      	pop	{r4, pc}
  __HAL_LOCK(hpcd);
 8001e00:	2002      	movs	r0, #2
}
 8001e02:	4770      	bx	lr

08001e04 <HAL_PCD_EP_Open>:
{
 8001e04:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001e06:	4607      	mov	r7, r0
 8001e08:	460c      	mov	r4, r1
  if ((ep_addr & 0x80U) == 0x80U)
 8001e0a:	f011 0f80 	tst.w	r1, #128	; 0x80
 8001e0e:	d127      	bne.n	8001e60 <HAL_PCD_EP_Open+0x5c>
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001e10:	f001 050f 	and.w	r5, r1, #15
 8001e14:	ebc5 06c5 	rsb	r6, r5, r5, lsl #3
 8001e18:	00b6      	lsls	r6, r6, #2
 8001e1a:	f506 76fc 	add.w	r6, r6, #504	; 0x1f8
 8001e1e:	4406      	add	r6, r0
 8001e20:	1d31      	adds	r1, r6, #4
    ep->is_in = 0U;
 8001e22:	ebc5 05c5 	rsb	r5, r5, r5, lsl #3
 8001e26:	eb00 0585 	add.w	r5, r0, r5, lsl #2
 8001e2a:	2000      	movs	r0, #0
 8001e2c:	f885 01fd 	strb.w	r0, [r5, #509]	; 0x1fd
  ep->num = ep_addr & EP_ADDR_MSK;
 8001e30:	f004 040f 	and.w	r4, r4, #15
 8001e34:	700c      	strb	r4, [r1, #0]
  ep->maxpacket = ep_mps;
 8001e36:	608a      	str	r2, [r1, #8]
  ep->type = ep_type;
 8001e38:	70cb      	strb	r3, [r1, #3]
  if (ep->is_in != 0U)
 8001e3a:	784a      	ldrb	r2, [r1, #1]
 8001e3c:	b102      	cbz	r2, 8001e40 <HAL_PCD_EP_Open+0x3c>
    ep->tx_fifo_num = ep->num;
 8001e3e:	80cc      	strh	r4, [r1, #6]
  if (ep_type == EP_TYPE_BULK)
 8001e40:	2b02      	cmp	r3, #2
 8001e42:	d01d      	beq.n	8001e80 <HAL_PCD_EP_Open+0x7c>
  __HAL_LOCK(hpcd);
 8001e44:	f897 33bc 	ldrb.w	r3, [r7, #956]	; 0x3bc
 8001e48:	2b01      	cmp	r3, #1
 8001e4a:	d01c      	beq.n	8001e86 <HAL_PCD_EP_Open+0x82>
 8001e4c:	2301      	movs	r3, #1
 8001e4e:	f887 33bc 	strb.w	r3, [r7, #956]	; 0x3bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8001e52:	6838      	ldr	r0, [r7, #0]
 8001e54:	f000 fe83 	bl	8002b5e <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8001e58:	2000      	movs	r0, #0
 8001e5a:	f887 03bc 	strb.w	r0, [r7, #956]	; 0x3bc
}
 8001e5e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001e60:	f001 000f 	and.w	r0, r1, #15
 8001e64:	ebc0 01c0 	rsb	r1, r0, r0, lsl #3
 8001e68:	0089      	lsls	r1, r1, #2
 8001e6a:	3138      	adds	r1, #56	; 0x38
 8001e6c:	4439      	add	r1, r7
 8001e6e:	3104      	adds	r1, #4
    ep->is_in = 1U;
 8001e70:	ebc0 00c0 	rsb	r0, r0, r0, lsl #3
 8001e74:	eb07 0080 	add.w	r0, r7, r0, lsl #2
 8001e78:	2501      	movs	r5, #1
 8001e7a:	f880 503d 	strb.w	r5, [r0, #61]	; 0x3d
 8001e7e:	e7d7      	b.n	8001e30 <HAL_PCD_EP_Open+0x2c>
    ep->data_pid_start = 0U;
 8001e80:	2300      	movs	r3, #0
 8001e82:	710b      	strb	r3, [r1, #4]
 8001e84:	e7de      	b.n	8001e44 <HAL_PCD_EP_Open+0x40>
  __HAL_LOCK(hpcd);
 8001e86:	2002      	movs	r0, #2
 8001e88:	e7e9      	b.n	8001e5e <HAL_PCD_EP_Open+0x5a>

08001e8a <HAL_PCD_EP_Close>:
{
 8001e8a:	b510      	push	{r4, lr}
 8001e8c:	4604      	mov	r4, r0
 8001e8e:	460a      	mov	r2, r1
  if ((ep_addr & 0x80U) == 0x80U)
 8001e90:	f011 0f80 	tst.w	r1, #128	; 0x80
 8001e94:	d120      	bne.n	8001ed8 <HAL_PCD_EP_Close+0x4e>
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001e96:	f001 000f 	and.w	r0, r1, #15
 8001e9a:	ebc0 03c0 	rsb	r3, r0, r0, lsl #3
 8001e9e:	009b      	lsls	r3, r3, #2
 8001ea0:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8001ea4:	4423      	add	r3, r4
 8001ea6:	1d19      	adds	r1, r3, #4
    ep->is_in = 0U;
 8001ea8:	ebc0 00c0 	rsb	r0, r0, r0, lsl #3
 8001eac:	eb04 0080 	add.w	r0, r4, r0, lsl #2
 8001eb0:	2300      	movs	r3, #0
 8001eb2:	f880 31fd 	strb.w	r3, [r0, #509]	; 0x1fd
  ep->num   = ep_addr & EP_ADDR_MSK;
 8001eb6:	f002 020f 	and.w	r2, r2, #15
 8001eba:	700a      	strb	r2, [r1, #0]
  __HAL_LOCK(hpcd);
 8001ebc:	f894 33bc 	ldrb.w	r3, [r4, #956]	; 0x3bc
 8001ec0:	2b01      	cmp	r3, #1
 8001ec2:	d019      	beq.n	8001ef8 <HAL_PCD_EP_Close+0x6e>
 8001ec4:	2301      	movs	r3, #1
 8001ec6:	f884 33bc 	strb.w	r3, [r4, #956]	; 0x3bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8001eca:	6820      	ldr	r0, [r4, #0]
 8001ecc:	f000 fe92 	bl	8002bf4 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8001ed0:	2000      	movs	r0, #0
 8001ed2:	f884 03bc 	strb.w	r0, [r4, #956]	; 0x3bc
}
 8001ed6:	bd10      	pop	{r4, pc}
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001ed8:	f001 000f 	and.w	r0, r1, #15
 8001edc:	ebc0 03c0 	rsb	r3, r0, r0, lsl #3
 8001ee0:	009b      	lsls	r3, r3, #2
 8001ee2:	3338      	adds	r3, #56	; 0x38
 8001ee4:	4423      	add	r3, r4
 8001ee6:	1d19      	adds	r1, r3, #4
    ep->is_in = 1U;
 8001ee8:	ebc0 00c0 	rsb	r0, r0, r0, lsl #3
 8001eec:	eb04 0080 	add.w	r0, r4, r0, lsl #2
 8001ef0:	2301      	movs	r3, #1
 8001ef2:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
 8001ef6:	e7de      	b.n	8001eb6 <HAL_PCD_EP_Close+0x2c>
  __HAL_LOCK(hpcd);
 8001ef8:	2002      	movs	r0, #2
 8001efa:	e7ec      	b.n	8001ed6 <HAL_PCD_EP_Close+0x4c>

08001efc <HAL_PCD_EP_Receive>:
{
 8001efc:	b538      	push	{r3, r4, r5, lr}
  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001efe:	f001 040f 	and.w	r4, r1, #15
 8001f02:	ebc4 01c4 	rsb	r1, r4, r4, lsl #3
 8001f06:	0089      	lsls	r1, r1, #2
 8001f08:	f501 71fc 	add.w	r1, r1, #504	; 0x1f8
 8001f0c:	4401      	add	r1, r0
 8001f0e:	3104      	adds	r1, #4
  ep->xfer_buff = pBuf;
 8001f10:	ebc4 05c4 	rsb	r5, r4, r4, lsl #3
 8001f14:	eb00 0585 	add.w	r5, r0, r5, lsl #2
 8001f18:	f8c5 2208 	str.w	r2, [r5, #520]	; 0x208
  ep->xfer_len = len;
 8001f1c:	f8c5 3210 	str.w	r3, [r5, #528]	; 0x210
  ep->xfer_count = 0U;
 8001f20:	2300      	movs	r3, #0
 8001f22:	f8c5 3214 	str.w	r3, [r5, #532]	; 0x214
  ep->is_in = 0U;
 8001f26:	f885 31fd 	strb.w	r3, [r5, #509]	; 0x1fd
  ep->num = ep_addr & EP_ADDR_MSK;
 8001f2a:	f885 41fc 	strb.w	r4, [r5, #508]	; 0x1fc
  if (hpcd->Init.dma_enable == 1U)
 8001f2e:	6903      	ldr	r3, [r0, #16]
 8001f30:	2b01      	cmp	r3, #1
 8001f32:	d006      	beq.n	8001f42 <HAL_PCD_EP_Receive+0x46>
  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8001f34:	b964      	cbnz	r4, 8001f50 <HAL_PCD_EP_Receive+0x54>
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8001f36:	b2da      	uxtb	r2, r3
 8001f38:	6800      	ldr	r0, [r0, #0]
 8001f3a:	f000 fec9 	bl	8002cd0 <USB_EP0StartXfer>
}
 8001f3e:	2000      	movs	r0, #0
 8001f40:	bd38      	pop	{r3, r4, r5, pc}
    ep->dma_addr = (uint32_t)pBuf;
 8001f42:	ebc4 05c4 	rsb	r5, r4, r4, lsl #3
 8001f46:	eb00 0585 	add.w	r5, r0, r5, lsl #2
 8001f4a:	f8c5 220c 	str.w	r2, [r5, #524]	; 0x20c
 8001f4e:	e7f1      	b.n	8001f34 <HAL_PCD_EP_Receive+0x38>
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8001f50:	b2da      	uxtb	r2, r3
 8001f52:	6800      	ldr	r0, [r0, #0]
 8001f54:	f000 ff5e 	bl	8002e14 <USB_EPStartXfer>
 8001f58:	e7f1      	b.n	8001f3e <HAL_PCD_EP_Receive+0x42>

08001f5a <HAL_PCD_EP_GetRxCount>:
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8001f5a:	f001 010f 	and.w	r1, r1, #15
 8001f5e:	ebc1 01c1 	rsb	r1, r1, r1, lsl #3
 8001f62:	eb00 0181 	add.w	r1, r0, r1, lsl #2
}
 8001f66:	f8d1 0214 	ldr.w	r0, [r1, #532]	; 0x214
 8001f6a:	4770      	bx	lr

08001f6c <HAL_PCD_EP_Transmit>:
{
 8001f6c:	b538      	push	{r3, r4, r5, lr}
  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001f6e:	f001 040f 	and.w	r4, r1, #15
 8001f72:	ebc4 01c4 	rsb	r1, r4, r4, lsl #3
 8001f76:	0089      	lsls	r1, r1, #2
 8001f78:	3138      	adds	r1, #56	; 0x38
 8001f7a:	4401      	add	r1, r0
 8001f7c:	3104      	adds	r1, #4
  ep->xfer_buff = pBuf;
 8001f7e:	ebc4 05c4 	rsb	r5, r4, r4, lsl #3
 8001f82:	eb00 0585 	add.w	r5, r0, r5, lsl #2
 8001f86:	64aa      	str	r2, [r5, #72]	; 0x48
  ep->xfer_len = len;
 8001f88:	652b      	str	r3, [r5, #80]	; 0x50
  ep->xfer_count = 0U;
 8001f8a:	2300      	movs	r3, #0
 8001f8c:	656b      	str	r3, [r5, #84]	; 0x54
  ep->is_in = 1U;
 8001f8e:	2301      	movs	r3, #1
 8001f90:	f885 303d 	strb.w	r3, [r5, #61]	; 0x3d
  ep->num = ep_addr & EP_ADDR_MSK;
 8001f94:	f885 403c 	strb.w	r4, [r5, #60]	; 0x3c
  if (hpcd->Init.dma_enable == 1U)
 8001f98:	6903      	ldr	r3, [r0, #16]
 8001f9a:	2b01      	cmp	r3, #1
 8001f9c:	d006      	beq.n	8001fac <HAL_PCD_EP_Transmit+0x40>
  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8001f9e:	b95c      	cbnz	r4, 8001fb8 <HAL_PCD_EP_Transmit+0x4c>
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8001fa0:	b2da      	uxtb	r2, r3
 8001fa2:	6800      	ldr	r0, [r0, #0]
 8001fa4:	f000 fe94 	bl	8002cd0 <USB_EP0StartXfer>
}
 8001fa8:	2000      	movs	r0, #0
 8001faa:	bd38      	pop	{r3, r4, r5, pc}
    ep->dma_addr = (uint32_t)pBuf;
 8001fac:	ebc4 05c4 	rsb	r5, r4, r4, lsl #3
 8001fb0:	eb00 0585 	add.w	r5, r0, r5, lsl #2
 8001fb4:	64ea      	str	r2, [r5, #76]	; 0x4c
 8001fb6:	e7f2      	b.n	8001f9e <HAL_PCD_EP_Transmit+0x32>
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8001fb8:	b2da      	uxtb	r2, r3
 8001fba:	6800      	ldr	r0, [r0, #0]
 8001fbc:	f000 ff2a 	bl	8002e14 <USB_EPStartXfer>
 8001fc0:	e7f2      	b.n	8001fa8 <HAL_PCD_EP_Transmit+0x3c>

08001fc2 <HAL_PCD_EP_SetStall>:
{
 8001fc2:	b538      	push	{r3, r4, r5, lr}
  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8001fc4:	f001 050f 	and.w	r5, r1, #15
 8001fc8:	6842      	ldr	r2, [r0, #4]
 8001fca:	4295      	cmp	r5, r2
 8001fcc:	d839      	bhi.n	8002042 <HAL_PCD_EP_SetStall+0x80>
 8001fce:	4604      	mov	r4, r0
 8001fd0:	460b      	mov	r3, r1
  if ((0x80U & ep_addr) == 0x80U)
 8001fd2:	f011 0f80 	tst.w	r1, #128	; 0x80
 8001fd6:	d11f      	bne.n	8002018 <HAL_PCD_EP_SetStall+0x56>
    ep = &hpcd->OUT_ep[ep_addr];
 8001fd8:	ebc1 01c1 	rsb	r1, r1, r1, lsl #3
 8001fdc:	0089      	lsls	r1, r1, #2
 8001fde:	f501 71fc 	add.w	r1, r1, #504	; 0x1f8
 8001fe2:	4401      	add	r1, r0
 8001fe4:	3104      	adds	r1, #4
    ep->is_in = 0U;
 8001fe6:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
 8001fea:	eb00 0383 	add.w	r3, r0, r3, lsl #2
 8001fee:	2200      	movs	r2, #0
 8001ff0:	f883 21fd 	strb.w	r2, [r3, #509]	; 0x1fd
  ep->is_stall = 1U;
 8001ff4:	2301      	movs	r3, #1
 8001ff6:	708b      	strb	r3, [r1, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001ff8:	700d      	strb	r5, [r1, #0]
  __HAL_LOCK(hpcd);
 8001ffa:	f894 33bc 	ldrb.w	r3, [r4, #956]	; 0x3bc
 8001ffe:	2b01      	cmp	r3, #1
 8002000:	d021      	beq.n	8002046 <HAL_PCD_EP_SetStall+0x84>
 8002002:	2301      	movs	r3, #1
 8002004:	f884 33bc 	strb.w	r3, [r4, #956]	; 0x3bc
  (void)USB_EPSetStall(hpcd->Instance, ep);
 8002008:	6820      	ldr	r0, [r4, #0]
 800200a:	f001 f835 	bl	8003078 <USB_EPSetStall>
  if ((ep_addr & EP_ADDR_MSK) == 0U)
 800200e:	b18d      	cbz	r5, 8002034 <HAL_PCD_EP_SetStall+0x72>
  __HAL_UNLOCK(hpcd);
 8002010:	2000      	movs	r0, #0
 8002012:	f884 03bc 	strb.w	r0, [r4, #956]	; 0x3bc
}
 8002016:	bd38      	pop	{r3, r4, r5, pc}
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002018:	ebc5 01c5 	rsb	r1, r5, r5, lsl #3
 800201c:	0089      	lsls	r1, r1, #2
 800201e:	3138      	adds	r1, #56	; 0x38
 8002020:	4401      	add	r1, r0
 8002022:	3104      	adds	r1, #4
    ep->is_in = 1U;
 8002024:	ebc5 03c5 	rsb	r3, r5, r5, lsl #3
 8002028:	eb00 0383 	add.w	r3, r0, r3, lsl #2
 800202c:	2201      	movs	r2, #1
 800202e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8002032:	e7df      	b.n	8001ff4 <HAL_PCD_EP_SetStall+0x32>
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 8002034:	f504 7271 	add.w	r2, r4, #964	; 0x3c4
 8002038:	7c21      	ldrb	r1, [r4, #16]
 800203a:	6820      	ldr	r0, [r4, #0]
 800203c:	f001 f91a 	bl	8003274 <USB_EP0_OutStart>
 8002040:	e7e6      	b.n	8002010 <HAL_PCD_EP_SetStall+0x4e>
    return HAL_ERROR;
 8002042:	2001      	movs	r0, #1
 8002044:	e7e7      	b.n	8002016 <HAL_PCD_EP_SetStall+0x54>
  __HAL_LOCK(hpcd);
 8002046:	2002      	movs	r0, #2
 8002048:	e7e5      	b.n	8002016 <HAL_PCD_EP_SetStall+0x54>

0800204a <HAL_PCD_EP_ClrStall>:
  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 800204a:	f001 030f 	and.w	r3, r1, #15
 800204e:	6842      	ldr	r2, [r0, #4]
 8002050:	4293      	cmp	r3, r2
 8002052:	d831      	bhi.n	80020b8 <HAL_PCD_EP_ClrStall+0x6e>
{
 8002054:	b510      	push	{r4, lr}
 8002056:	4604      	mov	r4, r0
  if ((0x80U & ep_addr) == 0x80U)
 8002058:	f011 0f80 	tst.w	r1, #128	; 0x80
 800205c:	d11e      	bne.n	800209c <HAL_PCD_EP_ClrStall+0x52>
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800205e:	ebc3 01c3 	rsb	r1, r3, r3, lsl #3
 8002062:	0089      	lsls	r1, r1, #2
 8002064:	f501 71fc 	add.w	r1, r1, #504	; 0x1f8
 8002068:	4401      	add	r1, r0
 800206a:	3104      	adds	r1, #4
    ep->is_in = 0U;
 800206c:	ebc3 02c3 	rsb	r2, r3, r3, lsl #3
 8002070:	eb00 0282 	add.w	r2, r0, r2, lsl #2
 8002074:	2000      	movs	r0, #0
 8002076:	f882 01fd 	strb.w	r0, [r2, #509]	; 0x1fd
  ep->is_stall = 0U;
 800207a:	2200      	movs	r2, #0
 800207c:	708a      	strb	r2, [r1, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 800207e:	700b      	strb	r3, [r1, #0]
  __HAL_LOCK(hpcd);
 8002080:	f894 33bc 	ldrb.w	r3, [r4, #956]	; 0x3bc
 8002084:	2b01      	cmp	r3, #1
 8002086:	d019      	beq.n	80020bc <HAL_PCD_EP_ClrStall+0x72>
 8002088:	2301      	movs	r3, #1
 800208a:	f884 33bc 	strb.w	r3, [r4, #956]	; 0x3bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 800208e:	6820      	ldr	r0, [r4, #0]
 8002090:	f001 f81f 	bl	80030d2 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8002094:	2000      	movs	r0, #0
 8002096:	f884 03bc 	strb.w	r0, [r4, #956]	; 0x3bc
}
 800209a:	bd10      	pop	{r4, pc}
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800209c:	ebc3 01c3 	rsb	r1, r3, r3, lsl #3
 80020a0:	0089      	lsls	r1, r1, #2
 80020a2:	3138      	adds	r1, #56	; 0x38
 80020a4:	4401      	add	r1, r0
 80020a6:	3104      	adds	r1, #4
    ep->is_in = 1U;
 80020a8:	ebc3 02c3 	rsb	r2, r3, r3, lsl #3
 80020ac:	eb00 0282 	add.w	r2, r0, r2, lsl #2
 80020b0:	2001      	movs	r0, #1
 80020b2:	f882 003d 	strb.w	r0, [r2, #61]	; 0x3d
 80020b6:	e7e0      	b.n	800207a <HAL_PCD_EP_ClrStall+0x30>
    return HAL_ERROR;
 80020b8:	2001      	movs	r0, #1
}
 80020ba:	4770      	bx	lr
  __HAL_LOCK(hpcd);
 80020bc:	2002      	movs	r0, #2
 80020be:	e7ec      	b.n	800209a <HAL_PCD_EP_ClrStall+0x50>

080020c0 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 80020c0:	b430      	push	{r4, r5}
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 80020c2:	6804      	ldr	r4, [r0, #0]
 80020c4:	6a60      	ldr	r0, [r4, #36]	; 0x24

  if (fifo == 0U)
 80020c6:	b919      	cbnz	r1, 80020d0 <HAL_PCDEx_SetTxFiFo+0x10>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 80020c8:	ea40 4002 	orr.w	r0, r0, r2, lsl #16
 80020cc:	62a0      	str	r0, [r4, #40]	; 0x28
 80020ce:	e018      	b.n	8002102 <HAL_PCDEx_SetTxFiFo+0x42>
 80020d0:	460d      	mov	r5, r1
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 80020d2:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 80020d4:	eb00 4013 	add.w	r0, r0, r3, lsr #16
    for (i = 0U; i < (fifo - 1U); i++)
 80020d8:	2300      	movs	r3, #0
 80020da:	1e69      	subs	r1, r5, #1
 80020dc:	428b      	cmp	r3, r1
 80020de:	d209      	bcs.n	80020f4 <HAL_PCDEx_SetTxFiFo+0x34>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 80020e0:	f103 0140 	add.w	r1, r3, #64	; 0x40
 80020e4:	eb04 0181 	add.w	r1, r4, r1, lsl #2
 80020e8:	6849      	ldr	r1, [r1, #4]
 80020ea:	eb00 4011 	add.w	r0, r0, r1, lsr #16
    for (i = 0U; i < (fifo - 1U); i++)
 80020ee:	3301      	adds	r3, #1
 80020f0:	b2db      	uxtb	r3, r3
 80020f2:	e7f2      	b.n	80020da <HAL_PCDEx_SetTxFiFo+0x1a>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 80020f4:	ea40 4002 	orr.w	r0, r0, r2, lsl #16
 80020f8:	f105 013f 	add.w	r1, r5, #63	; 0x3f
 80020fc:	eb04 0181 	add.w	r1, r4, r1, lsl #2
 8002100:	6048      	str	r0, [r1, #4]
  }

  return HAL_OK;
}
 8002102:	2000      	movs	r0, #0
 8002104:	bc30      	pop	{r4, r5}
 8002106:	4770      	bx	lr

08002108 <HAL_PCDEx_SetRxFiFo>:
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
  hpcd->Instance->GRXFSIZ = size;
 8002108:	6803      	ldr	r3, [r0, #0]
 800210a:	6259      	str	r1, [r3, #36]	; 0x24

  return HAL_OK;
}
 800210c:	2000      	movs	r0, #0
 800210e:	4770      	bx	lr

08002110 <HAL_PCDEx_LPM_Callback>:
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 8002110:	4770      	bx	lr
	...

08002114 <HAL_RCC_OscConfig>:
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002114:	2800      	cmp	r0, #0
 8002116:	f000 81df 	beq.w	80024d8 <HAL_RCC_OscConfig+0x3c4>
{
 800211a:	b570      	push	{r4, r5, r6, lr}
 800211c:	b082      	sub	sp, #8
 800211e:	4604      	mov	r4, r0
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002120:	6803      	ldr	r3, [r0, #0]
 8002122:	f013 0f01 	tst.w	r3, #1
 8002126:	d03b      	beq.n	80021a0 <HAL_RCC_OscConfig+0x8c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002128:	4ba6      	ldr	r3, [pc, #664]	; (80023c4 <HAL_RCC_OscConfig+0x2b0>)
 800212a:	689b      	ldr	r3, [r3, #8]
 800212c:	f003 030c 	and.w	r3, r3, #12
 8002130:	2b04      	cmp	r3, #4
 8002132:	d02c      	beq.n	800218e <HAL_RCC_OscConfig+0x7a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002134:	4ba3      	ldr	r3, [pc, #652]	; (80023c4 <HAL_RCC_OscConfig+0x2b0>)
 8002136:	689b      	ldr	r3, [r3, #8]
 8002138:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800213c:	2b08      	cmp	r3, #8
 800213e:	d021      	beq.n	8002184 <HAL_RCC_OscConfig+0x70>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002140:	6863      	ldr	r3, [r4, #4]
 8002142:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002146:	d04f      	beq.n	80021e8 <HAL_RCC_OscConfig+0xd4>
 8002148:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800214c:	d052      	beq.n	80021f4 <HAL_RCC_OscConfig+0xe0>
 800214e:	4b9d      	ldr	r3, [pc, #628]	; (80023c4 <HAL_RCC_OscConfig+0x2b0>)
 8002150:	681a      	ldr	r2, [r3, #0]
 8002152:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8002156:	601a      	str	r2, [r3, #0]
 8002158:	681a      	ldr	r2, [r3, #0]
 800215a:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800215e:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002160:	6863      	ldr	r3, [r4, #4]
 8002162:	2b00      	cmp	r3, #0
 8002164:	d050      	beq.n	8002208 <HAL_RCC_OscConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002166:	f7fe fdbd 	bl	8000ce4 <HAL_GetTick>
 800216a:	4605      	mov	r5, r0

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800216c:	4b95      	ldr	r3, [pc, #596]	; (80023c4 <HAL_RCC_OscConfig+0x2b0>)
 800216e:	681b      	ldr	r3, [r3, #0]
 8002170:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 8002174:	d114      	bne.n	80021a0 <HAL_RCC_OscConfig+0x8c>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002176:	f7fe fdb5 	bl	8000ce4 <HAL_GetTick>
 800217a:	1b40      	subs	r0, r0, r5
 800217c:	2864      	cmp	r0, #100	; 0x64
 800217e:	d9f5      	bls.n	800216c <HAL_RCC_OscConfig+0x58>
          {
            return HAL_TIMEOUT;
 8002180:	2003      	movs	r0, #3
 8002182:	e1b0      	b.n	80024e6 <HAL_RCC_OscConfig+0x3d2>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002184:	4b8f      	ldr	r3, [pc, #572]	; (80023c4 <HAL_RCC_OscConfig+0x2b0>)
 8002186:	685b      	ldr	r3, [r3, #4]
 8002188:	f413 0f80 	tst.w	r3, #4194304	; 0x400000
 800218c:	d0d8      	beq.n	8002140 <HAL_RCC_OscConfig+0x2c>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800218e:	4b8d      	ldr	r3, [pc, #564]	; (80023c4 <HAL_RCC_OscConfig+0x2b0>)
 8002190:	681b      	ldr	r3, [r3, #0]
 8002192:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 8002196:	d003      	beq.n	80021a0 <HAL_RCC_OscConfig+0x8c>
 8002198:	6863      	ldr	r3, [r4, #4]
 800219a:	2b00      	cmp	r3, #0
 800219c:	f000 819e 	beq.w	80024dc <HAL_RCC_OscConfig+0x3c8>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80021a0:	6823      	ldr	r3, [r4, #0]
 80021a2:	f013 0f02 	tst.w	r3, #2
 80021a6:	d054      	beq.n	8002252 <HAL_RCC_OscConfig+0x13e>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80021a8:	4b86      	ldr	r3, [pc, #536]	; (80023c4 <HAL_RCC_OscConfig+0x2b0>)
 80021aa:	689b      	ldr	r3, [r3, #8]
 80021ac:	f013 0f0c 	tst.w	r3, #12
 80021b0:	d03e      	beq.n	8002230 <HAL_RCC_OscConfig+0x11c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80021b2:	4b84      	ldr	r3, [pc, #528]	; (80023c4 <HAL_RCC_OscConfig+0x2b0>)
 80021b4:	689b      	ldr	r3, [r3, #8]
 80021b6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80021ba:	2b08      	cmp	r3, #8
 80021bc:	d033      	beq.n	8002226 <HAL_RCC_OscConfig+0x112>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80021be:	68e3      	ldr	r3, [r4, #12]
 80021c0:	2b00      	cmp	r3, #0
 80021c2:	d067      	beq.n	8002294 <HAL_RCC_OscConfig+0x180>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80021c4:	4b80      	ldr	r3, [pc, #512]	; (80023c8 <HAL_RCC_OscConfig+0x2b4>)
 80021c6:	2201      	movs	r2, #1
 80021c8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80021ca:	f7fe fd8b 	bl	8000ce4 <HAL_GetTick>
 80021ce:	4605      	mov	r5, r0

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80021d0:	4b7c      	ldr	r3, [pc, #496]	; (80023c4 <HAL_RCC_OscConfig+0x2b0>)
 80021d2:	681b      	ldr	r3, [r3, #0]
 80021d4:	f013 0f02 	tst.w	r3, #2
 80021d8:	d153      	bne.n	8002282 <HAL_RCC_OscConfig+0x16e>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80021da:	f7fe fd83 	bl	8000ce4 <HAL_GetTick>
 80021de:	1b40      	subs	r0, r0, r5
 80021e0:	2802      	cmp	r0, #2
 80021e2:	d9f5      	bls.n	80021d0 <HAL_RCC_OscConfig+0xbc>
          {
            return HAL_TIMEOUT;
 80021e4:	2003      	movs	r0, #3
 80021e6:	e17e      	b.n	80024e6 <HAL_RCC_OscConfig+0x3d2>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80021e8:	4a76      	ldr	r2, [pc, #472]	; (80023c4 <HAL_RCC_OscConfig+0x2b0>)
 80021ea:	6813      	ldr	r3, [r2, #0]
 80021ec:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80021f0:	6013      	str	r3, [r2, #0]
 80021f2:	e7b5      	b.n	8002160 <HAL_RCC_OscConfig+0x4c>
 80021f4:	4b73      	ldr	r3, [pc, #460]	; (80023c4 <HAL_RCC_OscConfig+0x2b0>)
 80021f6:	681a      	ldr	r2, [r3, #0]
 80021f8:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 80021fc:	601a      	str	r2, [r3, #0]
 80021fe:	681a      	ldr	r2, [r3, #0]
 8002200:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8002204:	601a      	str	r2, [r3, #0]
 8002206:	e7ab      	b.n	8002160 <HAL_RCC_OscConfig+0x4c>
        tickstart = HAL_GetTick();
 8002208:	f7fe fd6c 	bl	8000ce4 <HAL_GetTick>
 800220c:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800220e:	4b6d      	ldr	r3, [pc, #436]	; (80023c4 <HAL_RCC_OscConfig+0x2b0>)
 8002210:	681b      	ldr	r3, [r3, #0]
 8002212:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 8002216:	d0c3      	beq.n	80021a0 <HAL_RCC_OscConfig+0x8c>
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002218:	f7fe fd64 	bl	8000ce4 <HAL_GetTick>
 800221c:	1b40      	subs	r0, r0, r5
 800221e:	2864      	cmp	r0, #100	; 0x64
 8002220:	d9f5      	bls.n	800220e <HAL_RCC_OscConfig+0xfa>
            return HAL_TIMEOUT;
 8002222:	2003      	movs	r0, #3
 8002224:	e15f      	b.n	80024e6 <HAL_RCC_OscConfig+0x3d2>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002226:	4b67      	ldr	r3, [pc, #412]	; (80023c4 <HAL_RCC_OscConfig+0x2b0>)
 8002228:	685b      	ldr	r3, [r3, #4]
 800222a:	f413 0f80 	tst.w	r3, #4194304	; 0x400000
 800222e:	d1c6      	bne.n	80021be <HAL_RCC_OscConfig+0xaa>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002230:	4b64      	ldr	r3, [pc, #400]	; (80023c4 <HAL_RCC_OscConfig+0x2b0>)
 8002232:	681b      	ldr	r3, [r3, #0]
 8002234:	f013 0f02 	tst.w	r3, #2
 8002238:	d003      	beq.n	8002242 <HAL_RCC_OscConfig+0x12e>
 800223a:	68e3      	ldr	r3, [r4, #12]
 800223c:	2b01      	cmp	r3, #1
 800223e:	f040 814f 	bne.w	80024e0 <HAL_RCC_OscConfig+0x3cc>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002242:	4a60      	ldr	r2, [pc, #384]	; (80023c4 <HAL_RCC_OscConfig+0x2b0>)
 8002244:	6813      	ldr	r3, [r2, #0]
 8002246:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 800224a:	6921      	ldr	r1, [r4, #16]
 800224c:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 8002250:	6013      	str	r3, [r2, #0]
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002252:	6823      	ldr	r3, [r4, #0]
 8002254:	f013 0f08 	tst.w	r3, #8
 8002258:	d040      	beq.n	80022dc <HAL_RCC_OscConfig+0x1c8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800225a:	6963      	ldr	r3, [r4, #20]
 800225c:	b363      	cbz	r3, 80022b8 <HAL_RCC_OscConfig+0x1a4>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800225e:	4b5b      	ldr	r3, [pc, #364]	; (80023cc <HAL_RCC_OscConfig+0x2b8>)
 8002260:	2201      	movs	r2, #1
 8002262:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002264:	f7fe fd3e 	bl	8000ce4 <HAL_GetTick>
 8002268:	4605      	mov	r5, r0

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800226a:	4b56      	ldr	r3, [pc, #344]	; (80023c4 <HAL_RCC_OscConfig+0x2b0>)
 800226c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800226e:	f013 0f02 	tst.w	r3, #2
 8002272:	d133      	bne.n	80022dc <HAL_RCC_OscConfig+0x1c8>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002274:	f7fe fd36 	bl	8000ce4 <HAL_GetTick>
 8002278:	1b40      	subs	r0, r0, r5
 800227a:	2802      	cmp	r0, #2
 800227c:	d9f5      	bls.n	800226a <HAL_RCC_OscConfig+0x156>
        {
          return HAL_TIMEOUT;
 800227e:	2003      	movs	r0, #3
 8002280:	e131      	b.n	80024e6 <HAL_RCC_OscConfig+0x3d2>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002282:	4a50      	ldr	r2, [pc, #320]	; (80023c4 <HAL_RCC_OscConfig+0x2b0>)
 8002284:	6813      	ldr	r3, [r2, #0]
 8002286:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 800228a:	6921      	ldr	r1, [r4, #16]
 800228c:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 8002290:	6013      	str	r3, [r2, #0]
 8002292:	e7de      	b.n	8002252 <HAL_RCC_OscConfig+0x13e>
        __HAL_RCC_HSI_DISABLE();
 8002294:	4b4c      	ldr	r3, [pc, #304]	; (80023c8 <HAL_RCC_OscConfig+0x2b4>)
 8002296:	2200      	movs	r2, #0
 8002298:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 800229a:	f7fe fd23 	bl	8000ce4 <HAL_GetTick>
 800229e:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80022a0:	4b48      	ldr	r3, [pc, #288]	; (80023c4 <HAL_RCC_OscConfig+0x2b0>)
 80022a2:	681b      	ldr	r3, [r3, #0]
 80022a4:	f013 0f02 	tst.w	r3, #2
 80022a8:	d0d3      	beq.n	8002252 <HAL_RCC_OscConfig+0x13e>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80022aa:	f7fe fd1b 	bl	8000ce4 <HAL_GetTick>
 80022ae:	1b40      	subs	r0, r0, r5
 80022b0:	2802      	cmp	r0, #2
 80022b2:	d9f5      	bls.n	80022a0 <HAL_RCC_OscConfig+0x18c>
            return HAL_TIMEOUT;
 80022b4:	2003      	movs	r0, #3
 80022b6:	e116      	b.n	80024e6 <HAL_RCC_OscConfig+0x3d2>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80022b8:	4b44      	ldr	r3, [pc, #272]	; (80023cc <HAL_RCC_OscConfig+0x2b8>)
 80022ba:	2200      	movs	r2, #0
 80022bc:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80022be:	f7fe fd11 	bl	8000ce4 <HAL_GetTick>
 80022c2:	4605      	mov	r5, r0

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80022c4:	4b3f      	ldr	r3, [pc, #252]	; (80023c4 <HAL_RCC_OscConfig+0x2b0>)
 80022c6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80022c8:	f013 0f02 	tst.w	r3, #2
 80022cc:	d006      	beq.n	80022dc <HAL_RCC_OscConfig+0x1c8>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80022ce:	f7fe fd09 	bl	8000ce4 <HAL_GetTick>
 80022d2:	1b40      	subs	r0, r0, r5
 80022d4:	2802      	cmp	r0, #2
 80022d6:	d9f5      	bls.n	80022c4 <HAL_RCC_OscConfig+0x1b0>
        {
          return HAL_TIMEOUT;
 80022d8:	2003      	movs	r0, #3
 80022da:	e104      	b.n	80024e6 <HAL_RCC_OscConfig+0x3d2>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80022dc:	6823      	ldr	r3, [r4, #0]
 80022de:	f013 0f04 	tst.w	r3, #4
 80022e2:	d078      	beq.n	80023d6 <HAL_RCC_OscConfig+0x2c2>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80022e4:	4b37      	ldr	r3, [pc, #220]	; (80023c4 <HAL_RCC_OscConfig+0x2b0>)
 80022e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022e8:	f013 5f80 	tst.w	r3, #268435456	; 0x10000000
 80022ec:	d10d      	bne.n	800230a <HAL_RCC_OscConfig+0x1f6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80022ee:	2300      	movs	r3, #0
 80022f0:	9301      	str	r3, [sp, #4]
 80022f2:	4b34      	ldr	r3, [pc, #208]	; (80023c4 <HAL_RCC_OscConfig+0x2b0>)
 80022f4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80022f6:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 80022fa:	641a      	str	r2, [r3, #64]	; 0x40
 80022fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022fe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002302:	9301      	str	r3, [sp, #4]
 8002304:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 8002306:	2501      	movs	r5, #1
 8002308:	e000      	b.n	800230c <HAL_RCC_OscConfig+0x1f8>
    FlagStatus       pwrclkchanged = RESET;
 800230a:	2500      	movs	r5, #0
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800230c:	4b30      	ldr	r3, [pc, #192]	; (80023d0 <HAL_RCC_OscConfig+0x2bc>)
 800230e:	681b      	ldr	r3, [r3, #0]
 8002310:	f413 7f80 	tst.w	r3, #256	; 0x100
 8002314:	d021      	beq.n	800235a <HAL_RCC_OscConfig+0x246>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002316:	68a3      	ldr	r3, [r4, #8]
 8002318:	2b01      	cmp	r3, #1
 800231a:	d032      	beq.n	8002382 <HAL_RCC_OscConfig+0x26e>
 800231c:	2b05      	cmp	r3, #5
 800231e:	d036      	beq.n	800238e <HAL_RCC_OscConfig+0x27a>
 8002320:	4b28      	ldr	r3, [pc, #160]	; (80023c4 <HAL_RCC_OscConfig+0x2b0>)
 8002322:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8002324:	f022 0201 	bic.w	r2, r2, #1
 8002328:	671a      	str	r2, [r3, #112]	; 0x70
 800232a:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800232c:	f022 0204 	bic.w	r2, r2, #4
 8002330:	671a      	str	r2, [r3, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002332:	68a3      	ldr	r3, [r4, #8]
 8002334:	2b00      	cmp	r3, #0
 8002336:	d034      	beq.n	80023a2 <HAL_RCC_OscConfig+0x28e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002338:	f7fe fcd4 	bl	8000ce4 <HAL_GetTick>
 800233c:	4606      	mov	r6, r0

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800233e:	4b21      	ldr	r3, [pc, #132]	; (80023c4 <HAL_RCC_OscConfig+0x2b0>)
 8002340:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002342:	f013 0f02 	tst.w	r3, #2
 8002346:	d145      	bne.n	80023d4 <HAL_RCC_OscConfig+0x2c0>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002348:	f7fe fccc 	bl	8000ce4 <HAL_GetTick>
 800234c:	1b80      	subs	r0, r0, r6
 800234e:	f241 3388 	movw	r3, #5000	; 0x1388
 8002352:	4298      	cmp	r0, r3
 8002354:	d9f3      	bls.n	800233e <HAL_RCC_OscConfig+0x22a>
        {
          return HAL_TIMEOUT;
 8002356:	2003      	movs	r0, #3
 8002358:	e0c5      	b.n	80024e6 <HAL_RCC_OscConfig+0x3d2>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800235a:	4a1d      	ldr	r2, [pc, #116]	; (80023d0 <HAL_RCC_OscConfig+0x2bc>)
 800235c:	6813      	ldr	r3, [r2, #0]
 800235e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002362:	6013      	str	r3, [r2, #0]
      tickstart = HAL_GetTick();
 8002364:	f7fe fcbe 	bl	8000ce4 <HAL_GetTick>
 8002368:	4606      	mov	r6, r0
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800236a:	4b19      	ldr	r3, [pc, #100]	; (80023d0 <HAL_RCC_OscConfig+0x2bc>)
 800236c:	681b      	ldr	r3, [r3, #0]
 800236e:	f413 7f80 	tst.w	r3, #256	; 0x100
 8002372:	d1d0      	bne.n	8002316 <HAL_RCC_OscConfig+0x202>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002374:	f7fe fcb6 	bl	8000ce4 <HAL_GetTick>
 8002378:	1b80      	subs	r0, r0, r6
 800237a:	2802      	cmp	r0, #2
 800237c:	d9f5      	bls.n	800236a <HAL_RCC_OscConfig+0x256>
          return HAL_TIMEOUT;
 800237e:	2003      	movs	r0, #3
 8002380:	e0b1      	b.n	80024e6 <HAL_RCC_OscConfig+0x3d2>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002382:	4a10      	ldr	r2, [pc, #64]	; (80023c4 <HAL_RCC_OscConfig+0x2b0>)
 8002384:	6f13      	ldr	r3, [r2, #112]	; 0x70
 8002386:	f043 0301 	orr.w	r3, r3, #1
 800238a:	6713      	str	r3, [r2, #112]	; 0x70
 800238c:	e7d1      	b.n	8002332 <HAL_RCC_OscConfig+0x21e>
 800238e:	4b0d      	ldr	r3, [pc, #52]	; (80023c4 <HAL_RCC_OscConfig+0x2b0>)
 8002390:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8002392:	f042 0204 	orr.w	r2, r2, #4
 8002396:	671a      	str	r2, [r3, #112]	; 0x70
 8002398:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800239a:	f042 0201 	orr.w	r2, r2, #1
 800239e:	671a      	str	r2, [r3, #112]	; 0x70
 80023a0:	e7c7      	b.n	8002332 <HAL_RCC_OscConfig+0x21e>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80023a2:	f7fe fc9f 	bl	8000ce4 <HAL_GetTick>
 80023a6:	4606      	mov	r6, r0

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80023a8:	4b06      	ldr	r3, [pc, #24]	; (80023c4 <HAL_RCC_OscConfig+0x2b0>)
 80023aa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80023ac:	f013 0f02 	tst.w	r3, #2
 80023b0:	d010      	beq.n	80023d4 <HAL_RCC_OscConfig+0x2c0>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80023b2:	f7fe fc97 	bl	8000ce4 <HAL_GetTick>
 80023b6:	1b80      	subs	r0, r0, r6
 80023b8:	f241 3388 	movw	r3, #5000	; 0x1388
 80023bc:	4298      	cmp	r0, r3
 80023be:	d9f3      	bls.n	80023a8 <HAL_RCC_OscConfig+0x294>
        {
          return HAL_TIMEOUT;
 80023c0:	2003      	movs	r0, #3
 80023c2:	e090      	b.n	80024e6 <HAL_RCC_OscConfig+0x3d2>
 80023c4:	40023800 	.word	0x40023800
 80023c8:	42470000 	.word	0x42470000
 80023cc:	42470e80 	.word	0x42470e80
 80023d0:	40007000 	.word	0x40007000
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80023d4:	b9ed      	cbnz	r5, 8002412 <HAL_RCC_OscConfig+0x2fe>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80023d6:	69a3      	ldr	r3, [r4, #24]
 80023d8:	2b00      	cmp	r3, #0
 80023da:	f000 8083 	beq.w	80024e4 <HAL_RCC_OscConfig+0x3d0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80023de:	4a49      	ldr	r2, [pc, #292]	; (8002504 <HAL_RCC_OscConfig+0x3f0>)
 80023e0:	6892      	ldr	r2, [r2, #8]
 80023e2:	f002 020c 	and.w	r2, r2, #12
 80023e6:	2a08      	cmp	r2, #8
 80023e8:	d051      	beq.n	800248e <HAL_RCC_OscConfig+0x37a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80023ea:	2b02      	cmp	r3, #2
 80023ec:	d017      	beq.n	800241e <HAL_RCC_OscConfig+0x30a>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80023ee:	4b46      	ldr	r3, [pc, #280]	; (8002508 <HAL_RCC_OscConfig+0x3f4>)
 80023f0:	2200      	movs	r2, #0
 80023f2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80023f4:	f7fe fc76 	bl	8000ce4 <HAL_GetTick>
 80023f8:	4604      	mov	r4, r0

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80023fa:	4b42      	ldr	r3, [pc, #264]	; (8002504 <HAL_RCC_OscConfig+0x3f0>)
 80023fc:	681b      	ldr	r3, [r3, #0]
 80023fe:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 8002402:	d042      	beq.n	800248a <HAL_RCC_OscConfig+0x376>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002404:	f7fe fc6e 	bl	8000ce4 <HAL_GetTick>
 8002408:	1b00      	subs	r0, r0, r4
 800240a:	2802      	cmp	r0, #2
 800240c:	d9f5      	bls.n	80023fa <HAL_RCC_OscConfig+0x2e6>
          {
            return HAL_TIMEOUT;
 800240e:	2003      	movs	r0, #3
 8002410:	e069      	b.n	80024e6 <HAL_RCC_OscConfig+0x3d2>
      __HAL_RCC_PWR_CLK_DISABLE();
 8002412:	4a3c      	ldr	r2, [pc, #240]	; (8002504 <HAL_RCC_OscConfig+0x3f0>)
 8002414:	6c13      	ldr	r3, [r2, #64]	; 0x40
 8002416:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800241a:	6413      	str	r3, [r2, #64]	; 0x40
 800241c:	e7db      	b.n	80023d6 <HAL_RCC_OscConfig+0x2c2>
        __HAL_RCC_PLL_DISABLE();
 800241e:	4b3a      	ldr	r3, [pc, #232]	; (8002508 <HAL_RCC_OscConfig+0x3f4>)
 8002420:	2200      	movs	r2, #0
 8002422:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8002424:	f7fe fc5e 	bl	8000ce4 <HAL_GetTick>
 8002428:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800242a:	4b36      	ldr	r3, [pc, #216]	; (8002504 <HAL_RCC_OscConfig+0x3f0>)
 800242c:	681b      	ldr	r3, [r3, #0]
 800242e:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 8002432:	d006      	beq.n	8002442 <HAL_RCC_OscConfig+0x32e>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002434:	f7fe fc56 	bl	8000ce4 <HAL_GetTick>
 8002438:	1b40      	subs	r0, r0, r5
 800243a:	2802      	cmp	r0, #2
 800243c:	d9f5      	bls.n	800242a <HAL_RCC_OscConfig+0x316>
            return HAL_TIMEOUT;
 800243e:	2003      	movs	r0, #3
 8002440:	e051      	b.n	80024e6 <HAL_RCC_OscConfig+0x3d2>
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002442:	69e3      	ldr	r3, [r4, #28]
 8002444:	6a22      	ldr	r2, [r4, #32]
 8002446:	4313      	orrs	r3, r2
 8002448:	6a62      	ldr	r2, [r4, #36]	; 0x24
 800244a:	ea43 1382 	orr.w	r3, r3, r2, lsl #6
 800244e:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 8002450:	0852      	lsrs	r2, r2, #1
 8002452:	3a01      	subs	r2, #1
 8002454:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8002458:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 800245a:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 800245e:	4a29      	ldr	r2, [pc, #164]	; (8002504 <HAL_RCC_OscConfig+0x3f0>)
 8002460:	6053      	str	r3, [r2, #4]
        __HAL_RCC_PLL_ENABLE();
 8002462:	4b29      	ldr	r3, [pc, #164]	; (8002508 <HAL_RCC_OscConfig+0x3f4>)
 8002464:	2201      	movs	r2, #1
 8002466:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8002468:	f7fe fc3c 	bl	8000ce4 <HAL_GetTick>
 800246c:	4604      	mov	r4, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800246e:	4b25      	ldr	r3, [pc, #148]	; (8002504 <HAL_RCC_OscConfig+0x3f0>)
 8002470:	681b      	ldr	r3, [r3, #0]
 8002472:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 8002476:	d106      	bne.n	8002486 <HAL_RCC_OscConfig+0x372>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002478:	f7fe fc34 	bl	8000ce4 <HAL_GetTick>
 800247c:	1b00      	subs	r0, r0, r4
 800247e:	2802      	cmp	r0, #2
 8002480:	d9f5      	bls.n	800246e <HAL_RCC_OscConfig+0x35a>
            return HAL_TIMEOUT;
 8002482:	2003      	movs	r0, #3
 8002484:	e02f      	b.n	80024e6 <HAL_RCC_OscConfig+0x3d2>
          return HAL_ERROR;
        }
      }
    }
  }
  return HAL_OK;
 8002486:	2000      	movs	r0, #0
 8002488:	e02d      	b.n	80024e6 <HAL_RCC_OscConfig+0x3d2>
 800248a:	2000      	movs	r0, #0
 800248c:	e02b      	b.n	80024e6 <HAL_RCC_OscConfig+0x3d2>
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800248e:	2b01      	cmp	r3, #1
 8002490:	d02b      	beq.n	80024ea <HAL_RCC_OscConfig+0x3d6>
        pll_config = RCC->PLLCFGR;
 8002492:	4b1c      	ldr	r3, [pc, #112]	; (8002504 <HAL_RCC_OscConfig+0x3f0>)
 8002494:	685b      	ldr	r3, [r3, #4]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002496:	f403 0180 	and.w	r1, r3, #4194304	; 0x400000
 800249a:	69e2      	ldr	r2, [r4, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800249c:	4291      	cmp	r1, r2
 800249e:	d126      	bne.n	80024ee <HAL_RCC_OscConfig+0x3da>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80024a0:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80024a4:	6a21      	ldr	r1, [r4, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80024a6:	428a      	cmp	r2, r1
 80024a8:	d123      	bne.n	80024f2 <HAL_RCC_OscConfig+0x3de>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80024aa:	6a61      	ldr	r1, [r4, #36]	; 0x24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80024ac:	f647 72c0 	movw	r2, #32704	; 0x7fc0
 80024b0:	401a      	ands	r2, r3
 80024b2:	ebb2 1f81 	cmp.w	r2, r1, lsl #6
 80024b6:	d11e      	bne.n	80024f6 <HAL_RCC_OscConfig+0x3e2>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80024b8:	f403 3140 	and.w	r1, r3, #196608	; 0x30000
 80024bc:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 80024be:	0852      	lsrs	r2, r2, #1
 80024c0:	3a01      	subs	r2, #1
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80024c2:	ebb1 4f02 	cmp.w	r1, r2, lsl #16
 80024c6:	d118      	bne.n	80024fa <HAL_RCC_OscConfig+0x3e6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80024c8:	f003 6370 	and.w	r3, r3, #251658240	; 0xf000000
 80024cc:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80024ce:	ebb3 6f02 	cmp.w	r3, r2, lsl #24
 80024d2:	d114      	bne.n	80024fe <HAL_RCC_OscConfig+0x3ea>
  return HAL_OK;
 80024d4:	2000      	movs	r0, #0
 80024d6:	e006      	b.n	80024e6 <HAL_RCC_OscConfig+0x3d2>
    return HAL_ERROR;
 80024d8:	2001      	movs	r0, #1
}
 80024da:	4770      	bx	lr
        return HAL_ERROR;
 80024dc:	2001      	movs	r0, #1
 80024de:	e002      	b.n	80024e6 <HAL_RCC_OscConfig+0x3d2>
        return HAL_ERROR;
 80024e0:	2001      	movs	r0, #1
 80024e2:	e000      	b.n	80024e6 <HAL_RCC_OscConfig+0x3d2>
  return HAL_OK;
 80024e4:	2000      	movs	r0, #0
}
 80024e6:	b002      	add	sp, #8
 80024e8:	bd70      	pop	{r4, r5, r6, pc}
        return HAL_ERROR;
 80024ea:	2001      	movs	r0, #1
 80024ec:	e7fb      	b.n	80024e6 <HAL_RCC_OscConfig+0x3d2>
          return HAL_ERROR;
 80024ee:	2001      	movs	r0, #1
 80024f0:	e7f9      	b.n	80024e6 <HAL_RCC_OscConfig+0x3d2>
 80024f2:	2001      	movs	r0, #1
 80024f4:	e7f7      	b.n	80024e6 <HAL_RCC_OscConfig+0x3d2>
 80024f6:	2001      	movs	r0, #1
 80024f8:	e7f5      	b.n	80024e6 <HAL_RCC_OscConfig+0x3d2>
 80024fa:	2001      	movs	r0, #1
 80024fc:	e7f3      	b.n	80024e6 <HAL_RCC_OscConfig+0x3d2>
 80024fe:	2001      	movs	r0, #1
 8002500:	e7f1      	b.n	80024e6 <HAL_RCC_OscConfig+0x3d2>
 8002502:	bf00      	nop
 8002504:	40023800 	.word	0x40023800
 8002508:	42470060 	.word	0x42470060

0800250c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800250c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
  uint32_t sysclockfreq = 0U;

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800250e:	4b2f      	ldr	r3, [pc, #188]	; (80025cc <HAL_RCC_GetSysClockFreq+0xc0>)
 8002510:	689b      	ldr	r3, [r3, #8]
 8002512:	f003 030c 	and.w	r3, r3, #12
 8002516:	2b04      	cmp	r3, #4
 8002518:	d053      	beq.n	80025c2 <HAL_RCC_GetSysClockFreq+0xb6>
 800251a:	2b08      	cmp	r3, #8
 800251c:	d153      	bne.n	80025c6 <HAL_RCC_GetSysClockFreq+0xba>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800251e:	4b2b      	ldr	r3, [pc, #172]	; (80025cc <HAL_RCC_GetSysClockFreq+0xc0>)
 8002520:	685a      	ldr	r2, [r3, #4]
 8002522:	f002 023f 	and.w	r2, r2, #63	; 0x3f
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002526:	685b      	ldr	r3, [r3, #4]
 8002528:	f413 0f80 	tst.w	r3, #4194304	; 0x400000
 800252c:	d028      	beq.n	8002580 <HAL_RCC_GetSysClockFreq+0x74>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800252e:	4b27      	ldr	r3, [pc, #156]	; (80025cc <HAL_RCC_GetSysClockFreq+0xc0>)
 8002530:	685b      	ldr	r3, [r3, #4]
 8002532:	f3c3 1388 	ubfx	r3, r3, #6, #9
 8002536:	0158      	lsls	r0, r3, #5
 8002538:	2100      	movs	r1, #0
 800253a:	1ac0      	subs	r0, r0, r3
 800253c:	f161 0100 	sbc.w	r1, r1, #0
 8002540:	018e      	lsls	r6, r1, #6
 8002542:	ea46 6690 	orr.w	r6, r6, r0, lsr #26
 8002546:	0187      	lsls	r7, r0, #6
 8002548:	1a3c      	subs	r4, r7, r0
 800254a:	eb66 0501 	sbc.w	r5, r6, r1
 800254e:	00e9      	lsls	r1, r5, #3
 8002550:	ea41 7154 	orr.w	r1, r1, r4, lsr #29
 8002554:	00e0      	lsls	r0, r4, #3
 8002556:	18c0      	adds	r0, r0, r3
 8002558:	f141 0100 	adc.w	r1, r1, #0
 800255c:	024b      	lsls	r3, r1, #9
 800255e:	ea43 53d0 	orr.w	r3, r3, r0, lsr #23
 8002562:	0244      	lsls	r4, r0, #9
 8002564:	4620      	mov	r0, r4
 8002566:	4619      	mov	r1, r3
 8002568:	2300      	movs	r3, #0
 800256a:	f7fd fe89 	bl	8000280 <__aeabi_uldivmod>
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 800256e:	4b17      	ldr	r3, [pc, #92]	; (80025cc <HAL_RCC_GetSysClockFreq+0xc0>)
 8002570:	685b      	ldr	r3, [r3, #4]
 8002572:	f3c3 4301 	ubfx	r3, r3, #16, #2
 8002576:	3301      	adds	r3, #1
 8002578:	005b      	lsls	r3, r3, #1

      sysclockfreq = pllvco/pllp;
 800257a:	fbb0 f0f3 	udiv	r0, r0, r3
      break;
 800257e:	e023      	b.n	80025c8 <HAL_RCC_GetSysClockFreq+0xbc>
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002580:	4b12      	ldr	r3, [pc, #72]	; (80025cc <HAL_RCC_GetSysClockFreq+0xc0>)
 8002582:	685b      	ldr	r3, [r3, #4]
 8002584:	f3c3 1388 	ubfx	r3, r3, #6, #9
 8002588:	015c      	lsls	r4, r3, #5
 800258a:	2500      	movs	r5, #0
 800258c:	1ae4      	subs	r4, r4, r3
 800258e:	f165 0500 	sbc.w	r5, r5, #0
 8002592:	01ae      	lsls	r6, r5, #6
 8002594:	ea46 6694 	orr.w	r6, r6, r4, lsr #26
 8002598:	01a7      	lsls	r7, r4, #6
 800259a:	1b38      	subs	r0, r7, r4
 800259c:	eb66 0105 	sbc.w	r1, r6, r5
 80025a0:	00cc      	lsls	r4, r1, #3
 80025a2:	ea44 7450 	orr.w	r4, r4, r0, lsr #29
 80025a6:	00c5      	lsls	r5, r0, #3
 80025a8:	18e8      	adds	r0, r5, r3
 80025aa:	f144 0100 	adc.w	r1, r4, #0
 80025ae:	028b      	lsls	r3, r1, #10
 80025b0:	ea43 5390 	orr.w	r3, r3, r0, lsr #22
 80025b4:	0284      	lsls	r4, r0, #10
 80025b6:	4620      	mov	r0, r4
 80025b8:	4619      	mov	r1, r3
 80025ba:	2300      	movs	r3, #0
 80025bc:	f7fd fe60 	bl	8000280 <__aeabi_uldivmod>
 80025c0:	e7d5      	b.n	800256e <HAL_RCC_GetSysClockFreq+0x62>
      sysclockfreq = HSE_VALUE;
 80025c2:	4803      	ldr	r0, [pc, #12]	; (80025d0 <HAL_RCC_GetSysClockFreq+0xc4>)
 80025c4:	e000      	b.n	80025c8 <HAL_RCC_GetSysClockFreq+0xbc>
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80025c6:	4803      	ldr	r0, [pc, #12]	; (80025d4 <HAL_RCC_GetSysClockFreq+0xc8>)
      sysclockfreq = HSI_VALUE;
      break;
    }
  }
  return sysclockfreq;
}
 80025c8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80025ca:	bf00      	nop
 80025cc:	40023800 	.word	0x40023800
 80025d0:	007a1200 	.word	0x007a1200
 80025d4:	00f42400 	.word	0x00f42400

080025d8 <HAL_RCC_ClockConfig>:
  if(RCC_ClkInitStruct == NULL)
 80025d8:	2800      	cmp	r0, #0
 80025da:	f000 809b 	beq.w	8002714 <HAL_RCC_ClockConfig+0x13c>
{
 80025de:	b570      	push	{r4, r5, r6, lr}
 80025e0:	460d      	mov	r5, r1
 80025e2:	4604      	mov	r4, r0
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80025e4:	4b4f      	ldr	r3, [pc, #316]	; (8002724 <HAL_RCC_ClockConfig+0x14c>)
 80025e6:	681b      	ldr	r3, [r3, #0]
 80025e8:	f003 0307 	and.w	r3, r3, #7
 80025ec:	428b      	cmp	r3, r1
 80025ee:	d208      	bcs.n	8002602 <HAL_RCC_ClockConfig+0x2a>
    __HAL_FLASH_SET_LATENCY(FLatency);
 80025f0:	b2cb      	uxtb	r3, r1
 80025f2:	4a4c      	ldr	r2, [pc, #304]	; (8002724 <HAL_RCC_ClockConfig+0x14c>)
 80025f4:	7013      	strb	r3, [r2, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80025f6:	6813      	ldr	r3, [r2, #0]
 80025f8:	f003 0307 	and.w	r3, r3, #7
 80025fc:	428b      	cmp	r3, r1
 80025fe:	f040 808b 	bne.w	8002718 <HAL_RCC_ClockConfig+0x140>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002602:	6823      	ldr	r3, [r4, #0]
 8002604:	f013 0f02 	tst.w	r3, #2
 8002608:	d017      	beq.n	800263a <HAL_RCC_ClockConfig+0x62>
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800260a:	f013 0f04 	tst.w	r3, #4
 800260e:	d004      	beq.n	800261a <HAL_RCC_ClockConfig+0x42>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002610:	4a45      	ldr	r2, [pc, #276]	; (8002728 <HAL_RCC_ClockConfig+0x150>)
 8002612:	6893      	ldr	r3, [r2, #8]
 8002614:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8002618:	6093      	str	r3, [r2, #8]
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800261a:	6823      	ldr	r3, [r4, #0]
 800261c:	f013 0f08 	tst.w	r3, #8
 8002620:	d004      	beq.n	800262c <HAL_RCC_ClockConfig+0x54>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002622:	4a41      	ldr	r2, [pc, #260]	; (8002728 <HAL_RCC_ClockConfig+0x150>)
 8002624:	6893      	ldr	r3, [r2, #8]
 8002626:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800262a:	6093      	str	r3, [r2, #8]
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800262c:	4a3e      	ldr	r2, [pc, #248]	; (8002728 <HAL_RCC_ClockConfig+0x150>)
 800262e:	6893      	ldr	r3, [r2, #8]
 8002630:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002634:	68a1      	ldr	r1, [r4, #8]
 8002636:	430b      	orrs	r3, r1
 8002638:	6093      	str	r3, [r2, #8]
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800263a:	6823      	ldr	r3, [r4, #0]
 800263c:	f013 0f01 	tst.w	r3, #1
 8002640:	d032      	beq.n	80026a8 <HAL_RCC_ClockConfig+0xd0>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002642:	6863      	ldr	r3, [r4, #4]
 8002644:	2b01      	cmp	r3, #1
 8002646:	d021      	beq.n	800268c <HAL_RCC_ClockConfig+0xb4>
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002648:	1e9a      	subs	r2, r3, #2
 800264a:	2a01      	cmp	r2, #1
 800264c:	d925      	bls.n	800269a <HAL_RCC_ClockConfig+0xc2>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800264e:	4a36      	ldr	r2, [pc, #216]	; (8002728 <HAL_RCC_ClockConfig+0x150>)
 8002650:	6812      	ldr	r2, [r2, #0]
 8002652:	f012 0f02 	tst.w	r2, #2
 8002656:	d061      	beq.n	800271c <HAL_RCC_ClockConfig+0x144>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002658:	4933      	ldr	r1, [pc, #204]	; (8002728 <HAL_RCC_ClockConfig+0x150>)
 800265a:	688a      	ldr	r2, [r1, #8]
 800265c:	f022 0203 	bic.w	r2, r2, #3
 8002660:	4313      	orrs	r3, r2
 8002662:	608b      	str	r3, [r1, #8]
    tickstart = HAL_GetTick();
 8002664:	f7fe fb3e 	bl	8000ce4 <HAL_GetTick>
 8002668:	4606      	mov	r6, r0
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800266a:	4b2f      	ldr	r3, [pc, #188]	; (8002728 <HAL_RCC_ClockConfig+0x150>)
 800266c:	689b      	ldr	r3, [r3, #8]
 800266e:	f003 030c 	and.w	r3, r3, #12
 8002672:	6862      	ldr	r2, [r4, #4]
 8002674:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 8002678:	d016      	beq.n	80026a8 <HAL_RCC_ClockConfig+0xd0>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800267a:	f7fe fb33 	bl	8000ce4 <HAL_GetTick>
 800267e:	1b80      	subs	r0, r0, r6
 8002680:	f241 3388 	movw	r3, #5000	; 0x1388
 8002684:	4298      	cmp	r0, r3
 8002686:	d9f0      	bls.n	800266a <HAL_RCC_ClockConfig+0x92>
        return HAL_TIMEOUT;
 8002688:	2003      	movs	r0, #3
 800268a:	e042      	b.n	8002712 <HAL_RCC_ClockConfig+0x13a>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800268c:	4a26      	ldr	r2, [pc, #152]	; (8002728 <HAL_RCC_ClockConfig+0x150>)
 800268e:	6812      	ldr	r2, [r2, #0]
 8002690:	f412 3f00 	tst.w	r2, #131072	; 0x20000
 8002694:	d1e0      	bne.n	8002658 <HAL_RCC_ClockConfig+0x80>
        return HAL_ERROR;
 8002696:	2001      	movs	r0, #1
 8002698:	e03b      	b.n	8002712 <HAL_RCC_ClockConfig+0x13a>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800269a:	4a23      	ldr	r2, [pc, #140]	; (8002728 <HAL_RCC_ClockConfig+0x150>)
 800269c:	6812      	ldr	r2, [r2, #0]
 800269e:	f012 7f00 	tst.w	r2, #33554432	; 0x2000000
 80026a2:	d1d9      	bne.n	8002658 <HAL_RCC_ClockConfig+0x80>
        return HAL_ERROR;
 80026a4:	2001      	movs	r0, #1
 80026a6:	e034      	b.n	8002712 <HAL_RCC_ClockConfig+0x13a>
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80026a8:	4b1e      	ldr	r3, [pc, #120]	; (8002724 <HAL_RCC_ClockConfig+0x14c>)
 80026aa:	681b      	ldr	r3, [r3, #0]
 80026ac:	f003 0307 	and.w	r3, r3, #7
 80026b0:	42ab      	cmp	r3, r5
 80026b2:	d907      	bls.n	80026c4 <HAL_RCC_ClockConfig+0xec>
    __HAL_FLASH_SET_LATENCY(FLatency);
 80026b4:	b2ea      	uxtb	r2, r5
 80026b6:	4b1b      	ldr	r3, [pc, #108]	; (8002724 <HAL_RCC_ClockConfig+0x14c>)
 80026b8:	701a      	strb	r2, [r3, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80026ba:	681b      	ldr	r3, [r3, #0]
 80026bc:	f003 0307 	and.w	r3, r3, #7
 80026c0:	42ab      	cmp	r3, r5
 80026c2:	d12d      	bne.n	8002720 <HAL_RCC_ClockConfig+0x148>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80026c4:	6823      	ldr	r3, [r4, #0]
 80026c6:	f013 0f04 	tst.w	r3, #4
 80026ca:	d006      	beq.n	80026da <HAL_RCC_ClockConfig+0x102>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80026cc:	4a16      	ldr	r2, [pc, #88]	; (8002728 <HAL_RCC_ClockConfig+0x150>)
 80026ce:	6893      	ldr	r3, [r2, #8]
 80026d0:	f423 53e0 	bic.w	r3, r3, #7168	; 0x1c00
 80026d4:	68e1      	ldr	r1, [r4, #12]
 80026d6:	430b      	orrs	r3, r1
 80026d8:	6093      	str	r3, [r2, #8]
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80026da:	6823      	ldr	r3, [r4, #0]
 80026dc:	f013 0f08 	tst.w	r3, #8
 80026e0:	d007      	beq.n	80026f2 <HAL_RCC_ClockConfig+0x11a>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80026e2:	4a11      	ldr	r2, [pc, #68]	; (8002728 <HAL_RCC_ClockConfig+0x150>)
 80026e4:	6893      	ldr	r3, [r2, #8]
 80026e6:	f423 4360 	bic.w	r3, r3, #57344	; 0xe000
 80026ea:	6921      	ldr	r1, [r4, #16]
 80026ec:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 80026f0:	6093      	str	r3, [r2, #8]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80026f2:	f7ff ff0b 	bl	800250c <HAL_RCC_GetSysClockFreq>
 80026f6:	4b0c      	ldr	r3, [pc, #48]	; (8002728 <HAL_RCC_ClockConfig+0x150>)
 80026f8:	689b      	ldr	r3, [r3, #8]
 80026fa:	f3c3 1303 	ubfx	r3, r3, #4, #4
 80026fe:	4a0b      	ldr	r2, [pc, #44]	; (800272c <HAL_RCC_ClockConfig+0x154>)
 8002700:	5cd3      	ldrb	r3, [r2, r3]
 8002702:	40d8      	lsrs	r0, r3
 8002704:	4b0a      	ldr	r3, [pc, #40]	; (8002730 <HAL_RCC_ClockConfig+0x158>)
 8002706:	6018      	str	r0, [r3, #0]
  HAL_InitTick (uwTickPrio);
 8002708:	4b0a      	ldr	r3, [pc, #40]	; (8002734 <HAL_RCC_ClockConfig+0x15c>)
 800270a:	6818      	ldr	r0, [r3, #0]
 800270c:	f7fe fa9e 	bl	8000c4c <HAL_InitTick>
  return HAL_OK;
 8002710:	2000      	movs	r0, #0
}
 8002712:	bd70      	pop	{r4, r5, r6, pc}
    return HAL_ERROR;
 8002714:	2001      	movs	r0, #1
}
 8002716:	4770      	bx	lr
      return HAL_ERROR;
 8002718:	2001      	movs	r0, #1
 800271a:	e7fa      	b.n	8002712 <HAL_RCC_ClockConfig+0x13a>
        return HAL_ERROR;
 800271c:	2001      	movs	r0, #1
 800271e:	e7f8      	b.n	8002712 <HAL_RCC_ClockConfig+0x13a>
      return HAL_ERROR;
 8002720:	2001      	movs	r0, #1
 8002722:	e7f6      	b.n	8002712 <HAL_RCC_ClockConfig+0x13a>
 8002724:	40023c00 	.word	0x40023c00
 8002728:	40023800 	.word	0x40023800
 800272c:	080067c0 	.word	0x080067c0
 8002730:	20000000 	.word	0x20000000
 8002734:	20000008 	.word	0x20000008

08002738 <HAL_RCC_GetHCLKFreq>:
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
  return SystemCoreClock;
}
 8002738:	4b01      	ldr	r3, [pc, #4]	; (8002740 <HAL_RCC_GetHCLKFreq+0x8>)
 800273a:	6818      	ldr	r0, [r3, #0]
 800273c:	4770      	bx	lr
 800273e:	bf00      	nop
 8002740:	20000000 	.word	0x20000000

08002744 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002744:	b508      	push	{r3, lr}
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8002746:	f7ff fff7 	bl	8002738 <HAL_RCC_GetHCLKFreq>
 800274a:	4b04      	ldr	r3, [pc, #16]	; (800275c <HAL_RCC_GetPCLK1Freq+0x18>)
 800274c:	689b      	ldr	r3, [r3, #8]
 800274e:	f3c3 2382 	ubfx	r3, r3, #10, #3
 8002752:	4a03      	ldr	r2, [pc, #12]	; (8002760 <HAL_RCC_GetPCLK1Freq+0x1c>)
 8002754:	5cd3      	ldrb	r3, [r2, r3]
}
 8002756:	40d8      	lsrs	r0, r3
 8002758:	bd08      	pop	{r3, pc}
 800275a:	bf00      	nop
 800275c:	40023800 	.word	0x40023800
 8002760:	080067d0 	.word	0x080067d0

08002764 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8002764:	b082      	sub	sp, #8
  __IO uint32_t count = 0U;
 8002766:	2300      	movs	r3, #0
 8002768:	9301      	str	r3, [sp, #4]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 800276a:	9b01      	ldr	r3, [sp, #4]
 800276c:	3301      	adds	r3, #1
 800276e:	9301      	str	r3, [sp, #4]
 8002770:	4a0e      	ldr	r2, [pc, #56]	; (80027ac <USB_CoreReset+0x48>)
 8002772:	4293      	cmp	r3, r2
 8002774:	d814      	bhi.n	80027a0 <USB_CoreReset+0x3c>
    {
      return HAL_TIMEOUT;
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8002776:	6903      	ldr	r3, [r0, #16]
 8002778:	2b00      	cmp	r3, #0
 800277a:	daf6      	bge.n	800276a <USB_CoreReset+0x6>

  /* Core Soft Reset */
  count = 0U;
 800277c:	2300      	movs	r3, #0
 800277e:	9301      	str	r3, [sp, #4]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8002780:	6903      	ldr	r3, [r0, #16]
 8002782:	f043 0301 	orr.w	r3, r3, #1
 8002786:	6103      	str	r3, [r0, #16]

  do
  {
    if (++count > 200000U)
 8002788:	9b01      	ldr	r3, [sp, #4]
 800278a:	3301      	adds	r3, #1
 800278c:	9301      	str	r3, [sp, #4]
 800278e:	4a07      	ldr	r2, [pc, #28]	; (80027ac <USB_CoreReset+0x48>)
 8002790:	4293      	cmp	r3, r2
 8002792:	d808      	bhi.n	80027a6 <USB_CoreReset+0x42>
    {
      return HAL_TIMEOUT;
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8002794:	6903      	ldr	r3, [r0, #16]
 8002796:	f013 0f01 	tst.w	r3, #1
 800279a:	d1f5      	bne.n	8002788 <USB_CoreReset+0x24>

  return HAL_OK;
 800279c:	2000      	movs	r0, #0
 800279e:	e000      	b.n	80027a2 <USB_CoreReset+0x3e>
      return HAL_TIMEOUT;
 80027a0:	2003      	movs	r0, #3
}
 80027a2:	b002      	add	sp, #8
 80027a4:	4770      	bx	lr
      return HAL_TIMEOUT;
 80027a6:	2003      	movs	r0, #3
 80027a8:	e7fb      	b.n	80027a2 <USB_CoreReset+0x3e>
 80027aa:	bf00      	nop
 80027ac:	00030d40 	.word	0x00030d40

080027b0 <USB_CoreInit>:
{
 80027b0:	b084      	sub	sp, #16
 80027b2:	b510      	push	{r4, lr}
 80027b4:	4604      	mov	r4, r0
 80027b6:	a803      	add	r0, sp, #12
 80027b8:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80027bc:	9b08      	ldr	r3, [sp, #32]
 80027be:	2b01      	cmp	r3, #1
 80027c0:	d11f      	bne.n	8002802 <USB_CoreInit+0x52>
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80027c2:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80027c4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80027c8:	63a3      	str	r3, [r4, #56]	; 0x38
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 80027ca:	68e3      	ldr	r3, [r4, #12]
 80027cc:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 80027d0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80027d4:	60e3      	str	r3, [r4, #12]
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 80027d6:	68e3      	ldr	r3, [r4, #12]
 80027d8:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 80027dc:	60e3      	str	r3, [r4, #12]
    if (cfg.use_external_vbus == 1U)
 80027de:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80027e0:	2b01      	cmp	r3, #1
 80027e2:	d009      	beq.n	80027f8 <USB_CoreInit+0x48>
    ret = USB_CoreReset(USBx);
 80027e4:	4620      	mov	r0, r4
 80027e6:	f7ff ffbd 	bl	8002764 <USB_CoreReset>
  if (cfg.dma_enable == 1U)
 80027ea:	9b06      	ldr	r3, [sp, #24]
 80027ec:	2b01      	cmp	r3, #1
 80027ee:	d01b      	beq.n	8002828 <USB_CoreInit+0x78>
}
 80027f0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80027f4:	b004      	add	sp, #16
 80027f6:	4770      	bx	lr
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 80027f8:	68e3      	ldr	r3, [r4, #12]
 80027fa:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80027fe:	60e3      	str	r3, [r4, #12]
 8002800:	e7f0      	b.n	80027e4 <USB_CoreInit+0x34>
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8002802:	68e3      	ldr	r3, [r4, #12]
 8002804:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002808:	60e3      	str	r3, [r4, #12]
    ret = USB_CoreReset(USBx);
 800280a:	4620      	mov	r0, r4
 800280c:	f7ff ffaa 	bl	8002764 <USB_CoreReset>
    if (cfg.battery_charging_enable == 0U)
 8002810:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8002812:	b923      	cbnz	r3, 800281e <USB_CoreInit+0x6e>
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8002814:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8002816:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800281a:	63a3      	str	r3, [r4, #56]	; 0x38
 800281c:	e7e5      	b.n	80027ea <USB_CoreInit+0x3a>
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800281e:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8002820:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002824:	63a3      	str	r3, [r4, #56]	; 0x38
 8002826:	e7e0      	b.n	80027ea <USB_CoreInit+0x3a>
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8002828:	68a3      	ldr	r3, [r4, #8]
 800282a:	f043 0306 	orr.w	r3, r3, #6
 800282e:	60a3      	str	r3, [r4, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8002830:	68a3      	ldr	r3, [r4, #8]
 8002832:	f043 0320 	orr.w	r3, r3, #32
 8002836:	60a3      	str	r3, [r4, #8]
 8002838:	e7da      	b.n	80027f0 <USB_CoreInit+0x40>
	...

0800283c <USB_SetTurnaroundTime>:
  if (speed == USBD_FS_SPEED)
 800283c:	2a02      	cmp	r2, #2
 800283e:	d00a      	beq.n	8002856 <USB_SetTurnaroundTime+0x1a>
    UsbTrd = USBD_HS_TRDT_VALUE;
 8002840:	2109      	movs	r1, #9
  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 8002842:	68c2      	ldr	r2, [r0, #12]
 8002844:	f422 5270 	bic.w	r2, r2, #15360	; 0x3c00
 8002848:	60c2      	str	r2, [r0, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 800284a:	68c3      	ldr	r3, [r0, #12]
 800284c:	ea43 2381 	orr.w	r3, r3, r1, lsl #10
 8002850:	60c3      	str	r3, [r0, #12]
}
 8002852:	2000      	movs	r0, #0
 8002854:	4770      	bx	lr
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 8002856:	4b23      	ldr	r3, [pc, #140]	; (80028e4 <USB_SetTurnaroundTime+0xa8>)
 8002858:	440b      	add	r3, r1
 800285a:	4a23      	ldr	r2, [pc, #140]	; (80028e8 <USB_SetTurnaroundTime+0xac>)
 800285c:	4293      	cmp	r3, r2
 800285e:	d92f      	bls.n	80028c0 <USB_SetTurnaroundTime+0x84>
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 8002860:	4b22      	ldr	r3, [pc, #136]	; (80028ec <USB_SetTurnaroundTime+0xb0>)
 8002862:	440b      	add	r3, r1
 8002864:	4a22      	ldr	r2, [pc, #136]	; (80028f0 <USB_SetTurnaroundTime+0xb4>)
 8002866:	4293      	cmp	r3, r2
 8002868:	d92c      	bls.n	80028c4 <USB_SetTurnaroundTime+0x88>
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 800286a:	f5a1 0374 	sub.w	r3, r1, #15990784	; 0xf40000
 800286e:	f5a3 5310 	sub.w	r3, r3, #9216	; 0x2400
 8002872:	4a20      	ldr	r2, [pc, #128]	; (80028f4 <USB_SetTurnaroundTime+0xb8>)
 8002874:	4293      	cmp	r3, r2
 8002876:	d927      	bls.n	80028c8 <USB_SetTurnaroundTime+0x8c>
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 8002878:	f1a1 7383 	sub.w	r3, r1, #17170432	; 0x1060000
 800287c:	f5a3 43e7 	sub.w	r3, r3, #29568	; 0x7380
 8002880:	4a1d      	ldr	r2, [pc, #116]	; (80028f8 <USB_SetTurnaroundTime+0xbc>)
 8002882:	4293      	cmp	r3, r2
 8002884:	d322      	bcc.n	80028cc <USB_SetTurnaroundTime+0x90>
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 8002886:	4b1d      	ldr	r3, [pc, #116]	; (80028fc <USB_SetTurnaroundTime+0xc0>)
 8002888:	440b      	add	r3, r1
 800288a:	4a1d      	ldr	r2, [pc, #116]	; (8002900 <USB_SetTurnaroundTime+0xc4>)
 800288c:	4293      	cmp	r3, r2
 800288e:	d91f      	bls.n	80028d0 <USB_SetTurnaroundTime+0x94>
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 8002890:	4b1c      	ldr	r3, [pc, #112]	; (8002904 <USB_SetTurnaroundTime+0xc8>)
 8002892:	440b      	add	r3, r1
 8002894:	4a1c      	ldr	r2, [pc, #112]	; (8002908 <USB_SetTurnaroundTime+0xcc>)
 8002896:	4293      	cmp	r3, r2
 8002898:	d31c      	bcc.n	80028d4 <USB_SetTurnaroundTime+0x98>
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 800289a:	4b1c      	ldr	r3, [pc, #112]	; (800290c <USB_SetTurnaroundTime+0xd0>)
 800289c:	440b      	add	r3, r1
 800289e:	4a1c      	ldr	r2, [pc, #112]	; (8002910 <USB_SetTurnaroundTime+0xd4>)
 80028a0:	4293      	cmp	r3, r2
 80028a2:	d319      	bcc.n	80028d8 <USB_SetTurnaroundTime+0x9c>
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 80028a4:	f1a1 73b7 	sub.w	r3, r1, #23986176	; 0x16e0000
 80028a8:	f5a3 5358 	sub.w	r3, r3, #13824	; 0x3600
 80028ac:	4a19      	ldr	r2, [pc, #100]	; (8002914 <USB_SetTurnaroundTime+0xd8>)
 80028ae:	4293      	cmp	r3, r2
 80028b0:	d314      	bcc.n	80028dc <USB_SetTurnaroundTime+0xa0>
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 80028b2:	4b19      	ldr	r3, [pc, #100]	; (8002918 <USB_SetTurnaroundTime+0xdc>)
 80028b4:	440b      	add	r3, r1
 80028b6:	4a19      	ldr	r2, [pc, #100]	; (800291c <USB_SetTurnaroundTime+0xe0>)
 80028b8:	4293      	cmp	r3, r2
 80028ba:	d211      	bcs.n	80028e0 <USB_SetTurnaroundTime+0xa4>
      UsbTrd = 0x7U;
 80028bc:	2107      	movs	r1, #7
 80028be:	e7c0      	b.n	8002842 <USB_SetTurnaroundTime+0x6>
      UsbTrd = 0xFU;
 80028c0:	210f      	movs	r1, #15
 80028c2:	e7be      	b.n	8002842 <USB_SetTurnaroundTime+0x6>
      UsbTrd = 0xEU;
 80028c4:	210e      	movs	r1, #14
 80028c6:	e7bc      	b.n	8002842 <USB_SetTurnaroundTime+0x6>
      UsbTrd = 0xDU;
 80028c8:	210d      	movs	r1, #13
 80028ca:	e7ba      	b.n	8002842 <USB_SetTurnaroundTime+0x6>
      UsbTrd = 0xCU;
 80028cc:	210c      	movs	r1, #12
 80028ce:	e7b8      	b.n	8002842 <USB_SetTurnaroundTime+0x6>
      UsbTrd = 0xBU;
 80028d0:	210b      	movs	r1, #11
 80028d2:	e7b6      	b.n	8002842 <USB_SetTurnaroundTime+0x6>
      UsbTrd = 0xAU;
 80028d4:	210a      	movs	r1, #10
 80028d6:	e7b4      	b.n	8002842 <USB_SetTurnaroundTime+0x6>
      UsbTrd = 0x9U;
 80028d8:	2109      	movs	r1, #9
 80028da:	e7b2      	b.n	8002842 <USB_SetTurnaroundTime+0x6>
      UsbTrd = 0x8U;
 80028dc:	2108      	movs	r1, #8
 80028de:	e7b0      	b.n	8002842 <USB_SetTurnaroundTime+0x6>
      UsbTrd = 0x6U;
 80028e0:	2106      	movs	r1, #6
 80028e2:	e7ae      	b.n	8002842 <USB_SetTurnaroundTime+0x6>
 80028e4:	ff275340 	.word	0xff275340
 80028e8:	000c34ff 	.word	0x000c34ff
 80028ec:	ff1b1e40 	.word	0xff1b1e40
 80028f0:	000f423f 	.word	0x000f423f
 80028f4:	00124f7f 	.word	0x00124f7f
 80028f8:	0013d620 	.word	0x0013d620
 80028fc:	fee5b660 	.word	0xfee5b660
 8002900:	0016e35f 	.word	0x0016e35f
 8002904:	feced300 	.word	0xfeced300
 8002908:	001b7740 	.word	0x001b7740
 800290c:	feb35bc0 	.word	0xfeb35bc0
 8002910:	002191c0 	.word	0x002191c0
 8002914:	00387520 	.word	0x00387520
 8002918:	fe5954e0 	.word	0xfe5954e0
 800291c:	00419ce0 	.word	0x00419ce0

08002920 <USB_EnableGlobalInt>:
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8002920:	6883      	ldr	r3, [r0, #8]
 8002922:	f043 0301 	orr.w	r3, r3, #1
 8002926:	6083      	str	r3, [r0, #8]
}
 8002928:	2000      	movs	r0, #0
 800292a:	4770      	bx	lr

0800292c <USB_DisableGlobalInt>:
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800292c:	6883      	ldr	r3, [r0, #8]
 800292e:	f023 0301 	bic.w	r3, r3, #1
 8002932:	6083      	str	r3, [r0, #8]
}
 8002934:	2000      	movs	r0, #0
 8002936:	4770      	bx	lr

08002938 <USB_FlushTxFifo>:
{
 8002938:	b082      	sub	sp, #8
  __IO uint32_t count = 0U;
 800293a:	2300      	movs	r3, #0
 800293c:	9301      	str	r3, [sp, #4]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 800293e:	0189      	lsls	r1, r1, #6
 8002940:	f041 0120 	orr.w	r1, r1, #32
 8002944:	6101      	str	r1, [r0, #16]
    if (++count > 200000U)
 8002946:	9b01      	ldr	r3, [sp, #4]
 8002948:	3301      	adds	r3, #1
 800294a:	9301      	str	r3, [sp, #4]
 800294c:	4a05      	ldr	r2, [pc, #20]	; (8002964 <USB_FlushTxFifo+0x2c>)
 800294e:	4293      	cmp	r3, r2
 8002950:	d805      	bhi.n	800295e <USB_FlushTxFifo+0x26>
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8002952:	6903      	ldr	r3, [r0, #16]
 8002954:	f013 0f20 	tst.w	r3, #32
 8002958:	d1f5      	bne.n	8002946 <USB_FlushTxFifo+0xe>
  return HAL_OK;
 800295a:	2000      	movs	r0, #0
 800295c:	e000      	b.n	8002960 <USB_FlushTxFifo+0x28>
      return HAL_TIMEOUT;
 800295e:	2003      	movs	r0, #3
}
 8002960:	b002      	add	sp, #8
 8002962:	4770      	bx	lr
 8002964:	00030d40 	.word	0x00030d40

08002968 <USB_FlushRxFifo>:
{
 8002968:	b082      	sub	sp, #8
  __IO uint32_t count = 0U;
 800296a:	2300      	movs	r3, #0
 800296c:	9301      	str	r3, [sp, #4]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800296e:	2310      	movs	r3, #16
 8002970:	6103      	str	r3, [r0, #16]
    if (++count > 200000U)
 8002972:	9b01      	ldr	r3, [sp, #4]
 8002974:	3301      	adds	r3, #1
 8002976:	9301      	str	r3, [sp, #4]
 8002978:	4a05      	ldr	r2, [pc, #20]	; (8002990 <USB_FlushRxFifo+0x28>)
 800297a:	4293      	cmp	r3, r2
 800297c:	d805      	bhi.n	800298a <USB_FlushRxFifo+0x22>
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800297e:	6903      	ldr	r3, [r0, #16]
 8002980:	f013 0f10 	tst.w	r3, #16
 8002984:	d1f5      	bne.n	8002972 <USB_FlushRxFifo+0xa>
  return HAL_OK;
 8002986:	2000      	movs	r0, #0
 8002988:	e000      	b.n	800298c <USB_FlushRxFifo+0x24>
      return HAL_TIMEOUT;
 800298a:	2003      	movs	r0, #3
}
 800298c:	b002      	add	sp, #8
 800298e:	4770      	bx	lr
 8002990:	00030d40 	.word	0x00030d40

08002994 <USB_SetDevSpeed>:
  USBx_DEVICE->DCFG |= speed;
 8002994:	f8d0 3800 	ldr.w	r3, [r0, #2048]	; 0x800
 8002998:	4319      	orrs	r1, r3
 800299a:	f8c0 1800 	str.w	r1, [r0, #2048]	; 0x800
}
 800299e:	2000      	movs	r0, #0
 80029a0:	4770      	bx	lr
	...

080029a4 <USB_DevInit>:
{
 80029a4:	b084      	sub	sp, #16
 80029a6:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80029aa:	4604      	mov	r4, r0
 80029ac:	a809      	add	r0, sp, #36	; 0x24
 80029ae:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t USBx_BASE = (uint32_t)USBx;
 80029b2:	4625      	mov	r5, r4
  for (i = 0U; i < 15U; i++)
 80029b4:	2300      	movs	r3, #0
 80029b6:	e006      	b.n	80029c6 <USB_DevInit+0x22>
    USBx->DIEPTXF[i] = 0U;
 80029b8:	f103 0240 	add.w	r2, r3, #64	; 0x40
 80029bc:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 80029c0:	2100      	movs	r1, #0
 80029c2:	6051      	str	r1, [r2, #4]
  for (i = 0U; i < 15U; i++)
 80029c4:	3301      	adds	r3, #1
 80029c6:	2b0e      	cmp	r3, #14
 80029c8:	d9f6      	bls.n	80029b8 <USB_DevInit+0x14>
  if (cfg.vbus_sensing_enable == 0U)
 80029ca:	f8dd 804c 	ldr.w	r8, [sp, #76]	; 0x4c
 80029ce:	f1b8 0f00 	cmp.w	r8, #0
 80029d2:	d124      	bne.n	8002a1e <USB_DevInit+0x7a>
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80029d4:	f8d4 3804 	ldr.w	r3, [r4, #2052]	; 0x804
 80029d8:	f043 0302 	orr.w	r3, r3, #2
 80029dc:	f8c4 3804 	str.w	r3, [r4, #2052]	; 0x804
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 80029e0:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80029e2:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80029e6:	63a3      	str	r3, [r4, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 80029e8:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80029ea:	f423 2300 	bic.w	r3, r3, #524288	; 0x80000
 80029ee:	63a3      	str	r3, [r4, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 80029f0:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80029f2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80029f6:	63a3      	str	r3, [r4, #56]	; 0x38
  USBx_PCGCCTL = 0U;
 80029f8:	2300      	movs	r3, #0
 80029fa:	f8c4 3e00 	str.w	r3, [r4, #3584]	; 0xe00
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 80029fe:	f504 6600 	add.w	r6, r4, #2048	; 0x800
 8002a02:	f8d4 3800 	ldr.w	r3, [r4, #2048]	; 0x800
 8002a06:	f8c4 3800 	str.w	r3, [r4, #2048]	; 0x800
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8002a0a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8002a0c:	2b01      	cmp	r3, #1
 8002a0e:	d114      	bne.n	8002a3a <USB_DevInit+0x96>
    if (cfg.speed == USBD_HS_SPEED)
 8002a10:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8002a12:	b96b      	cbnz	r3, 8002a30 <USB_DevInit+0x8c>
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8002a14:	2100      	movs	r1, #0
 8002a16:	4620      	mov	r0, r4
 8002a18:	f7ff ffbc 	bl	8002994 <USB_SetDevSpeed>
 8002a1c:	e011      	b.n	8002a42 <USB_DevInit+0x9e>
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 8002a1e:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8002a20:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8002a24:	63a3      	str	r3, [r4, #56]	; 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 8002a26:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8002a28:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8002a2c:	63a3      	str	r3, [r4, #56]	; 0x38
 8002a2e:	e7e3      	b.n	80029f8 <USB_DevInit+0x54>
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8002a30:	2101      	movs	r1, #1
 8002a32:	4620      	mov	r0, r4
 8002a34:	f7ff ffae 	bl	8002994 <USB_SetDevSpeed>
 8002a38:	e003      	b.n	8002a42 <USB_DevInit+0x9e>
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8002a3a:	2103      	movs	r1, #3
 8002a3c:	4620      	mov	r0, r4
 8002a3e:	f7ff ffa9 	bl	8002994 <USB_SetDevSpeed>
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8002a42:	2110      	movs	r1, #16
 8002a44:	4620      	mov	r0, r4
 8002a46:	f7ff ff77 	bl	8002938 <USB_FlushTxFifo>
 8002a4a:	4681      	mov	r9, r0
 8002a4c:	b108      	cbz	r0, 8002a52 <USB_DevInit+0xae>
    ret = HAL_ERROR;
 8002a4e:	f04f 0901 	mov.w	r9, #1
  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8002a52:	4620      	mov	r0, r4
 8002a54:	f7ff ff88 	bl	8002968 <USB_FlushRxFifo>
 8002a58:	b108      	cbz	r0, 8002a5e <USB_DevInit+0xba>
    ret = HAL_ERROR;
 8002a5a:	f04f 0901 	mov.w	r9, #1
  USBx_DEVICE->DIEPMSK = 0U;
 8002a5e:	2300      	movs	r3, #0
 8002a60:	6133      	str	r3, [r6, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8002a62:	6173      	str	r3, [r6, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8002a64:	61f3      	str	r3, [r6, #28]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8002a66:	e00a      	b.n	8002a7e <USB_DevInit+0xda>
      if (i == 0U)
 8002a68:	b9c3      	cbnz	r3, 8002a9c <USB_DevInit+0xf8>
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8002a6a:	f04f 6000 	mov.w	r0, #134217728	; 0x8000000
 8002a6e:	f8c2 0900 	str.w	r0, [r2, #2304]	; 0x900
    USBx_INEP(i)->DIEPTSIZ = 0U;
 8002a72:	2200      	movs	r2, #0
 8002a74:	610a      	str	r2, [r1, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8002a76:	f64f 327f 	movw	r2, #64383	; 0xfb7f
 8002a7a:	608a      	str	r2, [r1, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8002a7c:	3301      	adds	r3, #1
 8002a7e:	9f09      	ldr	r7, [sp, #36]	; 0x24
 8002a80:	429f      	cmp	r7, r3
 8002a82:	d910      	bls.n	8002aa6 <USB_DevInit+0x102>
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8002a84:	eb05 1243 	add.w	r2, r5, r3, lsl #5
 8002a88:	f502 6110 	add.w	r1, r2, #2304	; 0x900
 8002a8c:	f8d2 0900 	ldr.w	r0, [r2, #2304]	; 0x900
 8002a90:	2800      	cmp	r0, #0
 8002a92:	dbe9      	blt.n	8002a68 <USB_DevInit+0xc4>
      USBx_INEP(i)->DIEPCTL = 0U;
 8002a94:	2000      	movs	r0, #0
 8002a96:	f8c2 0900 	str.w	r0, [r2, #2304]	; 0x900
 8002a9a:	e7ea      	b.n	8002a72 <USB_DevInit+0xce>
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8002a9c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002aa0:	f8c2 0900 	str.w	r0, [r2, #2304]	; 0x900
 8002aa4:	e7e5      	b.n	8002a72 <USB_DevInit+0xce>
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8002aa6:	2300      	movs	r3, #0
 8002aa8:	e00a      	b.n	8002ac0 <USB_DevInit+0x11c>
      if (i == 0U)
 8002aaa:	b1bb      	cbz	r3, 8002adc <USB_DevInit+0x138>
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8002aac:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002ab0:	f8c2 0b00 	str.w	r0, [r2, #2816]	; 0xb00
    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8002ab4:	2200      	movs	r2, #0
 8002ab6:	610a      	str	r2, [r1, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8002ab8:	f64f 327f 	movw	r2, #64383	; 0xfb7f
 8002abc:	608a      	str	r2, [r1, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8002abe:	3301      	adds	r3, #1
 8002ac0:	429f      	cmp	r7, r3
 8002ac2:	d910      	bls.n	8002ae6 <USB_DevInit+0x142>
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8002ac4:	eb05 1243 	add.w	r2, r5, r3, lsl #5
 8002ac8:	f502 6130 	add.w	r1, r2, #2816	; 0xb00
 8002acc:	f8d2 0b00 	ldr.w	r0, [r2, #2816]	; 0xb00
 8002ad0:	2800      	cmp	r0, #0
 8002ad2:	dbea      	blt.n	8002aaa <USB_DevInit+0x106>
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8002ad4:	2000      	movs	r0, #0
 8002ad6:	f8c2 0b00 	str.w	r0, [r2, #2816]	; 0xb00
 8002ada:	e7eb      	b.n	8002ab4 <USB_DevInit+0x110>
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8002adc:	f04f 6000 	mov.w	r0, #134217728	; 0x8000000
 8002ae0:	f8c2 0b00 	str.w	r0, [r2, #2816]	; 0xb00
 8002ae4:	e7e6      	b.n	8002ab4 <USB_DevInit+0x110>
  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8002ae6:	6933      	ldr	r3, [r6, #16]
 8002ae8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002aec:	6133      	str	r3, [r6, #16]
  USBx->GINTMSK = 0U;
 8002aee:	2300      	movs	r3, #0
 8002af0:	61a3      	str	r3, [r4, #24]
  USBx->GINTSTS = 0xBFFFFFFFU;
 8002af2:	f06f 4380 	mvn.w	r3, #1073741824	; 0x40000000
 8002af6:	6163      	str	r3, [r4, #20]
  if (cfg.dma_enable == 0U)
 8002af8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8002afa:	b91b      	cbnz	r3, 8002b04 <USB_DevInit+0x160>
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8002afc:	69a3      	ldr	r3, [r4, #24]
 8002afe:	f043 0310 	orr.w	r3, r3, #16
 8002b02:	61a3      	str	r3, [r4, #24]
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8002b04:	69a2      	ldr	r2, [r4, #24]
 8002b06:	4b0c      	ldr	r3, [pc, #48]	; (8002b38 <USB_DevInit+0x194>)
 8002b08:	4313      	orrs	r3, r2
 8002b0a:	61a3      	str	r3, [r4, #24]
  if (cfg.Sof_enable != 0U)
 8002b0c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8002b0e:	b11b      	cbz	r3, 8002b18 <USB_DevInit+0x174>
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8002b10:	69a3      	ldr	r3, [r4, #24]
 8002b12:	f043 0308 	orr.w	r3, r3, #8
 8002b16:	61a3      	str	r3, [r4, #24]
  if (cfg.vbus_sensing_enable == 1U)
 8002b18:	f1b8 0f01 	cmp.w	r8, #1
 8002b1c:	d004      	beq.n	8002b28 <USB_DevInit+0x184>
}
 8002b1e:	4648      	mov	r0, r9
 8002b20:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8002b24:	b004      	add	sp, #16
 8002b26:	4770      	bx	lr
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8002b28:	69a3      	ldr	r3, [r4, #24]
 8002b2a:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8002b2e:	f043 0304 	orr.w	r3, r3, #4
 8002b32:	61a3      	str	r3, [r4, #24]
 8002b34:	e7f3      	b.n	8002b1e <USB_DevInit+0x17a>
 8002b36:	bf00      	nop
 8002b38:	803c3800 	.word	0x803c3800

08002b3c <USB_GetDevSpeed>:
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 8002b3c:	f8d0 3808 	ldr.w	r3, [r0, #2056]	; 0x808
  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 8002b40:	f013 0306 	ands.w	r3, r3, #6
 8002b44:	d007      	beq.n	8002b56 <USB_GetDevSpeed+0x1a>
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 8002b46:	2b02      	cmp	r3, #2
 8002b48:	d007      	beq.n	8002b5a <USB_GetDevSpeed+0x1e>
 8002b4a:	2b06      	cmp	r3, #6
 8002b4c:	d001      	beq.n	8002b52 <USB_GetDevSpeed+0x16>
    speed = 0xFU;
 8002b4e:	200f      	movs	r0, #15
}
 8002b50:	4770      	bx	lr
    speed = USBD_FS_SPEED;
 8002b52:	2002      	movs	r0, #2
 8002b54:	4770      	bx	lr
    speed = USBD_HS_SPEED;
 8002b56:	2000      	movs	r0, #0
 8002b58:	4770      	bx	lr
    speed = USBD_FS_SPEED;
 8002b5a:	2002      	movs	r0, #2
 8002b5c:	4770      	bx	lr

08002b5e <USB_ActivateEndpoint>:
{
 8002b5e:	b470      	push	{r4, r5, r6}
  uint32_t epnum = (uint32_t)ep->num;
 8002b60:	780c      	ldrb	r4, [r1, #0]
  if (ep->is_in == 1U)
 8002b62:	784b      	ldrb	r3, [r1, #1]
 8002b64:	2b01      	cmp	r3, #1
 8002b66:	d022      	beq.n	8002bae <USB_ActivateEndpoint+0x50>
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 8002b68:	f8d0 381c 	ldr.w	r3, [r0, #2076]	; 0x81c
 8002b6c:	f004 060f 	and.w	r6, r4, #15
 8002b70:	2201      	movs	r2, #1
 8002b72:	40b2      	lsls	r2, r6
 8002b74:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8002b78:	f8c0 381c 	str.w	r3, [r0, #2076]	; 0x81c
    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 8002b7c:	eb00 1044 	add.w	r0, r0, r4, lsl #5
 8002b80:	f8d0 3b00 	ldr.w	r3, [r0, #2816]	; 0xb00
 8002b84:	f413 4f00 	tst.w	r3, #32768	; 0x8000
 8002b88:	d10e      	bne.n	8002ba8 <USB_ActivateEndpoint+0x4a>
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8002b8a:	f8d0 3b00 	ldr.w	r3, [r0, #2816]	; 0xb00
 8002b8e:	688a      	ldr	r2, [r1, #8]
 8002b90:	f3c2 020a 	ubfx	r2, r2, #0, #11
                                    ((uint32_t)ep->type << 18) |
 8002b94:	78c9      	ldrb	r1, [r1, #3]
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8002b96:	ea42 4281 	orr.w	r2, r2, r1, lsl #18
 8002b9a:	4313      	orrs	r3, r2
 8002b9c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002ba0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002ba4:	f8c0 3b00 	str.w	r3, [r0, #2816]	; 0xb00
}
 8002ba8:	2000      	movs	r0, #0
 8002baa:	bc70      	pop	{r4, r5, r6}
 8002bac:	4770      	bx	lr
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 8002bae:	f8d0 281c 	ldr.w	r2, [r0, #2076]	; 0x81c
 8002bb2:	f004 060f 	and.w	r6, r4, #15
 8002bb6:	40b3      	lsls	r3, r6
 8002bb8:	b29b      	uxth	r3, r3
 8002bba:	4313      	orrs	r3, r2
 8002bbc:	f8c0 381c 	str.w	r3, [r0, #2076]	; 0x81c
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 8002bc0:	eb00 1044 	add.w	r0, r0, r4, lsl #5
 8002bc4:	f8d0 3900 	ldr.w	r3, [r0, #2304]	; 0x900
 8002bc8:	f413 4f00 	tst.w	r3, #32768	; 0x8000
 8002bcc:	d1ec      	bne.n	8002ba8 <USB_ActivateEndpoint+0x4a>
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8002bce:	f8d0 3900 	ldr.w	r3, [r0, #2304]	; 0x900
 8002bd2:	688a      	ldr	r2, [r1, #8]
 8002bd4:	f3c2 020a 	ubfx	r2, r2, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8002bd8:	78c9      	ldrb	r1, [r1, #3]
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8002bda:	ea42 4281 	orr.w	r2, r2, r1, lsl #18
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8002bde:	ea42 5484 	orr.w	r4, r2, r4, lsl #22
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8002be2:	431c      	orrs	r4, r3
 8002be4:	f044 5480 	orr.w	r4, r4, #268435456	; 0x10000000
 8002be8:	f444 4400 	orr.w	r4, r4, #32768	; 0x8000
 8002bec:	f8c0 4900 	str.w	r4, [r0, #2304]	; 0x900
 8002bf0:	e7da      	b.n	8002ba8 <USB_ActivateEndpoint+0x4a>
	...

08002bf4 <USB_DeactivateEndpoint>:
{
 8002bf4:	b430      	push	{r4, r5}
  uint32_t epnum = (uint32_t)ep->num;
 8002bf6:	780b      	ldrb	r3, [r1, #0]
  if (ep->is_in == 1U)
 8002bf8:	784a      	ldrb	r2, [r1, #1]
 8002bfa:	2a01      	cmp	r2, #1
 8002bfc:	d024      	beq.n	8002c48 <USB_DeactivateEndpoint+0x54>
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8002bfe:	eb00 1343 	add.w	r3, r0, r3, lsl #5
 8002c02:	f8d3 2b00 	ldr.w	r2, [r3, #2816]	; 0xb00
 8002c06:	2a00      	cmp	r2, #0
 8002c08:	db50      	blt.n	8002cac <USB_DeactivateEndpoint+0xb8>
    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8002c0a:	f8d0 583c 	ldr.w	r5, [r0, #2108]	; 0x83c
 8002c0e:	780a      	ldrb	r2, [r1, #0]
 8002c10:	f002 020f 	and.w	r2, r2, #15
 8002c14:	2401      	movs	r4, #1
 8002c16:	fa04 f202 	lsl.w	r2, r4, r2
 8002c1a:	ea25 4202 	bic.w	r2, r5, r2, lsl #16
 8002c1e:	f8c0 283c 	str.w	r2, [r0, #2108]	; 0x83c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8002c22:	f8d0 281c 	ldr.w	r2, [r0, #2076]	; 0x81c
 8002c26:	7809      	ldrb	r1, [r1, #0]
 8002c28:	f001 010f 	and.w	r1, r1, #15
 8002c2c:	408c      	lsls	r4, r1
 8002c2e:	ea22 4404 	bic.w	r4, r2, r4, lsl #16
 8002c32:	f8c0 481c 	str.w	r4, [r0, #2076]	; 0x81c
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 8002c36:	f8d3 1b00 	ldr.w	r1, [r3, #2816]	; 0xb00
 8002c3a:	4a23      	ldr	r2, [pc, #140]	; (8002cc8 <USB_DeactivateEndpoint+0xd4>)
 8002c3c:	400a      	ands	r2, r1
 8002c3e:	f8c3 2b00 	str.w	r2, [r3, #2816]	; 0xb00
}
 8002c42:	2000      	movs	r0, #0
 8002c44:	bc30      	pop	{r4, r5}
 8002c46:	4770      	bx	lr
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8002c48:	eb00 1343 	add.w	r3, r0, r3, lsl #5
 8002c4c:	f8d3 2900 	ldr.w	r2, [r3, #2304]	; 0x900
 8002c50:	2a00      	cmp	r2, #0
 8002c52:	db1e      	blt.n	8002c92 <USB_DeactivateEndpoint+0x9e>
    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8002c54:	f8d0 583c 	ldr.w	r5, [r0, #2108]	; 0x83c
 8002c58:	780a      	ldrb	r2, [r1, #0]
 8002c5a:	f002 020f 	and.w	r2, r2, #15
 8002c5e:	2401      	movs	r4, #1
 8002c60:	fa04 f202 	lsl.w	r2, r4, r2
 8002c64:	b292      	uxth	r2, r2
 8002c66:	ea25 0202 	bic.w	r2, r5, r2
 8002c6a:	f8c0 283c 	str.w	r2, [r0, #2108]	; 0x83c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8002c6e:	f8d0 281c 	ldr.w	r2, [r0, #2076]	; 0x81c
 8002c72:	7809      	ldrb	r1, [r1, #0]
 8002c74:	f001 010f 	and.w	r1, r1, #15
 8002c78:	408c      	lsls	r4, r1
 8002c7a:	b2a4      	uxth	r4, r4
 8002c7c:	ea22 0404 	bic.w	r4, r2, r4
 8002c80:	f8c0 481c 	str.w	r4, [r0, #2076]	; 0x81c
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 8002c84:	f8d3 1900 	ldr.w	r1, [r3, #2304]	; 0x900
 8002c88:	4a10      	ldr	r2, [pc, #64]	; (8002ccc <USB_DeactivateEndpoint+0xd8>)
 8002c8a:	400a      	ands	r2, r1
 8002c8c:	f8c3 2900 	str.w	r2, [r3, #2304]	; 0x900
 8002c90:	e7d7      	b.n	8002c42 <USB_DeactivateEndpoint+0x4e>
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8002c92:	f8d3 2900 	ldr.w	r2, [r3, #2304]	; 0x900
 8002c96:	f042 6200 	orr.w	r2, r2, #134217728	; 0x8000000
 8002c9a:	f8c3 2900 	str.w	r2, [r3, #2304]	; 0x900
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 8002c9e:	f8d3 2900 	ldr.w	r2, [r3, #2304]	; 0x900
 8002ca2:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8002ca6:	f8c3 2900 	str.w	r2, [r3, #2304]	; 0x900
 8002caa:	e7d3      	b.n	8002c54 <USB_DeactivateEndpoint+0x60>
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8002cac:	f8d3 2b00 	ldr.w	r2, [r3, #2816]	; 0xb00
 8002cb0:	f042 6200 	orr.w	r2, r2, #134217728	; 0x8000000
 8002cb4:	f8c3 2b00 	str.w	r2, [r3, #2816]	; 0xb00
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 8002cb8:	f8d3 2b00 	ldr.w	r2, [r3, #2816]	; 0xb00
 8002cbc:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8002cc0:	f8c3 2b00 	str.w	r2, [r3, #2816]	; 0xb00
 8002cc4:	e7a1      	b.n	8002c0a <USB_DeactivateEndpoint+0x16>
 8002cc6:	bf00      	nop
 8002cc8:	eff37800 	.word	0xeff37800
 8002ccc:	ec337800 	.word	0xec337800

08002cd0 <USB_EP0StartXfer>:
{
 8002cd0:	b470      	push	{r4, r5, r6}
  uint32_t epnum = (uint32_t)ep->num;
 8002cd2:	780b      	ldrb	r3, [r1, #0]
  if (ep->is_in == 1U)
 8002cd4:	784c      	ldrb	r4, [r1, #1]
 8002cd6:	2c01      	cmp	r4, #1
 8002cd8:	d026      	beq.n	8002d28 <USB_EP0StartXfer+0x58>
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8002cda:	eb00 1043 	add.w	r0, r0, r3, lsl #5
 8002cde:	f500 6330 	add.w	r3, r0, #2816	; 0xb00
 8002ce2:	691c      	ldr	r4, [r3, #16]
 8002ce4:	0ce4      	lsrs	r4, r4, #19
 8002ce6:	04e4      	lsls	r4, r4, #19
 8002ce8:	611c      	str	r4, [r3, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8002cea:	691c      	ldr	r4, [r3, #16]
 8002cec:	f024 54ff 	bic.w	r4, r4, #534773760	; 0x1fe00000
 8002cf0:	f424 14c0 	bic.w	r4, r4, #1572864	; 0x180000
 8002cf4:	611c      	str	r4, [r3, #16]
    if (ep->xfer_len > 0U)
 8002cf6:	694c      	ldr	r4, [r1, #20]
 8002cf8:	b10c      	cbz	r4, 8002cfe <USB_EP0StartXfer+0x2e>
      ep->xfer_len = ep->maxpacket;
 8002cfa:	688c      	ldr	r4, [r1, #8]
 8002cfc:	614c      	str	r4, [r1, #20]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8002cfe:	691c      	ldr	r4, [r3, #16]
 8002d00:	f444 2400 	orr.w	r4, r4, #524288	; 0x80000
 8002d04:	611c      	str	r4, [r3, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket));
 8002d06:	691c      	ldr	r4, [r3, #16]
 8002d08:	688d      	ldr	r5, [r1, #8]
 8002d0a:	f3c5 0512 	ubfx	r5, r5, #0, #19
 8002d0e:	432c      	orrs	r4, r5
 8002d10:	611c      	str	r4, [r3, #16]
    if (dma == 1U)
 8002d12:	2a01      	cmp	r2, #1
 8002d14:	d065      	beq.n	8002de2 <USB_EP0StartXfer+0x112>
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8002d16:	f8d0 3b00 	ldr.w	r3, [r0, #2816]	; 0xb00
 8002d1a:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8002d1e:	f8c0 3b00 	str.w	r3, [r0, #2816]	; 0xb00
}
 8002d22:	2000      	movs	r0, #0
 8002d24:	bc70      	pop	{r4, r5, r6}
 8002d26:	4770      	bx	lr
    if (ep->xfer_len == 0U)
 8002d28:	694c      	ldr	r4, [r1, #20]
 8002d2a:	bb6c      	cbnz	r4, 8002d88 <USB_EP0StartXfer+0xb8>
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8002d2c:	eb00 1443 	add.w	r4, r0, r3, lsl #5
 8002d30:	f8d4 5910 	ldr.w	r5, [r4, #2320]	; 0x910
 8002d34:	f025 55ff 	bic.w	r5, r5, #534773760	; 0x1fe00000
 8002d38:	f425 15c0 	bic.w	r5, r5, #1572864	; 0x180000
 8002d3c:	f8c4 5910 	str.w	r5, [r4, #2320]	; 0x910
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8002d40:	f8d4 5910 	ldr.w	r5, [r4, #2320]	; 0x910
 8002d44:	f445 2500 	orr.w	r5, r5, #524288	; 0x80000
 8002d48:	f8c4 5910 	str.w	r5, [r4, #2320]	; 0x910
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8002d4c:	f8d4 5910 	ldr.w	r5, [r4, #2320]	; 0x910
 8002d50:	0ced      	lsrs	r5, r5, #19
 8002d52:	04ed      	lsls	r5, r5, #19
 8002d54:	f8c4 5910 	str.w	r5, [r4, #2320]	; 0x910
    if (dma == 1U)
 8002d58:	2a01      	cmp	r2, #1
 8002d5a:	d033      	beq.n	8002dc4 <USB_EP0StartXfer+0xf4>
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8002d5c:	eb00 1343 	add.w	r3, r0, r3, lsl #5
 8002d60:	f8d3 2900 	ldr.w	r2, [r3, #2304]	; 0x900
 8002d64:	f042 4204 	orr.w	r2, r2, #2214592512	; 0x84000000
 8002d68:	f8c3 2900 	str.w	r2, [r3, #2304]	; 0x900
      if (ep->xfer_len > 0U)
 8002d6c:	694b      	ldr	r3, [r1, #20]
 8002d6e:	2b00      	cmp	r3, #0
 8002d70:	d0d7      	beq.n	8002d22 <USB_EP0StartXfer+0x52>
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8002d72:	f8d0 3834 	ldr.w	r3, [r0, #2100]	; 0x834
 8002d76:	780a      	ldrb	r2, [r1, #0]
 8002d78:	f002 010f 	and.w	r1, r2, #15
 8002d7c:	2201      	movs	r2, #1
 8002d7e:	408a      	lsls	r2, r1
 8002d80:	4313      	orrs	r3, r2
 8002d82:	f8c0 3834 	str.w	r3, [r0, #2100]	; 0x834
 8002d86:	e7cc      	b.n	8002d22 <USB_EP0StartXfer+0x52>
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8002d88:	eb00 1443 	add.w	r4, r0, r3, lsl #5
 8002d8c:	f504 6410 	add.w	r4, r4, #2304	; 0x900
 8002d90:	6925      	ldr	r5, [r4, #16]
 8002d92:	0ced      	lsrs	r5, r5, #19
 8002d94:	04ed      	lsls	r5, r5, #19
 8002d96:	6125      	str	r5, [r4, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8002d98:	6925      	ldr	r5, [r4, #16]
 8002d9a:	f025 55ff 	bic.w	r5, r5, #534773760	; 0x1fe00000
 8002d9e:	f425 15c0 	bic.w	r5, r5, #1572864	; 0x180000
 8002da2:	6125      	str	r5, [r4, #16]
      if (ep->xfer_len > ep->maxpacket)
 8002da4:	694e      	ldr	r6, [r1, #20]
 8002da6:	688d      	ldr	r5, [r1, #8]
 8002da8:	42ae      	cmp	r6, r5
 8002daa:	d900      	bls.n	8002dae <USB_EP0StartXfer+0xde>
        ep->xfer_len = ep->maxpacket;
 8002dac:	614d      	str	r5, [r1, #20]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8002dae:	6925      	ldr	r5, [r4, #16]
 8002db0:	f445 2500 	orr.w	r5, r5, #524288	; 0x80000
 8002db4:	6125      	str	r5, [r4, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8002db6:	6925      	ldr	r5, [r4, #16]
 8002db8:	694e      	ldr	r6, [r1, #20]
 8002dba:	f3c6 0612 	ubfx	r6, r6, #0, #19
 8002dbe:	4335      	orrs	r5, r6
 8002dc0:	6125      	str	r5, [r4, #16]
 8002dc2:	e7c9      	b.n	8002d58 <USB_EP0StartXfer+0x88>
      if ((uint32_t)ep->dma_addr != 0U)
 8002dc4:	690a      	ldr	r2, [r1, #16]
 8002dc6:	b11a      	cbz	r2, 8002dd0 <USB_EP0StartXfer+0x100>
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8002dc8:	eb00 1143 	add.w	r1, r0, r3, lsl #5
 8002dcc:	f8c1 2914 	str.w	r2, [r1, #2324]	; 0x914
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8002dd0:	eb00 1043 	add.w	r0, r0, r3, lsl #5
 8002dd4:	f8d0 2900 	ldr.w	r2, [r0, #2304]	; 0x900
 8002dd8:	f042 4204 	orr.w	r2, r2, #2214592512	; 0x84000000
 8002ddc:	f8c0 2900 	str.w	r2, [r0, #2304]	; 0x900
 8002de0:	e79f      	b.n	8002d22 <USB_EP0StartXfer+0x52>
      if ((uint32_t)ep->xfer_buff != 0U)
 8002de2:	68ca      	ldr	r2, [r1, #12]
 8002de4:	2a00      	cmp	r2, #0
 8002de6:	d096      	beq.n	8002d16 <USB_EP0StartXfer+0x46>
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8002de8:	615a      	str	r2, [r3, #20]
 8002dea:	e794      	b.n	8002d16 <USB_EP0StartXfer+0x46>

08002dec <USB_WritePacket>:
{
 8002dec:	b470      	push	{r4, r5, r6}
 8002dee:	f89d 400c 	ldrb.w	r4, [sp, #12]
  if (dma == 0U)
 8002df2:	b964      	cbnz	r4, 8002e0e <USB_WritePacket+0x22>
    count32b = ((uint32_t)len + 3U) / 4U;
 8002df4:	3303      	adds	r3, #3
 8002df6:	089d      	lsrs	r5, r3, #2
    for (i = 0U; i < count32b; i++)
 8002df8:	42ac      	cmp	r4, r5
 8002dfa:	d208      	bcs.n	8002e0e <USB_WritePacket+0x22>
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8002dfc:	eb00 3302 	add.w	r3, r0, r2, lsl #12
 8002e00:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002e04:	f851 6b04 	ldr.w	r6, [r1], #4
 8002e08:	601e      	str	r6, [r3, #0]
    for (i = 0U; i < count32b; i++)
 8002e0a:	3401      	adds	r4, #1
 8002e0c:	e7f4      	b.n	8002df8 <USB_WritePacket+0xc>
}
 8002e0e:	2000      	movs	r0, #0
 8002e10:	bc70      	pop	{r4, r5, r6}
 8002e12:	4770      	bx	lr

08002e14 <USB_EPStartXfer>:
{
 8002e14:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002e16:	b083      	sub	sp, #12
  uint32_t epnum = (uint32_t)ep->num;
 8002e18:	780b      	ldrb	r3, [r1, #0]
  if (ep->is_in == 1U)
 8002e1a:	784c      	ldrb	r4, [r1, #1]
 8002e1c:	2c01      	cmp	r4, #1
 8002e1e:	d02b      	beq.n	8002e78 <USB_EPStartXfer+0x64>
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8002e20:	eb00 1343 	add.w	r3, r0, r3, lsl #5
 8002e24:	f503 6430 	add.w	r4, r3, #2816	; 0xb00
 8002e28:	6925      	ldr	r5, [r4, #16]
 8002e2a:	0ced      	lsrs	r5, r5, #19
 8002e2c:	04ed      	lsls	r5, r5, #19
 8002e2e:	6125      	str	r5, [r4, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8002e30:	6925      	ldr	r5, [r4, #16]
 8002e32:	f025 55ff 	bic.w	r5, r5, #534773760	; 0x1fe00000
 8002e36:	f425 15c0 	bic.w	r5, r5, #1572864	; 0x180000
 8002e3a:	6125      	str	r5, [r4, #16]
    if (ep->xfer_len == 0U)
 8002e3c:	694d      	ldr	r5, [r1, #20]
 8002e3e:	2d00      	cmp	r5, #0
 8002e40:	f040 80c3 	bne.w	8002fca <USB_EPStartXfer+0x1b6>
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 8002e44:	6925      	ldr	r5, [r4, #16]
 8002e46:	688e      	ldr	r6, [r1, #8]
 8002e48:	f3c6 0612 	ubfx	r6, r6, #0, #19
 8002e4c:	4335      	orrs	r5, r6
 8002e4e:	6125      	str	r5, [r4, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8002e50:	6925      	ldr	r5, [r4, #16]
 8002e52:	f445 2500 	orr.w	r5, r5, #524288	; 0x80000
 8002e56:	6125      	str	r5, [r4, #16]
    if (dma == 1U)
 8002e58:	2a01      	cmp	r2, #1
 8002e5a:	f000 80cb 	beq.w	8002ff4 <USB_EPStartXfer+0x1e0>
    if (ep->type == EP_TYPE_ISOC)
 8002e5e:	78ca      	ldrb	r2, [r1, #3]
 8002e60:	2a01      	cmp	r2, #1
 8002e62:	f000 80cd 	beq.w	8003000 <USB_EPStartXfer+0x1ec>
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8002e66:	f8d3 2b00 	ldr.w	r2, [r3, #2816]	; 0xb00
 8002e6a:	f042 4204 	orr.w	r2, r2, #2214592512	; 0x84000000
 8002e6e:	f8c3 2b00 	str.w	r2, [r3, #2816]	; 0xb00
}
 8002e72:	2000      	movs	r0, #0
 8002e74:	b003      	add	sp, #12
 8002e76:	bdf0      	pop	{r4, r5, r6, r7, pc}
    if (ep->xfer_len == 0U)
 8002e78:	694c      	ldr	r4, [r1, #20]
 8002e7a:	bb84      	cbnz	r4, 8002ede <USB_EPStartXfer+0xca>
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8002e7c:	eb00 1443 	add.w	r4, r0, r3, lsl #5
 8002e80:	f8d4 5910 	ldr.w	r5, [r4, #2320]	; 0x910
 8002e84:	f025 55ff 	bic.w	r5, r5, #534773760	; 0x1fe00000
 8002e88:	f425 15c0 	bic.w	r5, r5, #1572864	; 0x180000
 8002e8c:	f8c4 5910 	str.w	r5, [r4, #2320]	; 0x910
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8002e90:	f8d4 5910 	ldr.w	r5, [r4, #2320]	; 0x910
 8002e94:	f445 2500 	orr.w	r5, r5, #524288	; 0x80000
 8002e98:	f8c4 5910 	str.w	r5, [r4, #2320]	; 0x910
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8002e9c:	f8d4 5910 	ldr.w	r5, [r4, #2320]	; 0x910
 8002ea0:	0ced      	lsrs	r5, r5, #19
 8002ea2:	04ed      	lsls	r5, r5, #19
 8002ea4:	f8c4 5910 	str.w	r5, [r4, #2320]	; 0x910
    if (dma == 1U)
 8002ea8:	2a01      	cmp	r2, #1
 8002eaa:	d04c      	beq.n	8002f46 <USB_EPStartXfer+0x132>
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8002eac:	eb00 1343 	add.w	r3, r0, r3, lsl #5
 8002eb0:	f8d3 4900 	ldr.w	r4, [r3, #2304]	; 0x900
 8002eb4:	f044 4404 	orr.w	r4, r4, #2214592512	; 0x84000000
 8002eb8:	f8c3 4900 	str.w	r4, [r3, #2304]	; 0x900
      if (ep->type != EP_TYPE_ISOC)
 8002ebc:	78cc      	ldrb	r4, [r1, #3]
 8002ebe:	2c01      	cmp	r4, #1
 8002ec0:	d06a      	beq.n	8002f98 <USB_EPStartXfer+0x184>
        if (ep->xfer_len > 0U)
 8002ec2:	694b      	ldr	r3, [r1, #20]
 8002ec4:	2b00      	cmp	r3, #0
 8002ec6:	d0d4      	beq.n	8002e72 <USB_EPStartXfer+0x5e>
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8002ec8:	f8d0 2834 	ldr.w	r2, [r0, #2100]	; 0x834
 8002ecc:	7809      	ldrb	r1, [r1, #0]
 8002ece:	f001 040f 	and.w	r4, r1, #15
 8002ed2:	2101      	movs	r1, #1
 8002ed4:	40a1      	lsls	r1, r4
 8002ed6:	430a      	orrs	r2, r1
 8002ed8:	f8c0 2834 	str.w	r2, [r0, #2100]	; 0x834
 8002edc:	e7c9      	b.n	8002e72 <USB_EPStartXfer+0x5e>
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8002ede:	eb00 1443 	add.w	r4, r0, r3, lsl #5
 8002ee2:	f8d4 5910 	ldr.w	r5, [r4, #2320]	; 0x910
 8002ee6:	0ced      	lsrs	r5, r5, #19
 8002ee8:	04ed      	lsls	r5, r5, #19
 8002eea:	f8c4 5910 	str.w	r5, [r4, #2320]	; 0x910
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8002eee:	f8d4 5910 	ldr.w	r5, [r4, #2320]	; 0x910
 8002ef2:	f025 55ff 	bic.w	r5, r5, #534773760	; 0x1fe00000
 8002ef6:	f425 15c0 	bic.w	r5, r5, #1572864	; 0x180000
 8002efa:	f8c4 5910 	str.w	r5, [r4, #2320]	; 0x910
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 8002efe:	f8d4 6910 	ldr.w	r6, [r4, #2320]	; 0x910
                                     (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 8002f02:	694d      	ldr	r5, [r1, #20]
 8002f04:	688f      	ldr	r7, [r1, #8]
 8002f06:	443d      	add	r5, r7
 8002f08:	3d01      	subs	r5, #1
 8002f0a:	fbb5 f5f7 	udiv	r5, r5, r7
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 8002f0e:	4f46      	ldr	r7, [pc, #280]	; (8003028 <USB_EPStartXfer+0x214>)
 8002f10:	ea07 45c5 	and.w	r5, r7, r5, lsl #19
 8002f14:	4335      	orrs	r5, r6
 8002f16:	f8c4 5910 	str.w	r5, [r4, #2320]	; 0x910
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8002f1a:	f8d4 5910 	ldr.w	r5, [r4, #2320]	; 0x910
 8002f1e:	694e      	ldr	r6, [r1, #20]
 8002f20:	f3c6 0612 	ubfx	r6, r6, #0, #19
 8002f24:	4335      	orrs	r5, r6
 8002f26:	f8c4 5910 	str.w	r5, [r4, #2320]	; 0x910
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8002f2a:	f504 6410 	add.w	r4, r4, #2304	; 0x900
      if (ep->type == EP_TYPE_ISOC)
 8002f2e:	78cd      	ldrb	r5, [r1, #3]
 8002f30:	2d01      	cmp	r5, #1
 8002f32:	d1b9      	bne.n	8002ea8 <USB_EPStartXfer+0x94>
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 8002f34:	6925      	ldr	r5, [r4, #16]
 8002f36:	f025 45c0 	bic.w	r5, r5, #1610612736	; 0x60000000
 8002f3a:	6125      	str	r5, [r4, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 8002f3c:	6925      	ldr	r5, [r4, #16]
 8002f3e:	f045 5500 	orr.w	r5, r5, #536870912	; 0x20000000
 8002f42:	6125      	str	r5, [r4, #16]
 8002f44:	e7b0      	b.n	8002ea8 <USB_EPStartXfer+0x94>
      if ((uint32_t)ep->dma_addr != 0U)
 8002f46:	690a      	ldr	r2, [r1, #16]
 8002f48:	b11a      	cbz	r2, 8002f52 <USB_EPStartXfer+0x13e>
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8002f4a:	eb00 1443 	add.w	r4, r0, r3, lsl #5
 8002f4e:	f8c4 2914 	str.w	r2, [r4, #2324]	; 0x914
      if (ep->type == EP_TYPE_ISOC)
 8002f52:	78ca      	ldrb	r2, [r1, #3]
 8002f54:	2a01      	cmp	r2, #1
 8002f56:	d008      	beq.n	8002f6a <USB_EPStartXfer+0x156>
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8002f58:	eb00 1343 	add.w	r3, r0, r3, lsl #5
 8002f5c:	f8d3 2900 	ldr.w	r2, [r3, #2304]	; 0x900
 8002f60:	f042 4204 	orr.w	r2, r2, #2214592512	; 0x84000000
 8002f64:	f8c3 2900 	str.w	r2, [r3, #2304]	; 0x900
 8002f68:	e783      	b.n	8002e72 <USB_EPStartXfer+0x5e>
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8002f6a:	f8d0 2808 	ldr.w	r2, [r0, #2056]	; 0x808
 8002f6e:	f412 7f80 	tst.w	r2, #256	; 0x100
 8002f72:	d108      	bne.n	8002f86 <USB_EPStartXfer+0x172>
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8002f74:	eb00 1143 	add.w	r1, r0, r3, lsl #5
 8002f78:	f8d1 2900 	ldr.w	r2, [r1, #2304]	; 0x900
 8002f7c:	f042 5200 	orr.w	r2, r2, #536870912	; 0x20000000
 8002f80:	f8c1 2900 	str.w	r2, [r1, #2304]	; 0x900
 8002f84:	e7e8      	b.n	8002f58 <USB_EPStartXfer+0x144>
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8002f86:	eb00 1143 	add.w	r1, r0, r3, lsl #5
 8002f8a:	f8d1 2900 	ldr.w	r2, [r1, #2304]	; 0x900
 8002f8e:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8002f92:	f8c1 2900 	str.w	r2, [r1, #2304]	; 0x900
 8002f96:	e7df      	b.n	8002f58 <USB_EPStartXfer+0x144>
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8002f98:	f8d0 4808 	ldr.w	r4, [r0, #2056]	; 0x808
 8002f9c:	f414 7f80 	tst.w	r4, #256	; 0x100
 8002fa0:	d10c      	bne.n	8002fbc <USB_EPStartXfer+0x1a8>
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8002fa2:	f8d3 4900 	ldr.w	r4, [r3, #2304]	; 0x900
 8002fa6:	f044 5400 	orr.w	r4, r4, #536870912	; 0x20000000
 8002faa:	f8c3 4900 	str.w	r4, [r3, #2304]	; 0x900
        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 8002fae:	9200      	str	r2, [sp, #0]
 8002fb0:	8a8b      	ldrh	r3, [r1, #20]
 8002fb2:	780a      	ldrb	r2, [r1, #0]
 8002fb4:	68c9      	ldr	r1, [r1, #12]
 8002fb6:	f7ff ff19 	bl	8002dec <USB_WritePacket>
 8002fba:	e75a      	b.n	8002e72 <USB_EPStartXfer+0x5e>
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8002fbc:	f8d3 4900 	ldr.w	r4, [r3, #2304]	; 0x900
 8002fc0:	f044 5480 	orr.w	r4, r4, #268435456	; 0x10000000
 8002fc4:	f8c3 4900 	str.w	r4, [r3, #2304]	; 0x900
 8002fc8:	e7f1      	b.n	8002fae <USB_EPStartXfer+0x19a>
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8002fca:	688e      	ldr	r6, [r1, #8]
 8002fcc:	4435      	add	r5, r6
 8002fce:	3d01      	subs	r5, #1
 8002fd0:	fbb5 f5f6 	udiv	r5, r5, r6
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 8002fd4:	6926      	ldr	r6, [r4, #16]
 8002fd6:	4f14      	ldr	r7, [pc, #80]	; (8003028 <USB_EPStartXfer+0x214>)
 8002fd8:	ea07 47c5 	and.w	r7, r7, r5, lsl #19
 8002fdc:	433e      	orrs	r6, r7
 8002fde:	6126      	str	r6, [r4, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket * pktcnt);
 8002fe0:	6927      	ldr	r7, [r4, #16]
 8002fe2:	688e      	ldr	r6, [r1, #8]
 8002fe4:	b2ad      	uxth	r5, r5
 8002fe6:	fb06 f505 	mul.w	r5, r6, r5
 8002fea:	f3c5 0512 	ubfx	r5, r5, #0, #19
 8002fee:	433d      	orrs	r5, r7
 8002ff0:	6125      	str	r5, [r4, #16]
 8002ff2:	e731      	b.n	8002e58 <USB_EPStartXfer+0x44>
      if ((uint32_t)ep->xfer_buff != 0U)
 8002ff4:	68ca      	ldr	r2, [r1, #12]
 8002ff6:	2a00      	cmp	r2, #0
 8002ff8:	f43f af31 	beq.w	8002e5e <USB_EPStartXfer+0x4a>
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8002ffc:	6162      	str	r2, [r4, #20]
 8002ffe:	e72e      	b.n	8002e5e <USB_EPStartXfer+0x4a>
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8003000:	f8d0 2808 	ldr.w	r2, [r0, #2056]	; 0x808
 8003004:	f412 7f80 	tst.w	r2, #256	; 0x100
 8003008:	d106      	bne.n	8003018 <USB_EPStartXfer+0x204>
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 800300a:	f8d3 2b00 	ldr.w	r2, [r3, #2816]	; 0xb00
 800300e:	f042 5200 	orr.w	r2, r2, #536870912	; 0x20000000
 8003012:	f8c3 2b00 	str.w	r2, [r3, #2816]	; 0xb00
 8003016:	e726      	b.n	8002e66 <USB_EPStartXfer+0x52>
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 8003018:	f8d3 2b00 	ldr.w	r2, [r3, #2816]	; 0xb00
 800301c:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8003020:	f8c3 2b00 	str.w	r2, [r3, #2816]	; 0xb00
 8003024:	e71f      	b.n	8002e66 <USB_EPStartXfer+0x52>
 8003026:	bf00      	nop
 8003028:	1ff80000 	.word	0x1ff80000

0800302c <USB_ReadPacket>:
{
 800302c:	b4f0      	push	{r4, r5, r6, r7}
 800302e:	b082      	sub	sp, #8
 8003030:	4607      	mov	r7, r0
 8003032:	4608      	mov	r0, r1
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003034:	463e      	mov	r6, r7
  uint32_t count32b = (uint32_t)len >> 2U;
 8003036:	0895      	lsrs	r5, r2, #2
  uint16_t remaining_bytes = len % 4U;
 8003038:	f002 0203 	and.w	r2, r2, #3
  for (i = 0U; i < count32b; i++)
 800303c:	2300      	movs	r3, #0
 800303e:	42ab      	cmp	r3, r5
 8003040:	d206      	bcs.n	8003050 <USB_ReadPacket+0x24>
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8003042:	f506 5480 	add.w	r4, r6, #4096	; 0x1000
 8003046:	6824      	ldr	r4, [r4, #0]
 8003048:	f840 4b04 	str.w	r4, [r0], #4
  for (i = 0U; i < count32b; i++)
 800304c:	3301      	adds	r3, #1
 800304e:	e7f6      	b.n	800303e <USB_ReadPacket+0x12>
  if (remaining_bytes != 0U)
 8003050:	b17a      	cbz	r2, 8003072 <USB_ReadPacket+0x46>
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 8003052:	f507 5780 	add.w	r7, r7, #4096	; 0x1000
 8003056:	683b      	ldr	r3, [r7, #0]
 8003058:	9301      	str	r3, [sp, #4]
    i = 0U;
 800305a:	2500      	movs	r5, #0
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 800305c:	b2eb      	uxtb	r3, r5
 800305e:	00dc      	lsls	r4, r3, #3
 8003060:	9b01      	ldr	r3, [sp, #4]
 8003062:	40e3      	lsrs	r3, r4
 8003064:	f800 3b01 	strb.w	r3, [r0], #1
      i++;
 8003068:	3501      	adds	r5, #1
      remaining_bytes--;
 800306a:	3a01      	subs	r2, #1
 800306c:	b292      	uxth	r2, r2
    } while (remaining_bytes != 0U);
 800306e:	2a00      	cmp	r2, #0
 8003070:	d1f4      	bne.n	800305c <USB_ReadPacket+0x30>
}
 8003072:	b002      	add	sp, #8
 8003074:	bcf0      	pop	{r4, r5, r6, r7}
 8003076:	4770      	bx	lr

08003078 <USB_EPSetStall>:
  uint32_t epnum = (uint32_t)ep->num;
 8003078:	780b      	ldrb	r3, [r1, #0]
  if (ep->is_in == 1U)
 800307a:	784a      	ldrb	r2, [r1, #1]
 800307c:	2a01      	cmp	r2, #1
 800307e:	d014      	beq.n	80030aa <USB_EPSetStall+0x32>
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 8003080:	eb00 1043 	add.w	r0, r0, r3, lsl #5
 8003084:	f8d0 2b00 	ldr.w	r2, [r0, #2816]	; 0xb00
 8003088:	2a00      	cmp	r2, #0
 800308a:	db06      	blt.n	800309a <USB_EPSetStall+0x22>
 800308c:	b12b      	cbz	r3, 800309a <USB_EPSetStall+0x22>
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 800308e:	f8d0 3b00 	ldr.w	r3, [r0, #2816]	; 0xb00
 8003092:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8003096:	f8c0 3b00 	str.w	r3, [r0, #2816]	; 0xb00
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 800309a:	f8d0 3b00 	ldr.w	r3, [r0, #2816]	; 0xb00
 800309e:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80030a2:	f8c0 3b00 	str.w	r3, [r0, #2816]	; 0xb00
}
 80030a6:	2000      	movs	r0, #0
 80030a8:	4770      	bx	lr
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 80030aa:	eb00 1043 	add.w	r0, r0, r3, lsl #5
 80030ae:	f8d0 2900 	ldr.w	r2, [r0, #2304]	; 0x900
 80030b2:	2a00      	cmp	r2, #0
 80030b4:	db06      	blt.n	80030c4 <USB_EPSetStall+0x4c>
 80030b6:	b12b      	cbz	r3, 80030c4 <USB_EPSetStall+0x4c>
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 80030b8:	f8d0 3900 	ldr.w	r3, [r0, #2304]	; 0x900
 80030bc:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80030c0:	f8c0 3900 	str.w	r3, [r0, #2304]	; 0x900
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 80030c4:	f8d0 3900 	ldr.w	r3, [r0, #2304]	; 0x900
 80030c8:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80030cc:	f8c0 3900 	str.w	r3, [r0, #2304]	; 0x900
 80030d0:	e7e9      	b.n	80030a6 <USB_EPSetStall+0x2e>

080030d2 <USB_EPClearStall>:
  uint32_t epnum = (uint32_t)ep->num;
 80030d2:	780b      	ldrb	r3, [r1, #0]
  if (ep->is_in == 1U)
 80030d4:	784a      	ldrb	r2, [r1, #1]
 80030d6:	2a01      	cmp	r2, #1
 80030d8:	d00e      	beq.n	80030f8 <USB_EPClearStall+0x26>
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 80030da:	eb00 1043 	add.w	r0, r0, r3, lsl #5
 80030de:	f8d0 3b00 	ldr.w	r3, [r0, #2816]	; 0xb00
 80030e2:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80030e6:	f8c0 3b00 	str.w	r3, [r0, #2816]	; 0xb00
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 80030ea:	78cb      	ldrb	r3, [r1, #3]
 80030ec:	3b02      	subs	r3, #2
 80030ee:	b2db      	uxtb	r3, r3
 80030f0:	2b01      	cmp	r3, #1
 80030f2:	d915      	bls.n	8003120 <USB_EPClearStall+0x4e>
}
 80030f4:	2000      	movs	r0, #0
 80030f6:	4770      	bx	lr
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 80030f8:	eb00 1043 	add.w	r0, r0, r3, lsl #5
 80030fc:	f8d0 3900 	ldr.w	r3, [r0, #2304]	; 0x900
 8003100:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8003104:	f8c0 3900 	str.w	r3, [r0, #2304]	; 0x900
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8003108:	78cb      	ldrb	r3, [r1, #3]
 800310a:	3b02      	subs	r3, #2
 800310c:	b2db      	uxtb	r3, r3
 800310e:	2b01      	cmp	r3, #1
 8003110:	d8f0      	bhi.n	80030f4 <USB_EPClearStall+0x22>
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8003112:	f8d0 3900 	ldr.w	r3, [r0, #2304]	; 0x900
 8003116:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800311a:	f8c0 3900 	str.w	r3, [r0, #2304]	; 0x900
 800311e:	e7e9      	b.n	80030f4 <USB_EPClearStall+0x22>
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8003120:	f8d0 3b00 	ldr.w	r3, [r0, #2816]	; 0xb00
 8003124:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003128:	f8c0 3b00 	str.w	r3, [r0, #2816]	; 0xb00
 800312c:	e7e2      	b.n	80030f4 <USB_EPClearStall+0x22>

0800312e <USB_SetDevAddress>:
  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 800312e:	f8d0 3800 	ldr.w	r3, [r0, #2048]	; 0x800
 8003132:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8003136:	f8c0 3800 	str.w	r3, [r0, #2048]	; 0x800
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 800313a:	f8d0 3800 	ldr.w	r3, [r0, #2048]	; 0x800
 800313e:	0109      	lsls	r1, r1, #4
 8003140:	f401 61fe 	and.w	r1, r1, #2032	; 0x7f0
 8003144:	4319      	orrs	r1, r3
 8003146:	f8c0 1800 	str.w	r1, [r0, #2048]	; 0x800
}
 800314a:	2000      	movs	r0, #0
 800314c:	4770      	bx	lr

0800314e <USB_DevConnect>:
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800314e:	f8d0 3e00 	ldr.w	r3, [r0, #3584]	; 0xe00
 8003152:	f023 0303 	bic.w	r3, r3, #3
 8003156:	f8c0 3e00 	str.w	r3, [r0, #3584]	; 0xe00
  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 800315a:	f8d0 3804 	ldr.w	r3, [r0, #2052]	; 0x804
 800315e:	f023 0302 	bic.w	r3, r3, #2
 8003162:	f8c0 3804 	str.w	r3, [r0, #2052]	; 0x804
}
 8003166:	2000      	movs	r0, #0
 8003168:	4770      	bx	lr

0800316a <USB_DevDisconnect>:
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800316a:	f8d0 3e00 	ldr.w	r3, [r0, #3584]	; 0xe00
 800316e:	f023 0303 	bic.w	r3, r3, #3
 8003172:	f8c0 3e00 	str.w	r3, [r0, #3584]	; 0xe00
  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8003176:	f8d0 3804 	ldr.w	r3, [r0, #2052]	; 0x804
 800317a:	f043 0302 	orr.w	r3, r3, #2
 800317e:	f8c0 3804 	str.w	r3, [r0, #2052]	; 0x804
}
 8003182:	2000      	movs	r0, #0
 8003184:	4770      	bx	lr

08003186 <USB_ReadInterrupts>:
  tmpreg = USBx->GINTSTS;
 8003186:	6942      	ldr	r2, [r0, #20]
  tmpreg &= USBx->GINTMSK;
 8003188:	6980      	ldr	r0, [r0, #24]
}
 800318a:	4010      	ands	r0, r2
 800318c:	4770      	bx	lr

0800318e <USB_ReadDevAllOutEpInterrupt>:
  tmpreg  = USBx_DEVICE->DAINT;
 800318e:	f8d0 3818 	ldr.w	r3, [r0, #2072]	; 0x818
 8003192:	f500 6000 	add.w	r0, r0, #2048	; 0x800
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8003196:	69c0      	ldr	r0, [r0, #28]
 8003198:	4018      	ands	r0, r3
}
 800319a:	0c00      	lsrs	r0, r0, #16
 800319c:	4770      	bx	lr

0800319e <USB_ReadDevAllInEpInterrupt>:
  tmpreg  = USBx_DEVICE->DAINT;
 800319e:	f8d0 3818 	ldr.w	r3, [r0, #2072]	; 0x818
 80031a2:	f500 6000 	add.w	r0, r0, #2048	; 0x800
  tmpreg &= USBx_DEVICE->DAINTMSK;
 80031a6:	69c0      	ldr	r0, [r0, #28]
 80031a8:	4018      	ands	r0, r3
}
 80031aa:	b280      	uxth	r0, r0
 80031ac:	4770      	bx	lr

080031ae <USB_ReadDevOutEPInterrupt>:
  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 80031ae:	eb00 1141 	add.w	r1, r0, r1, lsl #5
 80031b2:	f8d1 2b08 	ldr.w	r2, [r1, #2824]	; 0xb08
  tmpreg &= USBx_DEVICE->DOEPMSK;
 80031b6:	f500 6000 	add.w	r0, r0, #2048	; 0x800
 80031ba:	6940      	ldr	r0, [r0, #20]
}
 80031bc:	4010      	ands	r0, r2
 80031be:	4770      	bx	lr

080031c0 <USB_ReadDevInEPInterrupt>:
{
 80031c0:	b410      	push	{r4}
  msk = USBx_DEVICE->DIEPMSK;
 80031c2:	f8d0 4810 	ldr.w	r4, [r0, #2064]	; 0x810
  emp = USBx_DEVICE->DIEPEMPMSK;
 80031c6:	f8d0 3834 	ldr.w	r3, [r0, #2100]	; 0x834
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 80031ca:	f001 020f 	and.w	r2, r1, #15
 80031ce:	40d3      	lsrs	r3, r2
 80031d0:	01db      	lsls	r3, r3, #7
 80031d2:	b2db      	uxtb	r3, r3
 80031d4:	4323      	orrs	r3, r4
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 80031d6:	eb00 1041 	add.w	r0, r0, r1, lsl #5
 80031da:	f500 6010 	add.w	r0, r0, #2304	; 0x900
 80031de:	6880      	ldr	r0, [r0, #8]
}
 80031e0:	4018      	ands	r0, r3
 80031e2:	f85d 4b04 	ldr.w	r4, [sp], #4
 80031e6:	4770      	bx	lr

080031e8 <USB_GetMode>:
  return ((USBx->GINTSTS) & 0x1U);
 80031e8:	6940      	ldr	r0, [r0, #20]
}
 80031ea:	f000 0001 	and.w	r0, r0, #1
 80031ee:	4770      	bx	lr

080031f0 <USB_SetCurrentMode>:
{
 80031f0:	b538      	push	{r3, r4, r5, lr}
 80031f2:	4605      	mov	r5, r0
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 80031f4:	68c3      	ldr	r3, [r0, #12]
 80031f6:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 80031fa:	60c3      	str	r3, [r0, #12]
  if (mode == USB_HOST_MODE)
 80031fc:	2901      	cmp	r1, #1
 80031fe:	d013      	beq.n	8003228 <USB_SetCurrentMode+0x38>
  else if (mode == USB_DEVICE_MODE)
 8003200:	bb19      	cbnz	r1, 800324a <USB_SetCurrentMode+0x5a>
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8003202:	68c3      	ldr	r3, [r0, #12]
 8003204:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8003208:	60c3      	str	r3, [r0, #12]
  uint32_t ms = 0U;
 800320a:	2400      	movs	r4, #0
      HAL_Delay(1U);
 800320c:	2001      	movs	r0, #1
 800320e:	f7fd fd6f 	bl	8000cf0 <HAL_Delay>
      ms++;
 8003212:	3401      	adds	r4, #1
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 8003214:	4628      	mov	r0, r5
 8003216:	f7ff ffe7 	bl	80031e8 <USB_GetMode>
 800321a:	b108      	cbz	r0, 8003220 <USB_SetCurrentMode+0x30>
 800321c:	2c31      	cmp	r4, #49	; 0x31
 800321e:	d9f5      	bls.n	800320c <USB_SetCurrentMode+0x1c>
  if (ms == 50U)
 8003220:	2c32      	cmp	r4, #50	; 0x32
 8003222:	d014      	beq.n	800324e <USB_SetCurrentMode+0x5e>
  return HAL_OK;
 8003224:	2000      	movs	r0, #0
}
 8003226:	bd38      	pop	{r3, r4, r5, pc}
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8003228:	68c3      	ldr	r3, [r0, #12]
 800322a:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800322e:	60c3      	str	r3, [r0, #12]
  uint32_t ms = 0U;
 8003230:	2400      	movs	r4, #0
      HAL_Delay(1U);
 8003232:	2001      	movs	r0, #1
 8003234:	f7fd fd5c 	bl	8000cf0 <HAL_Delay>
      ms++;
 8003238:	3401      	adds	r4, #1
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 800323a:	4628      	mov	r0, r5
 800323c:	f7ff ffd4 	bl	80031e8 <USB_GetMode>
 8003240:	2801      	cmp	r0, #1
 8003242:	d0ed      	beq.n	8003220 <USB_SetCurrentMode+0x30>
 8003244:	2c31      	cmp	r4, #49	; 0x31
 8003246:	d9f4      	bls.n	8003232 <USB_SetCurrentMode+0x42>
 8003248:	e7ea      	b.n	8003220 <USB_SetCurrentMode+0x30>
    return HAL_ERROR;
 800324a:	2001      	movs	r0, #1
 800324c:	e7eb      	b.n	8003226 <USB_SetCurrentMode+0x36>
    return HAL_ERROR;
 800324e:	2001      	movs	r0, #1
 8003250:	e7e9      	b.n	8003226 <USB_SetCurrentMode+0x36>

08003252 <USB_ActivateSetup>:
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 8003252:	f8d0 3900 	ldr.w	r3, [r0, #2304]	; 0x900
 8003256:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 800325a:	f023 0307 	bic.w	r3, r3, #7
 800325e:	f8c0 3900 	str.w	r3, [r0, #2304]	; 0x900
  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 8003262:	f8d0 3804 	ldr.w	r3, [r0, #2052]	; 0x804
 8003266:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800326a:	f8c0 3804 	str.w	r3, [r0, #2052]	; 0x804
}
 800326e:	2000      	movs	r0, #0
 8003270:	4770      	bx	lr
	...

08003274 <USB_EP0_OutStart>:
{
 8003274:	b410      	push	{r4}
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8003276:	6c04      	ldr	r4, [r0, #64]	; 0x40
  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 8003278:	4b15      	ldr	r3, [pc, #84]	; (80032d0 <USB_EP0_OutStart+0x5c>)
 800327a:	429c      	cmp	r4, r3
 800327c:	d903      	bls.n	8003286 <USB_EP0_OutStart+0x12>
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800327e:	f8d0 3b00 	ldr.w	r3, [r0, #2816]	; 0xb00
 8003282:	2b00      	cmp	r3, #0
 8003284:	db16      	blt.n	80032b4 <USB_EP0_OutStart+0x40>
  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 8003286:	2400      	movs	r4, #0
 8003288:	f8c0 4b10 	str.w	r4, [r0, #2832]	; 0xb10
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800328c:	f8d0 4b10 	ldr.w	r4, [r0, #2832]	; 0xb10
 8003290:	f444 2400 	orr.w	r4, r4, #524288	; 0x80000
 8003294:	f8c0 4b10 	str.w	r4, [r0, #2832]	; 0xb10
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 8003298:	f8d0 4b10 	ldr.w	r4, [r0, #2832]	; 0xb10
 800329c:	f044 0418 	orr.w	r4, r4, #24
 80032a0:	f8c0 4b10 	str.w	r4, [r0, #2832]	; 0xb10
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 80032a4:	f8d0 4b10 	ldr.w	r4, [r0, #2832]	; 0xb10
 80032a8:	f044 44c0 	orr.w	r4, r4, #1610612736	; 0x60000000
 80032ac:	f8c0 4b10 	str.w	r4, [r0, #2832]	; 0xb10
  if (dma == 1U)
 80032b0:	2901      	cmp	r1, #1
 80032b2:	d003      	beq.n	80032bc <USB_EP0_OutStart+0x48>
}
 80032b4:	2000      	movs	r0, #0
 80032b6:	f85d 4b04 	ldr.w	r4, [sp], #4
 80032ba:	4770      	bx	lr
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 80032bc:	f8c0 2b14 	str.w	r2, [r0, #2836]	; 0xb14
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 80032c0:	f8d0 3b00 	ldr.w	r3, [r0, #2816]	; 0xb00
 80032c4:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 80032c8:	f8c0 3b00 	str.w	r3, [r0, #2816]	; 0xb00
 80032cc:	e7f2      	b.n	80032b4 <USB_EP0_OutStart+0x40>
 80032ce:	bf00      	nop
 80032d0:	4f54300a 	.word	0x4f54300a

080032d4 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 80032d4:	b510      	push	{r4, lr}
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 80032d6:	f8d0 42bc 	ldr.w	r4, [r0, #700]	; 0x2bc

  if (hcdc == NULL)
 80032da:	b184      	cbz	r4, 80032fe <USBD_CDC_EP0_RxReady+0x2a>
  {
    return (uint8_t)USBD_FAIL;
  }

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 80032dc:	f8d0 32c0 	ldr.w	r3, [r0, #704]	; 0x2c0
 80032e0:	b17b      	cbz	r3, 8003302 <USBD_CDC_EP0_RxReady+0x2e>
 80032e2:	f894 0200 	ldrb.w	r0, [r4, #512]	; 0x200
 80032e6:	28ff      	cmp	r0, #255	; 0xff
 80032e8:	d00d      	beq.n	8003306 <USBD_CDC_EP0_RxReady+0x32>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 80032ea:	689b      	ldr	r3, [r3, #8]
 80032ec:	f894 2201 	ldrb.w	r2, [r4, #513]	; 0x201
 80032f0:	4621      	mov	r1, r4
 80032f2:	4798      	blx	r3
                                                      (uint8_t *)hcdc->data,
                                                      (uint16_t)hcdc->CmdLength);
    hcdc->CmdOpCode = 0xFFU;
 80032f4:	23ff      	movs	r3, #255	; 0xff
 80032f6:	f884 3200 	strb.w	r3, [r4, #512]	; 0x200
  }

  return (uint8_t)USBD_OK;
 80032fa:	2000      	movs	r0, #0
}
 80032fc:	bd10      	pop	{r4, pc}
    return (uint8_t)USBD_FAIL;
 80032fe:	2003      	movs	r0, #3
 8003300:	e7fc      	b.n	80032fc <USBD_CDC_EP0_RxReady+0x28>
  return (uint8_t)USBD_OK;
 8003302:	2000      	movs	r0, #0
 8003304:	e7fa      	b.n	80032fc <USBD_CDC_EP0_RxReady+0x28>
 8003306:	2000      	movs	r0, #0
 8003308:	e7f8      	b.n	80032fc <USBD_CDC_EP0_RxReady+0x28>
	...

0800330c <USBD_CDC_GetFSCfgDesc>:
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
  *length = (uint16_t)sizeof(USBD_CDC_CfgFSDesc);
 800330c:	2343      	movs	r3, #67	; 0x43
 800330e:	8003      	strh	r3, [r0, #0]

  return USBD_CDC_CfgFSDesc;
}
 8003310:	4800      	ldr	r0, [pc, #0]	; (8003314 <USBD_CDC_GetFSCfgDesc+0x8>)
 8003312:	4770      	bx	lr
 8003314:	20000044 	.word	0x20000044

08003318 <USBD_CDC_GetHSCfgDesc>:
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
  *length = (uint16_t)sizeof(USBD_CDC_CfgHSDesc);
 8003318:	2343      	movs	r3, #67	; 0x43
 800331a:	8003      	strh	r3, [r0, #0]

  return USBD_CDC_CfgHSDesc;
}
 800331c:	4800      	ldr	r0, [pc, #0]	; (8003320 <USBD_CDC_GetHSCfgDesc+0x8>)
 800331e:	4770      	bx	lr
 8003320:	20000088 	.word	0x20000088

08003324 <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
  *length = (uint16_t)sizeof(USBD_CDC_OtherSpeedCfgDesc);
 8003324:	2343      	movs	r3, #67	; 0x43
 8003326:	8003      	strh	r3, [r0, #0]

  return USBD_CDC_OtherSpeedCfgDesc;
}
 8003328:	4800      	ldr	r0, [pc, #0]	; (800332c <USBD_CDC_GetOtherSpeedCfgDesc+0x8>)
 800332a:	4770      	bx	lr
 800332c:	200000d8 	.word	0x200000d8

08003330 <USBD_CDC_GetDeviceQualifierDescriptor>:
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 8003330:	230a      	movs	r3, #10
 8003332:	8003      	strh	r3, [r0, #0]

  return USBD_CDC_DeviceQualifierDesc;
}
 8003334:	4800      	ldr	r0, [pc, #0]	; (8003338 <USBD_CDC_GetDeviceQualifierDescriptor+0x8>)
 8003336:	4770      	bx	lr
 8003338:	200000cc 	.word	0x200000cc

0800333c <USBD_CDC_DataOut>:
{
 800333c:	b538      	push	{r3, r4, r5, lr}
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800333e:	f8d0 52bc 	ldr.w	r5, [r0, #700]	; 0x2bc
  if (pdev->pClassData == NULL)
 8003342:	b175      	cbz	r5, 8003362 <USBD_CDC_DataOut+0x26>
 8003344:	4604      	mov	r4, r0
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 8003346:	f002 fd08 	bl	8005d5a <USBD_LL_GetRxDataSize>
 800334a:	f8c5 020c 	str.w	r0, [r5, #524]	; 0x20c
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 800334e:	f8d4 32c0 	ldr.w	r3, [r4, #704]	; 0x2c0
 8003352:	68db      	ldr	r3, [r3, #12]
 8003354:	f505 7103 	add.w	r1, r5, #524	; 0x20c
 8003358:	f8d5 0204 	ldr.w	r0, [r5, #516]	; 0x204
 800335c:	4798      	blx	r3
  return (uint8_t)USBD_OK;
 800335e:	2000      	movs	r0, #0
}
 8003360:	bd38      	pop	{r3, r4, r5, pc}
    return (uint8_t)USBD_FAIL;
 8003362:	2003      	movs	r0, #3
 8003364:	e7fc      	b.n	8003360 <USBD_CDC_DataOut+0x24>

08003366 <USBD_CDC_DataIn>:
{
 8003366:	b538      	push	{r3, r4, r5, lr}
  PCD_HandleTypeDef *hpcd = pdev->pData;
 8003368:	f8d0 42c4 	ldr.w	r4, [r0, #708]	; 0x2c4
  if (pdev->pClassData == NULL)
 800336c:	f8d0 32bc 	ldr.w	r3, [r0, #700]	; 0x2bc
 8003370:	b353      	cbz	r3, 80033c8 <USBD_CDC_DataIn+0x62>
  if ((pdev->ep_in[epnum].total_length > 0U) &&
 8003372:	eb01 0281 	add.w	r2, r1, r1, lsl #2
 8003376:	eb00 0282 	add.w	r2, r0, r2, lsl #2
 800337a:	6992      	ldr	r2, [r2, #24]
 800337c:	b14a      	cbz	r2, 8003392 <USBD_CDC_DataIn+0x2c>
      ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 800337e:	ebc1 05c1 	rsb	r5, r1, r1, lsl #3
 8003382:	eb04 0485 	add.w	r4, r4, r5, lsl #2
 8003386:	6c65      	ldr	r5, [r4, #68]	; 0x44
 8003388:	fbb2 f4f5 	udiv	r4, r2, r5
 800338c:	fb05 2214 	mls	r2, r5, r4, r2
  if ((pdev->ep_in[epnum].total_length > 0U) &&
 8003390:	b172      	cbz	r2, 80033b0 <USBD_CDC_DataIn+0x4a>
    hcdc->TxState = 0U;
 8003392:	2200      	movs	r2, #0
 8003394:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt != NULL)
 8003398:	f8d0 22c0 	ldr.w	r2, [r0, #704]	; 0x2c0
 800339c:	6914      	ldr	r4, [r2, #16]
 800339e:	b1ac      	cbz	r4, 80033cc <USBD_CDC_DataIn+0x66>
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 80033a0:	460a      	mov	r2, r1
 80033a2:	f503 7104 	add.w	r1, r3, #528	; 0x210
 80033a6:	f8d3 0208 	ldr.w	r0, [r3, #520]	; 0x208
 80033aa:	47a0      	blx	r4
  return (uint8_t)USBD_OK;
 80033ac:	2000      	movs	r0, #0
}
 80033ae:	bd38      	pop	{r3, r4, r5, pc}
    pdev->ep_in[epnum].total_length = 0U;
 80033b0:	eb01 0381 	add.w	r3, r1, r1, lsl #2
 80033b4:	eb00 0383 	add.w	r3, r0, r3, lsl #2
 80033b8:	2400      	movs	r4, #0
 80033ba:	619c      	str	r4, [r3, #24]
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 80033bc:	4623      	mov	r3, r4
 80033be:	4622      	mov	r2, r4
 80033c0:	f002 fd14 	bl	8005dec <USBD_LL_Transmit>
  return (uint8_t)USBD_OK;
 80033c4:	4620      	mov	r0, r4
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 80033c6:	e7f2      	b.n	80033ae <USBD_CDC_DataIn+0x48>
    return (uint8_t)USBD_FAIL;
 80033c8:	2003      	movs	r0, #3
 80033ca:	e7f0      	b.n	80033ae <USBD_CDC_DataIn+0x48>
  return (uint8_t)USBD_OK;
 80033cc:	2000      	movs	r0, #0
 80033ce:	e7ee      	b.n	80033ae <USBD_CDC_DataIn+0x48>

080033d0 <USBD_CDC_Setup>:
{
 80033d0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80033d2:	b083      	sub	sp, #12
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 80033d4:	f8d0 62bc 	ldr.w	r6, [r0, #700]	; 0x2bc
  uint8_t ifalt = 0U;
 80033d8:	2300      	movs	r3, #0
 80033da:	f88d 3007 	strb.w	r3, [sp, #7]
  uint16_t status_info = 0U;
 80033de:	f8ad 3004 	strh.w	r3, [sp, #4]
  if (hcdc == NULL)
 80033e2:	2e00      	cmp	r6, #0
 80033e4:	d06c      	beq.n	80034c0 <USBD_CDC_Setup+0xf0>
 80033e6:	4607      	mov	r7, r0
 80033e8:	460c      	mov	r4, r1
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80033ea:	780b      	ldrb	r3, [r1, #0]
 80033ec:	f013 0560 	ands.w	r5, r3, #96	; 0x60
 80033f0:	d02a      	beq.n	8003448 <USBD_CDC_Setup+0x78>
 80033f2:	2d20      	cmp	r5, #32
 80033f4:	d15e      	bne.n	80034b4 <USBD_CDC_Setup+0xe4>
      if (req->wLength != 0U)
 80033f6:	88ca      	ldrh	r2, [r1, #6]
 80033f8:	b1f2      	cbz	r2, 8003438 <USBD_CDC_Setup+0x68>
        if ((req->bmRequest & 0x80U) != 0U)
 80033fa:	f013 0f80 	tst.w	r3, #128	; 0x80
 80033fe:	d00f      	beq.n	8003420 <USBD_CDC_Setup+0x50>
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8003400:	f8d0 32c0 	ldr.w	r3, [r0, #704]	; 0x2c0
 8003404:	689b      	ldr	r3, [r3, #8]
 8003406:	4631      	mov	r1, r6
 8003408:	7860      	ldrb	r0, [r4, #1]
 800340a:	4798      	blx	r3
          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 800340c:	88e2      	ldrh	r2, [r4, #6]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 800340e:	2a07      	cmp	r2, #7
 8003410:	bf28      	it	cs
 8003412:	2207      	movcs	r2, #7
 8003414:	4631      	mov	r1, r6
 8003416:	4638      	mov	r0, r7
 8003418:	f000 fe10 	bl	800403c <USBD_CtlSendData>
  USBD_StatusTypeDef ret = USBD_OK;
 800341c:	2500      	movs	r5, #0
 800341e:	e04c      	b.n	80034ba <USBD_CDC_Setup+0xea>
          hcdc->CmdOpCode = req->bRequest;
 8003420:	784b      	ldrb	r3, [r1, #1]
 8003422:	f886 3200 	strb.w	r3, [r6, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)req->wLength;
 8003426:	798b      	ldrb	r3, [r1, #6]
 8003428:	f886 3201 	strb.w	r3, [r6, #513]	; 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, req->wLength);
 800342c:	88ca      	ldrh	r2, [r1, #6]
 800342e:	4631      	mov	r1, r6
 8003430:	f000 fe19 	bl	8004066 <USBD_CtlPrepareRx>
  USBD_StatusTypeDef ret = USBD_OK;
 8003434:	2500      	movs	r5, #0
 8003436:	e040      	b.n	80034ba <USBD_CDC_Setup+0xea>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8003438:	f8d0 32c0 	ldr.w	r3, [r0, #704]	; 0x2c0
 800343c:	689b      	ldr	r3, [r3, #8]
 800343e:	2200      	movs	r2, #0
 8003440:	7848      	ldrb	r0, [r1, #1]
 8003442:	4798      	blx	r3
  USBD_StatusTypeDef ret = USBD_OK;
 8003444:	2500      	movs	r5, #0
 8003446:	e038      	b.n	80034ba <USBD_CDC_Setup+0xea>
      switch (req->bRequest)
 8003448:	784e      	ldrb	r6, [r1, #1]
 800344a:	2e0b      	cmp	r6, #11
 800344c:	d82e      	bhi.n	80034ac <USBD_CDC_Setup+0xdc>
 800344e:	e8df f006 	tbb	[pc, r6]
 8003452:	3406      	.short	0x3406
 8003454:	2d2d2d2d 	.word	0x2d2d2d2d
 8003458:	2d2d2d2d 	.word	0x2d2d2d2d
 800345c:	2415      	.short	0x2415
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800345e:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 8003462:	b2db      	uxtb	r3, r3
 8003464:	2b03      	cmp	r3, #3
 8003466:	d003      	beq.n	8003470 <USBD_CDC_Setup+0xa0>
            USBD_CtlError(pdev, req);
 8003468:	f000 fac1 	bl	80039ee <USBD_CtlError>
            ret = USBD_FAIL;
 800346c:	2503      	movs	r5, #3
 800346e:	e024      	b.n	80034ba <USBD_CDC_Setup+0xea>
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 8003470:	2202      	movs	r2, #2
 8003472:	a901      	add	r1, sp, #4
 8003474:	f000 fde2 	bl	800403c <USBD_CtlSendData>
  USBD_StatusTypeDef ret = USBD_OK;
 8003478:	4635      	mov	r5, r6
 800347a:	e01e      	b.n	80034ba <USBD_CDC_Setup+0xea>
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800347c:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 8003480:	b2db      	uxtb	r3, r3
 8003482:	2b03      	cmp	r3, #3
 8003484:	d003      	beq.n	800348e <USBD_CDC_Setup+0xbe>
            USBD_CtlError(pdev, req);
 8003486:	f000 fab2 	bl	80039ee <USBD_CtlError>
            ret = USBD_FAIL;
 800348a:	2503      	movs	r5, #3
 800348c:	e015      	b.n	80034ba <USBD_CDC_Setup+0xea>
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 800348e:	2201      	movs	r2, #1
 8003490:	f10d 0107 	add.w	r1, sp, #7
 8003494:	f000 fdd2 	bl	800403c <USBD_CtlSendData>
 8003498:	e00f      	b.n	80034ba <USBD_CDC_Setup+0xea>
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 800349a:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 800349e:	b2db      	uxtb	r3, r3
 80034a0:	2b03      	cmp	r3, #3
 80034a2:	d00a      	beq.n	80034ba <USBD_CDC_Setup+0xea>
            USBD_CtlError(pdev, req);
 80034a4:	f000 faa3 	bl	80039ee <USBD_CtlError>
            ret = USBD_FAIL;
 80034a8:	2503      	movs	r5, #3
 80034aa:	e006      	b.n	80034ba <USBD_CDC_Setup+0xea>
          USBD_CtlError(pdev, req);
 80034ac:	f000 fa9f 	bl	80039ee <USBD_CtlError>
          ret = USBD_FAIL;
 80034b0:	2503      	movs	r5, #3
          break;
 80034b2:	e002      	b.n	80034ba <USBD_CDC_Setup+0xea>
      USBD_CtlError(pdev, req);
 80034b4:	f000 fa9b 	bl	80039ee <USBD_CtlError>
      ret = USBD_FAIL;
 80034b8:	2503      	movs	r5, #3
}
 80034ba:	4628      	mov	r0, r5
 80034bc:	b003      	add	sp, #12
 80034be:	bdf0      	pop	{r4, r5, r6, r7, pc}
    return (uint8_t)USBD_FAIL;
 80034c0:	2503      	movs	r5, #3
 80034c2:	e7fa      	b.n	80034ba <USBD_CDC_Setup+0xea>

080034c4 <USBD_CDC_DeInit>:
{
 80034c4:	b538      	push	{r3, r4, r5, lr}
 80034c6:	4604      	mov	r4, r0
  (void)USBD_LL_CloseEP(pdev, CDC_IN_EP);
 80034c8:	2181      	movs	r1, #129	; 0x81
 80034ca:	f002 fc6f 	bl	8005dac <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 80034ce:	2500      	movs	r5, #0
 80034d0:	8725      	strh	r5, [r4, #56]	; 0x38
  (void)USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 80034d2:	2101      	movs	r1, #1
 80034d4:	4620      	mov	r0, r4
 80034d6:	f002 fc69 	bl	8005dac <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 80034da:	f8a4 5178 	strh.w	r5, [r4, #376]	; 0x178
  (void)USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 80034de:	2182      	movs	r1, #130	; 0x82
 80034e0:	4620      	mov	r0, r4
 80034e2:	f002 fc63 	bl	8005dac <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 80034e6:	f8a4 504c 	strh.w	r5, [r4, #76]	; 0x4c
  pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = 0U;
 80034ea:	f8a4 504e 	strh.w	r5, [r4, #78]	; 0x4e
  if (pdev->pClassData != NULL)
 80034ee:	f8d4 32bc 	ldr.w	r3, [r4, #700]	; 0x2bc
 80034f2:	b14b      	cbz	r3, 8003508 <USBD_CDC_DeInit+0x44>
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 80034f4:	f8d4 32c0 	ldr.w	r3, [r4, #704]	; 0x2c0
 80034f8:	685b      	ldr	r3, [r3, #4]
 80034fa:	4798      	blx	r3
    (void)USBD_free(pdev->pClassData);
 80034fc:	f8d4 02bc 	ldr.w	r0, [r4, #700]	; 0x2bc
 8003500:	f002 fc36 	bl	8005d70 <USBD_static_free>
    pdev->pClassData = NULL;
 8003504:	f8c4 52bc 	str.w	r5, [r4, #700]	; 0x2bc
}
 8003508:	2000      	movs	r0, #0
 800350a:	bd38      	pop	{r3, r4, r5, pc}

0800350c <USBD_CDC_Init>:
{
 800350c:	b570      	push	{r4, r5, r6, lr}
 800350e:	4604      	mov	r4, r0
  hcdc = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 8003510:	f44f 7007 	mov.w	r0, #540	; 0x21c
 8003514:	f002 fc28 	bl	8005d68 <USBD_static_malloc>
  if (hcdc == NULL)
 8003518:	b3b8      	cbz	r0, 800358a <USBD_CDC_Init+0x7e>
 800351a:	4606      	mov	r6, r0
  pdev->pClassData = (void *)hcdc;
 800351c:	f8c4 02bc 	str.w	r0, [r4, #700]	; 0x2bc
  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8003520:	7c23      	ldrb	r3, [r4, #16]
 8003522:	bbbb      	cbnz	r3, 8003594 <USBD_CDC_Init+0x88>
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8003524:	f44f 7300 	mov.w	r3, #512	; 0x200
 8003528:	2202      	movs	r2, #2
 800352a:	2181      	movs	r1, #129	; 0x81
 800352c:	4620      	mov	r0, r4
 800352e:	f002 fc32 	bl	8005d96 <USBD_LL_OpenEP>
    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8003532:	2501      	movs	r5, #1
 8003534:	8725      	strh	r5, [r4, #56]	; 0x38
    (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8003536:	f44f 7300 	mov.w	r3, #512	; 0x200
 800353a:	2202      	movs	r2, #2
 800353c:	4629      	mov	r1, r5
 800353e:	4620      	mov	r0, r4
 8003540:	f002 fc29 	bl	8005d96 <USBD_LL_OpenEP>
    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8003544:	f8a4 5178 	strh.w	r5, [r4, #376]	; 0x178
    pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_HS_BINTERVAL;
 8003548:	2310      	movs	r3, #16
 800354a:	f8a4 304e 	strh.w	r3, [r4, #78]	; 0x4e
  (void)USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 800354e:	2308      	movs	r3, #8
 8003550:	2203      	movs	r2, #3
 8003552:	2182      	movs	r1, #130	; 0x82
 8003554:	4620      	mov	r0, r4
 8003556:	f002 fc1e 	bl	8005d96 <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 800355a:	2301      	movs	r3, #1
 800355c:	f8a4 304c 	strh.w	r3, [r4, #76]	; 0x4c
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 8003560:	f8d4 32c0 	ldr.w	r3, [r4, #704]	; 0x2c0
 8003564:	681b      	ldr	r3, [r3, #0]
 8003566:	4798      	blx	r3
  hcdc->TxState = 0U;
 8003568:	2300      	movs	r3, #0
 800356a:	f8c6 3214 	str.w	r3, [r6, #532]	; 0x214
  hcdc->RxState = 0U;
 800356e:	f8c6 3218 	str.w	r3, [r6, #536]	; 0x218
  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8003572:	7c25      	ldrb	r5, [r4, #16]
 8003574:	bb15      	cbnz	r5, 80035bc <USBD_CDC_Init+0xb0>
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8003576:	f44f 7300 	mov.w	r3, #512	; 0x200
 800357a:	f8d6 2204 	ldr.w	r2, [r6, #516]	; 0x204
 800357e:	2101      	movs	r1, #1
 8003580:	4620      	mov	r0, r4
 8003582:	f002 fc3b 	bl	8005dfc <USBD_LL_PrepareReceive>
}
 8003586:	4628      	mov	r0, r5
 8003588:	bd70      	pop	{r4, r5, r6, pc}
    pdev->pClassData = NULL;
 800358a:	2300      	movs	r3, #0
 800358c:	f8c4 32bc 	str.w	r3, [r4, #700]	; 0x2bc
    return (uint8_t)USBD_EMEM;
 8003590:	2502      	movs	r5, #2
 8003592:	e7f8      	b.n	8003586 <USBD_CDC_Init+0x7a>
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8003594:	2340      	movs	r3, #64	; 0x40
 8003596:	2202      	movs	r2, #2
 8003598:	2181      	movs	r1, #129	; 0x81
 800359a:	4620      	mov	r0, r4
 800359c:	f002 fbfb 	bl	8005d96 <USBD_LL_OpenEP>
    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 80035a0:	2501      	movs	r5, #1
 80035a2:	8725      	strh	r5, [r4, #56]	; 0x38
    (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 80035a4:	2340      	movs	r3, #64	; 0x40
 80035a6:	2202      	movs	r2, #2
 80035a8:	4629      	mov	r1, r5
 80035aa:	4620      	mov	r0, r4
 80035ac:	f002 fbf3 	bl	8005d96 <USBD_LL_OpenEP>
    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 80035b0:	f8a4 5178 	strh.w	r5, [r4, #376]	; 0x178
    pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_FS_BINTERVAL;
 80035b4:	2310      	movs	r3, #16
 80035b6:	f8a4 304e 	strh.w	r3, [r4, #78]	; 0x4e
 80035ba:	e7c8      	b.n	800354e <USBD_CDC_Init+0x42>
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 80035bc:	2340      	movs	r3, #64	; 0x40
 80035be:	f8d6 2204 	ldr.w	r2, [r6, #516]	; 0x204
 80035c2:	2101      	movs	r1, #1
 80035c4:	4620      	mov	r0, r4
 80035c6:	f002 fc19 	bl	8005dfc <USBD_LL_PrepareReceive>
  return (uint8_t)USBD_OK;
 80035ca:	2500      	movs	r5, #0
 80035cc:	e7db      	b.n	8003586 <USBD_CDC_Init+0x7a>

080035ce <USBD_CDC_RegisterInterface>:
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
  if (fops == NULL)
 80035ce:	b119      	cbz	r1, 80035d8 <USBD_CDC_RegisterInterface+0xa>
  {
    return (uint8_t)USBD_FAIL;
  }

  pdev->pUserData = fops;
 80035d0:	f8c0 12c0 	str.w	r1, [r0, #704]	; 0x2c0

  return (uint8_t)USBD_OK;
 80035d4:	2000      	movs	r0, #0
 80035d6:	4770      	bx	lr
    return (uint8_t)USBD_FAIL;
 80035d8:	2003      	movs	r0, #3
}
 80035da:	4770      	bx	lr

080035dc <USBD_CDC_SetTxBuffer>:
  * @retval status
  */
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 80035dc:	f8d0 32bc 	ldr.w	r3, [r0, #700]	; 0x2bc

  if (hcdc == NULL)
 80035e0:	b12b      	cbz	r3, 80035ee <USBD_CDC_SetTxBuffer+0x12>
  {
    return (uint8_t)USBD_FAIL;
  }

  hcdc->TxBuffer = pbuff;
 80035e2:	f8c3 1208 	str.w	r1, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 80035e6:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return (uint8_t)USBD_OK;
 80035ea:	2000      	movs	r0, #0
 80035ec:	4770      	bx	lr
    return (uint8_t)USBD_FAIL;
 80035ee:	2003      	movs	r0, #3
}
 80035f0:	4770      	bx	lr

080035f2 <USBD_CDC_SetRxBuffer>:
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 80035f2:	f8d0 32bc 	ldr.w	r3, [r0, #700]	; 0x2bc

  if (hcdc == NULL)
 80035f6:	b11b      	cbz	r3, 8003600 <USBD_CDC_SetRxBuffer+0xe>
  {
    return (uint8_t)USBD_FAIL;
  }

  hcdc->RxBuffer = pbuff;
 80035f8:	f8c3 1204 	str.w	r1, [r3, #516]	; 0x204

  return (uint8_t)USBD_OK;
 80035fc:	2000      	movs	r0, #0
 80035fe:	4770      	bx	lr
    return (uint8_t)USBD_FAIL;
 8003600:	2003      	movs	r0, #3
}
 8003602:	4770      	bx	lr

08003604 <USBD_CDC_TransmitPacket>:
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8003604:	f8d0 22bc 	ldr.w	r2, [r0, #700]	; 0x2bc
  USBD_StatusTypeDef ret = USBD_BUSY;

  if (pdev->pClassData == NULL)
 8003608:	b1a2      	cbz	r2, 8003634 <USBD_CDC_TransmitPacket+0x30>
{
 800360a:	b508      	push	{r3, lr}
  {
    return (uint8_t)USBD_FAIL;
  }

  if (hcdc->TxState == 0U)
 800360c:	f8d2 3214 	ldr.w	r3, [r2, #532]	; 0x214
 8003610:	b10b      	cbz	r3, 8003616 <USBD_CDC_TransmitPacket+0x12>
  USBD_StatusTypeDef ret = USBD_BUSY;
 8003612:	2001      	movs	r0, #1

    ret = USBD_OK;
  }

  return (uint8_t)ret;
}
 8003614:	bd08      	pop	{r3, pc}
    hcdc->TxState = 1U;
 8003616:	2301      	movs	r3, #1
 8003618:	f8c2 3214 	str.w	r3, [r2, #532]	; 0x214
    pdev->ep_in[CDC_IN_EP & 0xFU].total_length = hcdc->TxLength;
 800361c:	f8d2 3210 	ldr.w	r3, [r2, #528]	; 0x210
 8003620:	62c3      	str	r3, [r0, #44]	; 0x2c
    (void)USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer, hcdc->TxLength);
 8003622:	f8d2 3210 	ldr.w	r3, [r2, #528]	; 0x210
 8003626:	f8d2 2208 	ldr.w	r2, [r2, #520]	; 0x208
 800362a:	2181      	movs	r1, #129	; 0x81
 800362c:	f002 fbde 	bl	8005dec <USBD_LL_Transmit>
    ret = USBD_OK;
 8003630:	2000      	movs	r0, #0
 8003632:	e7ef      	b.n	8003614 <USBD_CDC_TransmitPacket+0x10>
    return (uint8_t)USBD_FAIL;
 8003634:	2003      	movs	r0, #3
}
 8003636:	4770      	bx	lr

08003638 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 8003638:	b510      	push	{r4, lr}
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800363a:	f8d0 22bc 	ldr.w	r2, [r0, #700]	; 0x2bc

  if (pdev->pClassData == NULL)
 800363e:	b192      	cbz	r2, 8003666 <USBD_CDC_ReceivePacket+0x2e>
  {
    return (uint8_t)USBD_FAIL;
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8003640:	7c04      	ldrb	r4, [r0, #16]
 8003642:	b944      	cbnz	r4, 8003656 <USBD_CDC_ReceivePacket+0x1e>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8003644:	f44f 7300 	mov.w	r3, #512	; 0x200
 8003648:	f8d2 2204 	ldr.w	r2, [r2, #516]	; 0x204
 800364c:	2101      	movs	r1, #1
 800364e:	f002 fbd5 	bl	8005dfc <USBD_LL_PrepareReceive>
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
}
 8003652:	4620      	mov	r0, r4
 8003654:	bd10      	pop	{r4, pc}
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8003656:	2340      	movs	r3, #64	; 0x40
 8003658:	f8d2 2204 	ldr.w	r2, [r2, #516]	; 0x204
 800365c:	2101      	movs	r1, #1
 800365e:	f002 fbcd 	bl	8005dfc <USBD_LL_PrepareReceive>
  return (uint8_t)USBD_OK;
 8003662:	2400      	movs	r4, #0
 8003664:	e7f5      	b.n	8003652 <USBD_CDC_ReceivePacket+0x1a>
    return (uint8_t)USBD_FAIL;
 8003666:	2403      	movs	r4, #3
 8003668:	e7f3      	b.n	8003652 <USBD_CDC_ReceivePacket+0x1a>

0800366a <USBD_Init>:
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 800366a:	b198      	cbz	r0, 8003694 <USBD_Init+0x2a>
{
 800366c:	b508      	push	{r3, lr}
 800366e:	4603      	mov	r3, r0
#endif
    return USBD_FAIL;
  }

  /* Unlink previous class resources */
  pdev->pClass = NULL;
 8003670:	2000      	movs	r0, #0
 8003672:	f8c3 02b8 	str.w	r0, [r3, #696]	; 0x2b8
  pdev->pUserData = NULL;
 8003676:	f8c3 02c0 	str.w	r0, [r3, #704]	; 0x2c0
  pdev->pConfDesc = NULL;
 800367a:	f8c3 02cc 	str.w	r0, [r3, #716]	; 0x2cc

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 800367e:	b109      	cbz	r1, 8003684 <USBD_Init+0x1a>
  {
    pdev->pDesc = pdesc;
 8003680:	f8c3 12b4 	str.w	r1, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8003684:	2101      	movs	r1, #1
 8003686:	f883 129c 	strb.w	r1, [r3, #668]	; 0x29c
  pdev->id = id;
 800368a:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 800368c:	4618      	mov	r0, r3
 800368e:	f002 fb19 	bl	8005cc4 <USBD_LL_Init>

  return ret;
}
 8003692:	bd08      	pop	{r3, pc}
    return USBD_FAIL;
 8003694:	2003      	movs	r0, #3
}
 8003696:	4770      	bx	lr

08003698 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8003698:	b510      	push	{r4, lr}
 800369a:	b082      	sub	sp, #8
  uint16_t len = 0U;
 800369c:	2300      	movs	r3, #0
 800369e:	f8ad 3006 	strh.w	r3, [sp, #6]

  if (pclass == NULL)
 80036a2:	b161      	cbz	r1, 80036be <USBD_RegisterClass+0x26>
 80036a4:	4604      	mov	r4, r0
#endif
    return USBD_FAIL;
  }

  /* link the class to the USB Device handle */
  pdev->pClass = pclass;
 80036a6:	f8c0 12b8 	str.w	r1, [r0, #696]	; 0x2b8
  if (pdev->pClass->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass->GetFSConfigDescriptor != NULL)
 80036aa:	6acb      	ldr	r3, [r1, #44]	; 0x2c
 80036ac:	b14b      	cbz	r3, 80036c2 <USBD_RegisterClass+0x2a>
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetFSConfigDescriptor(&len);
 80036ae:	f10d 0006 	add.w	r0, sp, #6
 80036b2:	4798      	blx	r3
 80036b4:	f8c4 02cc 	str.w	r0, [r4, #716]	; 0x2cc
  }
#endif /* USE_USB_FS */

  return USBD_OK;
 80036b8:	2000      	movs	r0, #0
}
 80036ba:	b002      	add	sp, #8
 80036bc:	bd10      	pop	{r4, pc}
    return USBD_FAIL;
 80036be:	2003      	movs	r0, #3
 80036c0:	e7fb      	b.n	80036ba <USBD_RegisterClass+0x22>
  return USBD_OK;
 80036c2:	2000      	movs	r0, #0
 80036c4:	e7f9      	b.n	80036ba <USBD_RegisterClass+0x22>

080036c6 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 80036c6:	b508      	push	{r3, lr}
  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 80036c8:	f002 fb5d 	bl	8005d86 <USBD_LL_Start>
}
 80036cc:	bd08      	pop	{r3, pc}

080036ce <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80036ce:	b508      	push	{r3, lr}
  USBD_StatusTypeDef ret = USBD_FAIL;

  if (pdev->pClass != NULL)
 80036d0:	f8d0 32b8 	ldr.w	r3, [r0, #696]	; 0x2b8
 80036d4:	b113      	cbz	r3, 80036dc <USBD_SetClassConfig+0xe>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass->Init(pdev, cfgidx);
 80036d6:	681b      	ldr	r3, [r3, #0]
 80036d8:	4798      	blx	r3
  }

  return ret;
}
 80036da:	bd08      	pop	{r3, pc}
  USBD_StatusTypeDef ret = USBD_FAIL;
 80036dc:	2003      	movs	r0, #3
 80036de:	e7fc      	b.n	80036da <USBD_SetClassConfig+0xc>

080036e0 <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80036e0:	b508      	push	{r3, lr}
  /* Clear configuration and De-initialize the Class process */
  if (pdev->pClass != NULL)
 80036e2:	f8d0 32b8 	ldr.w	r3, [r0, #696]	; 0x2b8
 80036e6:	b10b      	cbz	r3, 80036ec <USBD_ClrClassConfig+0xc>
  {
    pdev->pClass->DeInit(pdev, cfgidx);
 80036e8:	685b      	ldr	r3, [r3, #4]
 80036ea:	4798      	blx	r3
  }

  return USBD_OK;
}
 80036ec:	2000      	movs	r0, #0
 80036ee:	bd08      	pop	{r3, pc}

080036f0 <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 80036f0:	b538      	push	{r3, r4, r5, lr}
 80036f2:	4604      	mov	r4, r0
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 80036f4:	f200 25aa 	addw	r5, r0, #682	; 0x2aa
 80036f8:	4628      	mov	r0, r5
 80036fa:	f000 f964 	bl	80039c6 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 80036fe:	2301      	movs	r3, #1
 8003700:	f8c4 3294 	str.w	r3, [r4, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 8003704:	f8b4 32b0 	ldrh.w	r3, [r4, #688]	; 0x2b0
 8003708:	f8c4 3298 	str.w	r3, [r4, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 800370c:	f894 12aa 	ldrb.w	r1, [r4, #682]	; 0x2aa
 8003710:	f001 031f 	and.w	r3, r1, #31
 8003714:	2b01      	cmp	r3, #1
 8003716:	d00d      	beq.n	8003734 <USBD_LL_SetupStage+0x44>
 8003718:	2b02      	cmp	r3, #2
 800371a:	d010      	beq.n	800373e <USBD_LL_SetupStage+0x4e>
 800371c:	b12b      	cbz	r3, 800372a <USBD_LL_SetupStage+0x3a>
    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
      break;

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 800371e:	f001 0180 	and.w	r1, r1, #128	; 0x80
 8003722:	4620      	mov	r0, r4
 8003724:	f002 fb4a 	bl	8005dbc <USBD_LL_StallEP>
      break;
 8003728:	e003      	b.n	8003732 <USBD_LL_SetupStage+0x42>
      ret = USBD_StdDevReq(pdev, &pdev->request);
 800372a:	4629      	mov	r1, r5
 800372c:	4620      	mov	r0, r4
 800372e:	f000 fb08 	bl	8003d42 <USBD_StdDevReq>
  }

  return ret;
}
 8003732:	bd38      	pop	{r3, r4, r5, pc}
      ret = USBD_StdItfReq(pdev, &pdev->request);
 8003734:	4629      	mov	r1, r5
 8003736:	4620      	mov	r0, r4
 8003738:	f000 fb3b 	bl	8003db2 <USBD_StdItfReq>
      break;
 800373c:	e7f9      	b.n	8003732 <USBD_LL_SetupStage+0x42>
      ret = USBD_StdEPReq(pdev, &pdev->request);
 800373e:	4629      	mov	r1, r5
 8003740:	4620      	mov	r0, r4
 8003742:	f000 fb6a 	bl	8003e1a <USBD_StdEPReq>
      break;
 8003746:	e7f4      	b.n	8003732 <USBD_LL_SetupStage+0x42>

08003748 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8003748:	b538      	push	{r3, r4, r5, lr}
 800374a:	4604      	mov	r4, r0
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 800374c:	460d      	mov	r5, r1
 800374e:	bb41      	cbnz	r1, 80037a2 <USBD_LL_DataOutStage+0x5a>
 8003750:	4613      	mov	r3, r2
  {
    pep = &pdev->ep_out[0];

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8003752:	f8d0 2294 	ldr.w	r2, [r0, #660]	; 0x294
 8003756:	2a03      	cmp	r2, #3
 8003758:	d001      	beq.n	800375e <USBD_LL_DataOutStage+0x16>
        }
      }
    }
  }

  return USBD_OK;
 800375a:	4608      	mov	r0, r1
}
 800375c:	bd38      	pop	{r3, r4, r5, pc}
      if (pep->rem_length > pep->maxpacket)
 800375e:	f8d0 115c 	ldr.w	r1, [r0, #348]	; 0x15c
 8003762:	f8d0 2160 	ldr.w	r2, [r0, #352]	; 0x160
 8003766:	4291      	cmp	r1, r2
 8003768:	d809      	bhi.n	800377e <USBD_LL_DataOutStage+0x36>
        if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800376a:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 800376e:	b2db      	uxtb	r3, r3
 8003770:	2b03      	cmp	r3, #3
 8003772:	d00f      	beq.n	8003794 <USBD_LL_DataOutStage+0x4c>
        (void)USBD_CtlSendStatus(pdev);
 8003774:	4620      	mov	r0, r4
 8003776:	f000 fc8d 	bl	8004094 <USBD_CtlSendStatus>
  return USBD_OK;
 800377a:	4628      	mov	r0, r5
 800377c:	e7ee      	b.n	800375c <USBD_LL_DataOutStage+0x14>
        pep->rem_length -= pep->maxpacket;
 800377e:	1a89      	subs	r1, r1, r2
 8003780:	f8c0 115c 	str.w	r1, [r0, #348]	; 0x15c
        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 8003784:	428a      	cmp	r2, r1
 8003786:	bf28      	it	cs
 8003788:	460a      	movcs	r2, r1
 800378a:	4619      	mov	r1, r3
 800378c:	f000 fc7a 	bl	8004084 <USBD_CtlContinueRx>
  return USBD_OK;
 8003790:	4628      	mov	r0, r5
 8003792:	e7e3      	b.n	800375c <USBD_LL_DataOutStage+0x14>
          if (pdev->pClass->EP0_RxReady != NULL)
 8003794:	f8d0 32b8 	ldr.w	r3, [r0, #696]	; 0x2b8
 8003798:	691b      	ldr	r3, [r3, #16]
 800379a:	2b00      	cmp	r3, #0
 800379c:	d0ea      	beq.n	8003774 <USBD_LL_DataOutStage+0x2c>
            pdev->pClass->EP0_RxReady(pdev);
 800379e:	4798      	blx	r3
 80037a0:	e7e8      	b.n	8003774 <USBD_LL_DataOutStage+0x2c>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80037a2:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 80037a6:	b2db      	uxtb	r3, r3
 80037a8:	2b03      	cmp	r3, #3
 80037aa:	d001      	beq.n	80037b0 <USBD_LL_DataOutStage+0x68>
  return USBD_OK;
 80037ac:	2000      	movs	r0, #0
 80037ae:	e7d5      	b.n	800375c <USBD_LL_DataOutStage+0x14>
      if (pdev->pClass->DataOut != NULL)
 80037b0:	f8d0 32b8 	ldr.w	r3, [r0, #696]	; 0x2b8
 80037b4:	699b      	ldr	r3, [r3, #24]
 80037b6:	b10b      	cbz	r3, 80037bc <USBD_LL_DataOutStage+0x74>
        ret = (USBD_StatusTypeDef)pdev->pClass->DataOut(pdev, epnum);
 80037b8:	4798      	blx	r3
        if (ret != USBD_OK)
 80037ba:	e7cf      	b.n	800375c <USBD_LL_DataOutStage+0x14>
  return USBD_OK;
 80037bc:	2000      	movs	r0, #0
 80037be:	e7cd      	b.n	800375c <USBD_LL_DataOutStage+0x14>

080037c0 <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 80037c0:	b538      	push	{r3, r4, r5, lr}
 80037c2:	4604      	mov	r4, r0
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 80037c4:	460d      	mov	r5, r1
 80037c6:	2900      	cmp	r1, #0
 80037c8:	d14a      	bne.n	8003860 <USBD_LL_DataInStage+0xa0>
 80037ca:	4613      	mov	r3, r2
  {
    pep = &pdev->ep_in[0];

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 80037cc:	f8d0 2294 	ldr.w	r2, [r0, #660]	; 0x294
 80037d0:	2a02      	cmp	r2, #2
 80037d2:	d005      	beq.n	80037e0 <USBD_LL_DataInStage+0x20>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode == 1U)
 80037d4:	f894 32a0 	ldrb.w	r3, [r4, #672]	; 0x2a0
 80037d8:	2b01      	cmp	r3, #1
 80037da:	d03c      	beq.n	8003856 <USBD_LL_DataInStage+0x96>
        }
      }
    }
  }

  return USBD_OK;
 80037dc:	4628      	mov	r0, r5
}
 80037de:	bd38      	pop	{r3, r4, r5, pc}
      if (pep->rem_length > pep->maxpacket)
 80037e0:	69c2      	ldr	r2, [r0, #28]
 80037e2:	6a01      	ldr	r1, [r0, #32]
 80037e4:	428a      	cmp	r2, r1
 80037e6:	d80e      	bhi.n	8003806 <USBD_LL_DataInStage+0x46>
        if ((pep->maxpacket == pep->rem_length) &&
 80037e8:	428a      	cmp	r2, r1
 80037ea:	d018      	beq.n	800381e <USBD_LL_DataInStage+0x5e>
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80037ec:	f894 329c 	ldrb.w	r3, [r4, #668]	; 0x29c
 80037f0:	b2db      	uxtb	r3, r3
 80037f2:	2b03      	cmp	r3, #3
 80037f4:	d027      	beq.n	8003846 <USBD_LL_DataInStage+0x86>
          (void)USBD_LL_StallEP(pdev, 0x80U);
 80037f6:	2180      	movs	r1, #128	; 0x80
 80037f8:	4620      	mov	r0, r4
 80037fa:	f002 fadf 	bl	8005dbc <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 80037fe:	4620      	mov	r0, r4
 8003800:	f000 fc53 	bl	80040aa <USBD_CtlReceiveStatus>
 8003804:	e7e6      	b.n	80037d4 <USBD_LL_DataInStage+0x14>
        pep->rem_length -= pep->maxpacket;
 8003806:	1a52      	subs	r2, r2, r1
 8003808:	61c2      	str	r2, [r0, #28]
        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 800380a:	4619      	mov	r1, r3
 800380c:	f000 fc23 	bl	8004056 <USBD_CtlContinueSendData>
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8003810:	2300      	movs	r3, #0
 8003812:	461a      	mov	r2, r3
 8003814:	4619      	mov	r1, r3
 8003816:	4620      	mov	r0, r4
 8003818:	f002 faf0 	bl	8005dfc <USBD_LL_PrepareReceive>
 800381c:	e7da      	b.n	80037d4 <USBD_LL_DataInStage+0x14>
            (pep->total_length >= pep->maxpacket) &&
 800381e:	6983      	ldr	r3, [r0, #24]
        if ((pep->maxpacket == pep->rem_length) &&
 8003820:	4299      	cmp	r1, r3
 8003822:	d8e3      	bhi.n	80037ec <USBD_LL_DataInStage+0x2c>
            (pep->total_length < pdev->ep0_data_len))
 8003824:	f8d0 2298 	ldr.w	r2, [r0, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 8003828:	4293      	cmp	r3, r2
 800382a:	d2df      	bcs.n	80037ec <USBD_LL_DataInStage+0x2c>
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 800382c:	2200      	movs	r2, #0
 800382e:	4611      	mov	r1, r2
 8003830:	f000 fc11 	bl	8004056 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8003834:	2100      	movs	r1, #0
 8003836:	f8c4 1298 	str.w	r1, [r4, #664]	; 0x298
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800383a:	460b      	mov	r3, r1
 800383c:	460a      	mov	r2, r1
 800383e:	4620      	mov	r0, r4
 8003840:	f002 fadc 	bl	8005dfc <USBD_LL_PrepareReceive>
 8003844:	e7c6      	b.n	80037d4 <USBD_LL_DataInStage+0x14>
            if (pdev->pClass->EP0_TxSent != NULL)
 8003846:	f8d4 32b8 	ldr.w	r3, [r4, #696]	; 0x2b8
 800384a:	68db      	ldr	r3, [r3, #12]
 800384c:	2b00      	cmp	r3, #0
 800384e:	d0d2      	beq.n	80037f6 <USBD_LL_DataInStage+0x36>
              pdev->pClass->EP0_TxSent(pdev);
 8003850:	4620      	mov	r0, r4
 8003852:	4798      	blx	r3
 8003854:	e7cf      	b.n	80037f6 <USBD_LL_DataInStage+0x36>
      pdev->dev_test_mode = 0U;
 8003856:	2300      	movs	r3, #0
 8003858:	f884 32a0 	strb.w	r3, [r4, #672]	; 0x2a0
  return USBD_OK;
 800385c:	4628      	mov	r0, r5
 800385e:	e7be      	b.n	80037de <USBD_LL_DataInStage+0x1e>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8003860:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 8003864:	b2db      	uxtb	r3, r3
 8003866:	2b03      	cmp	r3, #3
 8003868:	d001      	beq.n	800386e <USBD_LL_DataInStage+0xae>
  return USBD_OK;
 800386a:	2000      	movs	r0, #0
 800386c:	e7b7      	b.n	80037de <USBD_LL_DataInStage+0x1e>
      if (pdev->pClass->DataIn != NULL)
 800386e:	f8d0 32b8 	ldr.w	r3, [r0, #696]	; 0x2b8
 8003872:	695b      	ldr	r3, [r3, #20]
 8003874:	b10b      	cbz	r3, 800387a <USBD_LL_DataInStage+0xba>
        ret = (USBD_StatusTypeDef)pdev->pClass->DataIn(pdev, epnum);
 8003876:	4798      	blx	r3
        if (ret != USBD_OK)
 8003878:	e7b1      	b.n	80037de <USBD_LL_DataInStage+0x1e>
  return USBD_OK;
 800387a:	2000      	movs	r0, #0
 800387c:	e7af      	b.n	80037de <USBD_LL_DataInStage+0x1e>

0800387e <USBD_LL_Reset>:
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800387e:	2301      	movs	r3, #1
 8003880:	f880 329c 	strb.w	r3, [r0, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8003884:	2300      	movs	r3, #0
 8003886:	f8c0 3294 	str.w	r3, [r0, #660]	; 0x294
  pdev->dev_config = 0U;
 800388a:	6043      	str	r3, [r0, #4]
  pdev->dev_remote_wakeup = 0U;
 800388c:	f8c0 32a4 	str.w	r3, [r0, #676]	; 0x2a4

  if (pdev->pClass == NULL)
 8003890:	f8d0 32b8 	ldr.w	r3, [r0, #696]	; 0x2b8
 8003894:	b1f3      	cbz	r3, 80038d4 <USBD_LL_Reset+0x56>
{
 8003896:	b570      	push	{r4, r5, r6, lr}
 8003898:	4604      	mov	r4, r0
  {
    return USBD_FAIL;
  }

  if (pdev->pClassData != NULL)
 800389a:	f8d0 22bc 	ldr.w	r2, [r0, #700]	; 0x2bc
 800389e:	b11a      	cbz	r2, 80038a8 <USBD_LL_Reset+0x2a>
  {
    if (pdev->pClass->DeInit != NULL)
 80038a0:	685b      	ldr	r3, [r3, #4]
 80038a2:	b10b      	cbz	r3, 80038a8 <USBD_LL_Reset+0x2a>
    {
      (void)pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 80038a4:	2100      	movs	r1, #0
 80038a6:	4798      	blx	r3
    }
  }

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 80038a8:	2340      	movs	r3, #64	; 0x40
 80038aa:	2200      	movs	r2, #0
 80038ac:	4611      	mov	r1, r2
 80038ae:	4620      	mov	r0, r4
 80038b0:	f002 fa71 	bl	8005d96 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 80038b4:	2601      	movs	r6, #1
 80038b6:	f8a4 6164 	strh.w	r6, [r4, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 80038ba:	2540      	movs	r5, #64	; 0x40
 80038bc:	f8c4 5160 	str.w	r5, [r4, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 80038c0:	462b      	mov	r3, r5
 80038c2:	2200      	movs	r2, #0
 80038c4:	2180      	movs	r1, #128	; 0x80
 80038c6:	4620      	mov	r0, r4
 80038c8:	f002 fa65 	bl	8005d96 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 80038cc:	84a6      	strh	r6, [r4, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 80038ce:	6225      	str	r5, [r4, #32]

  return USBD_OK;
 80038d0:	2000      	movs	r0, #0
}
 80038d2:	bd70      	pop	{r4, r5, r6, pc}
    return USBD_FAIL;
 80038d4:	2003      	movs	r0, #3
}
 80038d6:	4770      	bx	lr

080038d8 <USBD_LL_SetSpeed>:
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
  pdev->dev_speed = speed;
 80038d8:	7401      	strb	r1, [r0, #16]

  return USBD_OK;
}
 80038da:	2000      	movs	r0, #0
 80038dc:	4770      	bx	lr

080038de <USBD_LL_Suspend>:
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
  pdev->dev_old_state = pdev->dev_state;
 80038de:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 80038e2:	b2db      	uxtb	r3, r3
 80038e4:	f880 329d 	strb.w	r3, [r0, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 80038e8:	2304      	movs	r3, #4
 80038ea:	f880 329c 	strb.w	r3, [r0, #668]	; 0x29c

  return USBD_OK;
}
 80038ee:	2000      	movs	r0, #0
 80038f0:	4770      	bx	lr

080038f2 <USBD_LL_Resume>:
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 80038f2:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 80038f6:	b2db      	uxtb	r3, r3
 80038f8:	2b04      	cmp	r3, #4
 80038fa:	d001      	beq.n	8003900 <USBD_LL_Resume+0xe>
  {
    pdev->dev_state = pdev->dev_old_state;
  }

  return USBD_OK;
}
 80038fc:	2000      	movs	r0, #0
 80038fe:	4770      	bx	lr
    pdev->dev_state = pdev->dev_old_state;
 8003900:	f890 329d 	ldrb.w	r3, [r0, #669]	; 0x29d
 8003904:	b2db      	uxtb	r3, r3
 8003906:	f880 329c 	strb.w	r3, [r0, #668]	; 0x29c
 800390a:	e7f7      	b.n	80038fc <USBD_LL_Resume+0xa>

0800390c <USBD_LL_SOF>:
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
  if (pdev->pClass == NULL)
 800390c:	f8d0 22b8 	ldr.w	r2, [r0, #696]	; 0x2b8
 8003910:	b162      	cbz	r2, 800392c <USBD_LL_SOF+0x20>
{
 8003912:	b508      	push	{r3, lr}
  {
    return USBD_FAIL;
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8003914:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 8003918:	b2db      	uxtb	r3, r3
 800391a:	2b03      	cmp	r3, #3
 800391c:	d001      	beq.n	8003922 <USBD_LL_SOF+0x16>
    {
      (void)pdev->pClass->SOF(pdev);
    }
  }

  return USBD_OK;
 800391e:	2000      	movs	r0, #0
}
 8003920:	bd08      	pop	{r3, pc}
    if (pdev->pClass->SOF != NULL)
 8003922:	69d3      	ldr	r3, [r2, #28]
 8003924:	b123      	cbz	r3, 8003930 <USBD_LL_SOF+0x24>
      (void)pdev->pClass->SOF(pdev);
 8003926:	4798      	blx	r3
  return USBD_OK;
 8003928:	2000      	movs	r0, #0
 800392a:	e7f9      	b.n	8003920 <USBD_LL_SOF+0x14>
    return USBD_FAIL;
 800392c:	2003      	movs	r0, #3
}
 800392e:	4770      	bx	lr
  return USBD_OK;
 8003930:	2000      	movs	r0, #0
 8003932:	e7f5      	b.n	8003920 <USBD_LL_SOF+0x14>

08003934 <USBD_LL_IsoINIncomplete>:
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
  if (pdev->pClass == NULL)
 8003934:	f8d0 22b8 	ldr.w	r2, [r0, #696]	; 0x2b8
 8003938:	b162      	cbz	r2, 8003954 <USBD_LL_IsoINIncomplete+0x20>
{
 800393a:	b508      	push	{r3, lr}
  {
    return USBD_FAIL;
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800393c:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 8003940:	b2db      	uxtb	r3, r3
 8003942:	2b03      	cmp	r3, #3
 8003944:	d001      	beq.n	800394a <USBD_LL_IsoINIncomplete+0x16>
    {
      (void)pdev->pClass->IsoINIncomplete(pdev, epnum);
    }
  }

  return USBD_OK;
 8003946:	2000      	movs	r0, #0
}
 8003948:	bd08      	pop	{r3, pc}
    if (pdev->pClass->IsoINIncomplete != NULL)
 800394a:	6a13      	ldr	r3, [r2, #32]
 800394c:	b123      	cbz	r3, 8003958 <USBD_LL_IsoINIncomplete+0x24>
      (void)pdev->pClass->IsoINIncomplete(pdev, epnum);
 800394e:	4798      	blx	r3
  return USBD_OK;
 8003950:	2000      	movs	r0, #0
 8003952:	e7f9      	b.n	8003948 <USBD_LL_IsoINIncomplete+0x14>
    return USBD_FAIL;
 8003954:	2003      	movs	r0, #3
}
 8003956:	4770      	bx	lr
  return USBD_OK;
 8003958:	2000      	movs	r0, #0
 800395a:	e7f5      	b.n	8003948 <USBD_LL_IsoINIncomplete+0x14>

0800395c <USBD_LL_IsoOUTIncomplete>:
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
  if (pdev->pClass == NULL)
 800395c:	f8d0 22b8 	ldr.w	r2, [r0, #696]	; 0x2b8
 8003960:	b162      	cbz	r2, 800397c <USBD_LL_IsoOUTIncomplete+0x20>
{
 8003962:	b508      	push	{r3, lr}
  {
    return USBD_FAIL;
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8003964:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 8003968:	b2db      	uxtb	r3, r3
 800396a:	2b03      	cmp	r3, #3
 800396c:	d001      	beq.n	8003972 <USBD_LL_IsoOUTIncomplete+0x16>
    {
      (void)pdev->pClass->IsoOUTIncomplete(pdev, epnum);
    }
  }

  return USBD_OK;
 800396e:	2000      	movs	r0, #0
}
 8003970:	bd08      	pop	{r3, pc}
    if (pdev->pClass->IsoOUTIncomplete != NULL)
 8003972:	6a53      	ldr	r3, [r2, #36]	; 0x24
 8003974:	b123      	cbz	r3, 8003980 <USBD_LL_IsoOUTIncomplete+0x24>
      (void)pdev->pClass->IsoOUTIncomplete(pdev, epnum);
 8003976:	4798      	blx	r3
  return USBD_OK;
 8003978:	2000      	movs	r0, #0
 800397a:	e7f9      	b.n	8003970 <USBD_LL_IsoOUTIncomplete+0x14>
    return USBD_FAIL;
 800397c:	2003      	movs	r0, #3
}
 800397e:	4770      	bx	lr
  return USBD_OK;
 8003980:	2000      	movs	r0, #0
 8003982:	e7f5      	b.n	8003970 <USBD_LL_IsoOUTIncomplete+0x14>

08003984 <USBD_LL_DevConnected>:
{
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
}
 8003984:	2000      	movs	r0, #0
 8003986:	4770      	bx	lr

08003988 <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 8003988:	b508      	push	{r3, lr}
  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800398a:	2301      	movs	r3, #1
 800398c:	f880 329c 	strb.w	r3, [r0, #668]	; 0x29c

  if (pdev->pClass != NULL)
 8003990:	f8d0 32b8 	ldr.w	r3, [r0, #696]	; 0x2b8
 8003994:	b113      	cbz	r3, 800399c <USBD_LL_DevDisconnected+0x14>
  {
    (void)pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 8003996:	685b      	ldr	r3, [r3, #4]
 8003998:	7901      	ldrb	r1, [r0, #4]
 800399a:	4798      	blx	r3
  }

  return USBD_OK;
}
 800399c:	2000      	movs	r0, #0
 800399e:	bd08      	pop	{r3, pc}

080039a0 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 80039a0:	4603      	mov	r3, r0
  uint8_t  len = 0U;
 80039a2:	2000      	movs	r0, #0
  uint8_t *pbuff = buf;

  while (*pbuff != (uint8_t)'\0')
 80039a4:	781a      	ldrb	r2, [r3, #0]
 80039a6:	b11a      	cbz	r2, 80039b0 <USBD_GetLen+0x10>
  {
    len++;
 80039a8:	3001      	adds	r0, #1
 80039aa:	b2c0      	uxtb	r0, r0
    pbuff++;
 80039ac:	3301      	adds	r3, #1
 80039ae:	e7f9      	b.n	80039a4 <USBD_GetLen+0x4>
  }

  return len;
}
 80039b0:	4770      	bx	lr

080039b2 <USBD_SetFeature>:
{
 80039b2:	b508      	push	{r3, lr}
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 80039b4:	884b      	ldrh	r3, [r1, #2]
 80039b6:	2b01      	cmp	r3, #1
 80039b8:	d000      	beq.n	80039bc <USBD_SetFeature+0xa>
}
 80039ba:	bd08      	pop	{r3, pc}
    pdev->dev_remote_wakeup = 1U;
 80039bc:	f8c0 32a4 	str.w	r3, [r0, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 80039c0:	f000 fb68 	bl	8004094 <USBD_CtlSendStatus>
}
 80039c4:	e7f9      	b.n	80039ba <USBD_SetFeature+0x8>

080039c6 <USBD_ParseSetupRequest>:
  req->bmRequest = *(uint8_t *)(pbuff);
 80039c6:	780b      	ldrb	r3, [r1, #0]
 80039c8:	7003      	strb	r3, [r0, #0]
  req->bRequest = *(uint8_t *)(pbuff);
 80039ca:	784b      	ldrb	r3, [r1, #1]
 80039cc:	7043      	strb	r3, [r0, #1]
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;

  _Byte1 = *(uint8_t *)_pbuff;
 80039ce:	788b      	ldrb	r3, [r1, #2]
  _pbuff++;
  _Byte2 = *(uint8_t *)_pbuff;
 80039d0:	78ca      	ldrb	r2, [r1, #3]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 80039d2:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
  req->wValue = SWAPBYTE(pbuff);
 80039d6:	8043      	strh	r3, [r0, #2]
  _Byte1 = *(uint8_t *)_pbuff;
 80039d8:	790b      	ldrb	r3, [r1, #4]
  _Byte2 = *(uint8_t *)_pbuff;
 80039da:	794a      	ldrb	r2, [r1, #5]
  _SwapVal = (_Byte2 << 8) | _Byte1;
 80039dc:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
  req->wIndex = SWAPBYTE(pbuff);
 80039e0:	8083      	strh	r3, [r0, #4]
  _Byte1 = *(uint8_t *)_pbuff;
 80039e2:	798b      	ldrb	r3, [r1, #6]
  _Byte2 = *(uint8_t *)_pbuff;
 80039e4:	79ca      	ldrb	r2, [r1, #7]
  _SwapVal = (_Byte2 << 8) | _Byte1;
 80039e6:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
  req->wLength = SWAPBYTE(pbuff);
 80039ea:	80c3      	strh	r3, [r0, #6]
}
 80039ec:	4770      	bx	lr

080039ee <USBD_CtlError>:
{
 80039ee:	b510      	push	{r4, lr}
 80039f0:	4604      	mov	r4, r0
  (void)USBD_LL_StallEP(pdev, 0x80U);
 80039f2:	2180      	movs	r1, #128	; 0x80
 80039f4:	f002 f9e2 	bl	8005dbc <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 80039f8:	2100      	movs	r1, #0
 80039fa:	4620      	mov	r0, r4
 80039fc:	f002 f9de 	bl	8005dbc <USBD_LL_StallEP>
}
 8003a00:	bd10      	pop	{r4, pc}

08003a02 <USBD_GetDescriptor>:
{
 8003a02:	b530      	push	{r4, r5, lr}
 8003a04:	b083      	sub	sp, #12
 8003a06:	4604      	mov	r4, r0
 8003a08:	460d      	mov	r5, r1
  uint16_t len = 0U;
 8003a0a:	2300      	movs	r3, #0
 8003a0c:	f8ad 3006 	strh.w	r3, [sp, #6]
  switch (req->wValue >> 8)
 8003a10:	884a      	ldrh	r2, [r1, #2]
 8003a12:	0a13      	lsrs	r3, r2, #8
 8003a14:	3b01      	subs	r3, #1
 8003a16:	2b06      	cmp	r3, #6
 8003a18:	f200 80ab 	bhi.w	8003b72 <USBD_GetDescriptor+0x170>
 8003a1c:	e8df f003 	tbb	[pc, r3]
 8003a20:	a9331f04 	.word	0xa9331f04
 8003a24:	8da9      	.short	0x8da9
 8003a26:	9a          	.byte	0x9a
 8003a27:	00          	.byte	0x00
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8003a28:	f8d0 32b4 	ldr.w	r3, [r0, #692]	; 0x2b4
 8003a2c:	681b      	ldr	r3, [r3, #0]
 8003a2e:	f10d 0106 	add.w	r1, sp, #6
 8003a32:	7c00      	ldrb	r0, [r0, #16]
 8003a34:	4798      	blx	r3
  if (req->wLength != 0U)
 8003a36:	88ea      	ldrh	r2, [r5, #6]
 8003a38:	2a00      	cmp	r2, #0
 8003a3a:	f000 80a3 	beq.w	8003b84 <USBD_GetDescriptor+0x182>
    if (len != 0U)
 8003a3e:	f8bd 3006 	ldrh.w	r3, [sp, #6]
 8003a42:	2b00      	cmp	r3, #0
 8003a44:	f000 8099 	beq.w	8003b7a <USBD_GetDescriptor+0x178>
      len = MIN(len, req->wLength);
 8003a48:	429a      	cmp	r2, r3
 8003a4a:	bf28      	it	cs
 8003a4c:	461a      	movcs	r2, r3
 8003a4e:	f8ad 2006 	strh.w	r2, [sp, #6]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 8003a52:	4601      	mov	r1, r0
 8003a54:	4620      	mov	r0, r4
 8003a56:	f000 faf1 	bl	800403c <USBD_CtlSendData>
}
 8003a5a:	b003      	add	sp, #12
 8003a5c:	bd30      	pop	{r4, r5, pc}
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8003a5e:	7c03      	ldrb	r3, [r0, #16]
 8003a60:	b943      	cbnz	r3, 8003a74 <USBD_GetDescriptor+0x72>
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 8003a62:	f8d0 32b8 	ldr.w	r3, [r0, #696]	; 0x2b8
 8003a66:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003a68:	f10d 0006 	add.w	r0, sp, #6
 8003a6c:	4798      	blx	r3
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8003a6e:	2302      	movs	r3, #2
 8003a70:	7043      	strb	r3, [r0, #1]
  if (err != 0U)
 8003a72:	e7e0      	b.n	8003a36 <USBD_GetDescriptor+0x34>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 8003a74:	f8d0 32b8 	ldr.w	r3, [r0, #696]	; 0x2b8
 8003a78:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003a7a:	f10d 0006 	add.w	r0, sp, #6
 8003a7e:	4798      	blx	r3
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8003a80:	2302      	movs	r3, #2
 8003a82:	7043      	strb	r3, [r0, #1]
  if (err != 0U)
 8003a84:	e7d7      	b.n	8003a36 <USBD_GetDescriptor+0x34>
      switch ((uint8_t)(req->wValue))
 8003a86:	b2d2      	uxtb	r2, r2
 8003a88:	2a05      	cmp	r2, #5
 8003a8a:	d852      	bhi.n	8003b32 <USBD_GetDescriptor+0x130>
 8003a8c:	e8df f002 	tbb	[pc, r2]
 8003a90:	2a1d1003 	.word	0x2a1d1003
 8003a94:	4437      	.short	0x4437
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8003a96:	f8d0 32b4 	ldr.w	r3, [r0, #692]	; 0x2b4
 8003a9a:	685b      	ldr	r3, [r3, #4]
 8003a9c:	b123      	cbz	r3, 8003aa8 <USBD_GetDescriptor+0xa6>
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8003a9e:	f10d 0106 	add.w	r1, sp, #6
 8003aa2:	7c00      	ldrb	r0, [r0, #16]
 8003aa4:	4798      	blx	r3
  if (err != 0U)
 8003aa6:	e7c6      	b.n	8003a36 <USBD_GetDescriptor+0x34>
            USBD_CtlError(pdev, req);
 8003aa8:	4629      	mov	r1, r5
 8003aaa:	f7ff ffa0 	bl	80039ee <USBD_CtlError>
  if (err != 0U)
 8003aae:	e7d4      	b.n	8003a5a <USBD_GetDescriptor+0x58>
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8003ab0:	f8d0 32b4 	ldr.w	r3, [r0, #692]	; 0x2b4
 8003ab4:	689b      	ldr	r3, [r3, #8]
 8003ab6:	b123      	cbz	r3, 8003ac2 <USBD_GetDescriptor+0xc0>
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8003ab8:	f10d 0106 	add.w	r1, sp, #6
 8003abc:	7c00      	ldrb	r0, [r0, #16]
 8003abe:	4798      	blx	r3
  if (err != 0U)
 8003ac0:	e7b9      	b.n	8003a36 <USBD_GetDescriptor+0x34>
            USBD_CtlError(pdev, req);
 8003ac2:	4629      	mov	r1, r5
 8003ac4:	f7ff ff93 	bl	80039ee <USBD_CtlError>
  if (err != 0U)
 8003ac8:	e7c7      	b.n	8003a5a <USBD_GetDescriptor+0x58>
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8003aca:	f8d0 32b4 	ldr.w	r3, [r0, #692]	; 0x2b4
 8003ace:	68db      	ldr	r3, [r3, #12]
 8003ad0:	b123      	cbz	r3, 8003adc <USBD_GetDescriptor+0xda>
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8003ad2:	f10d 0106 	add.w	r1, sp, #6
 8003ad6:	7c00      	ldrb	r0, [r0, #16]
 8003ad8:	4798      	blx	r3
  if (err != 0U)
 8003ada:	e7ac      	b.n	8003a36 <USBD_GetDescriptor+0x34>
            USBD_CtlError(pdev, req);
 8003adc:	4629      	mov	r1, r5
 8003ade:	f7ff ff86 	bl	80039ee <USBD_CtlError>
  if (err != 0U)
 8003ae2:	e7ba      	b.n	8003a5a <USBD_GetDescriptor+0x58>
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8003ae4:	f8d0 32b4 	ldr.w	r3, [r0, #692]	; 0x2b4
 8003ae8:	691b      	ldr	r3, [r3, #16]
 8003aea:	b123      	cbz	r3, 8003af6 <USBD_GetDescriptor+0xf4>
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8003aec:	f10d 0106 	add.w	r1, sp, #6
 8003af0:	7c00      	ldrb	r0, [r0, #16]
 8003af2:	4798      	blx	r3
  if (err != 0U)
 8003af4:	e79f      	b.n	8003a36 <USBD_GetDescriptor+0x34>
            USBD_CtlError(pdev, req);
 8003af6:	4629      	mov	r1, r5
 8003af8:	f7ff ff79 	bl	80039ee <USBD_CtlError>
  if (err != 0U)
 8003afc:	e7ad      	b.n	8003a5a <USBD_GetDescriptor+0x58>
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8003afe:	f8d0 32b4 	ldr.w	r3, [r0, #692]	; 0x2b4
 8003b02:	695b      	ldr	r3, [r3, #20]
 8003b04:	b123      	cbz	r3, 8003b10 <USBD_GetDescriptor+0x10e>
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8003b06:	f10d 0106 	add.w	r1, sp, #6
 8003b0a:	7c00      	ldrb	r0, [r0, #16]
 8003b0c:	4798      	blx	r3
  if (err != 0U)
 8003b0e:	e792      	b.n	8003a36 <USBD_GetDescriptor+0x34>
            USBD_CtlError(pdev, req);
 8003b10:	4629      	mov	r1, r5
 8003b12:	f7ff ff6c 	bl	80039ee <USBD_CtlError>
  if (err != 0U)
 8003b16:	e7a0      	b.n	8003a5a <USBD_GetDescriptor+0x58>
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8003b18:	f8d0 32b4 	ldr.w	r3, [r0, #692]	; 0x2b4
 8003b1c:	699b      	ldr	r3, [r3, #24]
 8003b1e:	b123      	cbz	r3, 8003b2a <USBD_GetDescriptor+0x128>
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8003b20:	f10d 0106 	add.w	r1, sp, #6
 8003b24:	7c00      	ldrb	r0, [r0, #16]
 8003b26:	4798      	blx	r3
  if (err != 0U)
 8003b28:	e785      	b.n	8003a36 <USBD_GetDescriptor+0x34>
            USBD_CtlError(pdev, req);
 8003b2a:	4629      	mov	r1, r5
 8003b2c:	f7ff ff5f 	bl	80039ee <USBD_CtlError>
  if (err != 0U)
 8003b30:	e793      	b.n	8003a5a <USBD_GetDescriptor+0x58>
          USBD_CtlError(pdev, req);
 8003b32:	4629      	mov	r1, r5
 8003b34:	f7ff ff5b 	bl	80039ee <USBD_CtlError>
  if (err != 0U)
 8003b38:	e78f      	b.n	8003a5a <USBD_GetDescriptor+0x58>
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8003b3a:	7c03      	ldrb	r3, [r0, #16]
 8003b3c:	b933      	cbnz	r3, 8003b4c <USBD_GetDescriptor+0x14a>
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 8003b3e:	f8d0 32b8 	ldr.w	r3, [r0, #696]	; 0x2b8
 8003b42:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003b44:	f10d 0006 	add.w	r0, sp, #6
 8003b48:	4798      	blx	r3
  if (err != 0U)
 8003b4a:	e774      	b.n	8003a36 <USBD_GetDescriptor+0x34>
        USBD_CtlError(pdev, req);
 8003b4c:	4629      	mov	r1, r5
 8003b4e:	f7ff ff4e 	bl	80039ee <USBD_CtlError>
  if (err != 0U)
 8003b52:	e782      	b.n	8003a5a <USBD_GetDescriptor+0x58>
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8003b54:	7c03      	ldrb	r3, [r0, #16]
 8003b56:	b943      	cbnz	r3, 8003b6a <USBD_GetDescriptor+0x168>
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 8003b58:	f8d0 32b8 	ldr.w	r3, [r0, #696]	; 0x2b8
 8003b5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b5e:	f10d 0006 	add.w	r0, sp, #6
 8003b62:	4798      	blx	r3
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8003b64:	2307      	movs	r3, #7
 8003b66:	7043      	strb	r3, [r0, #1]
  if (err != 0U)
 8003b68:	e765      	b.n	8003a36 <USBD_GetDescriptor+0x34>
        USBD_CtlError(pdev, req);
 8003b6a:	4629      	mov	r1, r5
 8003b6c:	f7ff ff3f 	bl	80039ee <USBD_CtlError>
  if (err != 0U)
 8003b70:	e773      	b.n	8003a5a <USBD_GetDescriptor+0x58>
      USBD_CtlError(pdev, req);
 8003b72:	4629      	mov	r1, r5
 8003b74:	f7ff ff3b 	bl	80039ee <USBD_CtlError>
    return;
 8003b78:	e76f      	b.n	8003a5a <USBD_GetDescriptor+0x58>
      USBD_CtlError(pdev, req);
 8003b7a:	4629      	mov	r1, r5
 8003b7c:	4620      	mov	r0, r4
 8003b7e:	f7ff ff36 	bl	80039ee <USBD_CtlError>
 8003b82:	e76a      	b.n	8003a5a <USBD_GetDescriptor+0x58>
    (void)USBD_CtlSendStatus(pdev);
 8003b84:	4620      	mov	r0, r4
 8003b86:	f000 fa85 	bl	8004094 <USBD_CtlSendStatus>
 8003b8a:	e766      	b.n	8003a5a <USBD_GetDescriptor+0x58>

08003b8c <USBD_SetAddress>:
{
 8003b8c:	b538      	push	{r3, r4, r5, lr}
 8003b8e:	4604      	mov	r4, r0
  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8003b90:	888b      	ldrh	r3, [r1, #4]
 8003b92:	b9fb      	cbnz	r3, 8003bd4 <USBD_SetAddress+0x48>
 8003b94:	88cb      	ldrh	r3, [r1, #6]
 8003b96:	b9eb      	cbnz	r3, 8003bd4 <USBD_SetAddress+0x48>
 8003b98:	884b      	ldrh	r3, [r1, #2]
 8003b9a:	2b7f      	cmp	r3, #127	; 0x7f
 8003b9c:	d81a      	bhi.n	8003bd4 <USBD_SetAddress+0x48>
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8003b9e:	f003 057f 	and.w	r5, r3, #127	; 0x7f
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8003ba2:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 8003ba6:	b2db      	uxtb	r3, r3
 8003ba8:	2b03      	cmp	r3, #3
 8003baa:	d00c      	beq.n	8003bc6 <USBD_SetAddress+0x3a>
      pdev->dev_address = dev_addr;
 8003bac:	f880 529e 	strb.w	r5, [r0, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 8003bb0:	4629      	mov	r1, r5
 8003bb2:	f002 f913 	bl	8005ddc <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 8003bb6:	4620      	mov	r0, r4
 8003bb8:	f000 fa6c 	bl	8004094 <USBD_CtlSendStatus>
      if (dev_addr != 0U)
 8003bbc:	b135      	cbz	r5, 8003bcc <USBD_SetAddress+0x40>
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8003bbe:	2302      	movs	r3, #2
 8003bc0:	f884 329c 	strb.w	r3, [r4, #668]	; 0x29c
 8003bc4:	e009      	b.n	8003bda <USBD_SetAddress+0x4e>
      USBD_CtlError(pdev, req);
 8003bc6:	f7ff ff12 	bl	80039ee <USBD_CtlError>
 8003bca:	e006      	b.n	8003bda <USBD_SetAddress+0x4e>
        pdev->dev_state = USBD_STATE_DEFAULT;
 8003bcc:	2301      	movs	r3, #1
 8003bce:	f884 329c 	strb.w	r3, [r4, #668]	; 0x29c
 8003bd2:	e002      	b.n	8003bda <USBD_SetAddress+0x4e>
    USBD_CtlError(pdev, req);
 8003bd4:	4620      	mov	r0, r4
 8003bd6:	f7ff ff0a 	bl	80039ee <USBD_CtlError>
}
 8003bda:	bd38      	pop	{r3, r4, r5, pc}

08003bdc <USBD_SetConfig>:
{
 8003bdc:	b570      	push	{r4, r5, r6, lr}
 8003bde:	4604      	mov	r4, r0
 8003be0:	460e      	mov	r6, r1
  cfgidx = (uint8_t)(req->wValue);
 8003be2:	788d      	ldrb	r5, [r1, #2]
 8003be4:	4b2e      	ldr	r3, [pc, #184]	; (8003ca0 <USBD_SetConfig+0xc4>)
 8003be6:	701d      	strb	r5, [r3, #0]
  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8003be8:	2d01      	cmp	r5, #1
 8003bea:	d810      	bhi.n	8003c0e <USBD_SetConfig+0x32>
  switch (pdev->dev_state)
 8003bec:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 8003bf0:	b2db      	uxtb	r3, r3
 8003bf2:	2b02      	cmp	r3, #2
 8003bf4:	d00f      	beq.n	8003c16 <USBD_SetConfig+0x3a>
 8003bf6:	2b03      	cmp	r3, #3
 8003bf8:	d023      	beq.n	8003c42 <USBD_SetConfig+0x66>
      USBD_CtlError(pdev, req);
 8003bfa:	f7ff fef8 	bl	80039ee <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 8003bfe:	4b28      	ldr	r3, [pc, #160]	; (8003ca0 <USBD_SetConfig+0xc4>)
 8003c00:	7819      	ldrb	r1, [r3, #0]
 8003c02:	4620      	mov	r0, r4
 8003c04:	f7ff fd6c 	bl	80036e0 <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 8003c08:	2503      	movs	r5, #3
}
 8003c0a:	4628      	mov	r0, r5
 8003c0c:	bd70      	pop	{r4, r5, r6, pc}
    USBD_CtlError(pdev, req);
 8003c0e:	f7ff feee 	bl	80039ee <USBD_CtlError>
    return USBD_FAIL;
 8003c12:	2503      	movs	r5, #3
 8003c14:	e7f9      	b.n	8003c0a <USBD_SetConfig+0x2e>
      if (cfgidx != 0U)
 8003c16:	b18d      	cbz	r5, 8003c3c <USBD_SetConfig+0x60>
        pdev->dev_config = cfgidx;
 8003c18:	6045      	str	r5, [r0, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 8003c1a:	4629      	mov	r1, r5
 8003c1c:	f7ff fd57 	bl	80036ce <USBD_SetClassConfig>
        if (ret != USBD_OK)
 8003c20:	4605      	mov	r5, r0
 8003c22:	b120      	cbz	r0, 8003c2e <USBD_SetConfig+0x52>
          USBD_CtlError(pdev, req);
 8003c24:	4631      	mov	r1, r6
 8003c26:	4620      	mov	r0, r4
 8003c28:	f7ff fee1 	bl	80039ee <USBD_CtlError>
 8003c2c:	e7ed      	b.n	8003c0a <USBD_SetConfig+0x2e>
          (void)USBD_CtlSendStatus(pdev);
 8003c2e:	4620      	mov	r0, r4
 8003c30:	f000 fa30 	bl	8004094 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 8003c34:	2303      	movs	r3, #3
 8003c36:	f884 329c 	strb.w	r3, [r4, #668]	; 0x29c
 8003c3a:	e7e6      	b.n	8003c0a <USBD_SetConfig+0x2e>
        (void)USBD_CtlSendStatus(pdev);
 8003c3c:	f000 fa2a 	bl	8004094 <USBD_CtlSendStatus>
 8003c40:	e7e3      	b.n	8003c0a <USBD_SetConfig+0x2e>
      if (cfgidx == 0U)
 8003c42:	b1cd      	cbz	r5, 8003c78 <USBD_SetConfig+0x9c>
      else if (cfgidx != pdev->dev_config)
 8003c44:	6841      	ldr	r1, [r0, #4]
 8003c46:	428d      	cmp	r5, r1
 8003c48:	d025      	beq.n	8003c96 <USBD_SetConfig+0xba>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8003c4a:	b2c9      	uxtb	r1, r1
 8003c4c:	f7ff fd48 	bl	80036e0 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 8003c50:	4b13      	ldr	r3, [pc, #76]	; (8003ca0 <USBD_SetConfig+0xc4>)
 8003c52:	7819      	ldrb	r1, [r3, #0]
 8003c54:	6061      	str	r1, [r4, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 8003c56:	4620      	mov	r0, r4
 8003c58:	f7ff fd39 	bl	80036ce <USBD_SetClassConfig>
        if (ret != USBD_OK)
 8003c5c:	4605      	mov	r5, r0
 8003c5e:	b1b0      	cbz	r0, 8003c8e <USBD_SetConfig+0xb2>
          USBD_CtlError(pdev, req);
 8003c60:	4631      	mov	r1, r6
 8003c62:	4620      	mov	r0, r4
 8003c64:	f7ff fec3 	bl	80039ee <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8003c68:	7921      	ldrb	r1, [r4, #4]
 8003c6a:	4620      	mov	r0, r4
 8003c6c:	f7ff fd38 	bl	80036e0 <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8003c70:	2302      	movs	r3, #2
 8003c72:	f884 329c 	strb.w	r3, [r4, #668]	; 0x29c
 8003c76:	e7c8      	b.n	8003c0a <USBD_SetConfig+0x2e>
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8003c78:	2302      	movs	r3, #2
 8003c7a:	f880 329c 	strb.w	r3, [r0, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 8003c7e:	6045      	str	r5, [r0, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 8003c80:	4629      	mov	r1, r5
 8003c82:	f7ff fd2d 	bl	80036e0 <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 8003c86:	4620      	mov	r0, r4
 8003c88:	f000 fa04 	bl	8004094 <USBD_CtlSendStatus>
 8003c8c:	e7bd      	b.n	8003c0a <USBD_SetConfig+0x2e>
          (void)USBD_CtlSendStatus(pdev);
 8003c8e:	4620      	mov	r0, r4
 8003c90:	f000 fa00 	bl	8004094 <USBD_CtlSendStatus>
 8003c94:	e7b9      	b.n	8003c0a <USBD_SetConfig+0x2e>
        (void)USBD_CtlSendStatus(pdev);
 8003c96:	f000 f9fd 	bl	8004094 <USBD_CtlSendStatus>
  USBD_StatusTypeDef ret = USBD_OK;
 8003c9a:	2500      	movs	r5, #0
 8003c9c:	e7b5      	b.n	8003c0a <USBD_SetConfig+0x2e>
 8003c9e:	bf00      	nop
 8003ca0:	2000045c 	.word	0x2000045c

08003ca4 <USBD_GetConfig>:
{
 8003ca4:	b508      	push	{r3, lr}
  if (req->wLength != 1U)
 8003ca6:	88cb      	ldrh	r3, [r1, #6]
 8003ca8:	2b01      	cmp	r3, #1
 8003caa:	d10b      	bne.n	8003cc4 <USBD_GetConfig+0x20>
    switch (pdev->dev_state)
 8003cac:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 8003cb0:	b2db      	uxtb	r3, r3
 8003cb2:	2b02      	cmp	r3, #2
 8003cb4:	d909      	bls.n	8003cca <USBD_GetConfig+0x26>
 8003cb6:	2b03      	cmp	r3, #3
 8003cb8:	d109      	bne.n	8003cce <USBD_GetConfig+0x2a>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 8003cba:	2201      	movs	r2, #1
 8003cbc:	1d01      	adds	r1, r0, #4
 8003cbe:	f000 f9bd 	bl	800403c <USBD_CtlSendData>
        break;
 8003cc2:	e001      	b.n	8003cc8 <USBD_GetConfig+0x24>
    USBD_CtlError(pdev, req);
 8003cc4:	f7ff fe93 	bl	80039ee <USBD_CtlError>
}
 8003cc8:	bd08      	pop	{r3, pc}
    switch (pdev->dev_state)
 8003cca:	b25b      	sxtb	r3, r3
 8003ccc:	b913      	cbnz	r3, 8003cd4 <USBD_GetConfig+0x30>
        USBD_CtlError(pdev, req);
 8003cce:	f7ff fe8e 	bl	80039ee <USBD_CtlError>
}
 8003cd2:	e7f9      	b.n	8003cc8 <USBD_GetConfig+0x24>
        pdev->dev_default_config = 0U;
 8003cd4:	4601      	mov	r1, r0
 8003cd6:	2300      	movs	r3, #0
 8003cd8:	f841 3f08 	str.w	r3, [r1, #8]!
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 8003cdc:	2201      	movs	r2, #1
 8003cde:	f000 f9ad 	bl	800403c <USBD_CtlSendData>
        break;
 8003ce2:	e7f1      	b.n	8003cc8 <USBD_GetConfig+0x24>

08003ce4 <USBD_GetStatus>:
{
 8003ce4:	b508      	push	{r3, lr}
  switch (pdev->dev_state)
 8003ce6:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 8003cea:	3b01      	subs	r3, #1
 8003cec:	2b02      	cmp	r3, #2
 8003cee:	d812      	bhi.n	8003d16 <USBD_GetStatus+0x32>
      if (req->wLength != 0x2U)
 8003cf0:	88cb      	ldrh	r3, [r1, #6]
 8003cf2:	2b02      	cmp	r3, #2
 8003cf4:	d10c      	bne.n	8003d10 <USBD_GetStatus+0x2c>
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8003cf6:	2301      	movs	r3, #1
 8003cf8:	60c3      	str	r3, [r0, #12]
      if (pdev->dev_remote_wakeup != 0U)
 8003cfa:	f8d0 32a4 	ldr.w	r3, [r0, #676]	; 0x2a4
 8003cfe:	b10b      	cbz	r3, 8003d04 <USBD_GetStatus+0x20>
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8003d00:	2303      	movs	r3, #3
 8003d02:	60c3      	str	r3, [r0, #12]
      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 8003d04:	2202      	movs	r2, #2
 8003d06:	f100 010c 	add.w	r1, r0, #12
 8003d0a:	f000 f997 	bl	800403c <USBD_CtlSendData>
}
 8003d0e:	bd08      	pop	{r3, pc}
        USBD_CtlError(pdev, req);
 8003d10:	f7ff fe6d 	bl	80039ee <USBD_CtlError>
        break;
 8003d14:	e7fb      	b.n	8003d0e <USBD_GetStatus+0x2a>
      USBD_CtlError(pdev, req);
 8003d16:	f7ff fe6a 	bl	80039ee <USBD_CtlError>
}
 8003d1a:	e7f8      	b.n	8003d0e <USBD_GetStatus+0x2a>

08003d1c <USBD_ClrFeature>:
{
 8003d1c:	b508      	push	{r3, lr}
  switch (pdev->dev_state)
 8003d1e:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 8003d22:	3b01      	subs	r3, #1
 8003d24:	2b02      	cmp	r3, #2
 8003d26:	d809      	bhi.n	8003d3c <USBD_ClrFeature+0x20>
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8003d28:	884b      	ldrh	r3, [r1, #2]
 8003d2a:	2b01      	cmp	r3, #1
 8003d2c:	d000      	beq.n	8003d30 <USBD_ClrFeature+0x14>
}
 8003d2e:	bd08      	pop	{r3, pc}
        pdev->dev_remote_wakeup = 0U;
 8003d30:	2300      	movs	r3, #0
 8003d32:	f8c0 32a4 	str.w	r3, [r0, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 8003d36:	f000 f9ad 	bl	8004094 <USBD_CtlSendStatus>
 8003d3a:	e7f8      	b.n	8003d2e <USBD_ClrFeature+0x12>
      USBD_CtlError(pdev, req);
 8003d3c:	f7ff fe57 	bl	80039ee <USBD_CtlError>
}
 8003d40:	e7f5      	b.n	8003d2e <USBD_ClrFeature+0x12>

08003d42 <USBD_StdDevReq>:
{
 8003d42:	b538      	push	{r3, r4, r5, lr}
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8003d44:	780c      	ldrb	r4, [r1, #0]
 8003d46:	f004 0460 	and.w	r4, r4, #96	; 0x60
 8003d4a:	2c20      	cmp	r4, #32
 8003d4c:	d006      	beq.n	8003d5c <USBD_StdDevReq+0x1a>
 8003d4e:	2c40      	cmp	r4, #64	; 0x40
 8003d50:	d004      	beq.n	8003d5c <USBD_StdDevReq+0x1a>
 8003d52:	b154      	cbz	r4, 8003d6a <USBD_StdDevReq+0x28>
      USBD_CtlError(pdev, req);
 8003d54:	f7ff fe4b 	bl	80039ee <USBD_CtlError>
  USBD_StatusTypeDef ret = USBD_OK;
 8003d58:	2400      	movs	r4, #0
      break;
 8003d5a:	e004      	b.n	8003d66 <USBD_StdDevReq+0x24>
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8003d5c:	f8d0 32b8 	ldr.w	r3, [r0, #696]	; 0x2b8
 8003d60:	689b      	ldr	r3, [r3, #8]
 8003d62:	4798      	blx	r3
 8003d64:	4604      	mov	r4, r0
}
 8003d66:	4620      	mov	r0, r4
 8003d68:	bd38      	pop	{r3, r4, r5, pc}
      switch (req->bRequest)
 8003d6a:	784d      	ldrb	r5, [r1, #1]
 8003d6c:	2d09      	cmp	r5, #9
 8003d6e:	d81d      	bhi.n	8003dac <USBD_StdDevReq+0x6a>
 8003d70:	e8df f005 	tbb	[pc, r5]
 8003d74:	161c1912 	.word	0x161c1912
 8003d78:	1c05081c 	.word	0x1c05081c
 8003d7c:	0b0f      	.short	0x0b0f
          USBD_GetDescriptor(pdev, req);
 8003d7e:	f7ff fe40 	bl	8003a02 <USBD_GetDescriptor>
          break;
 8003d82:	e7f0      	b.n	8003d66 <USBD_StdDevReq+0x24>
          USBD_SetAddress(pdev, req);
 8003d84:	f7ff ff02 	bl	8003b8c <USBD_SetAddress>
          break;
 8003d88:	e7ed      	b.n	8003d66 <USBD_StdDevReq+0x24>
          ret = USBD_SetConfig(pdev, req);
 8003d8a:	f7ff ff27 	bl	8003bdc <USBD_SetConfig>
 8003d8e:	4604      	mov	r4, r0
          break;
 8003d90:	e7e9      	b.n	8003d66 <USBD_StdDevReq+0x24>
          USBD_GetConfig(pdev, req);
 8003d92:	f7ff ff87 	bl	8003ca4 <USBD_GetConfig>
          break;
 8003d96:	e7e6      	b.n	8003d66 <USBD_StdDevReq+0x24>
          USBD_GetStatus(pdev, req);
 8003d98:	f7ff ffa4 	bl	8003ce4 <USBD_GetStatus>
  USBD_StatusTypeDef ret = USBD_OK;
 8003d9c:	462c      	mov	r4, r5
          break;
 8003d9e:	e7e2      	b.n	8003d66 <USBD_StdDevReq+0x24>
          USBD_SetFeature(pdev, req);
 8003da0:	f7ff fe07 	bl	80039b2 <USBD_SetFeature>
          break;
 8003da4:	e7df      	b.n	8003d66 <USBD_StdDevReq+0x24>
          USBD_ClrFeature(pdev, req);
 8003da6:	f7ff ffb9 	bl	8003d1c <USBD_ClrFeature>
          break;
 8003daa:	e7dc      	b.n	8003d66 <USBD_StdDevReq+0x24>
          USBD_CtlError(pdev, req);
 8003dac:	f7ff fe1f 	bl	80039ee <USBD_CtlError>
          break;
 8003db0:	e7d9      	b.n	8003d66 <USBD_StdDevReq+0x24>

08003db2 <USBD_StdItfReq>:
{
 8003db2:	b570      	push	{r4, r5, r6, lr}
 8003db4:	4605      	mov	r5, r0
 8003db6:	460c      	mov	r4, r1
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8003db8:	780b      	ldrb	r3, [r1, #0]
 8003dba:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8003dbe:	2b20      	cmp	r3, #32
 8003dc0:	d007      	beq.n	8003dd2 <USBD_StdItfReq+0x20>
 8003dc2:	2b40      	cmp	r3, #64	; 0x40
 8003dc4:	d005      	beq.n	8003dd2 <USBD_StdItfReq+0x20>
 8003dc6:	b123      	cbz	r3, 8003dd2 <USBD_StdItfReq+0x20>
      USBD_CtlError(pdev, req);
 8003dc8:	f7ff fe11 	bl	80039ee <USBD_CtlError>
  USBD_StatusTypeDef ret = USBD_OK;
 8003dcc:	2600      	movs	r6, #0
}
 8003dce:	4630      	mov	r0, r6
 8003dd0:	bd70      	pop	{r4, r5, r6, pc}
      switch (pdev->dev_state)
 8003dd2:	f895 329c 	ldrb.w	r3, [r5, #668]	; 0x29c
 8003dd6:	3b01      	subs	r3, #1
 8003dd8:	2b02      	cmp	r3, #2
 8003dda:	d818      	bhi.n	8003e0e <USBD_StdItfReq+0x5c>
          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8003ddc:	7923      	ldrb	r3, [r4, #4]
 8003dde:	2b01      	cmp	r3, #1
 8003de0:	d80f      	bhi.n	8003e02 <USBD_StdItfReq+0x50>
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8003de2:	f8d5 32b8 	ldr.w	r3, [r5, #696]	; 0x2b8
 8003de6:	689b      	ldr	r3, [r3, #8]
 8003de8:	4621      	mov	r1, r4
 8003dea:	4628      	mov	r0, r5
 8003dec:	4798      	blx	r3
 8003dee:	4606      	mov	r6, r0
            if ((req->wLength == 0U) && (ret == USBD_OK))
 8003df0:	88e3      	ldrh	r3, [r4, #6]
 8003df2:	2b00      	cmp	r3, #0
 8003df4:	d1eb      	bne.n	8003dce <USBD_StdItfReq+0x1c>
 8003df6:	2800      	cmp	r0, #0
 8003df8:	d1e9      	bne.n	8003dce <USBD_StdItfReq+0x1c>
              (void)USBD_CtlSendStatus(pdev);
 8003dfa:	4628      	mov	r0, r5
 8003dfc:	f000 f94a 	bl	8004094 <USBD_CtlSendStatus>
 8003e00:	e7e5      	b.n	8003dce <USBD_StdItfReq+0x1c>
            USBD_CtlError(pdev, req);
 8003e02:	4621      	mov	r1, r4
 8003e04:	4628      	mov	r0, r5
 8003e06:	f7ff fdf2 	bl	80039ee <USBD_CtlError>
  USBD_StatusTypeDef ret = USBD_OK;
 8003e0a:	2600      	movs	r6, #0
 8003e0c:	e7df      	b.n	8003dce <USBD_StdItfReq+0x1c>
          USBD_CtlError(pdev, req);
 8003e0e:	4621      	mov	r1, r4
 8003e10:	4628      	mov	r0, r5
 8003e12:	f7ff fdec 	bl	80039ee <USBD_CtlError>
  USBD_StatusTypeDef ret = USBD_OK;
 8003e16:	2600      	movs	r6, #0
          break;
 8003e18:	e7d9      	b.n	8003dce <USBD_StdItfReq+0x1c>

08003e1a <USBD_StdEPReq>:
{
 8003e1a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003e1c:	4606      	mov	r6, r0
 8003e1e:	460d      	mov	r5, r1
  ep_addr = LOBYTE(req->wIndex);
 8003e20:	888b      	ldrh	r3, [r1, #4]
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8003e22:	780c      	ldrb	r4, [r1, #0]
 8003e24:	f004 0460 	and.w	r4, r4, #96	; 0x60
 8003e28:	2c20      	cmp	r4, #32
 8003e2a:	d008      	beq.n	8003e3e <USBD_StdEPReq+0x24>
 8003e2c:	b2d9      	uxtb	r1, r3
 8003e2e:	2c40      	cmp	r4, #64	; 0x40
 8003e30:	d005      	beq.n	8003e3e <USBD_StdEPReq+0x24>
 8003e32:	b16c      	cbz	r4, 8003e50 <USBD_StdEPReq+0x36>
      USBD_CtlError(pdev, req);
 8003e34:	4629      	mov	r1, r5
 8003e36:	f7ff fdda 	bl	80039ee <USBD_CtlError>
  USBD_StatusTypeDef ret = USBD_OK;
 8003e3a:	2400      	movs	r4, #0
      break;
 8003e3c:	e006      	b.n	8003e4c <USBD_StdEPReq+0x32>
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8003e3e:	f8d6 32b8 	ldr.w	r3, [r6, #696]	; 0x2b8
 8003e42:	689b      	ldr	r3, [r3, #8]
 8003e44:	4629      	mov	r1, r5
 8003e46:	4630      	mov	r0, r6
 8003e48:	4798      	blx	r3
 8003e4a:	4604      	mov	r4, r0
}
 8003e4c:	4620      	mov	r0, r4
 8003e4e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      switch (req->bRequest)
 8003e50:	786f      	ldrb	r7, [r5, #1]
 8003e52:	2f01      	cmp	r7, #1
 8003e54:	d02f      	beq.n	8003eb6 <USBD_StdEPReq+0x9c>
 8003e56:	2f03      	cmp	r7, #3
 8003e58:	d005      	beq.n	8003e66 <USBD_StdEPReq+0x4c>
 8003e5a:	2f00      	cmp	r7, #0
 8003e5c:	d059      	beq.n	8003f12 <USBD_StdEPReq+0xf8>
          USBD_CtlError(pdev, req);
 8003e5e:	4629      	mov	r1, r5
 8003e60:	f7ff fdc5 	bl	80039ee <USBD_CtlError>
          break;
 8003e64:	e7f2      	b.n	8003e4c <USBD_StdEPReq+0x32>
          switch (pdev->dev_state)
 8003e66:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 8003e6a:	b2db      	uxtb	r3, r3
 8003e6c:	2b02      	cmp	r3, #2
 8003e6e:	d005      	beq.n	8003e7c <USBD_StdEPReq+0x62>
 8003e70:	2b03      	cmp	r3, #3
 8003e72:	d012      	beq.n	8003e9a <USBD_StdEPReq+0x80>
              USBD_CtlError(pdev, req);
 8003e74:	4629      	mov	r1, r5
 8003e76:	f7ff fdba 	bl	80039ee <USBD_CtlError>
              break;
 8003e7a:	e7e7      	b.n	8003e4c <USBD_StdEPReq+0x32>
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8003e7c:	b109      	cbz	r1, 8003e82 <USBD_StdEPReq+0x68>
 8003e7e:	2980      	cmp	r1, #128	; 0x80
 8003e80:	d104      	bne.n	8003e8c <USBD_StdEPReq+0x72>
                USBD_CtlError(pdev, req);
 8003e82:	4629      	mov	r1, r5
 8003e84:	4630      	mov	r0, r6
 8003e86:	f7ff fdb2 	bl	80039ee <USBD_CtlError>
 8003e8a:	e7df      	b.n	8003e4c <USBD_StdEPReq+0x32>
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8003e8c:	f001 ff96 	bl	8005dbc <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8003e90:	2180      	movs	r1, #128	; 0x80
 8003e92:	4630      	mov	r0, r6
 8003e94:	f001 ff92 	bl	8005dbc <USBD_LL_StallEP>
 8003e98:	e7d8      	b.n	8003e4c <USBD_StdEPReq+0x32>
              if (req->wValue == USB_FEATURE_EP_HALT)
 8003e9a:	886b      	ldrh	r3, [r5, #2]
 8003e9c:	b923      	cbnz	r3, 8003ea8 <USBD_StdEPReq+0x8e>
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8003e9e:	b119      	cbz	r1, 8003ea8 <USBD_StdEPReq+0x8e>
 8003ea0:	2980      	cmp	r1, #128	; 0x80
 8003ea2:	d001      	beq.n	8003ea8 <USBD_StdEPReq+0x8e>
 8003ea4:	88eb      	ldrh	r3, [r5, #6]
 8003ea6:	b11b      	cbz	r3, 8003eb0 <USBD_StdEPReq+0x96>
              (void)USBD_CtlSendStatus(pdev);
 8003ea8:	4630      	mov	r0, r6
 8003eaa:	f000 f8f3 	bl	8004094 <USBD_CtlSendStatus>
              break;
 8003eae:	e7cd      	b.n	8003e4c <USBD_StdEPReq+0x32>
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 8003eb0:	f001 ff84 	bl	8005dbc <USBD_LL_StallEP>
 8003eb4:	e7f8      	b.n	8003ea8 <USBD_StdEPReq+0x8e>
          switch (pdev->dev_state)
 8003eb6:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 8003eba:	b2db      	uxtb	r3, r3
 8003ebc:	2b02      	cmp	r3, #2
 8003ebe:	d005      	beq.n	8003ecc <USBD_StdEPReq+0xb2>
 8003ec0:	2b03      	cmp	r3, #3
 8003ec2:	d012      	beq.n	8003eea <USBD_StdEPReq+0xd0>
              USBD_CtlError(pdev, req);
 8003ec4:	4629      	mov	r1, r5
 8003ec6:	f7ff fd92 	bl	80039ee <USBD_CtlError>
              break;
 8003eca:	e7bf      	b.n	8003e4c <USBD_StdEPReq+0x32>
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8003ecc:	b109      	cbz	r1, 8003ed2 <USBD_StdEPReq+0xb8>
 8003ece:	2980      	cmp	r1, #128	; 0x80
 8003ed0:	d104      	bne.n	8003edc <USBD_StdEPReq+0xc2>
                USBD_CtlError(pdev, req);
 8003ed2:	4629      	mov	r1, r5
 8003ed4:	4630      	mov	r0, r6
 8003ed6:	f7ff fd8a 	bl	80039ee <USBD_CtlError>
 8003eda:	e7b7      	b.n	8003e4c <USBD_StdEPReq+0x32>
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8003edc:	f001 ff6e 	bl	8005dbc <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8003ee0:	2180      	movs	r1, #128	; 0x80
 8003ee2:	4630      	mov	r0, r6
 8003ee4:	f001 ff6a 	bl	8005dbc <USBD_LL_StallEP>
 8003ee8:	e7b0      	b.n	8003e4c <USBD_StdEPReq+0x32>
              if (req->wValue == USB_FEATURE_EP_HALT)
 8003eea:	886b      	ldrh	r3, [r5, #2]
 8003eec:	2b00      	cmp	r3, #0
 8003eee:	d1ad      	bne.n	8003e4c <USBD_StdEPReq+0x32>
                if ((ep_addr & 0x7FU) != 0x00U)
 8003ef0:	f011 0f7f 	tst.w	r1, #127	; 0x7f
 8003ef4:	d10a      	bne.n	8003f0c <USBD_StdEPReq+0xf2>
                (void)USBD_CtlSendStatus(pdev);
 8003ef6:	4630      	mov	r0, r6
 8003ef8:	f000 f8cc 	bl	8004094 <USBD_CtlSendStatus>
                ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8003efc:	f8d6 32b8 	ldr.w	r3, [r6, #696]	; 0x2b8
 8003f00:	689b      	ldr	r3, [r3, #8]
 8003f02:	4629      	mov	r1, r5
 8003f04:	4630      	mov	r0, r6
 8003f06:	4798      	blx	r3
 8003f08:	4604      	mov	r4, r0
 8003f0a:	e79f      	b.n	8003e4c <USBD_StdEPReq+0x32>
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 8003f0c:	f001 ff5e 	bl	8005dcc <USBD_LL_ClearStallEP>
 8003f10:	e7f1      	b.n	8003ef6 <USBD_StdEPReq+0xdc>
          switch (pdev->dev_state)
 8003f12:	f890 229c 	ldrb.w	r2, [r0, #668]	; 0x29c
 8003f16:	b2d2      	uxtb	r2, r2
 8003f18:	2a02      	cmp	r2, #2
 8003f1a:	d006      	beq.n	8003f2a <USBD_StdEPReq+0x110>
 8003f1c:	2a03      	cmp	r2, #3
 8003f1e:	d029      	beq.n	8003f74 <USBD_StdEPReq+0x15a>
              USBD_CtlError(pdev, req);
 8003f20:	4629      	mov	r1, r5
 8003f22:	f7ff fd64 	bl	80039ee <USBD_CtlError>
  USBD_StatusTypeDef ret = USBD_OK;
 8003f26:	463c      	mov	r4, r7
              break;
 8003f28:	e790      	b.n	8003e4c <USBD_StdEPReq+0x32>
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8003f2a:	b109      	cbz	r1, 8003f30 <USBD_StdEPReq+0x116>
 8003f2c:	2980      	cmp	r1, #128	; 0x80
 8003f2e:	d113      	bne.n	8003f58 <USBD_StdEPReq+0x13e>
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8003f30:	f013 0f80 	tst.w	r3, #128	; 0x80
 8003f34:	d115      	bne.n	8003f62 <USBD_StdEPReq+0x148>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8003f36:	f001 017f 	and.w	r1, r1, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8003f3a:	eb01 0181 	add.w	r1, r1, r1, lsl #2
 8003f3e:	0089      	lsls	r1, r1, #2
 8003f40:	f501 71a8 	add.w	r1, r1, #336	; 0x150
 8003f44:	4431      	add	r1, r6
 8003f46:	3104      	adds	r1, #4
              pep->status = 0x0000U;
 8003f48:	2300      	movs	r3, #0
 8003f4a:	600b      	str	r3, [r1, #0]
              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8003f4c:	2202      	movs	r2, #2
 8003f4e:	4630      	mov	r0, r6
 8003f50:	f000 f874 	bl	800403c <USBD_CtlSendData>
  USBD_StatusTypeDef ret = USBD_OK;
 8003f54:	463c      	mov	r4, r7
              break;
 8003f56:	e779      	b.n	8003e4c <USBD_StdEPReq+0x32>
                USBD_CtlError(pdev, req);
 8003f58:	4629      	mov	r1, r5
 8003f5a:	f7ff fd48 	bl	80039ee <USBD_CtlError>
  USBD_StatusTypeDef ret = USBD_OK;
 8003f5e:	463c      	mov	r4, r7
                break;
 8003f60:	e774      	b.n	8003e4c <USBD_StdEPReq+0x32>
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8003f62:	f001 017f 	and.w	r1, r1, #127	; 0x7f
 8003f66:	eb01 0181 	add.w	r1, r1, r1, lsl #2
 8003f6a:	0089      	lsls	r1, r1, #2
 8003f6c:	3110      	adds	r1, #16
 8003f6e:	4431      	add	r1, r6
 8003f70:	3104      	adds	r1, #4
 8003f72:	e7e9      	b.n	8003f48 <USBD_StdEPReq+0x12e>
              if ((ep_addr & 0x80U) == 0x80U)
 8003f74:	b25b      	sxtb	r3, r3
 8003f76:	2b00      	cmp	r3, #0
 8003f78:	db1f      	blt.n	8003fba <USBD_StdEPReq+0x1a0>
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8003f7a:	f001 020f 	and.w	r2, r1, #15
 8003f7e:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 8003f82:	eb00 0282 	add.w	r2, r0, r2, lsl #2
 8003f86:	f8b2 2164 	ldrh.w	r2, [r2, #356]	; 0x164
 8003f8a:	b322      	cbz	r2, 8003fd6 <USBD_StdEPReq+0x1bc>
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8003f8c:	2b00      	cmp	r3, #0
 8003f8e:	db27      	blt.n	8003fe0 <USBD_StdEPReq+0x1c6>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8003f90:	f001 037f 	and.w	r3, r1, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8003f94:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8003f98:	009c      	lsls	r4, r3, #2
 8003f9a:	f504 74a8 	add.w	r4, r4, #336	; 0x150
 8003f9e:	4434      	add	r4, r6
 8003fa0:	3404      	adds	r4, #4
              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8003fa2:	b109      	cbz	r1, 8003fa8 <USBD_StdEPReq+0x18e>
 8003fa4:	2980      	cmp	r1, #128	; 0x80
 8003fa6:	d124      	bne.n	8003ff2 <USBD_StdEPReq+0x1d8>
                pep->status = 0x0000U;
 8003fa8:	2300      	movs	r3, #0
 8003faa:	6023      	str	r3, [r4, #0]
              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8003fac:	2202      	movs	r2, #2
 8003fae:	4621      	mov	r1, r4
 8003fb0:	4630      	mov	r0, r6
 8003fb2:	f000 f843 	bl	800403c <USBD_CtlSendData>
  USBD_StatusTypeDef ret = USBD_OK;
 8003fb6:	463c      	mov	r4, r7
              break;
 8003fb8:	e748      	b.n	8003e4c <USBD_StdEPReq+0x32>
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8003fba:	f001 020f 	and.w	r2, r1, #15
 8003fbe:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 8003fc2:	eb00 0282 	add.w	r2, r0, r2, lsl #2
 8003fc6:	8c92      	ldrh	r2, [r2, #36]	; 0x24
 8003fc8:	2a00      	cmp	r2, #0
 8003fca:	d1df      	bne.n	8003f8c <USBD_StdEPReq+0x172>
                  USBD_CtlError(pdev, req);
 8003fcc:	4629      	mov	r1, r5
 8003fce:	f7ff fd0e 	bl	80039ee <USBD_CtlError>
  USBD_StatusTypeDef ret = USBD_OK;
 8003fd2:	463c      	mov	r4, r7
                  break;
 8003fd4:	e73a      	b.n	8003e4c <USBD_StdEPReq+0x32>
                  USBD_CtlError(pdev, req);
 8003fd6:	4629      	mov	r1, r5
 8003fd8:	f7ff fd09 	bl	80039ee <USBD_CtlError>
  USBD_StatusTypeDef ret = USBD_OK;
 8003fdc:	463c      	mov	r4, r7
                  break;
 8003fde:	e735      	b.n	8003e4c <USBD_StdEPReq+0x32>
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8003fe0:	f001 037f 	and.w	r3, r1, #127	; 0x7f
 8003fe4:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8003fe8:	009c      	lsls	r4, r3, #2
 8003fea:	3410      	adds	r4, #16
 8003fec:	4434      	add	r4, r6
 8003fee:	3404      	adds	r4, #4
 8003ff0:	e7d7      	b.n	8003fa2 <USBD_StdEPReq+0x188>
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 8003ff2:	4630      	mov	r0, r6
 8003ff4:	f001 fe9a 	bl	8005d2c <USBD_LL_IsStallEP>
 8003ff8:	b110      	cbz	r0, 8004000 <USBD_StdEPReq+0x1e6>
                pep->status = 0x0001U;
 8003ffa:	2301      	movs	r3, #1
 8003ffc:	6023      	str	r3, [r4, #0]
 8003ffe:	e7d5      	b.n	8003fac <USBD_StdEPReq+0x192>
                pep->status = 0x0000U;
 8004000:	2300      	movs	r3, #0
 8004002:	6023      	str	r3, [r4, #0]
 8004004:	e7d2      	b.n	8003fac <USBD_StdEPReq+0x192>

08004006 <USBD_GetString>:
  if (desc == NULL)
 8004006:	b1c0      	cbz	r0, 800403a <USBD_GetString+0x34>
{
 8004008:	b570      	push	{r4, r5, r6, lr}
 800400a:	460d      	mov	r5, r1
 800400c:	4616      	mov	r6, r2
 800400e:	4604      	mov	r4, r0
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 8004010:	f7ff fcc6 	bl	80039a0 <USBD_GetLen>
 8004014:	3001      	adds	r0, #1
 8004016:	0040      	lsls	r0, r0, #1
 8004018:	8030      	strh	r0, [r6, #0]
  unicode[idx] = *(uint8_t *)len;
 800401a:	7028      	strb	r0, [r5, #0]
  unicode[idx] = USB_DESC_TYPE_STRING;
 800401c:	2303      	movs	r3, #3
 800401e:	706b      	strb	r3, [r5, #1]
  idx++;
 8004020:	2302      	movs	r3, #2
  while (*pdesc != (uint8_t)'\0')
 8004022:	7822      	ldrb	r2, [r4, #0]
 8004024:	b142      	cbz	r2, 8004038 <USBD_GetString+0x32>
    unicode[idx] = *pdesc;
 8004026:	54ea      	strb	r2, [r5, r3]
    pdesc++;
 8004028:	3401      	adds	r4, #1
    idx++;
 800402a:	1c5a      	adds	r2, r3, #1
 800402c:	b2d2      	uxtb	r2, r2
    unicode[idx] = 0U;
 800402e:	2100      	movs	r1, #0
 8004030:	54a9      	strb	r1, [r5, r2]
    idx++;
 8004032:	3302      	adds	r3, #2
 8004034:	b2db      	uxtb	r3, r3
 8004036:	e7f4      	b.n	8004022 <USBD_GetString+0x1c>
}
 8004038:	bd70      	pop	{r4, r5, r6, pc}
 800403a:	4770      	bx	lr

0800403c <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 800403c:	b510      	push	{r4, lr}
 800403e:	4613      	mov	r3, r2
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8004040:	2202      	movs	r2, #2
 8004042:	f8c0 2294 	str.w	r2, [r0, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 8004046:	6183      	str	r3, [r0, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 8004048:	61c3      	str	r3, [r0, #28]
#endif

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800404a:	460a      	mov	r2, r1
 800404c:	2100      	movs	r1, #0
 800404e:	f001 fecd 	bl	8005dec <USBD_LL_Transmit>

  return USBD_OK;
}
 8004052:	2000      	movs	r0, #0
 8004054:	bd10      	pop	{r4, pc}

08004056 <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 8004056:	b508      	push	{r3, lr}
 8004058:	4613      	mov	r3, r2
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800405a:	460a      	mov	r2, r1
 800405c:	2100      	movs	r1, #0
 800405e:	f001 fec5 	bl	8005dec <USBD_LL_Transmit>

  return USBD_OK;
}
 8004062:	2000      	movs	r0, #0
 8004064:	bd08      	pop	{r3, pc}

08004066 <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 8004066:	b510      	push	{r4, lr}
 8004068:	4613      	mov	r3, r2
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 800406a:	2203      	movs	r2, #3
 800406c:	f8c0 2294 	str.w	r2, [r0, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 8004070:	f8c0 3158 	str.w	r3, [r0, #344]	; 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 8004074:	f8c0 315c 	str.w	r3, [r0, #348]	; 0x15c
#endif

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8004078:	460a      	mov	r2, r1
 800407a:	2100      	movs	r1, #0
 800407c:	f001 febe 	bl	8005dfc <USBD_LL_PrepareReceive>

  return USBD_OK;
}
 8004080:	2000      	movs	r0, #0
 8004082:	bd10      	pop	{r4, pc}

08004084 <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 8004084:	b508      	push	{r3, lr}
 8004086:	4613      	mov	r3, r2
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8004088:	460a      	mov	r2, r1
 800408a:	2100      	movs	r1, #0
 800408c:	f001 feb6 	bl	8005dfc <USBD_LL_PrepareReceive>

  return USBD_OK;
}
 8004090:	2000      	movs	r0, #0
 8004092:	bd08      	pop	{r3, pc}

08004094 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8004094:	b508      	push	{r3, lr}
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8004096:	2204      	movs	r2, #4
 8004098:	f8c0 2294 	str.w	r2, [r0, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800409c:	2300      	movs	r3, #0
 800409e:	461a      	mov	r2, r3
 80040a0:	4619      	mov	r1, r3
 80040a2:	f001 fea3 	bl	8005dec <USBD_LL_Transmit>

  return USBD_OK;
}
 80040a6:	2000      	movs	r0, #0
 80040a8:	bd08      	pop	{r3, pc}

080040aa <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 80040aa:	b508      	push	{r3, lr}
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 80040ac:	2205      	movs	r2, #5
 80040ae:	f8c0 2294 	str.w	r2, [r0, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80040b2:	2300      	movs	r3, #0
 80040b4:	461a      	mov	r2, r3
 80040b6:	4619      	mov	r1, r3
 80040b8:	f001 fea0 	bl	8005dfc <USBD_LL_PrepareReceive>

  return USBD_OK;
}
 80040bc:	2000      	movs	r0, #0
 80040be:	bd08      	pop	{r3, pc}

080040c0 <makeFreeRtosPriority>:
/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
  
  if (priority != osPriorityError) {
 80040c0:	2884      	cmp	r0, #132	; 0x84
 80040c2:	d001      	beq.n	80040c8 <makeFreeRtosPriority+0x8>
    fpriority += (priority - osPriorityIdle);
 80040c4:	3003      	adds	r0, #3
 80040c6:	4770      	bx	lr
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 80040c8:	2000      	movs	r0, #0
  }
  
  return fpriority;
}
 80040ca:	4770      	bx	lr

080040cc <inHandlerMode>:
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80040cc:	f3ef 8005 	mrs	r0, IPSR

/* Determine whether we are in thread mode or handler mode. */
static int inHandlerMode (void)
{
  return __get_IPSR() != 0;
}
 80040d0:	3800      	subs	r0, #0
 80040d2:	bf18      	it	ne
 80040d4:	2001      	movne	r0, #1
 80040d6:	4770      	bx	lr

080040d8 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 80040d8:	b508      	push	{r3, lr}
  vTaskStartScheduler();
 80040da:	f000 fe91 	bl	8004e00 <vTaskStartScheduler>
  
  return osOK;
}
 80040de:	2000      	movs	r0, #0
 80040e0:	bd08      	pop	{r3, pc}

080040e2 <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 80040e2:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80040e6:	b087      	sub	sp, #28
 80040e8:	4604      	mov	r4, r0
 80040ea:	460f      	mov	r7, r1
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 80040ec:	6945      	ldr	r5, [r0, #20]
 80040ee:	b1bd      	cbz	r5, 8004120 <osThreadCreate+0x3e>
 80040f0:	6986      	ldr	r6, [r0, #24]
 80040f2:	b1ae      	cbz	r6, 8004120 <osThreadCreate+0x3e>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80040f4:	f8d0 8004 	ldr.w	r8, [r0, #4]
 80040f8:	f8d0 9000 	ldr.w	r9, [r0]
 80040fc:	f9b0 0008 	ldrsh.w	r0, [r0, #8]
 8004100:	f7ff ffde 	bl	80040c0 <makeFreeRtosPriority>
 8004104:	9602      	str	r6, [sp, #8]
 8004106:	9501      	str	r5, [sp, #4]
 8004108:	9000      	str	r0, [sp, #0]
 800410a:	463b      	mov	r3, r7
 800410c:	6922      	ldr	r2, [r4, #16]
 800410e:	4649      	mov	r1, r9
 8004110:	4640      	mov	r0, r8
 8004112:	f000 fe07 	bl	8004d24 <xTaskCreateStatic>
 8004116:	9005      	str	r0, [sp, #20]
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 8004118:	9805      	ldr	r0, [sp, #20]
}
 800411a:	b007      	add	sp, #28
 800411c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8004120:	6865      	ldr	r5, [r4, #4]
 8004122:	6826      	ldr	r6, [r4, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8004124:	f8d4 8010 	ldr.w	r8, [r4, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8004128:	f9b4 0008 	ldrsh.w	r0, [r4, #8]
 800412c:	f7ff ffc8 	bl	80040c0 <makeFreeRtosPriority>
 8004130:	ab05      	add	r3, sp, #20
 8004132:	9301      	str	r3, [sp, #4]
 8004134:	9000      	str	r0, [sp, #0]
 8004136:	463b      	mov	r3, r7
 8004138:	fa1f f288 	uxth.w	r2, r8
 800413c:	4631      	mov	r1, r6
 800413e:	4628      	mov	r0, r5
 8004140:	f000 fe2a 	bl	8004d98 <xTaskCreate>
 8004144:	2801      	cmp	r0, #1
 8004146:	d0e7      	beq.n	8004118 <osThreadCreate+0x36>
      return NULL;
 8004148:	2000      	movs	r0, #0
 800414a:	e7e6      	b.n	800411a <osThreadCreate+0x38>

0800414c <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 800414c:	b508      	push	{r3, lr}
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 800414e:	b900      	cbnz	r0, 8004152 <osDelay+0x6>
 8004150:	2001      	movs	r0, #1
 8004152:	f000 ff9b 	bl	800508c <vTaskDelay>
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 8004156:	2000      	movs	r0, #0
 8004158:	bd08      	pop	{r3, pc}

0800415a <osMessageCreate>:
* @param  thread_id     thread ID (obtained by \ref osThreadCreate or \ref osThreadGetId) or NULL.
* @retval  message queue ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osMessageCreate shall be consistent in every CMSIS-RTOS.
*/
osMessageQId osMessageCreate (const osMessageQDef_t *queue_def, osThreadId thread_id)
{
 800415a:	b500      	push	{lr}
 800415c:	b083      	sub	sp, #12
  (void) thread_id;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  if ((queue_def->buffer != NULL) && (queue_def->controlblock != NULL)) {
 800415e:	6882      	ldr	r2, [r0, #8]
 8004160:	b142      	cbz	r2, 8004174 <osMessageCreate+0x1a>
 8004162:	68c3      	ldr	r3, [r0, #12]
 8004164:	b133      	cbz	r3, 8004174 <osMessageCreate+0x1a>
    return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
 8004166:	2100      	movs	r1, #0
 8004168:	9100      	str	r1, [sp, #0]
 800416a:	6841      	ldr	r1, [r0, #4]
 800416c:	6800      	ldr	r0, [r0, #0]
 800416e:	f000 f9b7 	bl	80044e0 <xQueueGenericCreateStatic>
 8004172:	e004      	b.n	800417e <osMessageCreate+0x24>
  }
  else {
    return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
 8004174:	2200      	movs	r2, #0
 8004176:	6841      	ldr	r1, [r0, #4]
 8004178:	6800      	ldr	r0, [r0, #0]
 800417a:	f000 f9fb 	bl	8004574 <xQueueGenericCreate>
#elif ( configSUPPORT_STATIC_ALLOCATION == 1 )
  return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
#else  
  return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
#endif
}
 800417e:	b003      	add	sp, #12
 8004180:	f85d fb04 	ldr.w	pc, [sp], #4

08004184 <osMessagePut>:
* @param  millisec  timeout value or 0 in case of no time-out.
* @retval status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMessagePut shall be consistent in every CMSIS-RTOS.
*/
osStatus osMessagePut (osMessageQId queue_id, uint32_t info, uint32_t millisec)
{
 8004184:	b530      	push	{r4, r5, lr}
 8004186:	b085      	sub	sp, #20
 8004188:	4604      	mov	r4, r0
 800418a:	9101      	str	r1, [sp, #4]
  portBASE_TYPE taskWoken = pdFALSE;
 800418c:	2300      	movs	r3, #0
 800418e:	9303      	str	r3, [sp, #12]
  TickType_t ticks;
  
  ticks = millisec / portTICK_PERIOD_MS;
  if (ticks == 0) {
 8004190:	4615      	mov	r5, r2
 8004192:	b902      	cbnz	r2, 8004196 <osMessagePut+0x12>
    ticks = 1;
 8004194:	2501      	movs	r5, #1
  }
  
  if (inHandlerMode()) {
 8004196:	f7ff ff99 	bl	80040cc <inHandlerMode>
 800419a:	b198      	cbz	r0, 80041c4 <osMessagePut+0x40>
    if (xQueueSendFromISR(queue_id, &info, &taskWoken) != pdTRUE) {
 800419c:	2300      	movs	r3, #0
 800419e:	aa03      	add	r2, sp, #12
 80041a0:	a901      	add	r1, sp, #4
 80041a2:	4620      	mov	r0, r4
 80041a4:	f000 faca 	bl	800473c <xQueueGenericSendFromISR>
 80041a8:	2801      	cmp	r0, #1
 80041aa:	d116      	bne.n	80041da <osMessagePut+0x56>
      return osErrorOS;
    }
    portEND_SWITCHING_ISR(taskWoken);
 80041ac:	9b03      	ldr	r3, [sp, #12]
 80041ae:	b1b3      	cbz	r3, 80041de <osMessagePut+0x5a>
 80041b0:	4b0d      	ldr	r3, [pc, #52]	; (80041e8 <osMessagePut+0x64>)
 80041b2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80041b6:	601a      	str	r2, [r3, #0]
 80041b8:	f3bf 8f4f 	dsb	sy
 80041bc:	f3bf 8f6f 	isb	sy
    if (xQueueSend(queue_id, &info, ticks) != pdTRUE) {
      return osErrorOS;
    }
  }
  
  return osOK;
 80041c0:	2000      	movs	r0, #0
 80041c2:	e008      	b.n	80041d6 <osMessagePut+0x52>
    if (xQueueSend(queue_id, &info, ticks) != pdTRUE) {
 80041c4:	2300      	movs	r3, #0
 80041c6:	462a      	mov	r2, r5
 80041c8:	a901      	add	r1, sp, #4
 80041ca:	4620      	mov	r0, r4
 80041cc:	f000 f9f6 	bl	80045bc <xQueueGenericSend>
 80041d0:	2801      	cmp	r0, #1
 80041d2:	d106      	bne.n	80041e2 <osMessagePut+0x5e>
  return osOK;
 80041d4:	2000      	movs	r0, #0
}
 80041d6:	b005      	add	sp, #20
 80041d8:	bd30      	pop	{r4, r5, pc}
      return osErrorOS;
 80041da:	20ff      	movs	r0, #255	; 0xff
 80041dc:	e7fb      	b.n	80041d6 <osMessagePut+0x52>
  return osOK;
 80041de:	2000      	movs	r0, #0
 80041e0:	e7f9      	b.n	80041d6 <osMessagePut+0x52>
      return osErrorOS;
 80041e2:	20ff      	movs	r0, #255	; 0xff
 80041e4:	e7f7      	b.n	80041d6 <osMessagePut+0x52>
 80041e6:	bf00      	nop
 80041e8:	e000ed04 	.word	0xe000ed04

080041ec <osMessageGet>:
* @param  millisec  timeout value or 0 in case of no time-out.
* @retval event information that includes status code.
* @note   MUST REMAIN UNCHANGED: \b osMessageGet shall be consistent in every CMSIS-RTOS.
*/
osEvent osMessageGet (osMessageQId queue_id, uint32_t millisec)
{
 80041ec:	b570      	push	{r4, r5, r6, lr}
 80041ee:	b084      	sub	sp, #16
 80041f0:	4604      	mov	r4, r0
  portBASE_TYPE taskWoken;
  TickType_t ticks;
  osEvent event;
  
  event.def.message_id = queue_id;
 80041f2:	9102      	str	r1, [sp, #8]
  event.value.v = 0;
 80041f4:	2300      	movs	r3, #0
 80041f6:	9301      	str	r3, [sp, #4]
  
  if (queue_id == NULL) {
 80041f8:	b1d1      	cbz	r1, 8004230 <osMessageGet+0x44>
 80041fa:	460d      	mov	r5, r1
 80041fc:	4616      	mov	r6, r2
    event.status = osErrorParameter;
    return event;
  }
  
  taskWoken = pdFALSE;
 80041fe:	2300      	movs	r3, #0
 8004200:	9303      	str	r3, [sp, #12]
    if (ticks == 0) {
      ticks = 1;
    }
  }
  
  if (inHandlerMode()) {
 8004202:	f7ff ff63 	bl	80040cc <inHandlerMode>
 8004206:	b1f0      	cbz	r0, 8004246 <osMessageGet+0x5a>
    if (xQueueReceiveFromISR(queue_id, &event.value.v, &taskWoken) == pdTRUE) {
 8004208:	aa03      	add	r2, sp, #12
 800420a:	a901      	add	r1, sp, #4
 800420c:	4628      	mov	r0, r5
 800420e:	f000 fbab 	bl	8004968 <xQueueReceiveFromISR>
 8004212:	2801      	cmp	r0, #1
 8004214:	d014      	beq.n	8004240 <osMessageGet+0x54>
      /* We have mail */
      event.status = osEventMessage;
    }
    else {
      event.status = osOK;
 8004216:	2300      	movs	r3, #0
 8004218:	9300      	str	r3, [sp, #0]
    }
    portEND_SWITCHING_ISR(taskWoken);
 800421a:	9b03      	ldr	r3, [sp, #12]
 800421c:	b1eb      	cbz	r3, 800425a <osMessageGet+0x6e>
 800421e:	4b14      	ldr	r3, [pc, #80]	; (8004270 <osMessageGet+0x84>)
 8004220:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004224:	601a      	str	r2, [r3, #0]
 8004226:	f3bf 8f4f 	dsb	sy
 800422a:	f3bf 8f6f 	isb	sy
 800422e:	e014      	b.n	800425a <osMessageGet+0x6e>
    event.status = osErrorParameter;
 8004230:	2380      	movs	r3, #128	; 0x80
 8004232:	9300      	str	r3, [sp, #0]
    return event;
 8004234:	466b      	mov	r3, sp
 8004236:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800423a:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 800423e:	e011      	b.n	8004264 <osMessageGet+0x78>
      event.status = osEventMessage;
 8004240:	2310      	movs	r3, #16
 8004242:	9300      	str	r3, [sp, #0]
 8004244:	e7e9      	b.n	800421a <osMessageGet+0x2e>
  }
  else {
    if (xQueueReceive(queue_id, &event.value.v, ticks) == pdTRUE) {
 8004246:	4632      	mov	r2, r6
 8004248:	a901      	add	r1, sp, #4
 800424a:	4628      	mov	r0, r5
 800424c:	f000 fade 	bl	800480c <xQueueReceive>
 8004250:	2801      	cmp	r0, #1
 8004252:	d00a      	beq.n	800426a <osMessageGet+0x7e>
      /* We have mail */
      event.status = osEventMessage;
    }
    else {
      event.status = (ticks == 0) ? osOK : osEventTimeout;
 8004254:	b106      	cbz	r6, 8004258 <osMessageGet+0x6c>
 8004256:	2640      	movs	r6, #64	; 0x40
 8004258:	9600      	str	r6, [sp, #0]
    }
  }
  
  return event;
 800425a:	466b      	mov	r3, sp
 800425c:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8004260:	e884 0007 	stmia.w	r4, {r0, r1, r2}
}
 8004264:	4620      	mov	r0, r4
 8004266:	b004      	add	sp, #16
 8004268:	bd70      	pop	{r4, r5, r6, pc}
      event.status = osEventMessage;
 800426a:	2310      	movs	r3, #16
 800426c:	9300      	str	r3, [sp, #0]
 800426e:	e7f4      	b.n	800425a <osMessageGet+0x6e>
 8004270:	e000ed04 	.word	0xe000ed04

08004274 <vListInitialise>:
void vListInitialise( List_t * const pxList )
{
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004274:	f100 0308 	add.w	r3, r0, #8
 8004278:	6043      	str	r3, [r0, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800427a:	f04f 32ff 	mov.w	r2, #4294967295
 800427e:	6082      	str	r2, [r0, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004280:	60c3      	str	r3, [r0, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004282:	6103      	str	r3, [r0, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8004284:	2300      	movs	r3, #0
 8004286:	6003      	str	r3, [r0, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8004288:	4770      	bx	lr

0800428a <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800428a:	2300      	movs	r3, #0
 800428c:	6103      	str	r3, [r0, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800428e:	4770      	bx	lr

08004290 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
ListItem_t * const pxIndex = pxList->pxIndex;
 8004290:	6843      	ldr	r3, [r0, #4]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8004292:	604b      	str	r3, [r1, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8004294:	689a      	ldr	r2, [r3, #8]
 8004296:	608a      	str	r2, [r1, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8004298:	6051      	str	r1, [r2, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800429a:	6099      	str	r1, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800429c:	6108      	str	r0, [r1, #16]

	( pxList->uxNumberOfItems )++;
 800429e:	6803      	ldr	r3, [r0, #0]
 80042a0:	3301      	adds	r3, #1
 80042a2:	6003      	str	r3, [r0, #0]
}
 80042a4:	4770      	bx	lr

080042a6 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80042a6:	b430      	push	{r4, r5}
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 80042a8:	680d      	ldr	r5, [r1, #0]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 80042aa:	f1b5 3fff 	cmp.w	r5, #4294967295
 80042ae:	d011      	beq.n	80042d4 <vListInsert+0x2e>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 80042b0:	f100 0308 	add.w	r3, r0, #8
 80042b4:	461c      	mov	r4, r3
 80042b6:	685b      	ldr	r3, [r3, #4]
 80042b8:	681a      	ldr	r2, [r3, #0]
 80042ba:	42aa      	cmp	r2, r5
 80042bc:	d9fa      	bls.n	80042b4 <vListInsert+0xe>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 80042be:	6863      	ldr	r3, [r4, #4]
 80042c0:	604b      	str	r3, [r1, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80042c2:	6099      	str	r1, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 80042c4:	608c      	str	r4, [r1, #8]
	pxIterator->pxNext = pxNewListItem;
 80042c6:	6061      	str	r1, [r4, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 80042c8:	6108      	str	r0, [r1, #16]

	( pxList->uxNumberOfItems )++;
 80042ca:	6803      	ldr	r3, [r0, #0]
 80042cc:	3301      	adds	r3, #1
 80042ce:	6003      	str	r3, [r0, #0]
}
 80042d0:	bc30      	pop	{r4, r5}
 80042d2:	4770      	bx	lr
		pxIterator = pxList->xListEnd.pxPrevious;
 80042d4:	6904      	ldr	r4, [r0, #16]
 80042d6:	e7f2      	b.n	80042be <vListInsert+0x18>

080042d8 <uxListRemove>:

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 80042d8:	6903      	ldr	r3, [r0, #16]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80042da:	6841      	ldr	r1, [r0, #4]
 80042dc:	6882      	ldr	r2, [r0, #8]
 80042de:	608a      	str	r2, [r1, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80042e0:	6841      	ldr	r1, [r0, #4]
 80042e2:	6051      	str	r1, [r2, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 80042e4:	685a      	ldr	r2, [r3, #4]
 80042e6:	4282      	cmp	r2, r0
 80042e8:	d006      	beq.n	80042f8 <uxListRemove+0x20>
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 80042ea:	2200      	movs	r2, #0
 80042ec:	6102      	str	r2, [r0, #16]
	( pxList->uxNumberOfItems )--;
 80042ee:	681a      	ldr	r2, [r3, #0]
 80042f0:	3a01      	subs	r2, #1
 80042f2:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 80042f4:	6818      	ldr	r0, [r3, #0]
}
 80042f6:	4770      	bx	lr
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 80042f8:	6882      	ldr	r2, [r0, #8]
 80042fa:	605a      	str	r2, [r3, #4]
 80042fc:	e7f5      	b.n	80042ea <uxListRemove+0x12>

080042fe <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 80042fe:	b510      	push	{r4, lr}
 8004300:	4604      	mov	r4, r0
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8004302:	f001 f8b7 	bl	8005474 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8004306:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 8004308:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 800430a:	429a      	cmp	r2, r3
 800430c:	d004      	beq.n	8004318 <prvIsQueueFull+0x1a>
		{
			xReturn = pdTRUE;
		}
		else
		{
			xReturn = pdFALSE;
 800430e:	2400      	movs	r4, #0
		}
	}
	taskEXIT_CRITICAL();
 8004310:	f001 f8d2 	bl	80054b8 <vPortExitCritical>

	return xReturn;
}
 8004314:	4620      	mov	r0, r4
 8004316:	bd10      	pop	{r4, pc}
			xReturn = pdTRUE;
 8004318:	2401      	movs	r4, #1
 800431a:	e7f9      	b.n	8004310 <prvIsQueueFull+0x12>

0800431c <prvIsQueueEmpty>:
{
 800431c:	b510      	push	{r4, lr}
 800431e:	4604      	mov	r4, r0
	taskENTER_CRITICAL();
 8004320:	f001 f8a8 	bl	8005474 <vPortEnterCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8004324:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8004326:	b923      	cbnz	r3, 8004332 <prvIsQueueEmpty+0x16>
			xReturn = pdTRUE;
 8004328:	2401      	movs	r4, #1
	taskEXIT_CRITICAL();
 800432a:	f001 f8c5 	bl	80054b8 <vPortExitCritical>
}
 800432e:	4620      	mov	r0, r4
 8004330:	bd10      	pop	{r4, pc}
			xReturn = pdFALSE;
 8004332:	2400      	movs	r4, #0
 8004334:	e7f9      	b.n	800432a <prvIsQueueEmpty+0xe>

08004336 <prvCopyDataToQueue>:
{
 8004336:	b570      	push	{r4, r5, r6, lr}
 8004338:	4604      	mov	r4, r0
 800433a:	4615      	mov	r5, r2
	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800433c:	6b86      	ldr	r6, [r0, #56]	; 0x38
	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800433e:	6c02      	ldr	r2, [r0, #64]	; 0x40
 8004340:	b95a      	cbnz	r2, 800435a <prvCopyDataToQueue+0x24>
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8004342:	6803      	ldr	r3, [r0, #0]
 8004344:	b11b      	cbz	r3, 800434e <prvCopyDataToQueue+0x18>
BaseType_t xReturn = pdFALSE;
 8004346:	2000      	movs	r0, #0
	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8004348:	3601      	adds	r6, #1
 800434a:	63a6      	str	r6, [r4, #56]	; 0x38
}
 800434c:	bd70      	pop	{r4, r5, r6, pc}
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800434e:	6880      	ldr	r0, [r0, #8]
 8004350:	f000 ffd0 	bl	80052f4 <xTaskPriorityDisinherit>
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8004354:	2300      	movs	r3, #0
 8004356:	60a3      	str	r3, [r4, #8]
 8004358:	e7f6      	b.n	8004348 <prvCopyDataToQueue+0x12>
	else if( xPosition == queueSEND_TO_BACK )
 800435a:	b96d      	cbnz	r5, 8004378 <prvCopyDataToQueue+0x42>
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800435c:	6840      	ldr	r0, [r0, #4]
 800435e:	f001 fd87 	bl	8005e70 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8004362:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8004364:	6863      	ldr	r3, [r4, #4]
 8004366:	4413      	add	r3, r2
 8004368:	6063      	str	r3, [r4, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800436a:	68a2      	ldr	r2, [r4, #8]
 800436c:	4293      	cmp	r3, r2
 800436e:	d319      	bcc.n	80043a4 <prvCopyDataToQueue+0x6e>
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8004370:	6823      	ldr	r3, [r4, #0]
 8004372:	6063      	str	r3, [r4, #4]
BaseType_t xReturn = pdFALSE;
 8004374:	4628      	mov	r0, r5
 8004376:	e7e7      	b.n	8004348 <prvCopyDataToQueue+0x12>
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8004378:	68c0      	ldr	r0, [r0, #12]
 800437a:	f001 fd79 	bl	8005e70 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800437e:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8004380:	4251      	negs	r1, r2
 8004382:	68e3      	ldr	r3, [r4, #12]
 8004384:	1a9b      	subs	r3, r3, r2
 8004386:	60e3      	str	r3, [r4, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8004388:	6822      	ldr	r2, [r4, #0]
 800438a:	4293      	cmp	r3, r2
 800438c:	d202      	bcs.n	8004394 <prvCopyDataToQueue+0x5e>
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800438e:	68a3      	ldr	r3, [r4, #8]
 8004390:	440b      	add	r3, r1
 8004392:	60e3      	str	r3, [r4, #12]
		if( xPosition == queueOVERWRITE )
 8004394:	2d02      	cmp	r5, #2
 8004396:	d001      	beq.n	800439c <prvCopyDataToQueue+0x66>
BaseType_t xReturn = pdFALSE;
 8004398:	2000      	movs	r0, #0
 800439a:	e7d5      	b.n	8004348 <prvCopyDataToQueue+0x12>
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800439c:	b126      	cbz	r6, 80043a8 <prvCopyDataToQueue+0x72>
				--uxMessagesWaiting;
 800439e:	3e01      	subs	r6, #1
BaseType_t xReturn = pdFALSE;
 80043a0:	2000      	movs	r0, #0
 80043a2:	e7d1      	b.n	8004348 <prvCopyDataToQueue+0x12>
 80043a4:	4628      	mov	r0, r5
 80043a6:	e7cf      	b.n	8004348 <prvCopyDataToQueue+0x12>
 80043a8:	2000      	movs	r0, #0
 80043aa:	e7cd      	b.n	8004348 <prvCopyDataToQueue+0x12>

080043ac <prvCopyDataFromQueue>:
{
 80043ac:	4603      	mov	r3, r0
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 80043ae:	6c02      	ldr	r2, [r0, #64]	; 0x40
 80043b0:	b16a      	cbz	r2, 80043ce <prvCopyDataFromQueue+0x22>
{
 80043b2:	b510      	push	{r4, lr}
 80043b4:	4608      	mov	r0, r1
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80043b6:	68d9      	ldr	r1, [r3, #12]
 80043b8:	4411      	add	r1, r2
 80043ba:	60d9      	str	r1, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 80043bc:	689c      	ldr	r4, [r3, #8]
 80043be:	42a1      	cmp	r1, r4
 80043c0:	d301      	bcc.n	80043c6 <prvCopyDataFromQueue+0x1a>
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 80043c2:	6819      	ldr	r1, [r3, #0]
 80043c4:	60d9      	str	r1, [r3, #12]
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80043c6:	68d9      	ldr	r1, [r3, #12]
 80043c8:	f001 fd52 	bl	8005e70 <memcpy>
}
 80043cc:	bd10      	pop	{r4, pc}
 80043ce:	4770      	bx	lr

080043d0 <prvUnlockQueue>:
{
 80043d0:	b538      	push	{r3, r4, r5, lr}
 80043d2:	4605      	mov	r5, r0
	taskENTER_CRITICAL();
 80043d4:	f001 f84e 	bl	8005474 <vPortEnterCritical>
		int8_t cTxLock = pxQueue->cTxLock;
 80043d8:	f895 4045 	ldrb.w	r4, [r5, #69]	; 0x45
 80043dc:	b264      	sxtb	r4, r4
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80043de:	e003      	b.n	80043e8 <prvUnlockQueue+0x18>
						vTaskMissedYield();
 80043e0:	f000 ff72 	bl	80052c8 <vTaskMissedYield>
			--cTxLock;
 80043e4:	3c01      	subs	r4, #1
 80043e6:	b264      	sxtb	r4, r4
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80043e8:	2c00      	cmp	r4, #0
 80043ea:	dd08      	ble.n	80043fe <prvUnlockQueue+0x2e>
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80043ec:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 80043ee:	b133      	cbz	r3, 80043fe <prvUnlockQueue+0x2e>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80043f0:	f105 0024 	add.w	r0, r5, #36	; 0x24
 80043f4:	f000 fed4 	bl	80051a0 <xTaskRemoveFromEventList>
 80043f8:	2800      	cmp	r0, #0
 80043fa:	d0f3      	beq.n	80043e4 <prvUnlockQueue+0x14>
 80043fc:	e7f0      	b.n	80043e0 <prvUnlockQueue+0x10>
		pxQueue->cTxLock = queueUNLOCKED;
 80043fe:	23ff      	movs	r3, #255	; 0xff
 8004400:	f885 3045 	strb.w	r3, [r5, #69]	; 0x45
	taskEXIT_CRITICAL();
 8004404:	f001 f858 	bl	80054b8 <vPortExitCritical>
	taskENTER_CRITICAL();
 8004408:	f001 f834 	bl	8005474 <vPortEnterCritical>
		int8_t cRxLock = pxQueue->cRxLock;
 800440c:	f895 4044 	ldrb.w	r4, [r5, #68]	; 0x44
 8004410:	b264      	sxtb	r4, r4
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8004412:	e003      	b.n	800441c <prvUnlockQueue+0x4c>
					vTaskMissedYield();
 8004414:	f000 ff58 	bl	80052c8 <vTaskMissedYield>
				--cRxLock;
 8004418:	3c01      	subs	r4, #1
 800441a:	b264      	sxtb	r4, r4
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800441c:	2c00      	cmp	r4, #0
 800441e:	dd08      	ble.n	8004432 <prvUnlockQueue+0x62>
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8004420:	692b      	ldr	r3, [r5, #16]
 8004422:	b133      	cbz	r3, 8004432 <prvUnlockQueue+0x62>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8004424:	f105 0010 	add.w	r0, r5, #16
 8004428:	f000 feba 	bl	80051a0 <xTaskRemoveFromEventList>
 800442c:	2800      	cmp	r0, #0
 800442e:	d0f3      	beq.n	8004418 <prvUnlockQueue+0x48>
 8004430:	e7f0      	b.n	8004414 <prvUnlockQueue+0x44>
		pxQueue->cRxLock = queueUNLOCKED;
 8004432:	23ff      	movs	r3, #255	; 0xff
 8004434:	f885 3044 	strb.w	r3, [r5, #68]	; 0x44
	taskEXIT_CRITICAL();
 8004438:	f001 f83e 	bl	80054b8 <vPortExitCritical>
}
 800443c:	bd38      	pop	{r3, r4, r5, pc}
	...

08004440 <xQueueGenericReset>:
{
 8004440:	b538      	push	{r3, r4, r5, lr}
	configASSERT( pxQueue );
 8004442:	b1e0      	cbz	r0, 800447e <xQueueGenericReset+0x3e>
 8004444:	460d      	mov	r5, r1
 8004446:	4604      	mov	r4, r0
	taskENTER_CRITICAL();
 8004448:	f001 f814 	bl	8005474 <vPortEnterCritical>
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800444c:	6821      	ldr	r1, [r4, #0]
 800444e:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 8004450:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8004452:	fb03 1002 	mla	r0, r3, r2, r1
 8004456:	60a0      	str	r0, [r4, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8004458:	2000      	movs	r0, #0
 800445a:	63a0      	str	r0, [r4, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800445c:	6061      	str	r1, [r4, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800445e:	3a01      	subs	r2, #1
 8004460:	fb02 1303 	mla	r3, r2, r3, r1
 8004464:	60e3      	str	r3, [r4, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8004466:	23ff      	movs	r3, #255	; 0xff
 8004468:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800446c:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
		if( xNewQueue == pdFALSE )
 8004470:	b9ed      	cbnz	r5, 80044ae <xQueueGenericReset+0x6e>
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8004472:	6923      	ldr	r3, [r4, #16]
 8004474:	b963      	cbnz	r3, 8004490 <xQueueGenericReset+0x50>
	taskEXIT_CRITICAL();
 8004476:	f001 f81f 	bl	80054b8 <vPortExitCritical>
}
 800447a:	2001      	movs	r0, #1
 800447c:	bd38      	pop	{r3, r4, r5, pc}

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800447e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004482:	f383 8811 	msr	BASEPRI, r3
 8004486:	f3bf 8f6f 	isb	sy
 800448a:	f3bf 8f4f 	dsb	sy
	configASSERT( pxQueue );
 800448e:	e7fe      	b.n	800448e <xQueueGenericReset+0x4e>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8004490:	f104 0010 	add.w	r0, r4, #16
 8004494:	f000 fe84 	bl	80051a0 <xTaskRemoveFromEventList>
 8004498:	2800      	cmp	r0, #0
 800449a:	d0ec      	beq.n	8004476 <xQueueGenericReset+0x36>
					queueYIELD_IF_USING_PREEMPTION();
 800449c:	4b08      	ldr	r3, [pc, #32]	; (80044c0 <xQueueGenericReset+0x80>)
 800449e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80044a2:	601a      	str	r2, [r3, #0]
 80044a4:	f3bf 8f4f 	dsb	sy
 80044a8:	f3bf 8f6f 	isb	sy
 80044ac:	e7e3      	b.n	8004476 <xQueueGenericReset+0x36>
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 80044ae:	f104 0010 	add.w	r0, r4, #16
 80044b2:	f7ff fedf 	bl	8004274 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 80044b6:	f104 0024 	add.w	r0, r4, #36	; 0x24
 80044ba:	f7ff fedb 	bl	8004274 <vListInitialise>
 80044be:	e7da      	b.n	8004476 <xQueueGenericReset+0x36>
 80044c0:	e000ed04 	.word	0xe000ed04

080044c4 <prvInitialiseNewQueue>:
{
 80044c4:	b510      	push	{r4, lr}
 80044c6:	4603      	mov	r3, r0
 80044c8:	9802      	ldr	r0, [sp, #8]
	if( uxItemSize == ( UBaseType_t ) 0 )
 80044ca:	460c      	mov	r4, r1
 80044cc:	b931      	cbnz	r1, 80044dc <prvInitialiseNewQueue+0x18>
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 80044ce:	6000      	str	r0, [r0, #0]
	pxNewQueue->uxLength = uxQueueLength;
 80044d0:	63c3      	str	r3, [r0, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 80044d2:	6404      	str	r4, [r0, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 80044d4:	2101      	movs	r1, #1
 80044d6:	f7ff ffb3 	bl	8004440 <xQueueGenericReset>
}
 80044da:	bd10      	pop	{r4, pc}
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 80044dc:	6002      	str	r2, [r0, #0]
 80044de:	e7f7      	b.n	80044d0 <prvInitialiseNewQueue+0xc>

080044e0 <xQueueGenericCreateStatic>:
		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80044e0:	b940      	cbnz	r0, 80044f4 <xQueueGenericCreateStatic+0x14>
 80044e2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80044e6:	f383 8811 	msr	BASEPRI, r3
 80044ea:	f3bf 8f6f 	isb	sy
 80044ee:	f3bf 8f4f 	dsb	sy
 80044f2:	e7fe      	b.n	80044f2 <xQueueGenericCreateStatic+0x12>
	{
 80044f4:	b530      	push	{r4, r5, lr}
 80044f6:	b085      	sub	sp, #20
 80044f8:	461c      	mov	r4, r3
 80044fa:	4605      	mov	r5, r0
		configASSERT( pxStaticQueue != NULL );
 80044fc:	b153      	cbz	r3, 8004514 <xQueueGenericCreateStatic+0x34>
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 80044fe:	b192      	cbz	r2, 8004526 <xQueueGenericCreateStatic+0x46>
 8004500:	b989      	cbnz	r1, 8004526 <xQueueGenericCreateStatic+0x46>
 8004502:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004506:	f383 8811 	msr	BASEPRI, r3
 800450a:	f3bf 8f6f 	isb	sy
 800450e:	f3bf 8f4f 	dsb	sy
 8004512:	e7fe      	b.n	8004512 <xQueueGenericCreateStatic+0x32>
 8004514:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004518:	f383 8811 	msr	BASEPRI, r3
 800451c:	f3bf 8f6f 	isb	sy
 8004520:	f3bf 8f4f 	dsb	sy
		configASSERT( pxStaticQueue != NULL );
 8004524:	e7fe      	b.n	8004524 <xQueueGenericCreateStatic+0x44>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8004526:	b16a      	cbz	r2, 8004544 <xQueueGenericCreateStatic+0x64>
			volatile size_t xSize = sizeof( StaticQueue_t );
 8004528:	2348      	movs	r3, #72	; 0x48
 800452a:	9303      	str	r3, [sp, #12]
			configASSERT( xSize == sizeof( Queue_t ) );
 800452c:	9b03      	ldr	r3, [sp, #12]
 800452e:	2b48      	cmp	r3, #72	; 0x48
 8004530:	d013      	beq.n	800455a <xQueueGenericCreateStatic+0x7a>
 8004532:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004536:	f383 8811 	msr	BASEPRI, r3
 800453a:	f3bf 8f6f 	isb	sy
 800453e:	f3bf 8f4f 	dsb	sy
 8004542:	e7fe      	b.n	8004542 <xQueueGenericCreateStatic+0x62>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8004544:	2900      	cmp	r1, #0
 8004546:	d0ef      	beq.n	8004528 <xQueueGenericCreateStatic+0x48>
 8004548:	f04f 0350 	mov.w	r3, #80	; 0x50
 800454c:	f383 8811 	msr	BASEPRI, r3
 8004550:	f3bf 8f6f 	isb	sy
 8004554:	f3bf 8f4f 	dsb	sy
 8004558:	e7fe      	b.n	8004558 <xQueueGenericCreateStatic+0x78>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800455a:	9b03      	ldr	r3, [sp, #12]
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800455c:	2301      	movs	r3, #1
 800455e:	f884 3046 	strb.w	r3, [r4, #70]	; 0x46
			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8004562:	9400      	str	r4, [sp, #0]
 8004564:	f89d 3020 	ldrb.w	r3, [sp, #32]
 8004568:	4628      	mov	r0, r5
 800456a:	f7ff ffab 	bl	80044c4 <prvInitialiseNewQueue>
	}
 800456e:	4620      	mov	r0, r4
 8004570:	b005      	add	sp, #20
 8004572:	bd30      	pop	{r4, r5, pc}

08004574 <xQueueGenericCreate>:
		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8004574:	b940      	cbnz	r0, 8004588 <xQueueGenericCreate+0x14>
 8004576:	f04f 0350 	mov.w	r3, #80	; 0x50
 800457a:	f383 8811 	msr	BASEPRI, r3
 800457e:	f3bf 8f6f 	isb	sy
 8004582:	f3bf 8f4f 	dsb	sy
 8004586:	e7fe      	b.n	8004586 <xQueueGenericCreate+0x12>
	{
 8004588:	b5f0      	push	{r4, r5, r6, r7, lr}
 800458a:	b083      	sub	sp, #12
 800458c:	460d      	mov	r5, r1
 800458e:	4616      	mov	r6, r2
 8004590:	4607      	mov	r7, r0
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004592:	fb01 f000 	mul.w	r0, r1, r0
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8004596:	3048      	adds	r0, #72	; 0x48
 8004598:	f001 f922 	bl	80057e0 <pvPortMalloc>
		if( pxNewQueue != NULL )
 800459c:	4604      	mov	r4, r0
 800459e:	b150      	cbz	r0, 80045b6 <xQueueGenericCreate+0x42>
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 80045a0:	2300      	movs	r3, #0
 80045a2:	f880 3046 	strb.w	r3, [r0, #70]	; 0x46
			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80045a6:	9000      	str	r0, [sp, #0]
 80045a8:	4633      	mov	r3, r6
 80045aa:	f100 0248 	add.w	r2, r0, #72	; 0x48
 80045ae:	4629      	mov	r1, r5
 80045b0:	4638      	mov	r0, r7
 80045b2:	f7ff ff87 	bl	80044c4 <prvInitialiseNewQueue>
	}
 80045b6:	4620      	mov	r0, r4
 80045b8:	b003      	add	sp, #12
 80045ba:	bdf0      	pop	{r4, r5, r6, r7, pc}

080045bc <xQueueGenericSend>:
{
 80045bc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80045be:	b085      	sub	sp, #20
 80045c0:	9201      	str	r2, [sp, #4]
	configASSERT( pxQueue );
 80045c2:	b188      	cbz	r0, 80045e8 <xQueueGenericSend+0x2c>
 80045c4:	460e      	mov	r6, r1
 80045c6:	461d      	mov	r5, r3
 80045c8:	4604      	mov	r4, r0
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80045ca:	b1b1      	cbz	r1, 80045fa <xQueueGenericSend+0x3e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80045cc:	2d02      	cmp	r5, #2
 80045ce:	d120      	bne.n	8004612 <xQueueGenericSend+0x56>
 80045d0:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 80045d2:	2b01      	cmp	r3, #1
 80045d4:	d01d      	beq.n	8004612 <xQueueGenericSend+0x56>
 80045d6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80045da:	f383 8811 	msr	BASEPRI, r3
 80045de:	f3bf 8f6f 	isb	sy
 80045e2:	f3bf 8f4f 	dsb	sy
 80045e6:	e7fe      	b.n	80045e6 <xQueueGenericSend+0x2a>
 80045e8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80045ec:	f383 8811 	msr	BASEPRI, r3
 80045f0:	f3bf 8f6f 	isb	sy
 80045f4:	f3bf 8f4f 	dsb	sy
	configASSERT( pxQueue );
 80045f8:	e7fe      	b.n	80045f8 <xQueueGenericSend+0x3c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80045fa:	6c03      	ldr	r3, [r0, #64]	; 0x40
 80045fc:	2b00      	cmp	r3, #0
 80045fe:	d0e5      	beq.n	80045cc <xQueueGenericSend+0x10>
 8004600:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004604:	f383 8811 	msr	BASEPRI, r3
 8004608:	f3bf 8f6f 	isb	sy
 800460c:	f3bf 8f4f 	dsb	sy
 8004610:	e7fe      	b.n	8004610 <xQueueGenericSend+0x54>
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8004612:	f000 fe5f 	bl	80052d4 <xTaskGetSchedulerState>
 8004616:	4607      	mov	r7, r0
 8004618:	b958      	cbnz	r0, 8004632 <xQueueGenericSend+0x76>
 800461a:	9b01      	ldr	r3, [sp, #4]
 800461c:	2b00      	cmp	r3, #0
 800461e:	d044      	beq.n	80046aa <xQueueGenericSend+0xee>
 8004620:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004624:	f383 8811 	msr	BASEPRI, r3
 8004628:	f3bf 8f6f 	isb	sy
 800462c:	f3bf 8f4f 	dsb	sy
 8004630:	e7fe      	b.n	8004630 <xQueueGenericSend+0x74>
 8004632:	2700      	movs	r7, #0
 8004634:	e039      	b.n	80046aa <xQueueGenericSend+0xee>
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8004636:	462a      	mov	r2, r5
 8004638:	4631      	mov	r1, r6
 800463a:	4620      	mov	r0, r4
 800463c:	f7ff fe7b 	bl	8004336 <prvCopyDataToQueue>
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8004640:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8004642:	b96a      	cbnz	r2, 8004660 <xQueueGenericSend+0xa4>
					else if( xYieldRequired != pdFALSE )
 8004644:	b138      	cbz	r0, 8004656 <xQueueGenericSend+0x9a>
						queueYIELD_IF_USING_PREEMPTION();
 8004646:	4b3c      	ldr	r3, [pc, #240]	; (8004738 <xQueueGenericSend+0x17c>)
 8004648:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800464c:	601a      	str	r2, [r3, #0]
 800464e:	f3bf 8f4f 	dsb	sy
 8004652:	f3bf 8f6f 	isb	sy
				taskEXIT_CRITICAL();
 8004656:	f000 ff2f 	bl	80054b8 <vPortExitCritical>
				return pdPASS;
 800465a:	2001      	movs	r0, #1
}
 800465c:	b005      	add	sp, #20
 800465e:	bdf0      	pop	{r4, r5, r6, r7, pc}
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8004660:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8004664:	f000 fd9c 	bl	80051a0 <xTaskRemoveFromEventList>
 8004668:	2800      	cmp	r0, #0
 800466a:	d0f4      	beq.n	8004656 <xQueueGenericSend+0x9a>
							queueYIELD_IF_USING_PREEMPTION();
 800466c:	4b32      	ldr	r3, [pc, #200]	; (8004738 <xQueueGenericSend+0x17c>)
 800466e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004672:	601a      	str	r2, [r3, #0]
 8004674:	f3bf 8f4f 	dsb	sy
 8004678:	f3bf 8f6f 	isb	sy
 800467c:	e7eb      	b.n	8004656 <xQueueGenericSend+0x9a>
					taskEXIT_CRITICAL();
 800467e:	f000 ff1b 	bl	80054b8 <vPortExitCritical>
					return errQUEUE_FULL;
 8004682:	2000      	movs	r0, #0
 8004684:	e7ea      	b.n	800465c <xQueueGenericSend+0xa0>
					vTaskInternalSetTimeOutState( &xTimeOut );
 8004686:	a802      	add	r0, sp, #8
 8004688:	f000 fdd0 	bl	800522c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800468c:	2701      	movs	r7, #1
 800468e:	e019      	b.n	80046c4 <xQueueGenericSend+0x108>
		prvLockQueue( pxQueue );
 8004690:	2300      	movs	r3, #0
 8004692:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
 8004696:	e021      	b.n	80046dc <xQueueGenericSend+0x120>
 8004698:	2300      	movs	r3, #0
 800469a:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800469e:	e023      	b.n	80046e8 <xQueueGenericSend+0x12c>
				prvUnlockQueue( pxQueue );
 80046a0:	4620      	mov	r0, r4
 80046a2:	f7ff fe95 	bl	80043d0 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80046a6:	f000 fc75 	bl	8004f94 <xTaskResumeAll>
		taskENTER_CRITICAL();
 80046aa:	f000 fee3 	bl	8005474 <vPortEnterCritical>
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80046ae:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 80046b0:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 80046b2:	429a      	cmp	r2, r3
 80046b4:	d3bf      	bcc.n	8004636 <xQueueGenericSend+0x7a>
 80046b6:	2d02      	cmp	r5, #2
 80046b8:	d0bd      	beq.n	8004636 <xQueueGenericSend+0x7a>
				if( xTicksToWait == ( TickType_t ) 0 )
 80046ba:	9b01      	ldr	r3, [sp, #4]
 80046bc:	2b00      	cmp	r3, #0
 80046be:	d0de      	beq.n	800467e <xQueueGenericSend+0xc2>
				else if( xEntryTimeSet == pdFALSE )
 80046c0:	2f00      	cmp	r7, #0
 80046c2:	d0e0      	beq.n	8004686 <xQueueGenericSend+0xca>
		taskEXIT_CRITICAL();
 80046c4:	f000 fef8 	bl	80054b8 <vPortExitCritical>
		vTaskSuspendAll();
 80046c8:	f000 fbd0 	bl	8004e6c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80046cc:	f000 fed2 	bl	8005474 <vPortEnterCritical>
 80046d0:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 80046d4:	b25b      	sxtb	r3, r3
 80046d6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80046da:	d0d9      	beq.n	8004690 <xQueueGenericSend+0xd4>
 80046dc:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 80046e0:	b25b      	sxtb	r3, r3
 80046e2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80046e6:	d0d7      	beq.n	8004698 <xQueueGenericSend+0xdc>
 80046e8:	f000 fee6 	bl	80054b8 <vPortExitCritical>
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80046ec:	a901      	add	r1, sp, #4
 80046ee:	a802      	add	r0, sp, #8
 80046f0:	f000 fda8 	bl	8005244 <xTaskCheckForTimeOut>
 80046f4:	b9c8      	cbnz	r0, 800472a <xQueueGenericSend+0x16e>
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 80046f6:	4620      	mov	r0, r4
 80046f8:	f7ff fe01 	bl	80042fe <prvIsQueueFull>
 80046fc:	2800      	cmp	r0, #0
 80046fe:	d0cf      	beq.n	80046a0 <xQueueGenericSend+0xe4>
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8004700:	9901      	ldr	r1, [sp, #4]
 8004702:	f104 0010 	add.w	r0, r4, #16
 8004706:	f000 fd33 	bl	8005170 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800470a:	4620      	mov	r0, r4
 800470c:	f7ff fe60 	bl	80043d0 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8004710:	f000 fc40 	bl	8004f94 <xTaskResumeAll>
 8004714:	2800      	cmp	r0, #0
 8004716:	d1c8      	bne.n	80046aa <xQueueGenericSend+0xee>
					portYIELD_WITHIN_API();
 8004718:	4b07      	ldr	r3, [pc, #28]	; (8004738 <xQueueGenericSend+0x17c>)
 800471a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800471e:	601a      	str	r2, [r3, #0]
 8004720:	f3bf 8f4f 	dsb	sy
 8004724:	f3bf 8f6f 	isb	sy
 8004728:	e7bf      	b.n	80046aa <xQueueGenericSend+0xee>
			prvUnlockQueue( pxQueue );
 800472a:	4620      	mov	r0, r4
 800472c:	f7ff fe50 	bl	80043d0 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8004730:	f000 fc30 	bl	8004f94 <xTaskResumeAll>
			return errQUEUE_FULL;
 8004734:	2000      	movs	r0, #0
 8004736:	e791      	b.n	800465c <xQueueGenericSend+0xa0>
 8004738:	e000ed04 	.word	0xe000ed04

0800473c <xQueueGenericSendFromISR>:
{
 800473c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	configASSERT( pxQueue );
 8004740:	b190      	cbz	r0, 8004768 <xQueueGenericSendFromISR+0x2c>
 8004742:	4689      	mov	r9, r1
 8004744:	4690      	mov	r8, r2
 8004746:	461f      	mov	r7, r3
 8004748:	4604      	mov	r4, r0
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800474a:	b1b1      	cbz	r1, 800477a <xQueueGenericSendFromISR+0x3e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800474c:	2f02      	cmp	r7, #2
 800474e:	d120      	bne.n	8004792 <xQueueGenericSendFromISR+0x56>
 8004750:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8004752:	2b01      	cmp	r3, #1
 8004754:	d01d      	beq.n	8004792 <xQueueGenericSendFromISR+0x56>
 8004756:	f04f 0350 	mov.w	r3, #80	; 0x50
 800475a:	f383 8811 	msr	BASEPRI, r3
 800475e:	f3bf 8f6f 	isb	sy
 8004762:	f3bf 8f4f 	dsb	sy
 8004766:	e7fe      	b.n	8004766 <xQueueGenericSendFromISR+0x2a>
 8004768:	f04f 0350 	mov.w	r3, #80	; 0x50
 800476c:	f383 8811 	msr	BASEPRI, r3
 8004770:	f3bf 8f6f 	isb	sy
 8004774:	f3bf 8f4f 	dsb	sy
	configASSERT( pxQueue );
 8004778:	e7fe      	b.n	8004778 <xQueueGenericSendFromISR+0x3c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800477a:	6c03      	ldr	r3, [r0, #64]	; 0x40
 800477c:	2b00      	cmp	r3, #0
 800477e:	d0e5      	beq.n	800474c <xQueueGenericSendFromISR+0x10>
 8004780:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004784:	f383 8811 	msr	BASEPRI, r3
 8004788:	f3bf 8f6f 	isb	sy
 800478c:	f3bf 8f4f 	dsb	sy
 8004790:	e7fe      	b.n	8004790 <xQueueGenericSendFromISR+0x54>
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8004792:	f000 ff99 	bl	80056c8 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8004796:	f3ef 8611 	mrs	r6, BASEPRI
 800479a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800479e:	f383 8811 	msr	BASEPRI, r3
 80047a2:	f3bf 8f6f 	isb	sy
 80047a6:	f3bf 8f4f 	dsb	sy
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80047aa:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 80047ac:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 80047ae:	429a      	cmp	r2, r3
 80047b0:	d306      	bcc.n	80047c0 <xQueueGenericSendFromISR+0x84>
 80047b2:	2f02      	cmp	r7, #2
 80047b4:	d004      	beq.n	80047c0 <xQueueGenericSendFromISR+0x84>
			xReturn = errQUEUE_FULL;
 80047b6:	2000      	movs	r0, #0
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 80047b8:	f386 8811 	msr	BASEPRI, r6
}
 80047bc:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
			const int8_t cTxLock = pxQueue->cTxLock;
 80047c0:	f894 5045 	ldrb.w	r5, [r4, #69]	; 0x45
 80047c4:	b26d      	sxtb	r5, r5
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 80047c6:	6ba3      	ldr	r3, [r4, #56]	; 0x38
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80047c8:	463a      	mov	r2, r7
 80047ca:	4649      	mov	r1, r9
 80047cc:	4620      	mov	r0, r4
 80047ce:	f7ff fdb2 	bl	8004336 <prvCopyDataToQueue>
			if( cTxLock == queueUNLOCKED )
 80047d2:	f1b5 3fff 	cmp.w	r5, #4294967295
 80047d6:	d005      	beq.n	80047e4 <xQueueGenericSendFromISR+0xa8>
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 80047d8:	1c6b      	adds	r3, r5, #1
 80047da:	b25b      	sxtb	r3, r3
 80047dc:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
			xReturn = pdPASS;
 80047e0:	2001      	movs	r0, #1
 80047e2:	e7e9      	b.n	80047b8 <xQueueGenericSendFromISR+0x7c>
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80047e4:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80047e6:	b90b      	cbnz	r3, 80047ec <xQueueGenericSendFromISR+0xb0>
			xReturn = pdPASS;
 80047e8:	2001      	movs	r0, #1
 80047ea:	e7e5      	b.n	80047b8 <xQueueGenericSendFromISR+0x7c>
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80047ec:	f104 0024 	add.w	r0, r4, #36	; 0x24
 80047f0:	f000 fcd6 	bl	80051a0 <xTaskRemoveFromEventList>
 80047f4:	b130      	cbz	r0, 8004804 <xQueueGenericSendFromISR+0xc8>
							if( pxHigherPriorityTaskWoken != NULL )
 80047f6:	f1b8 0f00 	cmp.w	r8, #0
 80047fa:	d005      	beq.n	8004808 <xQueueGenericSendFromISR+0xcc>
								*pxHigherPriorityTaskWoken = pdTRUE;
 80047fc:	2001      	movs	r0, #1
 80047fe:	f8c8 0000 	str.w	r0, [r8]
 8004802:	e7d9      	b.n	80047b8 <xQueueGenericSendFromISR+0x7c>
			xReturn = pdPASS;
 8004804:	2001      	movs	r0, #1
 8004806:	e7d7      	b.n	80047b8 <xQueueGenericSendFromISR+0x7c>
 8004808:	2001      	movs	r0, #1
 800480a:	e7d5      	b.n	80047b8 <xQueueGenericSendFromISR+0x7c>

0800480c <xQueueReceive>:
{
 800480c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800480e:	b085      	sub	sp, #20
 8004810:	9201      	str	r2, [sp, #4]
	configASSERT( ( pxQueue ) );
 8004812:	b190      	cbz	r0, 800483a <xQueueReceive+0x2e>
 8004814:	460e      	mov	r6, r1
 8004816:	4604      	mov	r4, r0
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8004818:	b1c1      	cbz	r1, 800484c <xQueueReceive+0x40>
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800481a:	f000 fd5b 	bl	80052d4 <xTaskGetSchedulerState>
 800481e:	4607      	mov	r7, r0
 8004820:	bb00      	cbnz	r0, 8004864 <xQueueReceive+0x58>
 8004822:	9b01      	ldr	r3, [sp, #4]
 8004824:	2b00      	cmp	r3, #0
 8004826:	d05c      	beq.n	80048e2 <xQueueReceive+0xd6>
	__asm volatile
 8004828:	f04f 0350 	mov.w	r3, #80	; 0x50
 800482c:	f383 8811 	msr	BASEPRI, r3
 8004830:	f3bf 8f6f 	isb	sy
 8004834:	f3bf 8f4f 	dsb	sy
 8004838:	e7fe      	b.n	8004838 <xQueueReceive+0x2c>
 800483a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800483e:	f383 8811 	msr	BASEPRI, r3
 8004842:	f3bf 8f6f 	isb	sy
 8004846:	f3bf 8f4f 	dsb	sy
	configASSERT( ( pxQueue ) );
 800484a:	e7fe      	b.n	800484a <xQueueReceive+0x3e>
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800484c:	6c03      	ldr	r3, [r0, #64]	; 0x40
 800484e:	2b00      	cmp	r3, #0
 8004850:	d0e3      	beq.n	800481a <xQueueReceive+0xe>
 8004852:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004856:	f383 8811 	msr	BASEPRI, r3
 800485a:	f3bf 8f6f 	isb	sy
 800485e:	f3bf 8f4f 	dsb	sy
 8004862:	e7fe      	b.n	8004862 <xQueueReceive+0x56>
 8004864:	2700      	movs	r7, #0
 8004866:	e03c      	b.n	80048e2 <xQueueReceive+0xd6>
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8004868:	4631      	mov	r1, r6
 800486a:	4620      	mov	r0, r4
 800486c:	f7ff fd9e 	bl	80043ac <prvCopyDataFromQueue>
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8004870:	3d01      	subs	r5, #1
 8004872:	63a5      	str	r5, [r4, #56]	; 0x38
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8004874:	6923      	ldr	r3, [r4, #16]
 8004876:	b923      	cbnz	r3, 8004882 <xQueueReceive+0x76>
				taskEXIT_CRITICAL();
 8004878:	f000 fe1e 	bl	80054b8 <vPortExitCritical>
				return pdPASS;
 800487c:	2001      	movs	r0, #1
}
 800487e:	b005      	add	sp, #20
 8004880:	bdf0      	pop	{r4, r5, r6, r7, pc}
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8004882:	f104 0010 	add.w	r0, r4, #16
 8004886:	f000 fc8b 	bl	80051a0 <xTaskRemoveFromEventList>
 800488a:	2800      	cmp	r0, #0
 800488c:	d0f4      	beq.n	8004878 <xQueueReceive+0x6c>
						queueYIELD_IF_USING_PREEMPTION();
 800488e:	4b35      	ldr	r3, [pc, #212]	; (8004964 <xQueueReceive+0x158>)
 8004890:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004894:	601a      	str	r2, [r3, #0]
 8004896:	f3bf 8f4f 	dsb	sy
 800489a:	f3bf 8f6f 	isb	sy
 800489e:	e7eb      	b.n	8004878 <xQueueReceive+0x6c>
					taskEXIT_CRITICAL();
 80048a0:	f000 fe0a 	bl	80054b8 <vPortExitCritical>
					return errQUEUE_EMPTY;
 80048a4:	2000      	movs	r0, #0
 80048a6:	e7ea      	b.n	800487e <xQueueReceive+0x72>
					vTaskInternalSetTimeOutState( &xTimeOut );
 80048a8:	a802      	add	r0, sp, #8
 80048aa:	f000 fcbf 	bl	800522c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80048ae:	2701      	movs	r7, #1
 80048b0:	e021      	b.n	80048f6 <xQueueReceive+0xea>
		prvLockQueue( pxQueue );
 80048b2:	2300      	movs	r3, #0
 80048b4:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
 80048b8:	e029      	b.n	800490e <xQueueReceive+0x102>
 80048ba:	2300      	movs	r3, #0
 80048bc:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80048c0:	e02b      	b.n	800491a <xQueueReceive+0x10e>
				prvUnlockQueue( pxQueue );
 80048c2:	4620      	mov	r0, r4
 80048c4:	f7ff fd84 	bl	80043d0 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80048c8:	f000 fb64 	bl	8004f94 <xTaskResumeAll>
 80048cc:	e009      	b.n	80048e2 <xQueueReceive+0xd6>
			prvUnlockQueue( pxQueue );
 80048ce:	4620      	mov	r0, r4
 80048d0:	f7ff fd7e 	bl	80043d0 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80048d4:	f000 fb5e 	bl	8004f94 <xTaskResumeAll>
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80048d8:	4620      	mov	r0, r4
 80048da:	f7ff fd1f 	bl	800431c <prvIsQueueEmpty>
 80048de:	2800      	cmp	r0, #0
 80048e0:	d13d      	bne.n	800495e <xQueueReceive+0x152>
		taskENTER_CRITICAL();
 80048e2:	f000 fdc7 	bl	8005474 <vPortEnterCritical>
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80048e6:	6ba5      	ldr	r5, [r4, #56]	; 0x38
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80048e8:	2d00      	cmp	r5, #0
 80048ea:	d1bd      	bne.n	8004868 <xQueueReceive+0x5c>
				if( xTicksToWait == ( TickType_t ) 0 )
 80048ec:	9b01      	ldr	r3, [sp, #4]
 80048ee:	2b00      	cmp	r3, #0
 80048f0:	d0d6      	beq.n	80048a0 <xQueueReceive+0x94>
				else if( xEntryTimeSet == pdFALSE )
 80048f2:	2f00      	cmp	r7, #0
 80048f4:	d0d8      	beq.n	80048a8 <xQueueReceive+0x9c>
		taskEXIT_CRITICAL();
 80048f6:	f000 fddf 	bl	80054b8 <vPortExitCritical>
		vTaskSuspendAll();
 80048fa:	f000 fab7 	bl	8004e6c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80048fe:	f000 fdb9 	bl	8005474 <vPortEnterCritical>
 8004902:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 8004906:	b25b      	sxtb	r3, r3
 8004908:	f1b3 3fff 	cmp.w	r3, #4294967295
 800490c:	d0d1      	beq.n	80048b2 <xQueueReceive+0xa6>
 800490e:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 8004912:	b25b      	sxtb	r3, r3
 8004914:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004918:	d0cf      	beq.n	80048ba <xQueueReceive+0xae>
 800491a:	f000 fdcd 	bl	80054b8 <vPortExitCritical>
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800491e:	a901      	add	r1, sp, #4
 8004920:	a802      	add	r0, sp, #8
 8004922:	f000 fc8f 	bl	8005244 <xTaskCheckForTimeOut>
 8004926:	2800      	cmp	r0, #0
 8004928:	d1d1      	bne.n	80048ce <xQueueReceive+0xc2>
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800492a:	4620      	mov	r0, r4
 800492c:	f7ff fcf6 	bl	800431c <prvIsQueueEmpty>
 8004930:	2800      	cmp	r0, #0
 8004932:	d0c6      	beq.n	80048c2 <xQueueReceive+0xb6>
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8004934:	9901      	ldr	r1, [sp, #4]
 8004936:	f104 0024 	add.w	r0, r4, #36	; 0x24
 800493a:	f000 fc19 	bl	8005170 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800493e:	4620      	mov	r0, r4
 8004940:	f7ff fd46 	bl	80043d0 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8004944:	f000 fb26 	bl	8004f94 <xTaskResumeAll>
 8004948:	2800      	cmp	r0, #0
 800494a:	d1ca      	bne.n	80048e2 <xQueueReceive+0xd6>
					portYIELD_WITHIN_API();
 800494c:	4b05      	ldr	r3, [pc, #20]	; (8004964 <xQueueReceive+0x158>)
 800494e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004952:	601a      	str	r2, [r3, #0]
 8004954:	f3bf 8f4f 	dsb	sy
 8004958:	f3bf 8f6f 	isb	sy
 800495c:	e7c1      	b.n	80048e2 <xQueueReceive+0xd6>
				return errQUEUE_EMPTY;
 800495e:	2000      	movs	r0, #0
 8004960:	e78d      	b.n	800487e <xQueueReceive+0x72>
 8004962:	bf00      	nop
 8004964:	e000ed04 	.word	0xe000ed04

08004968 <xQueueReceiveFromISR>:
{
 8004968:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	configASSERT( pxQueue );
 800496c:	b1c8      	cbz	r0, 80049a2 <xQueueReceiveFromISR+0x3a>
 800496e:	4689      	mov	r9, r1
 8004970:	4617      	mov	r7, r2
 8004972:	4604      	mov	r4, r0
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8004974:	b1f1      	cbz	r1, 80049b4 <xQueueReceiveFromISR+0x4c>
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8004976:	f000 fea7 	bl	80056c8 <vPortValidateInterruptPriority>
	__asm volatile
 800497a:	f3ef 8611 	mrs	r6, BASEPRI
 800497e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004982:	f383 8811 	msr	BASEPRI, r3
 8004986:	f3bf 8f6f 	isb	sy
 800498a:	f3bf 8f4f 	dsb	sy
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800498e:	f8d4 8038 	ldr.w	r8, [r4, #56]	; 0x38
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8004992:	f1b8 0f00 	cmp.w	r8, #0
 8004996:	d119      	bne.n	80049cc <xQueueReceiveFromISR+0x64>
			xReturn = pdFAIL;
 8004998:	2000      	movs	r0, #0
	__asm volatile
 800499a:	f386 8811 	msr	BASEPRI, r6
}
 800499e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	__asm volatile
 80049a2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80049a6:	f383 8811 	msr	BASEPRI, r3
 80049aa:	f3bf 8f6f 	isb	sy
 80049ae:	f3bf 8f4f 	dsb	sy
	configASSERT( pxQueue );
 80049b2:	e7fe      	b.n	80049b2 <xQueueReceiveFromISR+0x4a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80049b4:	6c03      	ldr	r3, [r0, #64]	; 0x40
 80049b6:	2b00      	cmp	r3, #0
 80049b8:	d0dd      	beq.n	8004976 <xQueueReceiveFromISR+0xe>
 80049ba:	f04f 0350 	mov.w	r3, #80	; 0x50
 80049be:	f383 8811 	msr	BASEPRI, r3
 80049c2:	f3bf 8f6f 	isb	sy
 80049c6:	f3bf 8f4f 	dsb	sy
 80049ca:	e7fe      	b.n	80049ca <xQueueReceiveFromISR+0x62>
			const int8_t cRxLock = pxQueue->cRxLock;
 80049cc:	f894 5044 	ldrb.w	r5, [r4, #68]	; 0x44
 80049d0:	b26d      	sxtb	r5, r5
			prvCopyDataFromQueue( pxQueue, pvBuffer );
 80049d2:	4649      	mov	r1, r9
 80049d4:	4620      	mov	r0, r4
 80049d6:	f7ff fce9 	bl	80043ac <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 80049da:	f108 33ff 	add.w	r3, r8, #4294967295
 80049de:	63a3      	str	r3, [r4, #56]	; 0x38
			if( cRxLock == queueUNLOCKED )
 80049e0:	f1b5 3fff 	cmp.w	r5, #4294967295
 80049e4:	d005      	beq.n	80049f2 <xQueueReceiveFromISR+0x8a>
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 80049e6:	1c6b      	adds	r3, r5, #1
 80049e8:	b25b      	sxtb	r3, r3
 80049ea:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
			xReturn = pdPASS;
 80049ee:	2001      	movs	r0, #1
 80049f0:	e7d3      	b.n	800499a <xQueueReceiveFromISR+0x32>
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80049f2:	6923      	ldr	r3, [r4, #16]
 80049f4:	b90b      	cbnz	r3, 80049fa <xQueueReceiveFromISR+0x92>
			xReturn = pdPASS;
 80049f6:	2001      	movs	r0, #1
 80049f8:	e7cf      	b.n	800499a <xQueueReceiveFromISR+0x32>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80049fa:	f104 0010 	add.w	r0, r4, #16
 80049fe:	f000 fbcf 	bl	80051a0 <xTaskRemoveFromEventList>
 8004a02:	b118      	cbz	r0, 8004a0c <xQueueReceiveFromISR+0xa4>
						if( pxHigherPriorityTaskWoken != NULL )
 8004a04:	b127      	cbz	r7, 8004a10 <xQueueReceiveFromISR+0xa8>
							*pxHigherPriorityTaskWoken = pdTRUE;
 8004a06:	2001      	movs	r0, #1
 8004a08:	6038      	str	r0, [r7, #0]
 8004a0a:	e7c6      	b.n	800499a <xQueueReceiveFromISR+0x32>
			xReturn = pdPASS;
 8004a0c:	2001      	movs	r0, #1
 8004a0e:	e7c4      	b.n	800499a <xQueueReceiveFromISR+0x32>
 8004a10:	2001      	movs	r0, #1
 8004a12:	e7c2      	b.n	800499a <xQueueReceiveFromISR+0x32>

08004a14 <prvResetNextTaskUnblockTime>:

static void prvResetNextTaskUnblockTime( void )
{
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8004a14:	4b08      	ldr	r3, [pc, #32]	; (8004a38 <prvResetNextTaskUnblockTime+0x24>)
 8004a16:	681b      	ldr	r3, [r3, #0]
 8004a18:	681b      	ldr	r3, [r3, #0]
 8004a1a:	b923      	cbnz	r3, 8004a26 <prvResetNextTaskUnblockTime+0x12>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8004a1c:	4b07      	ldr	r3, [pc, #28]	; (8004a3c <prvResetNextTaskUnblockTime+0x28>)
 8004a1e:	f04f 32ff 	mov.w	r2, #4294967295
 8004a22:	601a      	str	r2, [r3, #0]
 8004a24:	4770      	bx	lr
	{
		/* The new current delayed list is not empty, get the value of
		the item at the head of the delayed list.  This is the time at
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004a26:	4b04      	ldr	r3, [pc, #16]	; (8004a38 <prvResetNextTaskUnblockTime+0x24>)
 8004a28:	681b      	ldr	r3, [r3, #0]
 8004a2a:	68db      	ldr	r3, [r3, #12]
 8004a2c:	68db      	ldr	r3, [r3, #12]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8004a2e:	685a      	ldr	r2, [r3, #4]
 8004a30:	4b02      	ldr	r3, [pc, #8]	; (8004a3c <prvResetNextTaskUnblockTime+0x28>)
 8004a32:	601a      	str	r2, [r3, #0]
	}
}
 8004a34:	4770      	bx	lr
 8004a36:	bf00      	nop
 8004a38:	20000464 	.word	0x20000464
 8004a3c:	20000534 	.word	0x20000534

08004a40 <prvInitialiseNewTask>:
{
 8004a40:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004a44:	4680      	mov	r8, r0
 8004a46:	4699      	mov	r9, r3
 8004a48:	9e08      	ldr	r6, [sp, #32]
 8004a4a:	f8dd a024 	ldr.w	sl, [sp, #36]	; 0x24
 8004a4e:	9c0a      	ldr	r4, [sp, #40]	; 0x28
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8004a50:	6b27      	ldr	r7, [r4, #48]	; 0x30
 8004a52:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
 8004a56:	3a01      	subs	r2, #1
 8004a58:	eb07 0782 	add.w	r7, r7, r2, lsl #2
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8004a5c:	f027 0707 	bic.w	r7, r7, #7
	if( pcName != NULL )
 8004a60:	b389      	cbz	r1, 8004ac6 <prvInitialiseNewTask+0x86>
 8004a62:	460d      	mov	r5, r1
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8004a64:	2200      	movs	r2, #0
 8004a66:	2a0f      	cmp	r2, #15
 8004a68:	d807      	bhi.n	8004a7a <prvInitialiseNewTask+0x3a>
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8004a6a:	5ca9      	ldrb	r1, [r5, r2]
 8004a6c:	18a3      	adds	r3, r4, r2
 8004a6e:	f883 1034 	strb.w	r1, [r3, #52]	; 0x34
			if( pcName[ x ] == ( char ) 0x00 )
 8004a72:	5cab      	ldrb	r3, [r5, r2]
 8004a74:	b10b      	cbz	r3, 8004a7a <prvInitialiseNewTask+0x3a>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8004a76:	3201      	adds	r2, #1
 8004a78:	e7f5      	b.n	8004a66 <prvInitialiseNewTask+0x26>
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8004a7a:	2300      	movs	r3, #0
 8004a7c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8004a80:	2e06      	cmp	r6, #6
 8004a82:	d900      	bls.n	8004a86 <prvInitialiseNewTask+0x46>
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8004a84:	2606      	movs	r6, #6
	pxNewTCB->uxPriority = uxPriority;
 8004a86:	62e6      	str	r6, [r4, #44]	; 0x2c
		pxNewTCB->uxBasePriority = uxPriority;
 8004a88:	6466      	str	r6, [r4, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 8004a8a:	2500      	movs	r5, #0
 8004a8c:	64a5      	str	r5, [r4, #72]	; 0x48
	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8004a8e:	1d20      	adds	r0, r4, #4
 8004a90:	f7ff fbfb 	bl	800428a <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8004a94:	f104 0018 	add.w	r0, r4, #24
 8004a98:	f7ff fbf7 	bl	800428a <vListInitialiseItem>
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8004a9c:	6124      	str	r4, [r4, #16]
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004a9e:	f1c6 0607 	rsb	r6, r6, #7
 8004aa2:	61a6      	str	r6, [r4, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8004aa4:	6264      	str	r4, [r4, #36]	; 0x24
		pxNewTCB->ulNotifiedValue = 0;
 8004aa6:	64e5      	str	r5, [r4, #76]	; 0x4c
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8004aa8:	f884 5050 	strb.w	r5, [r4, #80]	; 0x50
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8004aac:	464a      	mov	r2, r9
 8004aae:	4641      	mov	r1, r8
 8004ab0:	4638      	mov	r0, r7
 8004ab2:	f000 fcb7 	bl	8005424 <pxPortInitialiseStack>
 8004ab6:	6020      	str	r0, [r4, #0]
	if( pxCreatedTask != NULL )
 8004ab8:	f1ba 0f00 	cmp.w	sl, #0
 8004abc:	d001      	beq.n	8004ac2 <prvInitialiseNewTask+0x82>
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8004abe:	f8ca 4000 	str.w	r4, [sl]
}
 8004ac2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8004ac6:	2300      	movs	r3, #0
 8004ac8:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
 8004acc:	e7d8      	b.n	8004a80 <prvInitialiseNewTask+0x40>
	...

08004ad0 <prvInitialiseTaskLists>:
{
 8004ad0:	b538      	push	{r3, r4, r5, lr}
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8004ad2:	2400      	movs	r4, #0
 8004ad4:	e007      	b.n	8004ae6 <prvInitialiseTaskLists+0x16>
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8004ad6:	eb04 0284 	add.w	r2, r4, r4, lsl #2
 8004ada:	0093      	lsls	r3, r2, #2
 8004adc:	480e      	ldr	r0, [pc, #56]	; (8004b18 <prvInitialiseTaskLists+0x48>)
 8004ade:	4418      	add	r0, r3
 8004ae0:	f7ff fbc8 	bl	8004274 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8004ae4:	3401      	adds	r4, #1
 8004ae6:	2c06      	cmp	r4, #6
 8004ae8:	d9f5      	bls.n	8004ad6 <prvInitialiseTaskLists+0x6>
	vListInitialise( &xDelayedTaskList1 );
 8004aea:	4d0c      	ldr	r5, [pc, #48]	; (8004b1c <prvInitialiseTaskLists+0x4c>)
 8004aec:	4628      	mov	r0, r5
 8004aee:	f7ff fbc1 	bl	8004274 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8004af2:	4c0b      	ldr	r4, [pc, #44]	; (8004b20 <prvInitialiseTaskLists+0x50>)
 8004af4:	4620      	mov	r0, r4
 8004af6:	f7ff fbbd 	bl	8004274 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8004afa:	480a      	ldr	r0, [pc, #40]	; (8004b24 <prvInitialiseTaskLists+0x54>)
 8004afc:	f7ff fbba 	bl	8004274 <vListInitialise>
		vListInitialise( &xTasksWaitingTermination );
 8004b00:	4809      	ldr	r0, [pc, #36]	; (8004b28 <prvInitialiseTaskLists+0x58>)
 8004b02:	f7ff fbb7 	bl	8004274 <vListInitialise>
		vListInitialise( &xSuspendedTaskList );
 8004b06:	4809      	ldr	r0, [pc, #36]	; (8004b2c <prvInitialiseTaskLists+0x5c>)
 8004b08:	f7ff fbb4 	bl	8004274 <vListInitialise>
	pxDelayedTaskList = &xDelayedTaskList1;
 8004b0c:	4b08      	ldr	r3, [pc, #32]	; (8004b30 <prvInitialiseTaskLists+0x60>)
 8004b0e:	601d      	str	r5, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8004b10:	4b08      	ldr	r3, [pc, #32]	; (8004b34 <prvInitialiseTaskLists+0x64>)
 8004b12:	601c      	str	r4, [r3, #0]
}
 8004b14:	bd38      	pop	{r3, r4, r5, pc}
 8004b16:	bf00      	nop
 8004b18:	2000046c 	.word	0x2000046c
 8004b1c:	2000050c 	.word	0x2000050c
 8004b20:	20000520 	.word	0x20000520
 8004b24:	20000540 	.word	0x20000540
 8004b28:	2000056c 	.word	0x2000056c
 8004b2c:	20000558 	.word	0x20000558
 8004b30:	20000464 	.word	0x20000464
 8004b34:	20000468 	.word	0x20000468

08004b38 <prvAddNewTaskToReadyList>:
{
 8004b38:	b510      	push	{r4, lr}
 8004b3a:	4604      	mov	r4, r0
	taskENTER_CRITICAL();
 8004b3c:	f000 fc9a 	bl	8005474 <vPortEnterCritical>
		uxCurrentNumberOfTasks++;
 8004b40:	4a20      	ldr	r2, [pc, #128]	; (8004bc4 <prvAddNewTaskToReadyList+0x8c>)
 8004b42:	6813      	ldr	r3, [r2, #0]
 8004b44:	3301      	adds	r3, #1
 8004b46:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8004b48:	4b1f      	ldr	r3, [pc, #124]	; (8004bc8 <prvAddNewTaskToReadyList+0x90>)
 8004b4a:	681b      	ldr	r3, [r3, #0]
 8004b4c:	b15b      	cbz	r3, 8004b66 <prvAddNewTaskToReadyList+0x2e>
			if( xSchedulerRunning == pdFALSE )
 8004b4e:	4b1f      	ldr	r3, [pc, #124]	; (8004bcc <prvAddNewTaskToReadyList+0x94>)
 8004b50:	681b      	ldr	r3, [r3, #0]
 8004b52:	b96b      	cbnz	r3, 8004b70 <prvAddNewTaskToReadyList+0x38>
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8004b54:	4b1c      	ldr	r3, [pc, #112]	; (8004bc8 <prvAddNewTaskToReadyList+0x90>)
 8004b56:	681b      	ldr	r3, [r3, #0]
 8004b58:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004b5a:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8004b5c:	429a      	cmp	r2, r3
 8004b5e:	d807      	bhi.n	8004b70 <prvAddNewTaskToReadyList+0x38>
					pxCurrentTCB = pxNewTCB;
 8004b60:	4b19      	ldr	r3, [pc, #100]	; (8004bc8 <prvAddNewTaskToReadyList+0x90>)
 8004b62:	601c      	str	r4, [r3, #0]
 8004b64:	e004      	b.n	8004b70 <prvAddNewTaskToReadyList+0x38>
			pxCurrentTCB = pxNewTCB;
 8004b66:	4b18      	ldr	r3, [pc, #96]	; (8004bc8 <prvAddNewTaskToReadyList+0x90>)
 8004b68:	601c      	str	r4, [r3, #0]
			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8004b6a:	6813      	ldr	r3, [r2, #0]
 8004b6c:	2b01      	cmp	r3, #1
 8004b6e:	d026      	beq.n	8004bbe <prvAddNewTaskToReadyList+0x86>
		uxTaskNumber++;
 8004b70:	4a17      	ldr	r2, [pc, #92]	; (8004bd0 <prvAddNewTaskToReadyList+0x98>)
 8004b72:	6813      	ldr	r3, [r2, #0]
 8004b74:	3301      	adds	r3, #1
 8004b76:	6013      	str	r3, [r2, #0]
		prvAddTaskToReadyList( pxNewTCB );
 8004b78:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
 8004b7a:	2301      	movs	r3, #1
 8004b7c:	4083      	lsls	r3, r0
 8004b7e:	4a15      	ldr	r2, [pc, #84]	; (8004bd4 <prvAddNewTaskToReadyList+0x9c>)
 8004b80:	6811      	ldr	r1, [r2, #0]
 8004b82:	430b      	orrs	r3, r1
 8004b84:	6013      	str	r3, [r2, #0]
 8004b86:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8004b8a:	1d21      	adds	r1, r4, #4
 8004b8c:	4b12      	ldr	r3, [pc, #72]	; (8004bd8 <prvAddNewTaskToReadyList+0xa0>)
 8004b8e:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 8004b92:	f7ff fb7d 	bl	8004290 <vListInsertEnd>
	taskEXIT_CRITICAL();
 8004b96:	f000 fc8f 	bl	80054b8 <vPortExitCritical>
	if( xSchedulerRunning != pdFALSE )
 8004b9a:	4b0c      	ldr	r3, [pc, #48]	; (8004bcc <prvAddNewTaskToReadyList+0x94>)
 8004b9c:	681b      	ldr	r3, [r3, #0]
 8004b9e:	b16b      	cbz	r3, 8004bbc <prvAddNewTaskToReadyList+0x84>
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8004ba0:	4b09      	ldr	r3, [pc, #36]	; (8004bc8 <prvAddNewTaskToReadyList+0x90>)
 8004ba2:	681b      	ldr	r3, [r3, #0]
 8004ba4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004ba6:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8004ba8:	429a      	cmp	r2, r3
 8004baa:	d207      	bcs.n	8004bbc <prvAddNewTaskToReadyList+0x84>
			taskYIELD_IF_USING_PREEMPTION();
 8004bac:	4b0b      	ldr	r3, [pc, #44]	; (8004bdc <prvAddNewTaskToReadyList+0xa4>)
 8004bae:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004bb2:	601a      	str	r2, [r3, #0]
 8004bb4:	f3bf 8f4f 	dsb	sy
 8004bb8:	f3bf 8f6f 	isb	sy
}
 8004bbc:	bd10      	pop	{r4, pc}
				prvInitialiseTaskLists();
 8004bbe:	f7ff ff87 	bl	8004ad0 <prvInitialiseTaskLists>
 8004bc2:	e7d5      	b.n	8004b70 <prvAddNewTaskToReadyList+0x38>
 8004bc4:	200004f8 	.word	0x200004f8
 8004bc8:	20000460 	.word	0x20000460
 8004bcc:	20000554 	.word	0x20000554
 8004bd0:	20000504 	.word	0x20000504
 8004bd4:	20000508 	.word	0x20000508
 8004bd8:	2000046c 	.word	0x2000046c
 8004bdc:	e000ed04 	.word	0xe000ed04

08004be0 <prvDeleteTCB>:
	{
 8004be0:	b510      	push	{r4, lr}
 8004be2:	4604      	mov	r4, r0
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8004be4:	f890 3051 	ldrb.w	r3, [r0, #81]	; 0x51
 8004be8:	b163      	cbz	r3, 8004c04 <prvDeleteTCB+0x24>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8004bea:	2b01      	cmp	r3, #1
 8004bec:	d011      	beq.n	8004c12 <prvDeleteTCB+0x32>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8004bee:	2b02      	cmp	r3, #2
 8004bf0:	d00e      	beq.n	8004c10 <prvDeleteTCB+0x30>
 8004bf2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004bf6:	f383 8811 	msr	BASEPRI, r3
 8004bfa:	f3bf 8f6f 	isb	sy
 8004bfe:	f3bf 8f4f 	dsb	sy
 8004c02:	e7fe      	b.n	8004c02 <prvDeleteTCB+0x22>
				vPortFree( pxTCB->pxStack );
 8004c04:	6b00      	ldr	r0, [r0, #48]	; 0x30
 8004c06:	f000 fe69 	bl	80058dc <vPortFree>
				vPortFree( pxTCB );
 8004c0a:	4620      	mov	r0, r4
 8004c0c:	f000 fe66 	bl	80058dc <vPortFree>
	}
 8004c10:	bd10      	pop	{r4, pc}
				vPortFree( pxTCB );
 8004c12:	f000 fe63 	bl	80058dc <vPortFree>
 8004c16:	e7fb      	b.n	8004c10 <prvDeleteTCB+0x30>

08004c18 <prvCheckTasksWaitingTermination>:
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8004c18:	4b0f      	ldr	r3, [pc, #60]	; (8004c58 <prvCheckTasksWaitingTermination+0x40>)
 8004c1a:	681b      	ldr	r3, [r3, #0]
 8004c1c:	b1d3      	cbz	r3, 8004c54 <prvCheckTasksWaitingTermination+0x3c>
{
 8004c1e:	b510      	push	{r4, lr}
			taskENTER_CRITICAL();
 8004c20:	f000 fc28 	bl	8005474 <vPortEnterCritical>
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004c24:	4b0d      	ldr	r3, [pc, #52]	; (8004c5c <prvCheckTasksWaitingTermination+0x44>)
 8004c26:	68db      	ldr	r3, [r3, #12]
 8004c28:	68dc      	ldr	r4, [r3, #12]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8004c2a:	1d20      	adds	r0, r4, #4
 8004c2c:	f7ff fb54 	bl	80042d8 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8004c30:	4a0b      	ldr	r2, [pc, #44]	; (8004c60 <prvCheckTasksWaitingTermination+0x48>)
 8004c32:	6813      	ldr	r3, [r2, #0]
 8004c34:	3b01      	subs	r3, #1
 8004c36:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8004c38:	4a07      	ldr	r2, [pc, #28]	; (8004c58 <prvCheckTasksWaitingTermination+0x40>)
 8004c3a:	6813      	ldr	r3, [r2, #0]
 8004c3c:	3b01      	subs	r3, #1
 8004c3e:	6013      	str	r3, [r2, #0]
			taskEXIT_CRITICAL();
 8004c40:	f000 fc3a 	bl	80054b8 <vPortExitCritical>
			prvDeleteTCB( pxTCB );
 8004c44:	4620      	mov	r0, r4
 8004c46:	f7ff ffcb 	bl	8004be0 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8004c4a:	4b03      	ldr	r3, [pc, #12]	; (8004c58 <prvCheckTasksWaitingTermination+0x40>)
 8004c4c:	681b      	ldr	r3, [r3, #0]
 8004c4e:	2b00      	cmp	r3, #0
 8004c50:	d1e6      	bne.n	8004c20 <prvCheckTasksWaitingTermination+0x8>
}
 8004c52:	bd10      	pop	{r4, pc}
 8004c54:	4770      	bx	lr
 8004c56:	bf00      	nop
 8004c58:	200004fc 	.word	0x200004fc
 8004c5c:	2000056c 	.word	0x2000056c
 8004c60:	200004f8 	.word	0x200004f8

08004c64 <prvIdleTask>:
{
 8004c64:	b508      	push	{r3, lr}
		prvCheckTasksWaitingTermination();
 8004c66:	f7ff ffd7 	bl	8004c18 <prvCheckTasksWaitingTermination>
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8004c6a:	4b06      	ldr	r3, [pc, #24]	; (8004c84 <prvIdleTask+0x20>)
 8004c6c:	681b      	ldr	r3, [r3, #0]
 8004c6e:	2b01      	cmp	r3, #1
 8004c70:	d9f9      	bls.n	8004c66 <prvIdleTask+0x2>
				taskYIELD();
 8004c72:	4b05      	ldr	r3, [pc, #20]	; (8004c88 <prvIdleTask+0x24>)
 8004c74:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004c78:	601a      	str	r2, [r3, #0]
 8004c7a:	f3bf 8f4f 	dsb	sy
 8004c7e:	f3bf 8f6f 	isb	sy
 8004c82:	e7f0      	b.n	8004c66 <prvIdleTask+0x2>
 8004c84:	2000046c 	.word	0x2000046c
 8004c88:	e000ed04 	.word	0xe000ed04

08004c8c <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8004c8c:	b570      	push	{r4, r5, r6, lr}
 8004c8e:	4604      	mov	r4, r0
 8004c90:	460d      	mov	r5, r1
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8004c92:	4b1d      	ldr	r3, [pc, #116]	; (8004d08 <prvAddCurrentTaskToDelayedList+0x7c>)
 8004c94:	681e      	ldr	r6, [r3, #0]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8004c96:	4b1d      	ldr	r3, [pc, #116]	; (8004d0c <prvAddCurrentTaskToDelayedList+0x80>)
 8004c98:	6818      	ldr	r0, [r3, #0]
 8004c9a:	3004      	adds	r0, #4
 8004c9c:	f7ff fb1c 	bl	80042d8 <uxListRemove>
 8004ca0:	b950      	cbnz	r0, 8004cb8 <prvAddCurrentTaskToDelayedList+0x2c>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 8004ca2:	4b1a      	ldr	r3, [pc, #104]	; (8004d0c <prvAddCurrentTaskToDelayedList+0x80>)
 8004ca4:	681b      	ldr	r3, [r3, #0]
 8004ca6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004ca8:	2301      	movs	r3, #1
 8004caa:	fa03 f202 	lsl.w	r2, r3, r2
 8004cae:	4918      	ldr	r1, [pc, #96]	; (8004d10 <prvAddCurrentTaskToDelayedList+0x84>)
 8004cb0:	680b      	ldr	r3, [r1, #0]
 8004cb2:	ea23 0302 	bic.w	r3, r3, r2
 8004cb6:	600b      	str	r3, [r1, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8004cb8:	f1b4 3fff 	cmp.w	r4, #4294967295
 8004cbc:	d00d      	beq.n	8004cda <prvAddCurrentTaskToDelayedList+0x4e>
		else
		{
			/* Calculate the time at which the task should be woken if the event
			does not occur.  This may overflow but this doesn't matter, the
			kernel will manage it correctly. */
			xTimeToWake = xConstTickCount + xTicksToWait;
 8004cbe:	4434      	add	r4, r6

			/* The list item will be inserted in wake time order. */
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8004cc0:	4b12      	ldr	r3, [pc, #72]	; (8004d0c <prvAddCurrentTaskToDelayedList+0x80>)
 8004cc2:	681b      	ldr	r3, [r3, #0]
 8004cc4:	605c      	str	r4, [r3, #4]

			if( xTimeToWake < xConstTickCount )
 8004cc6:	42a6      	cmp	r6, r4
 8004cc8:	d910      	bls.n	8004cec <prvAddCurrentTaskToDelayedList+0x60>
			{
				/* Wake time has overflowed.  Place this item in the overflow
				list. */
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8004cca:	4b12      	ldr	r3, [pc, #72]	; (8004d14 <prvAddCurrentTaskToDelayedList+0x88>)
 8004ccc:	6818      	ldr	r0, [r3, #0]
 8004cce:	4b0f      	ldr	r3, [pc, #60]	; (8004d0c <prvAddCurrentTaskToDelayedList+0x80>)
 8004cd0:	6819      	ldr	r1, [r3, #0]
 8004cd2:	3104      	adds	r1, #4
 8004cd4:	f7ff fae7 	bl	80042a6 <vListInsert>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8004cd8:	bd70      	pop	{r4, r5, r6, pc}
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8004cda:	2d00      	cmp	r5, #0
 8004cdc:	d0ef      	beq.n	8004cbe <prvAddCurrentTaskToDelayedList+0x32>
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8004cde:	4b0b      	ldr	r3, [pc, #44]	; (8004d0c <prvAddCurrentTaskToDelayedList+0x80>)
 8004ce0:	6819      	ldr	r1, [r3, #0]
 8004ce2:	3104      	adds	r1, #4
 8004ce4:	480c      	ldr	r0, [pc, #48]	; (8004d18 <prvAddCurrentTaskToDelayedList+0x8c>)
 8004ce6:	f7ff fad3 	bl	8004290 <vListInsertEnd>
 8004cea:	e7f5      	b.n	8004cd8 <prvAddCurrentTaskToDelayedList+0x4c>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8004cec:	4b0b      	ldr	r3, [pc, #44]	; (8004d1c <prvAddCurrentTaskToDelayedList+0x90>)
 8004cee:	6818      	ldr	r0, [r3, #0]
 8004cf0:	4b06      	ldr	r3, [pc, #24]	; (8004d0c <prvAddCurrentTaskToDelayedList+0x80>)
 8004cf2:	6819      	ldr	r1, [r3, #0]
 8004cf4:	3104      	adds	r1, #4
 8004cf6:	f7ff fad6 	bl	80042a6 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8004cfa:	4b09      	ldr	r3, [pc, #36]	; (8004d20 <prvAddCurrentTaskToDelayedList+0x94>)
 8004cfc:	681b      	ldr	r3, [r3, #0]
 8004cfe:	42a3      	cmp	r3, r4
 8004d00:	d9ea      	bls.n	8004cd8 <prvAddCurrentTaskToDelayedList+0x4c>
					xNextTaskUnblockTime = xTimeToWake;
 8004d02:	4b07      	ldr	r3, [pc, #28]	; (8004d20 <prvAddCurrentTaskToDelayedList+0x94>)
 8004d04:	601c      	str	r4, [r3, #0]
}
 8004d06:	e7e7      	b.n	8004cd8 <prvAddCurrentTaskToDelayedList+0x4c>
 8004d08:	20000580 	.word	0x20000580
 8004d0c:	20000460 	.word	0x20000460
 8004d10:	20000508 	.word	0x20000508
 8004d14:	20000468 	.word	0x20000468
 8004d18:	20000558 	.word	0x20000558
 8004d1c:	20000464 	.word	0x20000464
 8004d20:	20000534 	.word	0x20000534

08004d24 <xTaskCreateStatic>:
	{
 8004d24:	b570      	push	{r4, r5, r6, lr}
 8004d26:	b086      	sub	sp, #24
 8004d28:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 8004d2a:	9c0c      	ldr	r4, [sp, #48]	; 0x30
		configASSERT( puxStackBuffer != NULL );
 8004d2c:	b175      	cbz	r5, 8004d4c <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8004d2e:	b1b4      	cbz	r4, 8004d5e <xTaskCreateStatic+0x3a>
			volatile size_t xSize = sizeof( StaticTask_t );
 8004d30:	2654      	movs	r6, #84	; 0x54
 8004d32:	9604      	str	r6, [sp, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8004d34:	9e04      	ldr	r6, [sp, #16]
 8004d36:	2e54      	cmp	r6, #84	; 0x54
 8004d38:	d01a      	beq.n	8004d70 <xTaskCreateStatic+0x4c>
 8004d3a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004d3e:	f383 8811 	msr	BASEPRI, r3
 8004d42:	f3bf 8f6f 	isb	sy
 8004d46:	f3bf 8f4f 	dsb	sy
 8004d4a:	e7fe      	b.n	8004d4a <xTaskCreateStatic+0x26>
 8004d4c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004d50:	f383 8811 	msr	BASEPRI, r3
 8004d54:	f3bf 8f6f 	isb	sy
 8004d58:	f3bf 8f4f 	dsb	sy
		configASSERT( puxStackBuffer != NULL );
 8004d5c:	e7fe      	b.n	8004d5c <xTaskCreateStatic+0x38>
 8004d5e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004d62:	f383 8811 	msr	BASEPRI, r3
 8004d66:	f3bf 8f6f 	isb	sy
 8004d6a:	f3bf 8f4f 	dsb	sy
		configASSERT( pxTaskBuffer != NULL );
 8004d6e:	e7fe      	b.n	8004d6e <xTaskCreateStatic+0x4a>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8004d70:	9e04      	ldr	r6, [sp, #16]
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8004d72:	6325      	str	r5, [r4, #48]	; 0x30
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8004d74:	2502      	movs	r5, #2
 8004d76:	f884 5051 	strb.w	r5, [r4, #81]	; 0x51
			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8004d7a:	2500      	movs	r5, #0
 8004d7c:	9503      	str	r5, [sp, #12]
 8004d7e:	9402      	str	r4, [sp, #8]
 8004d80:	ad05      	add	r5, sp, #20
 8004d82:	9501      	str	r5, [sp, #4]
 8004d84:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 8004d86:	9500      	str	r5, [sp, #0]
 8004d88:	f7ff fe5a 	bl	8004a40 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8004d8c:	4620      	mov	r0, r4
 8004d8e:	f7ff fed3 	bl	8004b38 <prvAddNewTaskToReadyList>
	}
 8004d92:	9805      	ldr	r0, [sp, #20]
 8004d94:	b006      	add	sp, #24
 8004d96:	bd70      	pop	{r4, r5, r6, pc}

08004d98 <xTaskCreate>:
	{
 8004d98:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8004d9c:	b085      	sub	sp, #20
 8004d9e:	4607      	mov	r7, r0
 8004da0:	4688      	mov	r8, r1
 8004da2:	4614      	mov	r4, r2
 8004da4:	461e      	mov	r6, r3
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8004da6:	0090      	lsls	r0, r2, #2
 8004da8:	f000 fd1a 	bl	80057e0 <pvPortMalloc>
			if( pxStack != NULL )
 8004dac:	b300      	cbz	r0, 8004df0 <xTaskCreate+0x58>
 8004dae:	4681      	mov	r9, r0
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8004db0:	2054      	movs	r0, #84	; 0x54
 8004db2:	f000 fd15 	bl	80057e0 <pvPortMalloc>
				if( pxNewTCB != NULL )
 8004db6:	4605      	mov	r5, r0
 8004db8:	b1b0      	cbz	r0, 8004de8 <xTaskCreate+0x50>
					pxNewTCB->pxStack = pxStack;
 8004dba:	f8c0 9030 	str.w	r9, [r0, #48]	; 0x30
		if( pxNewTCB != NULL )
 8004dbe:	b1e5      	cbz	r5, 8004dfa <xTaskCreate+0x62>
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8004dc0:	2300      	movs	r3, #0
 8004dc2:	f885 3051 	strb.w	r3, [r5, #81]	; 0x51
			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8004dc6:	9303      	str	r3, [sp, #12]
 8004dc8:	9502      	str	r5, [sp, #8]
 8004dca:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8004dcc:	9301      	str	r3, [sp, #4]
 8004dce:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8004dd0:	9300      	str	r3, [sp, #0]
 8004dd2:	4633      	mov	r3, r6
 8004dd4:	4622      	mov	r2, r4
 8004dd6:	4641      	mov	r1, r8
 8004dd8:	4638      	mov	r0, r7
 8004dda:	f7ff fe31 	bl	8004a40 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8004dde:	4628      	mov	r0, r5
 8004de0:	f7ff feaa 	bl	8004b38 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8004de4:	2001      	movs	r0, #1
 8004de6:	e005      	b.n	8004df4 <xTaskCreate+0x5c>
					vPortFree( pxStack );
 8004de8:	4648      	mov	r0, r9
 8004dea:	f000 fd77 	bl	80058dc <vPortFree>
 8004dee:	e7e6      	b.n	8004dbe <xTaskCreate+0x26>
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8004df0:	f04f 30ff 	mov.w	r0, #4294967295
	}
 8004df4:	b005      	add	sp, #20
 8004df6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8004dfa:	f04f 30ff 	mov.w	r0, #4294967295
		return xReturn;
 8004dfe:	e7f9      	b.n	8004df4 <xTaskCreate+0x5c>

08004e00 <vTaskStartScheduler>:
{
 8004e00:	b510      	push	{r4, lr}
 8004e02:	b088      	sub	sp, #32
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8004e04:	2400      	movs	r4, #0
 8004e06:	9405      	str	r4, [sp, #20]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8004e08:	9406      	str	r4, [sp, #24]
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8004e0a:	aa07      	add	r2, sp, #28
 8004e0c:	a906      	add	r1, sp, #24
 8004e0e:	a805      	add	r0, sp, #20
 8004e10:	f7fb fbb2 	bl	8000578 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8004e14:	9b05      	ldr	r3, [sp, #20]
 8004e16:	9302      	str	r3, [sp, #8]
 8004e18:	9b06      	ldr	r3, [sp, #24]
 8004e1a:	9301      	str	r3, [sp, #4]
 8004e1c:	9400      	str	r4, [sp, #0]
 8004e1e:	4623      	mov	r3, r4
 8004e20:	9a07      	ldr	r2, [sp, #28]
 8004e22:	490d      	ldr	r1, [pc, #52]	; (8004e58 <vTaskStartScheduler+0x58>)
 8004e24:	480d      	ldr	r0, [pc, #52]	; (8004e5c <vTaskStartScheduler+0x5c>)
 8004e26:	f7ff ff7d 	bl	8004d24 <xTaskCreateStatic>
		if( xIdleTaskHandle != NULL )
 8004e2a:	b190      	cbz	r0, 8004e52 <vTaskStartScheduler+0x52>
 8004e2c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004e30:	f383 8811 	msr	BASEPRI, r3
 8004e34:	f3bf 8f6f 	isb	sy
 8004e38:	f3bf 8f4f 	dsb	sy
		xNextTaskUnblockTime = portMAX_DELAY;
 8004e3c:	4b08      	ldr	r3, [pc, #32]	; (8004e60 <vTaskStartScheduler+0x60>)
 8004e3e:	f04f 32ff 	mov.w	r2, #4294967295
 8004e42:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8004e44:	4b07      	ldr	r3, [pc, #28]	; (8004e64 <vTaskStartScheduler+0x64>)
 8004e46:	2201      	movs	r2, #1
 8004e48:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8004e4a:	4b07      	ldr	r3, [pc, #28]	; (8004e68 <vTaskStartScheduler+0x68>)
 8004e4c:	601c      	str	r4, [r3, #0]
		if( xPortStartScheduler() != pdFALSE )
 8004e4e:	f000 fbb3 	bl	80055b8 <xPortStartScheduler>
}
 8004e52:	b008      	add	sp, #32
 8004e54:	bd10      	pop	{r4, pc}
 8004e56:	bf00      	nop
 8004e58:	080067d8 	.word	0x080067d8
 8004e5c:	08004c65 	.word	0x08004c65
 8004e60:	20000534 	.word	0x20000534
 8004e64:	20000554 	.word	0x20000554
 8004e68:	20000580 	.word	0x20000580

08004e6c <vTaskSuspendAll>:
	++uxSchedulerSuspended;
 8004e6c:	4a02      	ldr	r2, [pc, #8]	; (8004e78 <vTaskSuspendAll+0xc>)
 8004e6e:	6813      	ldr	r3, [r2, #0]
 8004e70:	3301      	adds	r3, #1
 8004e72:	6013      	str	r3, [r2, #0]
}
 8004e74:	4770      	bx	lr
 8004e76:	bf00      	nop
 8004e78:	20000500 	.word	0x20000500

08004e7c <xTaskIncrementTick>:
{
 8004e7c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004e7e:	4b3a      	ldr	r3, [pc, #232]	; (8004f68 <xTaskIncrementTick+0xec>)
 8004e80:	681b      	ldr	r3, [r3, #0]
 8004e82:	2b00      	cmp	r3, #0
 8004e84:	d169      	bne.n	8004f5a <xTaskIncrementTick+0xde>
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8004e86:	4b39      	ldr	r3, [pc, #228]	; (8004f6c <xTaskIncrementTick+0xf0>)
 8004e88:	681d      	ldr	r5, [r3, #0]
 8004e8a:	3501      	adds	r5, #1
		xTickCount = xConstTickCount;
 8004e8c:	601d      	str	r5, [r3, #0]
		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8004e8e:	b9c5      	cbnz	r5, 8004ec2 <xTaskIncrementTick+0x46>
			taskSWITCH_DELAYED_LISTS();
 8004e90:	4b37      	ldr	r3, [pc, #220]	; (8004f70 <xTaskIncrementTick+0xf4>)
 8004e92:	681b      	ldr	r3, [r3, #0]
 8004e94:	681b      	ldr	r3, [r3, #0]
 8004e96:	b143      	cbz	r3, 8004eaa <xTaskIncrementTick+0x2e>
 8004e98:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004e9c:	f383 8811 	msr	BASEPRI, r3
 8004ea0:	f3bf 8f6f 	isb	sy
 8004ea4:	f3bf 8f4f 	dsb	sy
 8004ea8:	e7fe      	b.n	8004ea8 <xTaskIncrementTick+0x2c>
 8004eaa:	4a31      	ldr	r2, [pc, #196]	; (8004f70 <xTaskIncrementTick+0xf4>)
 8004eac:	6811      	ldr	r1, [r2, #0]
 8004eae:	4b31      	ldr	r3, [pc, #196]	; (8004f74 <xTaskIncrementTick+0xf8>)
 8004eb0:	6818      	ldr	r0, [r3, #0]
 8004eb2:	6010      	str	r0, [r2, #0]
 8004eb4:	6019      	str	r1, [r3, #0]
 8004eb6:	4a30      	ldr	r2, [pc, #192]	; (8004f78 <xTaskIncrementTick+0xfc>)
 8004eb8:	6813      	ldr	r3, [r2, #0]
 8004eba:	3301      	adds	r3, #1
 8004ebc:	6013      	str	r3, [r2, #0]
 8004ebe:	f7ff fda9 	bl	8004a14 <prvResetNextTaskUnblockTime>
		if( xConstTickCount >= xNextTaskUnblockTime )
 8004ec2:	4b2e      	ldr	r3, [pc, #184]	; (8004f7c <xTaskIncrementTick+0x100>)
 8004ec4:	681b      	ldr	r3, [r3, #0]
 8004ec6:	42ab      	cmp	r3, r5
 8004ec8:	d93d      	bls.n	8004f46 <xTaskIncrementTick+0xca>
BaseType_t xSwitchRequired = pdFALSE;
 8004eca:	2400      	movs	r4, #0
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8004ecc:	4b2c      	ldr	r3, [pc, #176]	; (8004f80 <xTaskIncrementTick+0x104>)
 8004ece:	681b      	ldr	r3, [r3, #0]
 8004ed0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004ed2:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8004ed6:	009a      	lsls	r2, r3, #2
 8004ed8:	4b2a      	ldr	r3, [pc, #168]	; (8004f84 <xTaskIncrementTick+0x108>)
 8004eda:	589b      	ldr	r3, [r3, r2]
 8004edc:	2b01      	cmp	r3, #1
 8004ede:	d900      	bls.n	8004ee2 <xTaskIncrementTick+0x66>
				xSwitchRequired = pdTRUE;
 8004ee0:	2401      	movs	r4, #1
			if( xYieldPending != pdFALSE )
 8004ee2:	4b29      	ldr	r3, [pc, #164]	; (8004f88 <xTaskIncrementTick+0x10c>)
 8004ee4:	681b      	ldr	r3, [r3, #0]
 8004ee6:	2b00      	cmp	r3, #0
 8004ee8:	d03c      	beq.n	8004f64 <xTaskIncrementTick+0xe8>
				xSwitchRequired = pdTRUE;
 8004eea:	2401      	movs	r4, #1
	return xSwitchRequired;
 8004eec:	e03a      	b.n	8004f64 <xTaskIncrementTick+0xe8>
							xSwitchRequired = pdTRUE;
 8004eee:	2401      	movs	r4, #1
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8004ef0:	4b1f      	ldr	r3, [pc, #124]	; (8004f70 <xTaskIncrementTick+0xf4>)
 8004ef2:	681b      	ldr	r3, [r3, #0]
 8004ef4:	681b      	ldr	r3, [r3, #0]
 8004ef6:	b343      	cbz	r3, 8004f4a <xTaskIncrementTick+0xce>
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004ef8:	4b1d      	ldr	r3, [pc, #116]	; (8004f70 <xTaskIncrementTick+0xf4>)
 8004efa:	681b      	ldr	r3, [r3, #0]
 8004efc:	68db      	ldr	r3, [r3, #12]
 8004efe:	68de      	ldr	r6, [r3, #12]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8004f00:	6873      	ldr	r3, [r6, #4]
					if( xConstTickCount < xItemValue )
 8004f02:	429d      	cmp	r5, r3
 8004f04:	d326      	bcc.n	8004f54 <xTaskIncrementTick+0xd8>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8004f06:	1d37      	adds	r7, r6, #4
 8004f08:	4638      	mov	r0, r7
 8004f0a:	f7ff f9e5 	bl	80042d8 <uxListRemove>
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8004f0e:	6ab3      	ldr	r3, [r6, #40]	; 0x28
 8004f10:	b11b      	cbz	r3, 8004f1a <xTaskIncrementTick+0x9e>
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8004f12:	f106 0018 	add.w	r0, r6, #24
 8004f16:	f7ff f9df 	bl	80042d8 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8004f1a:	6af3      	ldr	r3, [r6, #44]	; 0x2c
 8004f1c:	2201      	movs	r2, #1
 8004f1e:	409a      	lsls	r2, r3
 8004f20:	491a      	ldr	r1, [pc, #104]	; (8004f8c <xTaskIncrementTick+0x110>)
 8004f22:	6808      	ldr	r0, [r1, #0]
 8004f24:	4302      	orrs	r2, r0
 8004f26:	600a      	str	r2, [r1, #0]
 8004f28:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8004f2c:	009a      	lsls	r2, r3, #2
 8004f2e:	4639      	mov	r1, r7
 8004f30:	4814      	ldr	r0, [pc, #80]	; (8004f84 <xTaskIncrementTick+0x108>)
 8004f32:	4410      	add	r0, r2
 8004f34:	f7ff f9ac 	bl	8004290 <vListInsertEnd>
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8004f38:	6af2      	ldr	r2, [r6, #44]	; 0x2c
 8004f3a:	4b11      	ldr	r3, [pc, #68]	; (8004f80 <xTaskIncrementTick+0x104>)
 8004f3c:	681b      	ldr	r3, [r3, #0]
 8004f3e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004f40:	429a      	cmp	r2, r3
 8004f42:	d2d4      	bcs.n	8004eee <xTaskIncrementTick+0x72>
 8004f44:	e7d4      	b.n	8004ef0 <xTaskIncrementTick+0x74>
BaseType_t xSwitchRequired = pdFALSE;
 8004f46:	2400      	movs	r4, #0
 8004f48:	e7d2      	b.n	8004ef0 <xTaskIncrementTick+0x74>
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004f4a:	4b0c      	ldr	r3, [pc, #48]	; (8004f7c <xTaskIncrementTick+0x100>)
 8004f4c:	f04f 32ff 	mov.w	r2, #4294967295
 8004f50:	601a      	str	r2, [r3, #0]
					break;
 8004f52:	e7bb      	b.n	8004ecc <xTaskIncrementTick+0x50>
						xNextTaskUnblockTime = xItemValue;
 8004f54:	4a09      	ldr	r2, [pc, #36]	; (8004f7c <xTaskIncrementTick+0x100>)
 8004f56:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8004f58:	e7b8      	b.n	8004ecc <xTaskIncrementTick+0x50>
		++xPendedTicks;
 8004f5a:	4a0d      	ldr	r2, [pc, #52]	; (8004f90 <xTaskIncrementTick+0x114>)
 8004f5c:	6813      	ldr	r3, [r2, #0]
 8004f5e:	3301      	adds	r3, #1
 8004f60:	6013      	str	r3, [r2, #0]
BaseType_t xSwitchRequired = pdFALSE;
 8004f62:	2400      	movs	r4, #0
}
 8004f64:	4620      	mov	r0, r4
 8004f66:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004f68:	20000500 	.word	0x20000500
 8004f6c:	20000580 	.word	0x20000580
 8004f70:	20000464 	.word	0x20000464
 8004f74:	20000468 	.word	0x20000468
 8004f78:	20000538 	.word	0x20000538
 8004f7c:	20000534 	.word	0x20000534
 8004f80:	20000460 	.word	0x20000460
 8004f84:	2000046c 	.word	0x2000046c
 8004f88:	20000584 	.word	0x20000584
 8004f8c:	20000508 	.word	0x20000508
 8004f90:	2000053c 	.word	0x2000053c

08004f94 <xTaskResumeAll>:
{
 8004f94:	b538      	push	{r3, r4, r5, lr}
	configASSERT( uxSchedulerSuspended );
 8004f96:	4b34      	ldr	r3, [pc, #208]	; (8005068 <xTaskResumeAll+0xd4>)
 8004f98:	681b      	ldr	r3, [r3, #0]
 8004f9a:	b943      	cbnz	r3, 8004fae <xTaskResumeAll+0x1a>
 8004f9c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004fa0:	f383 8811 	msr	BASEPRI, r3
 8004fa4:	f3bf 8f6f 	isb	sy
 8004fa8:	f3bf 8f4f 	dsb	sy
 8004fac:	e7fe      	b.n	8004fac <xTaskResumeAll+0x18>
	taskENTER_CRITICAL();
 8004fae:	f000 fa61 	bl	8005474 <vPortEnterCritical>
		--uxSchedulerSuspended;
 8004fb2:	4b2d      	ldr	r3, [pc, #180]	; (8005068 <xTaskResumeAll+0xd4>)
 8004fb4:	681a      	ldr	r2, [r3, #0]
 8004fb6:	3a01      	subs	r2, #1
 8004fb8:	601a      	str	r2, [r3, #0]
		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004fba:	681b      	ldr	r3, [r3, #0]
 8004fbc:	2b00      	cmp	r3, #0
 8004fbe:	d14d      	bne.n	800505c <xTaskResumeAll+0xc8>
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8004fc0:	4b2a      	ldr	r3, [pc, #168]	; (800506c <xTaskResumeAll+0xd8>)
 8004fc2:	681b      	ldr	r3, [r3, #0]
 8004fc4:	b90b      	cbnz	r3, 8004fca <xTaskResumeAll+0x36>
BaseType_t xAlreadyYielded = pdFALSE;
 8004fc6:	2400      	movs	r4, #0
 8004fc8:	e049      	b.n	800505e <xTaskResumeAll+0xca>
TCB_t *pxTCB = NULL;
 8004fca:	2400      	movs	r4, #0
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8004fcc:	4b28      	ldr	r3, [pc, #160]	; (8005070 <xTaskResumeAll+0xdc>)
 8004fce:	681b      	ldr	r3, [r3, #0]
 8004fd0:	b31b      	cbz	r3, 800501a <xTaskResumeAll+0x86>
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004fd2:	4b27      	ldr	r3, [pc, #156]	; (8005070 <xTaskResumeAll+0xdc>)
 8004fd4:	68db      	ldr	r3, [r3, #12]
 8004fd6:	68dc      	ldr	r4, [r3, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8004fd8:	f104 0018 	add.w	r0, r4, #24
 8004fdc:	f7ff f97c 	bl	80042d8 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8004fe0:	1d25      	adds	r5, r4, #4
 8004fe2:	4628      	mov	r0, r5
 8004fe4:	f7ff f978 	bl	80042d8 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8004fe8:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
 8004fea:	2301      	movs	r3, #1
 8004fec:	4083      	lsls	r3, r0
 8004fee:	4a21      	ldr	r2, [pc, #132]	; (8005074 <xTaskResumeAll+0xe0>)
 8004ff0:	6811      	ldr	r1, [r2, #0]
 8004ff2:	430b      	orrs	r3, r1
 8004ff4:	6013      	str	r3, [r2, #0]
 8004ff6:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8004ffa:	4629      	mov	r1, r5
 8004ffc:	4b1e      	ldr	r3, [pc, #120]	; (8005078 <xTaskResumeAll+0xe4>)
 8004ffe:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 8005002:	f7ff f945 	bl	8004290 <vListInsertEnd>
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8005006:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8005008:	4b1c      	ldr	r3, [pc, #112]	; (800507c <xTaskResumeAll+0xe8>)
 800500a:	681b      	ldr	r3, [r3, #0]
 800500c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800500e:	429a      	cmp	r2, r3
 8005010:	d3dc      	bcc.n	8004fcc <xTaskResumeAll+0x38>
						xYieldPending = pdTRUE;
 8005012:	4b1b      	ldr	r3, [pc, #108]	; (8005080 <xTaskResumeAll+0xec>)
 8005014:	2201      	movs	r2, #1
 8005016:	601a      	str	r2, [r3, #0]
 8005018:	e7d8      	b.n	8004fcc <xTaskResumeAll+0x38>
				if( pxTCB != NULL )
 800501a:	b10c      	cbz	r4, 8005020 <xTaskResumeAll+0x8c>
					prvResetNextTaskUnblockTime();
 800501c:	f7ff fcfa 	bl	8004a14 <prvResetNextTaskUnblockTime>
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8005020:	4b18      	ldr	r3, [pc, #96]	; (8005084 <xTaskResumeAll+0xf0>)
 8005022:	681c      	ldr	r4, [r3, #0]
					if( xPendedCounts > ( TickType_t ) 0U )
 8005024:	b974      	cbnz	r4, 8005044 <xTaskResumeAll+0xb0>
				if( xYieldPending != pdFALSE )
 8005026:	4b16      	ldr	r3, [pc, #88]	; (8005080 <xTaskResumeAll+0xec>)
 8005028:	681c      	ldr	r4, [r3, #0]
 800502a:	b1c4      	cbz	r4, 800505e <xTaskResumeAll+0xca>
					taskYIELD_IF_USING_PREEMPTION();
 800502c:	4b16      	ldr	r3, [pc, #88]	; (8005088 <xTaskResumeAll+0xf4>)
 800502e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005032:	601a      	str	r2, [r3, #0]
 8005034:	f3bf 8f4f 	dsb	sy
 8005038:	f3bf 8f6f 	isb	sy
						xAlreadyYielded = pdTRUE;
 800503c:	2401      	movs	r4, #1
 800503e:	e00e      	b.n	800505e <xTaskResumeAll+0xca>
						} while( xPendedCounts > ( TickType_t ) 0U );
 8005040:	3c01      	subs	r4, #1
 8005042:	d007      	beq.n	8005054 <xTaskResumeAll+0xc0>
							if( xTaskIncrementTick() != pdFALSE )
 8005044:	f7ff ff1a 	bl	8004e7c <xTaskIncrementTick>
 8005048:	2800      	cmp	r0, #0
 800504a:	d0f9      	beq.n	8005040 <xTaskResumeAll+0xac>
								xYieldPending = pdTRUE;
 800504c:	4b0c      	ldr	r3, [pc, #48]	; (8005080 <xTaskResumeAll+0xec>)
 800504e:	2201      	movs	r2, #1
 8005050:	601a      	str	r2, [r3, #0]
 8005052:	e7f5      	b.n	8005040 <xTaskResumeAll+0xac>
						xPendedTicks = 0;
 8005054:	4b0b      	ldr	r3, [pc, #44]	; (8005084 <xTaskResumeAll+0xf0>)
 8005056:	2200      	movs	r2, #0
 8005058:	601a      	str	r2, [r3, #0]
 800505a:	e7e4      	b.n	8005026 <xTaskResumeAll+0x92>
BaseType_t xAlreadyYielded = pdFALSE;
 800505c:	2400      	movs	r4, #0
	taskEXIT_CRITICAL();
 800505e:	f000 fa2b 	bl	80054b8 <vPortExitCritical>
}
 8005062:	4620      	mov	r0, r4
 8005064:	bd38      	pop	{r3, r4, r5, pc}
 8005066:	bf00      	nop
 8005068:	20000500 	.word	0x20000500
 800506c:	200004f8 	.word	0x200004f8
 8005070:	20000540 	.word	0x20000540
 8005074:	20000508 	.word	0x20000508
 8005078:	2000046c 	.word	0x2000046c
 800507c:	20000460 	.word	0x20000460
 8005080:	20000584 	.word	0x20000584
 8005084:	2000053c 	.word	0x2000053c
 8005088:	e000ed04 	.word	0xe000ed04

0800508c <vTaskDelay>:
	{
 800508c:	b510      	push	{r4, lr}
		if( xTicksToDelay > ( TickType_t ) 0U )
 800508e:	b1a8      	cbz	r0, 80050bc <vTaskDelay+0x30>
 8005090:	4604      	mov	r4, r0
			configASSERT( uxSchedulerSuspended == 0 );
 8005092:	4b0f      	ldr	r3, [pc, #60]	; (80050d0 <vTaskDelay+0x44>)
 8005094:	681b      	ldr	r3, [r3, #0]
 8005096:	b143      	cbz	r3, 80050aa <vTaskDelay+0x1e>
 8005098:	f04f 0350 	mov.w	r3, #80	; 0x50
 800509c:	f383 8811 	msr	BASEPRI, r3
 80050a0:	f3bf 8f6f 	isb	sy
 80050a4:	f3bf 8f4f 	dsb	sy
 80050a8:	e7fe      	b.n	80050a8 <vTaskDelay+0x1c>
			vTaskSuspendAll();
 80050aa:	f7ff fedf 	bl	8004e6c <vTaskSuspendAll>
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 80050ae:	2100      	movs	r1, #0
 80050b0:	4620      	mov	r0, r4
 80050b2:	f7ff fdeb 	bl	8004c8c <prvAddCurrentTaskToDelayedList>
			xAlreadyYielded = xTaskResumeAll();
 80050b6:	f7ff ff6d 	bl	8004f94 <xTaskResumeAll>
		if( xAlreadyYielded == pdFALSE )
 80050ba:	b938      	cbnz	r0, 80050cc <vTaskDelay+0x40>
			portYIELD_WITHIN_API();
 80050bc:	4b05      	ldr	r3, [pc, #20]	; (80050d4 <vTaskDelay+0x48>)
 80050be:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80050c2:	601a      	str	r2, [r3, #0]
 80050c4:	f3bf 8f4f 	dsb	sy
 80050c8:	f3bf 8f6f 	isb	sy
	}
 80050cc:	bd10      	pop	{r4, pc}
 80050ce:	bf00      	nop
 80050d0:	20000500 	.word	0x20000500
 80050d4:	e000ed04 	.word	0xe000ed04

080050d8 <vTaskSwitchContext>:
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 80050d8:	4b20      	ldr	r3, [pc, #128]	; (800515c <vTaskSwitchContext+0x84>)
 80050da:	681b      	ldr	r3, [r3, #0]
 80050dc:	b11b      	cbz	r3, 80050e6 <vTaskSwitchContext+0xe>
		xYieldPending = pdTRUE;
 80050de:	4b20      	ldr	r3, [pc, #128]	; (8005160 <vTaskSwitchContext+0x88>)
 80050e0:	2201      	movs	r2, #1
 80050e2:	601a      	str	r2, [r3, #0]
 80050e4:	4770      	bx	lr
		xYieldPending = pdFALSE;
 80050e6:	4b1e      	ldr	r3, [pc, #120]	; (8005160 <vTaskSwitchContext+0x88>)
 80050e8:	2200      	movs	r2, #0
 80050ea:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80050ec:	4b1d      	ldr	r3, [pc, #116]	; (8005164 <vTaskSwitchContext+0x8c>)
 80050ee:	681b      	ldr	r3, [r3, #0]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 80050f0:	fab3 f383 	clz	r3, r3
 80050f4:	b2db      	uxtb	r3, r3
 80050f6:	f1c3 031f 	rsb	r3, r3, #31
 80050fa:	eb03 0183 	add.w	r1, r3, r3, lsl #2
 80050fe:	008a      	lsls	r2, r1, #2
 8005100:	4919      	ldr	r1, [pc, #100]	; (8005168 <vTaskSwitchContext+0x90>)
 8005102:	588a      	ldr	r2, [r1, r2]
 8005104:	b942      	cbnz	r2, 8005118 <vTaskSwitchContext+0x40>
	__asm volatile
 8005106:	f04f 0350 	mov.w	r3, #80	; 0x50
 800510a:	f383 8811 	msr	BASEPRI, r3
 800510e:	f3bf 8f6f 	isb	sy
 8005112:	f3bf 8f4f 	dsb	sy
 8005116:	e7fe      	b.n	8005116 <vTaskSwitchContext+0x3e>
{
 8005118:	b410      	push	{r4}
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800511a:	4913      	ldr	r1, [pc, #76]	; (8005168 <vTaskSwitchContext+0x90>)
 800511c:	eb03 0083 	add.w	r0, r3, r3, lsl #2
 8005120:	0082      	lsls	r2, r0, #2
 8005122:	440a      	add	r2, r1
 8005124:	6850      	ldr	r0, [r2, #4]
 8005126:	6840      	ldr	r0, [r0, #4]
 8005128:	6050      	str	r0, [r2, #4]
 800512a:	eb03 0483 	add.w	r4, r3, r3, lsl #2
 800512e:	00a2      	lsls	r2, r4, #2
 8005130:	4614      	mov	r4, r2
 8005132:	3208      	adds	r2, #8
 8005134:	4411      	add	r1, r2
 8005136:	4288      	cmp	r0, r1
 8005138:	d00b      	beq.n	8005152 <vTaskSwitchContext+0x7a>
 800513a:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 800513e:	009a      	lsls	r2, r3, #2
 8005140:	4b09      	ldr	r3, [pc, #36]	; (8005168 <vTaskSwitchContext+0x90>)
 8005142:	4413      	add	r3, r2
 8005144:	685b      	ldr	r3, [r3, #4]
 8005146:	68da      	ldr	r2, [r3, #12]
 8005148:	4b08      	ldr	r3, [pc, #32]	; (800516c <vTaskSwitchContext+0x94>)
 800514a:	601a      	str	r2, [r3, #0]
}
 800514c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8005150:	4770      	bx	lr
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005152:	6840      	ldr	r0, [r0, #4]
 8005154:	4a04      	ldr	r2, [pc, #16]	; (8005168 <vTaskSwitchContext+0x90>)
 8005156:	4422      	add	r2, r4
 8005158:	6050      	str	r0, [r2, #4]
 800515a:	e7ee      	b.n	800513a <vTaskSwitchContext+0x62>
 800515c:	20000500 	.word	0x20000500
 8005160:	20000584 	.word	0x20000584
 8005164:	20000508 	.word	0x20000508
 8005168:	2000046c 	.word	0x2000046c
 800516c:	20000460 	.word	0x20000460

08005170 <vTaskPlaceOnEventList>:
	configASSERT( pxEventList );
 8005170:	b158      	cbz	r0, 800518a <vTaskPlaceOnEventList+0x1a>
{
 8005172:	b510      	push	{r4, lr}
 8005174:	460c      	mov	r4, r1
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8005176:	4b09      	ldr	r3, [pc, #36]	; (800519c <vTaskPlaceOnEventList+0x2c>)
 8005178:	6819      	ldr	r1, [r3, #0]
 800517a:	3118      	adds	r1, #24
 800517c:	f7ff f893 	bl	80042a6 <vListInsert>
	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8005180:	2101      	movs	r1, #1
 8005182:	4620      	mov	r0, r4
 8005184:	f7ff fd82 	bl	8004c8c <prvAddCurrentTaskToDelayedList>
}
 8005188:	bd10      	pop	{r4, pc}
 800518a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800518e:	f383 8811 	msr	BASEPRI, r3
 8005192:	f3bf 8f6f 	isb	sy
 8005196:	f3bf 8f4f 	dsb	sy
	configASSERT( pxEventList );
 800519a:	e7fe      	b.n	800519a <vTaskPlaceOnEventList+0x2a>
 800519c:	20000460 	.word	0x20000460

080051a0 <xTaskRemoveFromEventList>:
{
 80051a0:	b538      	push	{r3, r4, r5, lr}
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80051a2:	68c3      	ldr	r3, [r0, #12]
 80051a4:	68dc      	ldr	r4, [r3, #12]
	configASSERT( pxUnblockedTCB );
 80051a6:	b324      	cbz	r4, 80051f2 <xTaskRemoveFromEventList+0x52>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 80051a8:	f104 0518 	add.w	r5, r4, #24
 80051ac:	4628      	mov	r0, r5
 80051ae:	f7ff f893 	bl	80042d8 <uxListRemove>
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80051b2:	4b18      	ldr	r3, [pc, #96]	; (8005214 <xTaskRemoveFromEventList+0x74>)
 80051b4:	681b      	ldr	r3, [r3, #0]
 80051b6:	bb2b      	cbnz	r3, 8005204 <xTaskRemoveFromEventList+0x64>
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 80051b8:	1d25      	adds	r5, r4, #4
 80051ba:	4628      	mov	r0, r5
 80051bc:	f7ff f88c 	bl	80042d8 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 80051c0:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
 80051c2:	2301      	movs	r3, #1
 80051c4:	4083      	lsls	r3, r0
 80051c6:	4a14      	ldr	r2, [pc, #80]	; (8005218 <xTaskRemoveFromEventList+0x78>)
 80051c8:	6811      	ldr	r1, [r2, #0]
 80051ca:	430b      	orrs	r3, r1
 80051cc:	6013      	str	r3, [r2, #0]
 80051ce:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 80051d2:	4629      	mov	r1, r5
 80051d4:	4b11      	ldr	r3, [pc, #68]	; (800521c <xTaskRemoveFromEventList+0x7c>)
 80051d6:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 80051da:	f7ff f859 	bl	8004290 <vListInsertEnd>
	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 80051de:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 80051e0:	4b0f      	ldr	r3, [pc, #60]	; (8005220 <xTaskRemoveFromEventList+0x80>)
 80051e2:	681b      	ldr	r3, [r3, #0]
 80051e4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80051e6:	429a      	cmp	r2, r3
 80051e8:	d911      	bls.n	800520e <xTaskRemoveFromEventList+0x6e>
		xYieldPending = pdTRUE;
 80051ea:	2001      	movs	r0, #1
 80051ec:	4b0d      	ldr	r3, [pc, #52]	; (8005224 <xTaskRemoveFromEventList+0x84>)
 80051ee:	6018      	str	r0, [r3, #0]
 80051f0:	e00e      	b.n	8005210 <xTaskRemoveFromEventList+0x70>
 80051f2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80051f6:	f383 8811 	msr	BASEPRI, r3
 80051fa:	f3bf 8f6f 	isb	sy
 80051fe:	f3bf 8f4f 	dsb	sy
	configASSERT( pxUnblockedTCB );
 8005202:	e7fe      	b.n	8005202 <xTaskRemoveFromEventList+0x62>
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8005204:	4629      	mov	r1, r5
 8005206:	4808      	ldr	r0, [pc, #32]	; (8005228 <xTaskRemoveFromEventList+0x88>)
 8005208:	f7ff f842 	bl	8004290 <vListInsertEnd>
 800520c:	e7e7      	b.n	80051de <xTaskRemoveFromEventList+0x3e>
		xReturn = pdFALSE;
 800520e:	2000      	movs	r0, #0
}
 8005210:	bd38      	pop	{r3, r4, r5, pc}
 8005212:	bf00      	nop
 8005214:	20000500 	.word	0x20000500
 8005218:	20000508 	.word	0x20000508
 800521c:	2000046c 	.word	0x2000046c
 8005220:	20000460 	.word	0x20000460
 8005224:	20000584 	.word	0x20000584
 8005228:	20000540 	.word	0x20000540

0800522c <vTaskInternalSetTimeOutState>:
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800522c:	4b03      	ldr	r3, [pc, #12]	; (800523c <vTaskInternalSetTimeOutState+0x10>)
 800522e:	681b      	ldr	r3, [r3, #0]
 8005230:	6003      	str	r3, [r0, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8005232:	4b03      	ldr	r3, [pc, #12]	; (8005240 <vTaskInternalSetTimeOutState+0x14>)
 8005234:	681b      	ldr	r3, [r3, #0]
 8005236:	6043      	str	r3, [r0, #4]
}
 8005238:	4770      	bx	lr
 800523a:	bf00      	nop
 800523c:	20000538 	.word	0x20000538
 8005240:	20000580 	.word	0x20000580

08005244 <xTaskCheckForTimeOut>:
{
 8005244:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	configASSERT( pxTimeOut );
 8005246:	b1c8      	cbz	r0, 800527c <xTaskCheckForTimeOut+0x38>
 8005248:	460c      	mov	r4, r1
 800524a:	4605      	mov	r5, r0
	configASSERT( pxTicksToWait );
 800524c:	b1f9      	cbz	r1, 800528e <xTaskCheckForTimeOut+0x4a>
	taskENTER_CRITICAL();
 800524e:	f000 f911 	bl	8005474 <vPortEnterCritical>
		const TickType_t xConstTickCount = xTickCount;
 8005252:	4b1b      	ldr	r3, [pc, #108]	; (80052c0 <xTaskCheckForTimeOut+0x7c>)
 8005254:	6819      	ldr	r1, [r3, #0]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8005256:	686b      	ldr	r3, [r5, #4]
 8005258:	1ac8      	subs	r0, r1, r3
			if( *pxTicksToWait == portMAX_DELAY )
 800525a:	6822      	ldr	r2, [r4, #0]
 800525c:	f1b2 3fff 	cmp.w	r2, #4294967295
 8005260:	d026      	beq.n	80052b0 <xTaskCheckForTimeOut+0x6c>
		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8005262:	682f      	ldr	r7, [r5, #0]
 8005264:	4e17      	ldr	r6, [pc, #92]	; (80052c4 <xTaskCheckForTimeOut+0x80>)
 8005266:	6836      	ldr	r6, [r6, #0]
 8005268:	42b7      	cmp	r7, r6
 800526a:	d001      	beq.n	8005270 <xTaskCheckForTimeOut+0x2c>
 800526c:	428b      	cmp	r3, r1
 800526e:	d924      	bls.n	80052ba <xTaskCheckForTimeOut+0x76>
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8005270:	4282      	cmp	r2, r0
 8005272:	d815      	bhi.n	80052a0 <xTaskCheckForTimeOut+0x5c>
			*pxTicksToWait = 0;
 8005274:	2300      	movs	r3, #0
 8005276:	6023      	str	r3, [r4, #0]
			xReturn = pdTRUE;
 8005278:	2401      	movs	r4, #1
 800527a:	e01a      	b.n	80052b2 <xTaskCheckForTimeOut+0x6e>
 800527c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005280:	f383 8811 	msr	BASEPRI, r3
 8005284:	f3bf 8f6f 	isb	sy
 8005288:	f3bf 8f4f 	dsb	sy
	configASSERT( pxTimeOut );
 800528c:	e7fe      	b.n	800528c <xTaskCheckForTimeOut+0x48>
 800528e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005292:	f383 8811 	msr	BASEPRI, r3
 8005296:	f3bf 8f6f 	isb	sy
 800529a:	f3bf 8f4f 	dsb	sy
	configASSERT( pxTicksToWait );
 800529e:	e7fe      	b.n	800529e <xTaskCheckForTimeOut+0x5a>
			*pxTicksToWait -= xElapsedTime;
 80052a0:	1a5b      	subs	r3, r3, r1
 80052a2:	4413      	add	r3, r2
 80052a4:	6023      	str	r3, [r4, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 80052a6:	4628      	mov	r0, r5
 80052a8:	f7ff ffc0 	bl	800522c <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 80052ac:	2400      	movs	r4, #0
 80052ae:	e000      	b.n	80052b2 <xTaskCheckForTimeOut+0x6e>
				xReturn = pdFALSE;
 80052b0:	2400      	movs	r4, #0
	taskEXIT_CRITICAL();
 80052b2:	f000 f901 	bl	80054b8 <vPortExitCritical>
}
 80052b6:	4620      	mov	r0, r4
 80052b8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			xReturn = pdTRUE;
 80052ba:	2401      	movs	r4, #1
 80052bc:	e7f9      	b.n	80052b2 <xTaskCheckForTimeOut+0x6e>
 80052be:	bf00      	nop
 80052c0:	20000580 	.word	0x20000580
 80052c4:	20000538 	.word	0x20000538

080052c8 <vTaskMissedYield>:
	xYieldPending = pdTRUE;
 80052c8:	4b01      	ldr	r3, [pc, #4]	; (80052d0 <vTaskMissedYield+0x8>)
 80052ca:	2201      	movs	r2, #1
 80052cc:	601a      	str	r2, [r3, #0]
}
 80052ce:	4770      	bx	lr
 80052d0:	20000584 	.word	0x20000584

080052d4 <xTaskGetSchedulerState>:
		if( xSchedulerRunning == pdFALSE )
 80052d4:	4b05      	ldr	r3, [pc, #20]	; (80052ec <xTaskGetSchedulerState+0x18>)
 80052d6:	681b      	ldr	r3, [r3, #0]
 80052d8:	b133      	cbz	r3, 80052e8 <xTaskGetSchedulerState+0x14>
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80052da:	4b05      	ldr	r3, [pc, #20]	; (80052f0 <xTaskGetSchedulerState+0x1c>)
 80052dc:	681b      	ldr	r3, [r3, #0]
 80052de:	b10b      	cbz	r3, 80052e4 <xTaskGetSchedulerState+0x10>
				xReturn = taskSCHEDULER_SUSPENDED;
 80052e0:	2000      	movs	r0, #0
	}
 80052e2:	4770      	bx	lr
				xReturn = taskSCHEDULER_RUNNING;
 80052e4:	2002      	movs	r0, #2
 80052e6:	4770      	bx	lr
			xReturn = taskSCHEDULER_NOT_STARTED;
 80052e8:	2001      	movs	r0, #1
 80052ea:	4770      	bx	lr
 80052ec:	20000554 	.word	0x20000554
 80052f0:	20000500 	.word	0x20000500

080052f4 <xTaskPriorityDisinherit>:
		if( pxMutexHolder != NULL )
 80052f4:	2800      	cmp	r0, #0
 80052f6:	d04c      	beq.n	8005392 <xTaskPriorityDisinherit+0x9e>
	{
 80052f8:	b538      	push	{r3, r4, r5, lr}
 80052fa:	4604      	mov	r4, r0
			configASSERT( pxTCB == pxCurrentTCB );
 80052fc:	4b27      	ldr	r3, [pc, #156]	; (800539c <xTaskPriorityDisinherit+0xa8>)
 80052fe:	681b      	ldr	r3, [r3, #0]
 8005300:	4283      	cmp	r3, r0
 8005302:	d008      	beq.n	8005316 <xTaskPriorityDisinherit+0x22>
 8005304:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005308:	f383 8811 	msr	BASEPRI, r3
 800530c:	f3bf 8f6f 	isb	sy
 8005310:	f3bf 8f4f 	dsb	sy
 8005314:	e7fe      	b.n	8005314 <xTaskPriorityDisinherit+0x20>
			configASSERT( pxTCB->uxMutexesHeld );
 8005316:	6c83      	ldr	r3, [r0, #72]	; 0x48
 8005318:	b943      	cbnz	r3, 800532c <xTaskPriorityDisinherit+0x38>
 800531a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800531e:	f383 8811 	msr	BASEPRI, r3
 8005322:	f3bf 8f6f 	isb	sy
 8005326:	f3bf 8f4f 	dsb	sy
 800532a:	e7fe      	b.n	800532a <xTaskPriorityDisinherit+0x36>
			( pxTCB->uxMutexesHeld )--;
 800532c:	3b01      	subs	r3, #1
 800532e:	6483      	str	r3, [r0, #72]	; 0x48
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8005330:	6ac1      	ldr	r1, [r0, #44]	; 0x2c
 8005332:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8005334:	4291      	cmp	r1, r2
 8005336:	d02e      	beq.n	8005396 <xTaskPriorityDisinherit+0xa2>
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8005338:	b10b      	cbz	r3, 800533e <xTaskPriorityDisinherit+0x4a>
	BaseType_t xReturn = pdFALSE;
 800533a:	2000      	movs	r0, #0
	}
 800533c:	bd38      	pop	{r3, r4, r5, pc}
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800533e:	1d05      	adds	r5, r0, #4
 8005340:	4628      	mov	r0, r5
 8005342:	f7fe ffc9 	bl	80042d8 <uxListRemove>
 8005346:	b970      	cbnz	r0, 8005366 <xTaskPriorityDisinherit+0x72>
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 8005348:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 800534a:	eb02 0382 	add.w	r3, r2, r2, lsl #2
 800534e:	009b      	lsls	r3, r3, #2
 8005350:	4913      	ldr	r1, [pc, #76]	; (80053a0 <xTaskPriorityDisinherit+0xac>)
 8005352:	58cb      	ldr	r3, [r1, r3]
 8005354:	b93b      	cbnz	r3, 8005366 <xTaskPriorityDisinherit+0x72>
 8005356:	2301      	movs	r3, #1
 8005358:	fa03 f202 	lsl.w	r2, r3, r2
 800535c:	4911      	ldr	r1, [pc, #68]	; (80053a4 <xTaskPriorityDisinherit+0xb0>)
 800535e:	680b      	ldr	r3, [r1, #0]
 8005360:	ea23 0302 	bic.w	r3, r3, r2
 8005364:	600b      	str	r3, [r1, #0]
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8005366:	6c60      	ldr	r0, [r4, #68]	; 0x44
 8005368:	62e0      	str	r0, [r4, #44]	; 0x2c
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800536a:	f1c0 0307 	rsb	r3, r0, #7
 800536e:	61a3      	str	r3, [r4, #24]
					prvAddTaskToReadyList( pxTCB );
 8005370:	2401      	movs	r4, #1
 8005372:	fa04 f300 	lsl.w	r3, r4, r0
 8005376:	4a0b      	ldr	r2, [pc, #44]	; (80053a4 <xTaskPriorityDisinherit+0xb0>)
 8005378:	6811      	ldr	r1, [r2, #0]
 800537a:	430b      	orrs	r3, r1
 800537c:	6013      	str	r3, [r2, #0]
 800537e:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8005382:	4629      	mov	r1, r5
 8005384:	4b06      	ldr	r3, [pc, #24]	; (80053a0 <xTaskPriorityDisinherit+0xac>)
 8005386:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 800538a:	f7fe ff81 	bl	8004290 <vListInsertEnd>
					xReturn = pdTRUE;
 800538e:	4620      	mov	r0, r4
 8005390:	e7d4      	b.n	800533c <xTaskPriorityDisinherit+0x48>
	BaseType_t xReturn = pdFALSE;
 8005392:	2000      	movs	r0, #0
	}
 8005394:	4770      	bx	lr
	BaseType_t xReturn = pdFALSE;
 8005396:	2000      	movs	r0, #0
 8005398:	e7d0      	b.n	800533c <xTaskPriorityDisinherit+0x48>
 800539a:	bf00      	nop
 800539c:	20000460 	.word	0x20000460
 80053a0:	2000046c 	.word	0x2000046c
 80053a4:	20000508 	.word	0x20000508

080053a8 <prvTaskExitError>:
	return pxTopOfStack;
}
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 80053a8:	b082      	sub	sp, #8
volatile uint32_t ulDummy = 0;
 80053aa:	2300      	movs	r3, #0
 80053ac:	9301      	str	r3, [sp, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 80053ae:	4b0d      	ldr	r3, [pc, #52]	; (80053e4 <prvTaskExitError+0x3c>)
 80053b0:	681b      	ldr	r3, [r3, #0]
 80053b2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80053b6:	d008      	beq.n	80053ca <prvTaskExitError+0x22>
 80053b8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80053bc:	f383 8811 	msr	BASEPRI, r3
 80053c0:	f3bf 8f6f 	isb	sy
 80053c4:	f3bf 8f4f 	dsb	sy
 80053c8:	e7fe      	b.n	80053c8 <prvTaskExitError+0x20>
 80053ca:	f04f 0350 	mov.w	r3, #80	; 0x50
 80053ce:	f383 8811 	msr	BASEPRI, r3
 80053d2:	f3bf 8f6f 	isb	sy
 80053d6:	f3bf 8f4f 	dsb	sy
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 80053da:	9b01      	ldr	r3, [sp, #4]
 80053dc:	2b00      	cmp	r3, #0
 80053de:	d0fc      	beq.n	80053da <prvTaskExitError+0x32>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 80053e0:	b002      	add	sp, #8
 80053e2:	4770      	bx	lr
 80053e4:	2000011c 	.word	0x2000011c

080053e8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 80053e8:	4808      	ldr	r0, [pc, #32]	; (800540c <prvPortStartFirstTask+0x24>)
 80053ea:	6800      	ldr	r0, [r0, #0]
 80053ec:	6800      	ldr	r0, [r0, #0]
 80053ee:	f380 8808 	msr	MSP, r0
 80053f2:	f04f 0000 	mov.w	r0, #0
 80053f6:	f380 8814 	msr	CONTROL, r0
 80053fa:	b662      	cpsie	i
 80053fc:	b661      	cpsie	f
 80053fe:	f3bf 8f4f 	dsb	sy
 8005402:	f3bf 8f6f 	isb	sy
 8005406:	df00      	svc	0
 8005408:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800540a:	0000      	.short	0x0000
 800540c:	e000ed08 	.word	0xe000ed08

08005410 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8005410:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8005420 <vPortEnableVFP+0x10>
 8005414:	6801      	ldr	r1, [r0, #0]
 8005416:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800541a:	6001      	str	r1, [r0, #0]
 800541c:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800541e:	0000      	.short	0x0000
 8005420:	e000ed88 	.word	0xe000ed88

08005424 <pxPortInitialiseStack>:
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8005424:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8005428:	f840 3c04 	str.w	r3, [r0, #-4]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800542c:	f021 0101 	bic.w	r1, r1, #1
 8005430:	f840 1c08 	str.w	r1, [r0, #-8]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8005434:	4b05      	ldr	r3, [pc, #20]	; (800544c <pxPortInitialiseStack+0x28>)
 8005436:	f840 3c0c 	str.w	r3, [r0, #-12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800543a:	f840 2c20 	str.w	r2, [r0, #-32]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800543e:	f06f 0302 	mvn.w	r3, #2
 8005442:	f840 3c24 	str.w	r3, [r0, #-36]
}
 8005446:	3844      	subs	r0, #68	; 0x44
 8005448:	4770      	bx	lr
 800544a:	bf00      	nop
 800544c:	080053a9 	.word	0x080053a9

08005450 <SVC_Handler>:
	__asm volatile (
 8005450:	4b07      	ldr	r3, [pc, #28]	; (8005470 <pxCurrentTCBConst2>)
 8005452:	6819      	ldr	r1, [r3, #0]
 8005454:	6808      	ldr	r0, [r1, #0]
 8005456:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800545a:	f380 8809 	msr	PSP, r0
 800545e:	f3bf 8f6f 	isb	sy
 8005462:	f04f 0000 	mov.w	r0, #0
 8005466:	f380 8811 	msr	BASEPRI, r0
 800546a:	4770      	bx	lr
 800546c:	f3af 8000 	nop.w

08005470 <pxCurrentTCBConst2>:
 8005470:	20000460 	.word	0x20000460

08005474 <vPortEnterCritical>:
 8005474:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005478:	f383 8811 	msr	BASEPRI, r3
 800547c:	f3bf 8f6f 	isb	sy
 8005480:	f3bf 8f4f 	dsb	sy
	uxCriticalNesting++;
 8005484:	4a0a      	ldr	r2, [pc, #40]	; (80054b0 <vPortEnterCritical+0x3c>)
 8005486:	6813      	ldr	r3, [r2, #0]
 8005488:	3301      	adds	r3, #1
 800548a:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 1 )
 800548c:	2b01      	cmp	r3, #1
 800548e:	d000      	beq.n	8005492 <vPortEnterCritical+0x1e>
}
 8005490:	4770      	bx	lr
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8005492:	4b08      	ldr	r3, [pc, #32]	; (80054b4 <vPortEnterCritical+0x40>)
 8005494:	681b      	ldr	r3, [r3, #0]
 8005496:	f013 0fff 	tst.w	r3, #255	; 0xff
 800549a:	d0f9      	beq.n	8005490 <vPortEnterCritical+0x1c>
 800549c:	f04f 0350 	mov.w	r3, #80	; 0x50
 80054a0:	f383 8811 	msr	BASEPRI, r3
 80054a4:	f3bf 8f6f 	isb	sy
 80054a8:	f3bf 8f4f 	dsb	sy
 80054ac:	e7fe      	b.n	80054ac <vPortEnterCritical+0x38>
 80054ae:	bf00      	nop
 80054b0:	2000011c 	.word	0x2000011c
 80054b4:	e000ed04 	.word	0xe000ed04

080054b8 <vPortExitCritical>:
	configASSERT( uxCriticalNesting );
 80054b8:	4b09      	ldr	r3, [pc, #36]	; (80054e0 <vPortExitCritical+0x28>)
 80054ba:	681b      	ldr	r3, [r3, #0]
 80054bc:	b943      	cbnz	r3, 80054d0 <vPortExitCritical+0x18>
 80054be:	f04f 0350 	mov.w	r3, #80	; 0x50
 80054c2:	f383 8811 	msr	BASEPRI, r3
 80054c6:	f3bf 8f6f 	isb	sy
 80054ca:	f3bf 8f4f 	dsb	sy
 80054ce:	e7fe      	b.n	80054ce <vPortExitCritical+0x16>
	uxCriticalNesting--;
 80054d0:	3b01      	subs	r3, #1
 80054d2:	4a03      	ldr	r2, [pc, #12]	; (80054e0 <vPortExitCritical+0x28>)
 80054d4:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 80054d6:	b90b      	cbnz	r3, 80054dc <vPortExitCritical+0x24>
	__asm volatile
 80054d8:	f383 8811 	msr	BASEPRI, r3
}
 80054dc:	4770      	bx	lr
 80054de:	bf00      	nop
 80054e0:	2000011c 	.word	0x2000011c
	...

080054f0 <PendSV_Handler>:
	__asm volatile
 80054f0:	f3ef 8009 	mrs	r0, PSP
 80054f4:	f3bf 8f6f 	isb	sy
 80054f8:	4b15      	ldr	r3, [pc, #84]	; (8005550 <pxCurrentTCBConst>)
 80054fa:	681a      	ldr	r2, [r3, #0]
 80054fc:	f01e 0f10 	tst.w	lr, #16
 8005500:	bf08      	it	eq
 8005502:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8005506:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800550a:	6010      	str	r0, [r2, #0]
 800550c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8005510:	f04f 0050 	mov.w	r0, #80	; 0x50
 8005514:	f380 8811 	msr	BASEPRI, r0
 8005518:	f3bf 8f4f 	dsb	sy
 800551c:	f3bf 8f6f 	isb	sy
 8005520:	f7ff fdda 	bl	80050d8 <vTaskSwitchContext>
 8005524:	f04f 0000 	mov.w	r0, #0
 8005528:	f380 8811 	msr	BASEPRI, r0
 800552c:	bc09      	pop	{r0, r3}
 800552e:	6819      	ldr	r1, [r3, #0]
 8005530:	6808      	ldr	r0, [r1, #0]
 8005532:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005536:	f01e 0f10 	tst.w	lr, #16
 800553a:	bf08      	it	eq
 800553c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8005540:	f380 8809 	msr	PSP, r0
 8005544:	f3bf 8f6f 	isb	sy
 8005548:	4770      	bx	lr
 800554a:	bf00      	nop
 800554c:	f3af 8000 	nop.w

08005550 <pxCurrentTCBConst>:
 8005550:	20000460 	.word	0x20000460

08005554 <xPortSysTickHandler>:
{
 8005554:	b508      	push	{r3, lr}
	__asm volatile
 8005556:	f04f 0350 	mov.w	r3, #80	; 0x50
 800555a:	f383 8811 	msr	BASEPRI, r3
 800555e:	f3bf 8f6f 	isb	sy
 8005562:	f3bf 8f4f 	dsb	sy
		if( xTaskIncrementTick() != pdFALSE )
 8005566:	f7ff fc89 	bl	8004e7c <xTaskIncrementTick>
 800556a:	b118      	cbz	r0, 8005574 <xPortSysTickHandler+0x20>
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800556c:	4b03      	ldr	r3, [pc, #12]	; (800557c <xPortSysTickHandler+0x28>)
 800556e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005572:	601a      	str	r2, [r3, #0]
	__asm volatile
 8005574:	2300      	movs	r3, #0
 8005576:	f383 8811 	msr	BASEPRI, r3
}
 800557a:	bd08      	pop	{r3, pc}
 800557c:	e000ed04 	.word	0xe000ed04

08005580 <vPortSetupTimerInterrupt>:
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8005580:	4a08      	ldr	r2, [pc, #32]	; (80055a4 <vPortSetupTimerInterrupt+0x24>)
 8005582:	2300      	movs	r3, #0
 8005584:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8005586:	4908      	ldr	r1, [pc, #32]	; (80055a8 <vPortSetupTimerInterrupt+0x28>)
 8005588:	600b      	str	r3, [r1, #0]
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800558a:	4b08      	ldr	r3, [pc, #32]	; (80055ac <vPortSetupTimerInterrupt+0x2c>)
 800558c:	681b      	ldr	r3, [r3, #0]
 800558e:	4908      	ldr	r1, [pc, #32]	; (80055b0 <vPortSetupTimerInterrupt+0x30>)
 8005590:	fba1 1303 	umull	r1, r3, r1, r3
 8005594:	099b      	lsrs	r3, r3, #6
 8005596:	3b01      	subs	r3, #1
 8005598:	4906      	ldr	r1, [pc, #24]	; (80055b4 <vPortSetupTimerInterrupt+0x34>)
 800559a:	600b      	str	r3, [r1, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800559c:	2307      	movs	r3, #7
 800559e:	6013      	str	r3, [r2, #0]
}
 80055a0:	4770      	bx	lr
 80055a2:	bf00      	nop
 80055a4:	e000e010 	.word	0xe000e010
 80055a8:	e000e018 	.word	0xe000e018
 80055ac:	20000000 	.word	0x20000000
 80055b0:	10624dd3 	.word	0x10624dd3
 80055b4:	e000e014 	.word	0xe000e014

080055b8 <xPortStartScheduler>:
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 80055b8:	4b3a      	ldr	r3, [pc, #232]	; (80056a4 <xPortStartScheduler+0xec>)
 80055ba:	681a      	ldr	r2, [r3, #0]
 80055bc:	4b3a      	ldr	r3, [pc, #232]	; (80056a8 <xPortStartScheduler+0xf0>)
 80055be:	429a      	cmp	r2, r3
 80055c0:	d029      	beq.n	8005616 <xPortStartScheduler+0x5e>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 80055c2:	4b38      	ldr	r3, [pc, #224]	; (80056a4 <xPortStartScheduler+0xec>)
 80055c4:	681a      	ldr	r2, [r3, #0]
 80055c6:	4b39      	ldr	r3, [pc, #228]	; (80056ac <xPortStartScheduler+0xf4>)
 80055c8:	429a      	cmp	r2, r3
 80055ca:	d02d      	beq.n	8005628 <xPortStartScheduler+0x70>
{
 80055cc:	b510      	push	{r4, lr}
 80055ce:	b082      	sub	sp, #8
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 80055d0:	4b37      	ldr	r3, [pc, #220]	; (80056b0 <xPortStartScheduler+0xf8>)
 80055d2:	781a      	ldrb	r2, [r3, #0]
 80055d4:	b2d2      	uxtb	r2, r2
 80055d6:	9201      	str	r2, [sp, #4]
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 80055d8:	22ff      	movs	r2, #255	; 0xff
 80055da:	701a      	strb	r2, [r3, #0]
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 80055dc:	781b      	ldrb	r3, [r3, #0]
 80055de:	b2db      	uxtb	r3, r3
 80055e0:	f88d 3003 	strb.w	r3, [sp, #3]
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 80055e4:	f89d 3003 	ldrb.w	r3, [sp, #3]
 80055e8:	f003 0350 	and.w	r3, r3, #80	; 0x50
 80055ec:	4a31      	ldr	r2, [pc, #196]	; (80056b4 <xPortStartScheduler+0xfc>)
 80055ee:	7013      	strb	r3, [r2, #0]
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 80055f0:	4b31      	ldr	r3, [pc, #196]	; (80056b8 <xPortStartScheduler+0x100>)
 80055f2:	2207      	movs	r2, #7
 80055f4:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80055f6:	f89d 3003 	ldrb.w	r3, [sp, #3]
 80055fa:	f013 0f80 	tst.w	r3, #128	; 0x80
 80055fe:	d01c      	beq.n	800563a <xPortStartScheduler+0x82>
			ulMaxPRIGROUPValue--;
 8005600:	4a2d      	ldr	r2, [pc, #180]	; (80056b8 <xPortStartScheduler+0x100>)
 8005602:	6813      	ldr	r3, [r2, #0]
 8005604:	3b01      	subs	r3, #1
 8005606:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8005608:	f89d 3003 	ldrb.w	r3, [sp, #3]
 800560c:	005b      	lsls	r3, r3, #1
 800560e:	b2db      	uxtb	r3, r3
 8005610:	f88d 3003 	strb.w	r3, [sp, #3]
 8005614:	e7ef      	b.n	80055f6 <xPortStartScheduler+0x3e>
	__asm volatile
 8005616:	f04f 0350 	mov.w	r3, #80	; 0x50
 800561a:	f383 8811 	msr	BASEPRI, r3
 800561e:	f3bf 8f6f 	isb	sy
 8005622:	f3bf 8f4f 	dsb	sy
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8005626:	e7fe      	b.n	8005626 <xPortStartScheduler+0x6e>
 8005628:	f04f 0350 	mov.w	r3, #80	; 0x50
 800562c:	f383 8811 	msr	BASEPRI, r3
 8005630:	f3bf 8f6f 	isb	sy
 8005634:	f3bf 8f4f 	dsb	sy
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8005638:	e7fe      	b.n	8005638 <xPortStartScheduler+0x80>
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800563a:	4b1f      	ldr	r3, [pc, #124]	; (80056b8 <xPortStartScheduler+0x100>)
 800563c:	681b      	ldr	r3, [r3, #0]
 800563e:	2b03      	cmp	r3, #3
 8005640:	d008      	beq.n	8005654 <xPortStartScheduler+0x9c>
 8005642:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005646:	f383 8811 	msr	BASEPRI, r3
 800564a:	f3bf 8f6f 	isb	sy
 800564e:	f3bf 8f4f 	dsb	sy
 8005652:	e7fe      	b.n	8005652 <xPortStartScheduler+0x9a>
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8005654:	021b      	lsls	r3, r3, #8
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8005656:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800565a:	4a17      	ldr	r2, [pc, #92]	; (80056b8 <xPortStartScheduler+0x100>)
 800565c:	6013      	str	r3, [r2, #0]
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800565e:	9b01      	ldr	r3, [sp, #4]
 8005660:	b2db      	uxtb	r3, r3
 8005662:	4a13      	ldr	r2, [pc, #76]	; (80056b0 <xPortStartScheduler+0xf8>)
 8005664:	7013      	strb	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8005666:	4b15      	ldr	r3, [pc, #84]	; (80056bc <xPortStartScheduler+0x104>)
 8005668:	681a      	ldr	r2, [r3, #0]
 800566a:	f442 0270 	orr.w	r2, r2, #15728640	; 0xf00000
 800566e:	601a      	str	r2, [r3, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8005670:	681a      	ldr	r2, [r3, #0]
 8005672:	f042 4270 	orr.w	r2, r2, #4026531840	; 0xf0000000
 8005676:	601a      	str	r2, [r3, #0]
	vPortSetupTimerInterrupt();
 8005678:	f7ff ff82 	bl	8005580 <vPortSetupTimerInterrupt>
	uxCriticalNesting = 0;
 800567c:	2400      	movs	r4, #0
 800567e:	4b10      	ldr	r3, [pc, #64]	; (80056c0 <xPortStartScheduler+0x108>)
 8005680:	601c      	str	r4, [r3, #0]
	vPortEnableVFP();
 8005682:	f7ff fec5 	bl	8005410 <vPortEnableVFP>
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8005686:	4a0f      	ldr	r2, [pc, #60]	; (80056c4 <xPortStartScheduler+0x10c>)
 8005688:	6813      	ldr	r3, [r2, #0]
 800568a:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 800568e:	6013      	str	r3, [r2, #0]
	prvPortStartFirstTask();
 8005690:	f7ff feaa 	bl	80053e8 <prvPortStartFirstTask>
	vTaskSwitchContext();
 8005694:	f7ff fd20 	bl	80050d8 <vTaskSwitchContext>
	prvTaskExitError();
 8005698:	f7ff fe86 	bl	80053a8 <prvTaskExitError>
}
 800569c:	4620      	mov	r0, r4
 800569e:	b002      	add	sp, #8
 80056a0:	bd10      	pop	{r4, pc}
 80056a2:	bf00      	nop
 80056a4:	e000ed00 	.word	0xe000ed00
 80056a8:	410fc271 	.word	0x410fc271
 80056ac:	410fc270 	.word	0x410fc270
 80056b0:	e000e400 	.word	0xe000e400
 80056b4:	20000588 	.word	0x20000588
 80056b8:	2000058c 	.word	0x2000058c
 80056bc:	e000ed20 	.word	0xe000ed20
 80056c0:	2000011c 	.word	0x2000011c
 80056c4:	e000ef34 	.word	0xe000ef34

080056c8 <vPortValidateInterruptPriority>:
	{
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 80056c8:	f3ef 8305 	mrs	r3, IPSR

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 80056cc:	2b0f      	cmp	r3, #15
 80056ce:	d90f      	bls.n	80056f0 <vPortValidateInterruptPriority+0x28>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 80056d0:	4a10      	ldr	r2, [pc, #64]	; (8005714 <vPortValidateInterruptPriority+0x4c>)
 80056d2:	5c9b      	ldrb	r3, [r3, r2]
 80056d4:	b2db      	uxtb	r3, r3
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 80056d6:	4a10      	ldr	r2, [pc, #64]	; (8005718 <vPortValidateInterruptPriority+0x50>)
 80056d8:	7812      	ldrb	r2, [r2, #0]
 80056da:	429a      	cmp	r2, r3
 80056dc:	d908      	bls.n	80056f0 <vPortValidateInterruptPriority+0x28>
 80056de:	f04f 0350 	mov.w	r3, #80	; 0x50
 80056e2:	f383 8811 	msr	BASEPRI, r3
 80056e6:	f3bf 8f6f 	isb	sy
 80056ea:	f3bf 8f4f 	dsb	sy
 80056ee:	e7fe      	b.n	80056ee <vPortValidateInterruptPriority+0x26>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 80056f0:	4b0a      	ldr	r3, [pc, #40]	; (800571c <vPortValidateInterruptPriority+0x54>)
 80056f2:	681b      	ldr	r3, [r3, #0]
 80056f4:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80056f8:	4a09      	ldr	r2, [pc, #36]	; (8005720 <vPortValidateInterruptPriority+0x58>)
 80056fa:	6812      	ldr	r2, [r2, #0]
 80056fc:	4293      	cmp	r3, r2
 80056fe:	d908      	bls.n	8005712 <vPortValidateInterruptPriority+0x4a>
 8005700:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005704:	f383 8811 	msr	BASEPRI, r3
 8005708:	f3bf 8f6f 	isb	sy
 800570c:	f3bf 8f4f 	dsb	sy
 8005710:	e7fe      	b.n	8005710 <vPortValidateInterruptPriority+0x48>
	}
 8005712:	4770      	bx	lr
 8005714:	e000e3f0 	.word	0xe000e3f0
 8005718:	20000588 	.word	0x20000588
 800571c:	e000ed0c 	.word	0xe000ed0c
 8005720:	2000058c 	.word	0x2000058c

08005724 <prvHeapInit>:
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8005724:	4a12      	ldr	r2, [pc, #72]	; (8005770 <prvHeapInit+0x4c>)

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8005726:	f012 0f07 	tst.w	r2, #7
 800572a:	d01e      	beq.n	800576a <prvHeapInit+0x46>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800572c:	1dd1      	adds	r1, r2, #7
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800572e:	f021 0107 	bic.w	r1, r1, #7
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8005732:	f5c1 5370 	rsb	r3, r1, #15360	; 0x3c00
 8005736:	4413      	add	r3, r2
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8005738:	460a      	mov	r2, r1

	pucAlignedHeap = ( uint8_t * ) uxAddress;

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800573a:	480e      	ldr	r0, [pc, #56]	; (8005774 <prvHeapInit+0x50>)
 800573c:	6002      	str	r2, [r0, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800573e:	2100      	movs	r1, #0
 8005740:	6041      	str	r1, [r0, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8005742:	4413      	add	r3, r2
	uxAddress -= xHeapStructSize;
 8005744:	3b08      	subs	r3, #8
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8005746:	f023 0307 	bic.w	r3, r3, #7
	pxEnd = ( void * ) uxAddress;
 800574a:	480b      	ldr	r0, [pc, #44]	; (8005778 <prvHeapInit+0x54>)
 800574c:	6003      	str	r3, [r0, #0]
	pxEnd->xBlockSize = 0;
 800574e:	6059      	str	r1, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8005750:	6019      	str	r1, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8005752:	1a99      	subs	r1, r3, r2
 8005754:	6051      	str	r1, [r2, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8005756:	6013      	str	r3, [r2, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8005758:	4b08      	ldr	r3, [pc, #32]	; (800577c <prvHeapInit+0x58>)
 800575a:	6019      	str	r1, [r3, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800575c:	4b08      	ldr	r3, [pc, #32]	; (8005780 <prvHeapInit+0x5c>)
 800575e:	6019      	str	r1, [r3, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8005760:	4b08      	ldr	r3, [pc, #32]	; (8005784 <prvHeapInit+0x60>)
 8005762:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8005766:	601a      	str	r2, [r3, #0]
}
 8005768:	4770      	bx	lr
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800576a:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 800576e:	e7e4      	b.n	800573a <prvHeapInit+0x16>
 8005770:	20000594 	.word	0x20000594
 8005774:	200041a8 	.word	0x200041a8
 8005778:	20000590 	.word	0x20000590
 800577c:	2000419c 	.word	0x2000419c
 8005780:	20004198 	.word	0x20004198
 8005784:	20004194 	.word	0x20004194

08005788 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8005788:	b410      	push	{r4}
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800578a:	4b13      	ldr	r3, [pc, #76]	; (80057d8 <prvInsertBlockIntoFreeList+0x50>)
 800578c:	461a      	mov	r2, r3
 800578e:	681b      	ldr	r3, [r3, #0]
 8005790:	4283      	cmp	r3, r0
 8005792:	d3fb      	bcc.n	800578c <prvInsertBlockIntoFreeList+0x4>
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8005794:	6851      	ldr	r1, [r2, #4]
 8005796:	1854      	adds	r4, r2, r1
 8005798:	4284      	cmp	r4, r0
 800579a:	d00a      	beq.n	80057b2 <prvInsertBlockIntoFreeList+0x2a>
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800579c:	6841      	ldr	r1, [r0, #4]
 800579e:	1844      	adds	r4, r0, r1
 80057a0:	42a3      	cmp	r3, r4
 80057a2:	d00b      	beq.n	80057bc <prvInsertBlockIntoFreeList+0x34>
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 80057a4:	6003      	str	r3, [r0, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 80057a6:	4290      	cmp	r0, r2
 80057a8:	d000      	beq.n	80057ac <prvInsertBlockIntoFreeList+0x24>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 80057aa:	6010      	str	r0, [r2, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80057ac:	f85d 4b04 	ldr.w	r4, [sp], #4
 80057b0:	4770      	bx	lr
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 80057b2:	6840      	ldr	r0, [r0, #4]
 80057b4:	4401      	add	r1, r0
 80057b6:	6051      	str	r1, [r2, #4]
		pxBlockToInsert = pxIterator;
 80057b8:	4610      	mov	r0, r2
 80057ba:	e7ef      	b.n	800579c <prvInsertBlockIntoFreeList+0x14>
		if( pxIterator->pxNextFreeBlock != pxEnd )
 80057bc:	4c07      	ldr	r4, [pc, #28]	; (80057dc <prvInsertBlockIntoFreeList+0x54>)
 80057be:	6824      	ldr	r4, [r4, #0]
 80057c0:	42a3      	cmp	r3, r4
 80057c2:	d006      	beq.n	80057d2 <prvInsertBlockIntoFreeList+0x4a>
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 80057c4:	685b      	ldr	r3, [r3, #4]
 80057c6:	4419      	add	r1, r3
 80057c8:	6041      	str	r1, [r0, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 80057ca:	6813      	ldr	r3, [r2, #0]
 80057cc:	681b      	ldr	r3, [r3, #0]
 80057ce:	6003      	str	r3, [r0, #0]
 80057d0:	e7e9      	b.n	80057a6 <prvInsertBlockIntoFreeList+0x1e>
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 80057d2:	6004      	str	r4, [r0, #0]
 80057d4:	e7e7      	b.n	80057a6 <prvInsertBlockIntoFreeList+0x1e>
 80057d6:	bf00      	nop
 80057d8:	200041a8 	.word	0x200041a8
 80057dc:	20000590 	.word	0x20000590

080057e0 <pvPortMalloc>:
{
 80057e0:	b570      	push	{r4, r5, r6, lr}
 80057e2:	4604      	mov	r4, r0
	vTaskSuspendAll();
 80057e4:	f7ff fb42 	bl	8004e6c <vTaskSuspendAll>
		if( pxEnd == NULL )
 80057e8:	4b36      	ldr	r3, [pc, #216]	; (80058c4 <pvPortMalloc+0xe4>)
 80057ea:	681b      	ldr	r3, [r3, #0]
 80057ec:	b1a3      	cbz	r3, 8005818 <pvPortMalloc+0x38>
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 80057ee:	4b36      	ldr	r3, [pc, #216]	; (80058c8 <pvPortMalloc+0xe8>)
 80057f0:	681b      	ldr	r3, [r3, #0]
 80057f2:	421c      	tst	r4, r3
 80057f4:	d14e      	bne.n	8005894 <pvPortMalloc+0xb4>
			if( xWantedSize > 0 )
 80057f6:	b134      	cbz	r4, 8005806 <pvPortMalloc+0x26>
				xWantedSize += xHeapStructSize;
 80057f8:	3408      	adds	r4, #8
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 80057fa:	f014 0f07 	tst.w	r4, #7
 80057fe:	d002      	beq.n	8005806 <pvPortMalloc+0x26>
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8005800:	f024 0407 	bic.w	r4, r4, #7
 8005804:	3408      	adds	r4, #8
			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8005806:	2c00      	cmp	r4, #0
 8005808:	d046      	beq.n	8005898 <pvPortMalloc+0xb8>
 800580a:	4b30      	ldr	r3, [pc, #192]	; (80058cc <pvPortMalloc+0xec>)
 800580c:	681b      	ldr	r3, [r3, #0]
 800580e:	42a3      	cmp	r3, r4
 8005810:	d351      	bcc.n	80058b6 <pvPortMalloc+0xd6>
				pxBlock = xStart.pxNextFreeBlock;
 8005812:	4b2f      	ldr	r3, [pc, #188]	; (80058d0 <pvPortMalloc+0xf0>)
 8005814:	681d      	ldr	r5, [r3, #0]
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8005816:	e004      	b.n	8005822 <pvPortMalloc+0x42>
			prvHeapInit();
 8005818:	f7ff ff84 	bl	8005724 <prvHeapInit>
 800581c:	e7e7      	b.n	80057ee <pvPortMalloc+0xe>
					pxPreviousBlock = pxBlock;
 800581e:	462b      	mov	r3, r5
					pxBlock = pxBlock->pxNextFreeBlock;
 8005820:	4615      	mov	r5, r2
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8005822:	686a      	ldr	r2, [r5, #4]
 8005824:	42a2      	cmp	r2, r4
 8005826:	d202      	bcs.n	800582e <pvPortMalloc+0x4e>
 8005828:	682a      	ldr	r2, [r5, #0]
 800582a:	2a00      	cmp	r2, #0
 800582c:	d1f7      	bne.n	800581e <pvPortMalloc+0x3e>
				if( pxBlock != pxEnd )
 800582e:	4a25      	ldr	r2, [pc, #148]	; (80058c4 <pvPortMalloc+0xe4>)
 8005830:	6812      	ldr	r2, [r2, #0]
 8005832:	42aa      	cmp	r2, r5
 8005834:	d041      	beq.n	80058ba <pvPortMalloc+0xda>
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8005836:	681e      	ldr	r6, [r3, #0]
 8005838:	3608      	adds	r6, #8
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800583a:	682a      	ldr	r2, [r5, #0]
 800583c:	601a      	str	r2, [r3, #0]
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800583e:	686b      	ldr	r3, [r5, #4]
 8005840:	1b1b      	subs	r3, r3, r4
 8005842:	2b10      	cmp	r3, #16
 8005844:	d910      	bls.n	8005868 <pvPortMalloc+0x88>
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8005846:	1928      	adds	r0, r5, r4
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8005848:	f010 0f07 	tst.w	r0, #7
 800584c:	d008      	beq.n	8005860 <pvPortMalloc+0x80>
 800584e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005852:	f383 8811 	msr	BASEPRI, r3
 8005856:	f3bf 8f6f 	isb	sy
 800585a:	f3bf 8f4f 	dsb	sy
 800585e:	e7fe      	b.n	800585e <pvPortMalloc+0x7e>
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8005860:	6043      	str	r3, [r0, #4]
						pxBlock->xBlockSize = xWantedSize;
 8005862:	606c      	str	r4, [r5, #4]
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8005864:	f7ff ff90 	bl	8005788 <prvInsertBlockIntoFreeList>
					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8005868:	686a      	ldr	r2, [r5, #4]
 800586a:	4918      	ldr	r1, [pc, #96]	; (80058cc <pvPortMalloc+0xec>)
 800586c:	680b      	ldr	r3, [r1, #0]
 800586e:	1a9b      	subs	r3, r3, r2
 8005870:	600b      	str	r3, [r1, #0]
					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8005872:	4918      	ldr	r1, [pc, #96]	; (80058d4 <pvPortMalloc+0xf4>)
 8005874:	6809      	ldr	r1, [r1, #0]
 8005876:	428b      	cmp	r3, r1
 8005878:	d201      	bcs.n	800587e <pvPortMalloc+0x9e>
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800587a:	4916      	ldr	r1, [pc, #88]	; (80058d4 <pvPortMalloc+0xf4>)
 800587c:	600b      	str	r3, [r1, #0]
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800587e:	4b12      	ldr	r3, [pc, #72]	; (80058c8 <pvPortMalloc+0xe8>)
 8005880:	681b      	ldr	r3, [r3, #0]
 8005882:	4313      	orrs	r3, r2
 8005884:	606b      	str	r3, [r5, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8005886:	2300      	movs	r3, #0
 8005888:	602b      	str	r3, [r5, #0]
					xNumberOfSuccessfulAllocations++;
 800588a:	4a13      	ldr	r2, [pc, #76]	; (80058d8 <pvPortMalloc+0xf8>)
 800588c:	6813      	ldr	r3, [r2, #0]
 800588e:	3301      	adds	r3, #1
 8005890:	6013      	str	r3, [r2, #0]
 8005892:	e002      	b.n	800589a <pvPortMalloc+0xba>
void *pvReturn = NULL;
 8005894:	2600      	movs	r6, #0
 8005896:	e000      	b.n	800589a <pvPortMalloc+0xba>
 8005898:	2600      	movs	r6, #0
	( void ) xTaskResumeAll();
 800589a:	f7ff fb7b 	bl	8004f94 <xTaskResumeAll>
	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800589e:	f016 0f07 	tst.w	r6, #7
 80058a2:	d00c      	beq.n	80058be <pvPortMalloc+0xde>
 80058a4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80058a8:	f383 8811 	msr	BASEPRI, r3
 80058ac:	f3bf 8f6f 	isb	sy
 80058b0:	f3bf 8f4f 	dsb	sy
 80058b4:	e7fe      	b.n	80058b4 <pvPortMalloc+0xd4>
void *pvReturn = NULL;
 80058b6:	2600      	movs	r6, #0
 80058b8:	e7ef      	b.n	800589a <pvPortMalloc+0xba>
 80058ba:	2600      	movs	r6, #0
 80058bc:	e7ed      	b.n	800589a <pvPortMalloc+0xba>
}
 80058be:	4630      	mov	r0, r6
 80058c0:	bd70      	pop	{r4, r5, r6, pc}
 80058c2:	bf00      	nop
 80058c4:	20000590 	.word	0x20000590
 80058c8:	20004194 	.word	0x20004194
 80058cc:	20004198 	.word	0x20004198
 80058d0:	200041a8 	.word	0x200041a8
 80058d4:	2000419c 	.word	0x2000419c
 80058d8:	200041a0 	.word	0x200041a0

080058dc <vPortFree>:
	if( pv != NULL )
 80058dc:	2800      	cmp	r0, #0
 80058de:	d034      	beq.n	800594a <vPortFree+0x6e>
{
 80058e0:	b538      	push	{r3, r4, r5, lr}
 80058e2:	4604      	mov	r4, r0
		puc -= xHeapStructSize;
 80058e4:	f1a0 0508 	sub.w	r5, r0, #8
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 80058e8:	f850 3c04 	ldr.w	r3, [r0, #-4]
 80058ec:	4a17      	ldr	r2, [pc, #92]	; (800594c <vPortFree+0x70>)
 80058ee:	6812      	ldr	r2, [r2, #0]
 80058f0:	4213      	tst	r3, r2
 80058f2:	d108      	bne.n	8005906 <vPortFree+0x2a>
 80058f4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80058f8:	f383 8811 	msr	BASEPRI, r3
 80058fc:	f3bf 8f6f 	isb	sy
 8005900:	f3bf 8f4f 	dsb	sy
 8005904:	e7fe      	b.n	8005904 <vPortFree+0x28>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8005906:	f850 1c08 	ldr.w	r1, [r0, #-8]
 800590a:	b141      	cbz	r1, 800591e <vPortFree+0x42>
 800590c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005910:	f383 8811 	msr	BASEPRI, r3
 8005914:	f3bf 8f6f 	isb	sy
 8005918:	f3bf 8f4f 	dsb	sy
 800591c:	e7fe      	b.n	800591c <vPortFree+0x40>
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800591e:	ea23 0302 	bic.w	r3, r3, r2
 8005922:	f840 3c04 	str.w	r3, [r0, #-4]
				vTaskSuspendAll();
 8005926:	f7ff faa1 	bl	8004e6c <vTaskSuspendAll>
					xFreeBytesRemaining += pxLink->xBlockSize;
 800592a:	f854 1c04 	ldr.w	r1, [r4, #-4]
 800592e:	4a08      	ldr	r2, [pc, #32]	; (8005950 <vPortFree+0x74>)
 8005930:	6813      	ldr	r3, [r2, #0]
 8005932:	440b      	add	r3, r1
 8005934:	6013      	str	r3, [r2, #0]
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8005936:	4628      	mov	r0, r5
 8005938:	f7ff ff26 	bl	8005788 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 800593c:	4a05      	ldr	r2, [pc, #20]	; (8005954 <vPortFree+0x78>)
 800593e:	6813      	ldr	r3, [r2, #0]
 8005940:	3301      	adds	r3, #1
 8005942:	6013      	str	r3, [r2, #0]
				( void ) xTaskResumeAll();
 8005944:	f7ff fb26 	bl	8004f94 <xTaskResumeAll>
}
 8005948:	bd38      	pop	{r3, r4, r5, pc}
 800594a:	4770      	bx	lr
 800594c:	20004194 	.word	0x20004194
 8005950:	20004198 	.word	0x20004198
 8005954:	200041a4 	.word	0x200041a4

08005958 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 8005958:	b508      	push	{r3, lr}
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 800595a:	2200      	movs	r2, #0
 800595c:	490f      	ldr	r1, [pc, #60]	; (800599c <MX_USB_DEVICE_Init+0x44>)
 800595e:	4810      	ldr	r0, [pc, #64]	; (80059a0 <MX_USB_DEVICE_Init+0x48>)
 8005960:	f7fd fe83 	bl	800366a <USBD_Init>
 8005964:	b970      	cbnz	r0, 8005984 <MX_USB_DEVICE_Init+0x2c>
  {
    Error_Handler();
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 8005966:	490f      	ldr	r1, [pc, #60]	; (80059a4 <MX_USB_DEVICE_Init+0x4c>)
 8005968:	480d      	ldr	r0, [pc, #52]	; (80059a0 <MX_USB_DEVICE_Init+0x48>)
 800596a:	f7fd fe95 	bl	8003698 <USBD_RegisterClass>
 800596e:	b960      	cbnz	r0, 800598a <MX_USB_DEVICE_Init+0x32>
  {
    Error_Handler();
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 8005970:	490d      	ldr	r1, [pc, #52]	; (80059a8 <MX_USB_DEVICE_Init+0x50>)
 8005972:	480b      	ldr	r0, [pc, #44]	; (80059a0 <MX_USB_DEVICE_Init+0x48>)
 8005974:	f7fd fe2b 	bl	80035ce <USBD_CDC_RegisterInterface>
 8005978:	b950      	cbnz	r0, 8005990 <MX_USB_DEVICE_Init+0x38>
  {
    Error_Handler();
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 800597a:	4809      	ldr	r0, [pc, #36]	; (80059a0 <MX_USB_DEVICE_Init+0x48>)
 800597c:	f7fd fea3 	bl	80036c6 <USBD_Start>
 8005980:	b948      	cbnz	r0, 8005996 <MX_USB_DEVICE_Init+0x3e>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 8005982:	bd08      	pop	{r3, pc}
    Error_Handler();
 8005984:	f7fa ff02 	bl	800078c <Error_Handler>
 8005988:	e7ed      	b.n	8005966 <MX_USB_DEVICE_Init+0xe>
    Error_Handler();
 800598a:	f7fa feff 	bl	800078c <Error_Handler>
 800598e:	e7ef      	b.n	8005970 <MX_USB_DEVICE_Init+0x18>
    Error_Handler();
 8005990:	f7fa fefc 	bl	800078c <Error_Handler>
 8005994:	e7f1      	b.n	800597a <MX_USB_DEVICE_Init+0x22>
    Error_Handler();
 8005996:	f7fa fef9 	bl	800078c <Error_Handler>
}
 800599a:	e7f2      	b.n	8005982 <MX_USB_DEVICE_Init+0x2a>
 800599c:	20000134 	.word	0x20000134
 80059a0:	2000444c 	.word	0x2000444c
 80059a4:	2000000c 	.word	0x2000000c
 80059a8:	20000120 	.word	0x20000120

080059ac <CDC_DeInit_FS>:
static int8_t CDC_DeInit_FS(void)
{
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
  /* USER CODE END 4 */
}
 80059ac:	2000      	movs	r0, #0
 80059ae:	4770      	bx	lr

080059b0 <CDC_Control_FS>:
    break;
  }

  return (USBD_OK);
  /* USER CODE END 5 */
}
 80059b0:	2000      	movs	r0, #0
 80059b2:	4770      	bx	lr

080059b4 <CDC_TransmitCplt_FS>:
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
}
 80059b4:	2000      	movs	r0, #0
 80059b6:	4770      	bx	lr

080059b8 <CDC_Receive_FS>:
{
 80059b8:	b510      	push	{r4, lr}
 80059ba:	4601      	mov	r1, r0
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 80059bc:	4c04      	ldr	r4, [pc, #16]	; (80059d0 <CDC_Receive_FS+0x18>)
 80059be:	4620      	mov	r0, r4
 80059c0:	f7fd fe17 	bl	80035f2 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 80059c4:	4620      	mov	r0, r4
 80059c6:	f7fd fe37 	bl	8003638 <USBD_CDC_ReceivePacket>
}
 80059ca:	2000      	movs	r0, #0
 80059cc:	bd10      	pop	{r4, pc}
 80059ce:	bf00      	nop
 80059d0:	2000444c 	.word	0x2000444c

080059d4 <CDC_Init_FS>:
{
 80059d4:	b510      	push	{r4, lr}
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 80059d6:	4c06      	ldr	r4, [pc, #24]	; (80059f0 <CDC_Init_FS+0x1c>)
 80059d8:	2200      	movs	r2, #0
 80059da:	4906      	ldr	r1, [pc, #24]	; (80059f4 <CDC_Init_FS+0x20>)
 80059dc:	4620      	mov	r0, r4
 80059de:	f7fd fdfd 	bl	80035dc <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 80059e2:	4905      	ldr	r1, [pc, #20]	; (80059f8 <CDC_Init_FS+0x24>)
 80059e4:	4620      	mov	r0, r4
 80059e6:	f7fd fe04 	bl	80035f2 <USBD_CDC_SetRxBuffer>
}
 80059ea:	2000      	movs	r0, #0
 80059ec:	bd10      	pop	{r4, pc}
 80059ee:	bf00      	nop
 80059f0:	2000444c 	.word	0x2000444c
 80059f4:	20004f1c 	.word	0x20004f1c
 80059f8:	2000471c 	.word	0x2000471c

080059fc <CDC_Transmit_FS>:
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 80059fc:	4b09      	ldr	r3, [pc, #36]	; (8005a24 <CDC_Transmit_FS+0x28>)
 80059fe:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
  if (hcdc->TxState != 0){
 8005a02:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8005a06:	b10b      	cbz	r3, 8005a0c <CDC_Transmit_FS+0x10>
    return USBD_BUSY;
 8005a08:	2001      	movs	r0, #1
}
 8005a0a:	4770      	bx	lr
{
 8005a0c:	b510      	push	{r4, lr}
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 8005a0e:	4c05      	ldr	r4, [pc, #20]	; (8005a24 <CDC_Transmit_FS+0x28>)
 8005a10:	460a      	mov	r2, r1
 8005a12:	4601      	mov	r1, r0
 8005a14:	4620      	mov	r0, r4
 8005a16:	f7fd fde1 	bl	80035dc <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 8005a1a:	4620      	mov	r0, r4
 8005a1c:	f7fd fdf2 	bl	8003604 <USBD_CDC_TransmitPacket>
}
 8005a20:	bd10      	pop	{r4, pc}
 8005a22:	bf00      	nop
 8005a24:	2000444c 	.word	0x2000444c

08005a28 <USBD_FS_DeviceDescriptor>:
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 8005a28:	2312      	movs	r3, #18
 8005a2a:	800b      	strh	r3, [r1, #0]
  return USBD_FS_DeviceDesc;
}
 8005a2c:	4800      	ldr	r0, [pc, #0]	; (8005a30 <USBD_FS_DeviceDescriptor+0x8>)
 8005a2e:	4770      	bx	lr
 8005a30:	20000150 	.word	0x20000150

08005a34 <USBD_FS_LangIDStrDescriptor>:
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8005a34:	2304      	movs	r3, #4
 8005a36:	800b      	strh	r3, [r1, #0]
  return USBD_LangIDDesc;
}
 8005a38:	4800      	ldr	r0, [pc, #0]	; (8005a3c <USBD_FS_LangIDStrDescriptor+0x8>)
 8005a3a:	4770      	bx	lr
 8005a3c:	20000164 	.word	0x20000164

08005a40 <IntToUnicode>:
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
  uint8_t idx = 0;

  for (idx = 0; idx < len; idx++)
 8005a40:	2300      	movs	r3, #0
 8005a42:	4293      	cmp	r3, r2
 8005a44:	d217      	bcs.n	8005a76 <IntToUnicode+0x36>
{
 8005a46:	b430      	push	{r4, r5}
 8005a48:	e00b      	b.n	8005a62 <IntToUnicode+0x22>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8005a4a:	3437      	adds	r4, #55	; 0x37
 8005a4c:	f801 4013 	strb.w	r4, [r1, r3, lsl #1]
    }

    value = value << 4;
 8005a50:	0100      	lsls	r0, r0, #4

    pbuf[2 * idx + 1] = 0;
 8005a52:	005c      	lsls	r4, r3, #1
 8005a54:	3401      	adds	r4, #1
 8005a56:	2500      	movs	r5, #0
 8005a58:	550d      	strb	r5, [r1, r4]
  for (idx = 0; idx < len; idx++)
 8005a5a:	3301      	adds	r3, #1
 8005a5c:	b2db      	uxtb	r3, r3
 8005a5e:	4293      	cmp	r3, r2
 8005a60:	d207      	bcs.n	8005a72 <IntToUnicode+0x32>
    if (((value >> 28)) < 0xA)
 8005a62:	0f04      	lsrs	r4, r0, #28
 8005a64:	f1b0 4f20 	cmp.w	r0, #2684354560	; 0xa0000000
 8005a68:	d2ef      	bcs.n	8005a4a <IntToUnicode+0xa>
      pbuf[2 * idx] = (value >> 28) + '0';
 8005a6a:	3430      	adds	r4, #48	; 0x30
 8005a6c:	f801 4013 	strb.w	r4, [r1, r3, lsl #1]
 8005a70:	e7ee      	b.n	8005a50 <IntToUnicode+0x10>
  }
}
 8005a72:	bc30      	pop	{r4, r5}
 8005a74:	4770      	bx	lr
 8005a76:	4770      	bx	lr

08005a78 <Get_SerialNum>:
{
 8005a78:	b538      	push	{r3, r4, r5, lr}
  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 8005a7a:	4b0a      	ldr	r3, [pc, #40]	; (8005aa4 <Get_SerialNum+0x2c>)
 8005a7c:	6818      	ldr	r0, [r3, #0]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8005a7e:	3304      	adds	r3, #4
 8005a80:	681c      	ldr	r4, [r3, #0]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 8005a82:	3304      	adds	r3, #4
 8005a84:	681b      	ldr	r3, [r3, #0]
  if (deviceserial0 != 0)
 8005a86:	18c0      	adds	r0, r0, r3
 8005a88:	d100      	bne.n	8005a8c <Get_SerialNum+0x14>
}
 8005a8a:	bd38      	pop	{r3, r4, r5, pc}
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 8005a8c:	4d06      	ldr	r5, [pc, #24]	; (8005aa8 <Get_SerialNum+0x30>)
 8005a8e:	2208      	movs	r2, #8
 8005a90:	1ca9      	adds	r1, r5, #2
 8005a92:	f7ff ffd5 	bl	8005a40 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8005a96:	2204      	movs	r2, #4
 8005a98:	f105 0112 	add.w	r1, r5, #18
 8005a9c:	4620      	mov	r0, r4
 8005a9e:	f7ff ffcf 	bl	8005a40 <IntToUnicode>
}
 8005aa2:	e7f2      	b.n	8005a8a <Get_SerialNum+0x12>
 8005aa4:	1fff7a10 	.word	0x1fff7a10
 8005aa8:	20000168 	.word	0x20000168

08005aac <USBD_FS_SerialStrDescriptor>:
{
 8005aac:	b508      	push	{r3, lr}
  *length = USB_SIZ_STRING_SERIAL;
 8005aae:	231a      	movs	r3, #26
 8005ab0:	800b      	strh	r3, [r1, #0]
  Get_SerialNum();
 8005ab2:	f7ff ffe1 	bl	8005a78 <Get_SerialNum>
}
 8005ab6:	4801      	ldr	r0, [pc, #4]	; (8005abc <USBD_FS_SerialStrDescriptor+0x10>)
 8005ab8:	bd08      	pop	{r3, pc}
 8005aba:	bf00      	nop
 8005abc:	20000168 	.word	0x20000168

08005ac0 <USBD_FS_ProductStrDescriptor>:
{
 8005ac0:	b508      	push	{r3, lr}
 8005ac2:	460a      	mov	r2, r1
  if(speed == 0)
 8005ac4:	b928      	cbnz	r0, 8005ad2 <USBD_FS_ProductStrDescriptor+0x12>
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8005ac6:	4905      	ldr	r1, [pc, #20]	; (8005adc <USBD_FS_ProductStrDescriptor+0x1c>)
 8005ac8:	4805      	ldr	r0, [pc, #20]	; (8005ae0 <USBD_FS_ProductStrDescriptor+0x20>)
 8005aca:	f7fe fa9c 	bl	8004006 <USBD_GetString>
}
 8005ace:	4803      	ldr	r0, [pc, #12]	; (8005adc <USBD_FS_ProductStrDescriptor+0x1c>)
 8005ad0:	bd08      	pop	{r3, pc}
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8005ad2:	4902      	ldr	r1, [pc, #8]	; (8005adc <USBD_FS_ProductStrDescriptor+0x1c>)
 8005ad4:	4802      	ldr	r0, [pc, #8]	; (8005ae0 <USBD_FS_ProductStrDescriptor+0x20>)
 8005ad6:	f7fe fa96 	bl	8004006 <USBD_GetString>
 8005ada:	e7f8      	b.n	8005ace <USBD_FS_ProductStrDescriptor+0xe>
 8005adc:	2000571c 	.word	0x2000571c
 8005ae0:	080067e0 	.word	0x080067e0

08005ae4 <USBD_FS_ManufacturerStrDescriptor>:
{
 8005ae4:	b510      	push	{r4, lr}
 8005ae6:	460a      	mov	r2, r1
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8005ae8:	4c03      	ldr	r4, [pc, #12]	; (8005af8 <USBD_FS_ManufacturerStrDescriptor+0x14>)
 8005aea:	4621      	mov	r1, r4
 8005aec:	4803      	ldr	r0, [pc, #12]	; (8005afc <USBD_FS_ManufacturerStrDescriptor+0x18>)
 8005aee:	f7fe fa8a 	bl	8004006 <USBD_GetString>
}
 8005af2:	4620      	mov	r0, r4
 8005af4:	bd10      	pop	{r4, pc}
 8005af6:	bf00      	nop
 8005af8:	2000571c 	.word	0x2000571c
 8005afc:	080067f8 	.word	0x080067f8

08005b00 <USBD_FS_ConfigStrDescriptor>:
{
 8005b00:	b508      	push	{r3, lr}
 8005b02:	460a      	mov	r2, r1
  if(speed == USBD_SPEED_HIGH)
 8005b04:	b928      	cbnz	r0, 8005b12 <USBD_FS_ConfigStrDescriptor+0x12>
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8005b06:	4905      	ldr	r1, [pc, #20]	; (8005b1c <USBD_FS_ConfigStrDescriptor+0x1c>)
 8005b08:	4805      	ldr	r0, [pc, #20]	; (8005b20 <USBD_FS_ConfigStrDescriptor+0x20>)
 8005b0a:	f7fe fa7c 	bl	8004006 <USBD_GetString>
}
 8005b0e:	4803      	ldr	r0, [pc, #12]	; (8005b1c <USBD_FS_ConfigStrDescriptor+0x1c>)
 8005b10:	bd08      	pop	{r3, pc}
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8005b12:	4902      	ldr	r1, [pc, #8]	; (8005b1c <USBD_FS_ConfigStrDescriptor+0x1c>)
 8005b14:	4802      	ldr	r0, [pc, #8]	; (8005b20 <USBD_FS_ConfigStrDescriptor+0x20>)
 8005b16:	f7fe fa76 	bl	8004006 <USBD_GetString>
 8005b1a:	e7f8      	b.n	8005b0e <USBD_FS_ConfigStrDescriptor+0xe>
 8005b1c:	2000571c 	.word	0x2000571c
 8005b20:	0800680c 	.word	0x0800680c

08005b24 <USBD_FS_InterfaceStrDescriptor>:
{
 8005b24:	b508      	push	{r3, lr}
 8005b26:	460a      	mov	r2, r1
  if(speed == 0)
 8005b28:	b928      	cbnz	r0, 8005b36 <USBD_FS_InterfaceStrDescriptor+0x12>
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8005b2a:	4905      	ldr	r1, [pc, #20]	; (8005b40 <USBD_FS_InterfaceStrDescriptor+0x1c>)
 8005b2c:	4805      	ldr	r0, [pc, #20]	; (8005b44 <USBD_FS_InterfaceStrDescriptor+0x20>)
 8005b2e:	f7fe fa6a 	bl	8004006 <USBD_GetString>
}
 8005b32:	4803      	ldr	r0, [pc, #12]	; (8005b40 <USBD_FS_InterfaceStrDescriptor+0x1c>)
 8005b34:	bd08      	pop	{r3, pc}
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8005b36:	4902      	ldr	r1, [pc, #8]	; (8005b40 <USBD_FS_InterfaceStrDescriptor+0x1c>)
 8005b38:	4802      	ldr	r0, [pc, #8]	; (8005b44 <USBD_FS_InterfaceStrDescriptor+0x20>)
 8005b3a:	f7fe fa64 	bl	8004006 <USBD_GetString>
 8005b3e:	e7f8      	b.n	8005b32 <USBD_FS_InterfaceStrDescriptor+0xe>
 8005b40:	2000571c 	.word	0x2000571c
 8005b44:	08006818 	.word	0x08006818

08005b48 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8005b48:	b570      	push	{r4, r5, r6, lr}
 8005b4a:	b088      	sub	sp, #32
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005b4c:	2300      	movs	r3, #0
 8005b4e:	9303      	str	r3, [sp, #12]
 8005b50:	9304      	str	r3, [sp, #16]
 8005b52:	9305      	str	r3, [sp, #20]
 8005b54:	9306      	str	r3, [sp, #24]
 8005b56:	9307      	str	r3, [sp, #28]
  if(pcdHandle->Instance==USB_OTG_FS)
 8005b58:	6803      	ldr	r3, [r0, #0]
 8005b5a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8005b5e:	d001      	beq.n	8005b64 <HAL_PCD_MspInit+0x1c>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 8005b60:	b008      	add	sp, #32
 8005b62:	bd70      	pop	{r4, r5, r6, pc}
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8005b64:	2500      	movs	r5, #0
 8005b66:	9501      	str	r5, [sp, #4]
 8005b68:	4c1b      	ldr	r4, [pc, #108]	; (8005bd8 <HAL_PCD_MspInit+0x90>)
 8005b6a:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8005b6c:	f043 0301 	orr.w	r3, r3, #1
 8005b70:	6323      	str	r3, [r4, #48]	; 0x30
 8005b72:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8005b74:	f003 0301 	and.w	r3, r3, #1
 8005b78:	9301      	str	r3, [sp, #4]
 8005b7a:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Pin = VBUS_FS_Pin;
 8005b7c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8005b80:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8005b82:	9504      	str	r5, [sp, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005b84:	9505      	str	r5, [sp, #20]
    HAL_GPIO_Init(VBUS_FS_GPIO_Port, &GPIO_InitStruct);
 8005b86:	4e15      	ldr	r6, [pc, #84]	; (8005bdc <HAL_PCD_MspInit+0x94>)
 8005b88:	a903      	add	r1, sp, #12
 8005b8a:	4630      	mov	r0, r6
 8005b8c:	f7fb f92e 	bl	8000dec <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = OTG_FS_ID_Pin|OTG_FS_DM_Pin|OTG_FS_DP_Pin;
 8005b90:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 8005b94:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005b96:	2302      	movs	r3, #2
 8005b98:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005b9a:	9505      	str	r5, [sp, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005b9c:	9506      	str	r5, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8005b9e:	230a      	movs	r3, #10
 8005ba0:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005ba2:	a903      	add	r1, sp, #12
 8005ba4:	4630      	mov	r0, r6
 8005ba6:	f7fb f921 	bl	8000dec <HAL_GPIO_Init>
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8005baa:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8005bac:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005bb0:	6363      	str	r3, [r4, #52]	; 0x34
 8005bb2:	9502      	str	r5, [sp, #8]
 8005bb4:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8005bb6:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8005bba:	6463      	str	r3, [r4, #68]	; 0x44
 8005bbc:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8005bbe:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005bc2:	9302      	str	r3, [sp, #8]
 8005bc4:	9b02      	ldr	r3, [sp, #8]
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 5, 0);
 8005bc6:	462a      	mov	r2, r5
 8005bc8:	2105      	movs	r1, #5
 8005bca:	2043      	movs	r0, #67	; 0x43
 8005bcc:	f7fb f8b6 	bl	8000d3c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 8005bd0:	2043      	movs	r0, #67	; 0x43
 8005bd2:	f7fb f8e7 	bl	8000da4 <HAL_NVIC_EnableIRQ>
}
 8005bd6:	e7c3      	b.n	8005b60 <HAL_PCD_MspInit+0x18>
 8005bd8:	40023800 	.word	0x40023800
 8005bdc:	40020000 	.word	0x40020000

08005be0 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8005be0:	b508      	push	{r3, lr}
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8005be2:	f500 7171 	add.w	r1, r0, #964	; 0x3c4
 8005be6:	f8d0 0404 	ldr.w	r0, [r0, #1028]	; 0x404
 8005bea:	f7fd fd81 	bl	80036f0 <USBD_LL_SetupStage>
}
 8005bee:	bd08      	pop	{r3, pc}

08005bf0 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8005bf0:	b508      	push	{r3, lr}
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8005bf2:	ebc1 03c1 	rsb	r3, r1, r1, lsl #3
 8005bf6:	eb00 0383 	add.w	r3, r0, r3, lsl #2
 8005bfa:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
 8005bfe:	f8d0 0404 	ldr.w	r0, [r0, #1028]	; 0x404
 8005c02:	f7fd fda1 	bl	8003748 <USBD_LL_DataOutStage>
}
 8005c06:	bd08      	pop	{r3, pc}

08005c08 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8005c08:	b508      	push	{r3, lr}
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 8005c0a:	ebc1 03c1 	rsb	r3, r1, r1, lsl #3
 8005c0e:	eb00 0383 	add.w	r3, r0, r3, lsl #2
 8005c12:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8005c14:	f8d0 0404 	ldr.w	r0, [r0, #1028]	; 0x404
 8005c18:	f7fd fdd2 	bl	80037c0 <USBD_LL_DataInStage>
}
 8005c1c:	bd08      	pop	{r3, pc}

08005c1e <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8005c1e:	b508      	push	{r3, lr}
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 8005c20:	f8d0 0404 	ldr.w	r0, [r0, #1028]	; 0x404
 8005c24:	f7fd fe72 	bl	800390c <USBD_LL_SOF>
}
 8005c28:	bd08      	pop	{r3, pc}

08005c2a <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8005c2a:	b510      	push	{r4, lr}
 8005c2c:	4604      	mov	r4, r0
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 8005c2e:	68c3      	ldr	r3, [r0, #12]
 8005c30:	b13b      	cbz	r3, 8005c42 <HAL_PCD_ResetCallback+0x18>
  {
    speed = USBD_SPEED_HIGH;
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 8005c32:	2b02      	cmp	r3, #2
 8005c34:	d101      	bne.n	8005c3a <HAL_PCD_ResetCallback+0x10>
  {
    speed = USBD_SPEED_FULL;
 8005c36:	2101      	movs	r1, #1
 8005c38:	e004      	b.n	8005c44 <HAL_PCD_ResetCallback+0x1a>
  }
  else
  {
    Error_Handler();
 8005c3a:	f7fa fda7 	bl	800078c <Error_Handler>
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 8005c3e:	2101      	movs	r1, #1
 8005c40:	e000      	b.n	8005c44 <HAL_PCD_ResetCallback+0x1a>
    speed = USBD_SPEED_HIGH;
 8005c42:	2100      	movs	r1, #0
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 8005c44:	f8d4 0404 	ldr.w	r0, [r4, #1028]	; 0x404
 8005c48:	f7fd fe46 	bl	80038d8 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8005c4c:	f8d4 0404 	ldr.w	r0, [r4, #1028]	; 0x404
 8005c50:	f7fd fe15 	bl	800387e <USBD_LL_Reset>
}
 8005c54:	bd10      	pop	{r4, pc}
	...

08005c58 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8005c58:	b510      	push	{r4, lr}
 8005c5a:	4604      	mov	r4, r0
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8005c5c:	f8d0 0404 	ldr.w	r0, [r0, #1028]	; 0x404
 8005c60:	f7fd fe3d 	bl	80038de <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 8005c64:	6822      	ldr	r2, [r4, #0]
 8005c66:	f8d2 3e00 	ldr.w	r3, [r2, #3584]	; 0xe00
 8005c6a:	f043 0301 	orr.w	r3, r3, #1
 8005c6e:	f8c2 3e00 	str.w	r3, [r2, #3584]	; 0xe00
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8005c72:	6a23      	ldr	r3, [r4, #32]
 8005c74:	b123      	cbz	r3, 8005c80 <HAL_PCD_SuspendCallback+0x28>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8005c76:	4a03      	ldr	r2, [pc, #12]	; (8005c84 <HAL_PCD_SuspendCallback+0x2c>)
 8005c78:	6913      	ldr	r3, [r2, #16]
 8005c7a:	f043 0306 	orr.w	r3, r3, #6
 8005c7e:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 8005c80:	bd10      	pop	{r4, pc}
 8005c82:	bf00      	nop
 8005c84:	e000ed00 	.word	0xe000ed00

08005c88 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8005c88:	b508      	push	{r3, lr}
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8005c8a:	f8d0 0404 	ldr.w	r0, [r0, #1028]	; 0x404
 8005c8e:	f7fd fe30 	bl	80038f2 <USBD_LL_Resume>
}
 8005c92:	bd08      	pop	{r3, pc}

08005c94 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8005c94:	b508      	push	{r3, lr}
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8005c96:	f8d0 0404 	ldr.w	r0, [r0, #1028]	; 0x404
 8005c9a:	f7fd fe5f 	bl	800395c <USBD_LL_IsoOUTIncomplete>
}
 8005c9e:	bd08      	pop	{r3, pc}

08005ca0 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8005ca0:	b508      	push	{r3, lr}
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8005ca2:	f8d0 0404 	ldr.w	r0, [r0, #1028]	; 0x404
 8005ca6:	f7fd fe45 	bl	8003934 <USBD_LL_IsoINIncomplete>
}
 8005caa:	bd08      	pop	{r3, pc}

08005cac <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8005cac:	b508      	push	{r3, lr}
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 8005cae:	f8d0 0404 	ldr.w	r0, [r0, #1028]	; 0x404
 8005cb2:	f7fd fe67 	bl	8003984 <USBD_LL_DevConnected>
}
 8005cb6:	bd08      	pop	{r3, pc}

08005cb8 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8005cb8:	b508      	push	{r3, lr}
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 8005cba:	f8d0 0404 	ldr.w	r0, [r0, #1028]	; 0x404
 8005cbe:	f7fd fe63 	bl	8003988 <USBD_LL_DevDisconnected>
}
 8005cc2:	bd08      	pop	{r3, pc}

08005cc4 <USBD_LL_Init>:
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 8005cc4:	7802      	ldrb	r2, [r0, #0]
 8005cc6:	b10a      	cbz	r2, 8005ccc <USBD_LL_Init+0x8>
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
  }
  return USBD_OK;
}
 8005cc8:	2000      	movs	r0, #0
 8005cca:	4770      	bx	lr
{
 8005ccc:	b510      	push	{r4, lr}
 8005cce:	4603      	mov	r3, r0
  hpcd_USB_OTG_FS.pData = pdev;
 8005cd0:	4815      	ldr	r0, [pc, #84]	; (8005d28 <USBD_LL_Init+0x64>)
 8005cd2:	f8c0 3404 	str.w	r3, [r0, #1028]	; 0x404
  pdev->pData = &hpcd_USB_OTG_FS;
 8005cd6:	f8c3 02c4 	str.w	r0, [r3, #708]	; 0x2c4
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8005cda:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8005cde:	6003      	str	r3, [r0, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 8005ce0:	2304      	movs	r3, #4
 8005ce2:	6043      	str	r3, [r0, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8005ce4:	2202      	movs	r2, #2
 8005ce6:	60c2      	str	r2, [r0, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8005ce8:	2300      	movs	r3, #0
 8005cea:	6103      	str	r3, [r0, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8005cec:	6182      	str	r2, [r0, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8005cee:	61c3      	str	r3, [r0, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8005cf0:	6203      	str	r3, [r0, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8005cf2:	6243      	str	r3, [r0, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 8005cf4:	2201      	movs	r2, #1
 8005cf6:	62c2      	str	r2, [r0, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8005cf8:	6303      	str	r3, [r0, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8005cfa:	f7fb fcc0 	bl	800167e <HAL_PCD_Init>
 8005cfe:	b980      	cbnz	r0, 8005d22 <USBD_LL_Init+0x5e>
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 8005d00:	4c09      	ldr	r4, [pc, #36]	; (8005d28 <USBD_LL_Init+0x64>)
 8005d02:	2180      	movs	r1, #128	; 0x80
 8005d04:	4620      	mov	r0, r4
 8005d06:	f7fc f9ff 	bl	8002108 <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 8005d0a:	2240      	movs	r2, #64	; 0x40
 8005d0c:	2100      	movs	r1, #0
 8005d0e:	4620      	mov	r0, r4
 8005d10:	f7fc f9d6 	bl	80020c0 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 8005d14:	2280      	movs	r2, #128	; 0x80
 8005d16:	2101      	movs	r1, #1
 8005d18:	4620      	mov	r0, r4
 8005d1a:	f7fc f9d1 	bl	80020c0 <HAL_PCDEx_SetTxFiFo>
}
 8005d1e:	2000      	movs	r0, #0
 8005d20:	bd10      	pop	{r4, pc}
    Error_Handler( );
 8005d22:	f7fa fd33 	bl	800078c <Error_Handler>
 8005d26:	e7eb      	b.n	8005d00 <USBD_LL_Init+0x3c>
 8005d28:	2000591c 	.word	0x2000591c

08005d2c <USBD_LL_IsStallEP>:
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8005d2c:	f8d0 32c4 	ldr.w	r3, [r0, #708]	; 0x2c4

  if((ep_addr & 0x80) == 0x80)
 8005d30:	f011 0f80 	tst.w	r1, #128	; 0x80
 8005d34:	d108      	bne.n	8005d48 <USBD_LL_IsStallEP+0x1c>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 8005d36:	f001 017f 	and.w	r1, r1, #127	; 0x7f
 8005d3a:	ebc1 01c1 	rsb	r1, r1, r1, lsl #3
 8005d3e:	eb03 0181 	add.w	r1, r3, r1, lsl #2
 8005d42:	f891 01fe 	ldrb.w	r0, [r1, #510]	; 0x1fe
  }
}
 8005d46:	4770      	bx	lr
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 8005d48:	f001 017f 	and.w	r1, r1, #127	; 0x7f
 8005d4c:	ebc1 01c1 	rsb	r1, r1, r1, lsl #3
 8005d50:	eb03 0181 	add.w	r1, r3, r1, lsl #2
 8005d54:	f891 003e 	ldrb.w	r0, [r1, #62]	; 0x3e
 8005d58:	4770      	bx	lr

08005d5a <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8005d5a:	b508      	push	{r3, lr}
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 8005d5c:	f8d0 02c4 	ldr.w	r0, [r0, #708]	; 0x2c4
 8005d60:	f7fc f8fb 	bl	8001f5a <HAL_PCD_EP_GetRxCount>
}
 8005d64:	bd08      	pop	{r3, pc}
	...

08005d68 <USBD_static_malloc>:
  */
void *USBD_static_malloc(uint32_t size)
{
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
}
 8005d68:	4800      	ldr	r0, [pc, #0]	; (8005d6c <USBD_static_malloc+0x4>)
 8005d6a:	4770      	bx	lr
 8005d6c:	200041b0 	.word	0x200041b0

08005d70 <USBD_static_free>:
  * @retval None
  */
void USBD_static_free(void *p)
{

}
 8005d70:	4770      	bx	lr

08005d72 <USBD_Get_USB_Status>:
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
  USBD_StatusTypeDef usb_status = USBD_OK;

  switch (hal_status)
 8005d72:	2803      	cmp	r0, #3
 8005d74:	d805      	bhi.n	8005d82 <USBD_Get_USB_Status+0x10>
 8005d76:	e8df f000 	tbb	[pc, r0]
 8005d7a:	0405      	.short	0x0405
 8005d7c:	0502      	.short	0x0502
    break;
    case HAL_ERROR :
      usb_status = USBD_FAIL;
    break;
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8005d7e:	2001      	movs	r0, #1
    break;
 8005d80:	4770      	bx	lr
      usb_status = USBD_FAIL;
 8005d82:	2003      	movs	r0, #3
    default :
      usb_status = USBD_FAIL;
    break;
  }
  return usb_status;
}
 8005d84:	4770      	bx	lr

08005d86 <USBD_LL_Start>:
{
 8005d86:	b508      	push	{r3, lr}
  hal_status = HAL_PCD_Start(pdev->pData);
 8005d88:	f8d0 02c4 	ldr.w	r0, [r0, #708]	; 0x2c4
 8005d8c:	f7fb fd0a 	bl	80017a4 <HAL_PCD_Start>
  usb_status =  USBD_Get_USB_Status(hal_status);
 8005d90:	f7ff ffef 	bl	8005d72 <USBD_Get_USB_Status>
}
 8005d94:	bd08      	pop	{r3, pc}

08005d96 <USBD_LL_OpenEP>:
{
 8005d96:	b510      	push	{r4, lr}
 8005d98:	4614      	mov	r4, r2
 8005d9a:	461a      	mov	r2, r3
  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8005d9c:	4623      	mov	r3, r4
 8005d9e:	f8d0 02c4 	ldr.w	r0, [r0, #708]	; 0x2c4
 8005da2:	f7fc f82f 	bl	8001e04 <HAL_PCD_EP_Open>
  usb_status =  USBD_Get_USB_Status(hal_status);
 8005da6:	f7ff ffe4 	bl	8005d72 <USBD_Get_USB_Status>
}
 8005daa:	bd10      	pop	{r4, pc}

08005dac <USBD_LL_CloseEP>:
{
 8005dac:	b508      	push	{r3, lr}
  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 8005dae:	f8d0 02c4 	ldr.w	r0, [r0, #708]	; 0x2c4
 8005db2:	f7fc f86a 	bl	8001e8a <HAL_PCD_EP_Close>
  usb_status =  USBD_Get_USB_Status(hal_status);
 8005db6:	f7ff ffdc 	bl	8005d72 <USBD_Get_USB_Status>
}
 8005dba:	bd08      	pop	{r3, pc}

08005dbc <USBD_LL_StallEP>:
{
 8005dbc:	b508      	push	{r3, lr}
  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8005dbe:	f8d0 02c4 	ldr.w	r0, [r0, #708]	; 0x2c4
 8005dc2:	f7fc f8fe 	bl	8001fc2 <HAL_PCD_EP_SetStall>
  usb_status =  USBD_Get_USB_Status(hal_status);
 8005dc6:	f7ff ffd4 	bl	8005d72 <USBD_Get_USB_Status>
}
 8005dca:	bd08      	pop	{r3, pc}

08005dcc <USBD_LL_ClearStallEP>:
{
 8005dcc:	b508      	push	{r3, lr}
  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 8005dce:	f8d0 02c4 	ldr.w	r0, [r0, #708]	; 0x2c4
 8005dd2:	f7fc f93a 	bl	800204a <HAL_PCD_EP_ClrStall>
  usb_status =  USBD_Get_USB_Status(hal_status);
 8005dd6:	f7ff ffcc 	bl	8005d72 <USBD_Get_USB_Status>
}
 8005dda:	bd08      	pop	{r3, pc}

08005ddc <USBD_LL_SetUSBAddress>:
{
 8005ddc:	b508      	push	{r3, lr}
  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8005dde:	f8d0 02c4 	ldr.w	r0, [r0, #708]	; 0x2c4
 8005de2:	f7fb fffb 	bl	8001ddc <HAL_PCD_SetAddress>
  usb_status =  USBD_Get_USB_Status(hal_status);
 8005de6:	f7ff ffc4 	bl	8005d72 <USBD_Get_USB_Status>
}
 8005dea:	bd08      	pop	{r3, pc}

08005dec <USBD_LL_Transmit>:
{
 8005dec:	b508      	push	{r3, lr}
  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8005dee:	f8d0 02c4 	ldr.w	r0, [r0, #708]	; 0x2c4
 8005df2:	f7fc f8bb 	bl	8001f6c <HAL_PCD_EP_Transmit>
  usb_status =  USBD_Get_USB_Status(hal_status);
 8005df6:	f7ff ffbc 	bl	8005d72 <USBD_Get_USB_Status>
}
 8005dfa:	bd08      	pop	{r3, pc}

08005dfc <USBD_LL_PrepareReceive>:
{
 8005dfc:	b508      	push	{r3, lr}
  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8005dfe:	f8d0 02c4 	ldr.w	r0, [r0, #708]	; 0x2c4
 8005e02:	f7fc f87b 	bl	8001efc <HAL_PCD_EP_Receive>
  usb_status =  USBD_Get_USB_Status(hal_status);
 8005e06:	f7ff ffb4 	bl	8005d72 <USBD_Get_USB_Status>
}
 8005e0a:	bd08      	pop	{r3, pc}

08005e0c <__errno>:
 8005e0c:	4b01      	ldr	r3, [pc, #4]	; (8005e14 <__errno+0x8>)
 8005e0e:	6818      	ldr	r0, [r3, #0]
 8005e10:	4770      	bx	lr
 8005e12:	bf00      	nop
 8005e14:	20000184 	.word	0x20000184

08005e18 <__libc_init_array>:
 8005e18:	b570      	push	{r4, r5, r6, lr}
 8005e1a:	4d0d      	ldr	r5, [pc, #52]	; (8005e50 <__libc_init_array+0x38>)
 8005e1c:	4c0d      	ldr	r4, [pc, #52]	; (8005e54 <__libc_init_array+0x3c>)
 8005e1e:	1b64      	subs	r4, r4, r5
 8005e20:	10a4      	asrs	r4, r4, #2
 8005e22:	2600      	movs	r6, #0
 8005e24:	42a6      	cmp	r6, r4
 8005e26:	d109      	bne.n	8005e3c <__libc_init_array+0x24>
 8005e28:	4d0b      	ldr	r5, [pc, #44]	; (8005e58 <__libc_init_array+0x40>)
 8005e2a:	4c0c      	ldr	r4, [pc, #48]	; (8005e5c <__libc_init_array+0x44>)
 8005e2c:	f000 fc56 	bl	80066dc <_init>
 8005e30:	1b64      	subs	r4, r4, r5
 8005e32:	10a4      	asrs	r4, r4, #2
 8005e34:	2600      	movs	r6, #0
 8005e36:	42a6      	cmp	r6, r4
 8005e38:	d105      	bne.n	8005e46 <__libc_init_array+0x2e>
 8005e3a:	bd70      	pop	{r4, r5, r6, pc}
 8005e3c:	f855 3b04 	ldr.w	r3, [r5], #4
 8005e40:	4798      	blx	r3
 8005e42:	3601      	adds	r6, #1
 8005e44:	e7ee      	b.n	8005e24 <__libc_init_array+0xc>
 8005e46:	f855 3b04 	ldr.w	r3, [r5], #4
 8005e4a:	4798      	blx	r3
 8005e4c:	3601      	adds	r6, #1
 8005e4e:	e7f2      	b.n	8005e36 <__libc_init_array+0x1e>
 8005e50:	08006864 	.word	0x08006864
 8005e54:	08006864 	.word	0x08006864
 8005e58:	08006864 	.word	0x08006864
 8005e5c:	08006868 	.word	0x08006868

08005e60 <malloc>:
 8005e60:	4b02      	ldr	r3, [pc, #8]	; (8005e6c <malloc+0xc>)
 8005e62:	4601      	mov	r1, r0
 8005e64:	6818      	ldr	r0, [r3, #0]
 8005e66:	f000 b869 	b.w	8005f3c <_malloc_r>
 8005e6a:	bf00      	nop
 8005e6c:	20000184 	.word	0x20000184

08005e70 <memcpy>:
 8005e70:	440a      	add	r2, r1
 8005e72:	4291      	cmp	r1, r2
 8005e74:	f100 33ff 	add.w	r3, r0, #4294967295
 8005e78:	d100      	bne.n	8005e7c <memcpy+0xc>
 8005e7a:	4770      	bx	lr
 8005e7c:	b510      	push	{r4, lr}
 8005e7e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005e82:	f803 4f01 	strb.w	r4, [r3, #1]!
 8005e86:	4291      	cmp	r1, r2
 8005e88:	d1f9      	bne.n	8005e7e <memcpy+0xe>
 8005e8a:	bd10      	pop	{r4, pc}

08005e8c <memset>:
 8005e8c:	4402      	add	r2, r0
 8005e8e:	4603      	mov	r3, r0
 8005e90:	4293      	cmp	r3, r2
 8005e92:	d100      	bne.n	8005e96 <memset+0xa>
 8005e94:	4770      	bx	lr
 8005e96:	f803 1b01 	strb.w	r1, [r3], #1
 8005e9a:	e7f9      	b.n	8005e90 <memset+0x4>

08005e9c <_free_r>:
 8005e9c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8005e9e:	2900      	cmp	r1, #0
 8005ea0:	d048      	beq.n	8005f34 <_free_r+0x98>
 8005ea2:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005ea6:	9001      	str	r0, [sp, #4]
 8005ea8:	2b00      	cmp	r3, #0
 8005eaa:	f1a1 0404 	sub.w	r4, r1, #4
 8005eae:	bfb8      	it	lt
 8005eb0:	18e4      	addlt	r4, r4, r3
 8005eb2:	f000 f8cd 	bl	8006050 <__malloc_lock>
 8005eb6:	4a20      	ldr	r2, [pc, #128]	; (8005f38 <_free_r+0x9c>)
 8005eb8:	9801      	ldr	r0, [sp, #4]
 8005eba:	6813      	ldr	r3, [r2, #0]
 8005ebc:	4615      	mov	r5, r2
 8005ebe:	b933      	cbnz	r3, 8005ece <_free_r+0x32>
 8005ec0:	6063      	str	r3, [r4, #4]
 8005ec2:	6014      	str	r4, [r2, #0]
 8005ec4:	b003      	add	sp, #12
 8005ec6:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8005eca:	f000 b8c7 	b.w	800605c <__malloc_unlock>
 8005ece:	42a3      	cmp	r3, r4
 8005ed0:	d90b      	bls.n	8005eea <_free_r+0x4e>
 8005ed2:	6821      	ldr	r1, [r4, #0]
 8005ed4:	1862      	adds	r2, r4, r1
 8005ed6:	4293      	cmp	r3, r2
 8005ed8:	bf04      	itt	eq
 8005eda:	681a      	ldreq	r2, [r3, #0]
 8005edc:	685b      	ldreq	r3, [r3, #4]
 8005ede:	6063      	str	r3, [r4, #4]
 8005ee0:	bf04      	itt	eq
 8005ee2:	1852      	addeq	r2, r2, r1
 8005ee4:	6022      	streq	r2, [r4, #0]
 8005ee6:	602c      	str	r4, [r5, #0]
 8005ee8:	e7ec      	b.n	8005ec4 <_free_r+0x28>
 8005eea:	461a      	mov	r2, r3
 8005eec:	685b      	ldr	r3, [r3, #4]
 8005eee:	b10b      	cbz	r3, 8005ef4 <_free_r+0x58>
 8005ef0:	42a3      	cmp	r3, r4
 8005ef2:	d9fa      	bls.n	8005eea <_free_r+0x4e>
 8005ef4:	6811      	ldr	r1, [r2, #0]
 8005ef6:	1855      	adds	r5, r2, r1
 8005ef8:	42a5      	cmp	r5, r4
 8005efa:	d10b      	bne.n	8005f14 <_free_r+0x78>
 8005efc:	6824      	ldr	r4, [r4, #0]
 8005efe:	4421      	add	r1, r4
 8005f00:	1854      	adds	r4, r2, r1
 8005f02:	42a3      	cmp	r3, r4
 8005f04:	6011      	str	r1, [r2, #0]
 8005f06:	d1dd      	bne.n	8005ec4 <_free_r+0x28>
 8005f08:	681c      	ldr	r4, [r3, #0]
 8005f0a:	685b      	ldr	r3, [r3, #4]
 8005f0c:	6053      	str	r3, [r2, #4]
 8005f0e:	4421      	add	r1, r4
 8005f10:	6011      	str	r1, [r2, #0]
 8005f12:	e7d7      	b.n	8005ec4 <_free_r+0x28>
 8005f14:	d902      	bls.n	8005f1c <_free_r+0x80>
 8005f16:	230c      	movs	r3, #12
 8005f18:	6003      	str	r3, [r0, #0]
 8005f1a:	e7d3      	b.n	8005ec4 <_free_r+0x28>
 8005f1c:	6825      	ldr	r5, [r4, #0]
 8005f1e:	1961      	adds	r1, r4, r5
 8005f20:	428b      	cmp	r3, r1
 8005f22:	bf04      	itt	eq
 8005f24:	6819      	ldreq	r1, [r3, #0]
 8005f26:	685b      	ldreq	r3, [r3, #4]
 8005f28:	6063      	str	r3, [r4, #4]
 8005f2a:	bf04      	itt	eq
 8005f2c:	1949      	addeq	r1, r1, r5
 8005f2e:	6021      	streq	r1, [r4, #0]
 8005f30:	6054      	str	r4, [r2, #4]
 8005f32:	e7c7      	b.n	8005ec4 <_free_r+0x28>
 8005f34:	b003      	add	sp, #12
 8005f36:	bd30      	pop	{r4, r5, pc}
 8005f38:	200043d0 	.word	0x200043d0

08005f3c <_malloc_r>:
 8005f3c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005f3e:	1ccd      	adds	r5, r1, #3
 8005f40:	f025 0503 	bic.w	r5, r5, #3
 8005f44:	3508      	adds	r5, #8
 8005f46:	2d0c      	cmp	r5, #12
 8005f48:	bf38      	it	cc
 8005f4a:	250c      	movcc	r5, #12
 8005f4c:	2d00      	cmp	r5, #0
 8005f4e:	4606      	mov	r6, r0
 8005f50:	db01      	blt.n	8005f56 <_malloc_r+0x1a>
 8005f52:	42a9      	cmp	r1, r5
 8005f54:	d903      	bls.n	8005f5e <_malloc_r+0x22>
 8005f56:	230c      	movs	r3, #12
 8005f58:	6033      	str	r3, [r6, #0]
 8005f5a:	2000      	movs	r0, #0
 8005f5c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005f5e:	f000 f877 	bl	8006050 <__malloc_lock>
 8005f62:	4921      	ldr	r1, [pc, #132]	; (8005fe8 <_malloc_r+0xac>)
 8005f64:	680a      	ldr	r2, [r1, #0]
 8005f66:	4614      	mov	r4, r2
 8005f68:	b99c      	cbnz	r4, 8005f92 <_malloc_r+0x56>
 8005f6a:	4f20      	ldr	r7, [pc, #128]	; (8005fec <_malloc_r+0xb0>)
 8005f6c:	683b      	ldr	r3, [r7, #0]
 8005f6e:	b923      	cbnz	r3, 8005f7a <_malloc_r+0x3e>
 8005f70:	4621      	mov	r1, r4
 8005f72:	4630      	mov	r0, r6
 8005f74:	f000 f83c 	bl	8005ff0 <_sbrk_r>
 8005f78:	6038      	str	r0, [r7, #0]
 8005f7a:	4629      	mov	r1, r5
 8005f7c:	4630      	mov	r0, r6
 8005f7e:	f000 f837 	bl	8005ff0 <_sbrk_r>
 8005f82:	1c43      	adds	r3, r0, #1
 8005f84:	d123      	bne.n	8005fce <_malloc_r+0x92>
 8005f86:	230c      	movs	r3, #12
 8005f88:	6033      	str	r3, [r6, #0]
 8005f8a:	4630      	mov	r0, r6
 8005f8c:	f000 f866 	bl	800605c <__malloc_unlock>
 8005f90:	e7e3      	b.n	8005f5a <_malloc_r+0x1e>
 8005f92:	6823      	ldr	r3, [r4, #0]
 8005f94:	1b5b      	subs	r3, r3, r5
 8005f96:	d417      	bmi.n	8005fc8 <_malloc_r+0x8c>
 8005f98:	2b0b      	cmp	r3, #11
 8005f9a:	d903      	bls.n	8005fa4 <_malloc_r+0x68>
 8005f9c:	6023      	str	r3, [r4, #0]
 8005f9e:	441c      	add	r4, r3
 8005fa0:	6025      	str	r5, [r4, #0]
 8005fa2:	e004      	b.n	8005fae <_malloc_r+0x72>
 8005fa4:	6863      	ldr	r3, [r4, #4]
 8005fa6:	42a2      	cmp	r2, r4
 8005fa8:	bf0c      	ite	eq
 8005faa:	600b      	streq	r3, [r1, #0]
 8005fac:	6053      	strne	r3, [r2, #4]
 8005fae:	4630      	mov	r0, r6
 8005fb0:	f000 f854 	bl	800605c <__malloc_unlock>
 8005fb4:	f104 000b 	add.w	r0, r4, #11
 8005fb8:	1d23      	adds	r3, r4, #4
 8005fba:	f020 0007 	bic.w	r0, r0, #7
 8005fbe:	1ac2      	subs	r2, r0, r3
 8005fc0:	d0cc      	beq.n	8005f5c <_malloc_r+0x20>
 8005fc2:	1a1b      	subs	r3, r3, r0
 8005fc4:	50a3      	str	r3, [r4, r2]
 8005fc6:	e7c9      	b.n	8005f5c <_malloc_r+0x20>
 8005fc8:	4622      	mov	r2, r4
 8005fca:	6864      	ldr	r4, [r4, #4]
 8005fcc:	e7cc      	b.n	8005f68 <_malloc_r+0x2c>
 8005fce:	1cc4      	adds	r4, r0, #3
 8005fd0:	f024 0403 	bic.w	r4, r4, #3
 8005fd4:	42a0      	cmp	r0, r4
 8005fd6:	d0e3      	beq.n	8005fa0 <_malloc_r+0x64>
 8005fd8:	1a21      	subs	r1, r4, r0
 8005fda:	4630      	mov	r0, r6
 8005fdc:	f000 f808 	bl	8005ff0 <_sbrk_r>
 8005fe0:	3001      	adds	r0, #1
 8005fe2:	d1dd      	bne.n	8005fa0 <_malloc_r+0x64>
 8005fe4:	e7cf      	b.n	8005f86 <_malloc_r+0x4a>
 8005fe6:	bf00      	nop
 8005fe8:	200043d0 	.word	0x200043d0
 8005fec:	200043d4 	.word	0x200043d4

08005ff0 <_sbrk_r>:
 8005ff0:	b538      	push	{r3, r4, r5, lr}
 8005ff2:	4d06      	ldr	r5, [pc, #24]	; (800600c <_sbrk_r+0x1c>)
 8005ff4:	2300      	movs	r3, #0
 8005ff6:	4604      	mov	r4, r0
 8005ff8:	4608      	mov	r0, r1
 8005ffa:	602b      	str	r3, [r5, #0]
 8005ffc:	f7fa fdce 	bl	8000b9c <_sbrk>
 8006000:	1c43      	adds	r3, r0, #1
 8006002:	d102      	bne.n	800600a <_sbrk_r+0x1a>
 8006004:	682b      	ldr	r3, [r5, #0]
 8006006:	b103      	cbz	r3, 800600a <_sbrk_r+0x1a>
 8006008:	6023      	str	r3, [r4, #0]
 800600a:	bd38      	pop	{r3, r4, r5, pc}
 800600c:	20005d24 	.word	0x20005d24

08006010 <siprintf>:
 8006010:	b40e      	push	{r1, r2, r3}
 8006012:	b500      	push	{lr}
 8006014:	b09c      	sub	sp, #112	; 0x70
 8006016:	ab1d      	add	r3, sp, #116	; 0x74
 8006018:	9002      	str	r0, [sp, #8]
 800601a:	9006      	str	r0, [sp, #24]
 800601c:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8006020:	4809      	ldr	r0, [pc, #36]	; (8006048 <siprintf+0x38>)
 8006022:	9107      	str	r1, [sp, #28]
 8006024:	9104      	str	r1, [sp, #16]
 8006026:	4909      	ldr	r1, [pc, #36]	; (800604c <siprintf+0x3c>)
 8006028:	f853 2b04 	ldr.w	r2, [r3], #4
 800602c:	9105      	str	r1, [sp, #20]
 800602e:	6800      	ldr	r0, [r0, #0]
 8006030:	9301      	str	r3, [sp, #4]
 8006032:	a902      	add	r1, sp, #8
 8006034:	f000 f874 	bl	8006120 <_svfiprintf_r>
 8006038:	9b02      	ldr	r3, [sp, #8]
 800603a:	2200      	movs	r2, #0
 800603c:	701a      	strb	r2, [r3, #0]
 800603e:	b01c      	add	sp, #112	; 0x70
 8006040:	f85d eb04 	ldr.w	lr, [sp], #4
 8006044:	b003      	add	sp, #12
 8006046:	4770      	bx	lr
 8006048:	20000184 	.word	0x20000184
 800604c:	ffff0208 	.word	0xffff0208

08006050 <__malloc_lock>:
 8006050:	4801      	ldr	r0, [pc, #4]	; (8006058 <__malloc_lock+0x8>)
 8006052:	f000 baf9 	b.w	8006648 <__retarget_lock_acquire_recursive>
 8006056:	bf00      	nop
 8006058:	20005d2c 	.word	0x20005d2c

0800605c <__malloc_unlock>:
 800605c:	4801      	ldr	r0, [pc, #4]	; (8006064 <__malloc_unlock+0x8>)
 800605e:	f000 baf4 	b.w	800664a <__retarget_lock_release_recursive>
 8006062:	bf00      	nop
 8006064:	20005d2c 	.word	0x20005d2c

08006068 <__ssputs_r>:
 8006068:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800606c:	688e      	ldr	r6, [r1, #8]
 800606e:	429e      	cmp	r6, r3
 8006070:	4682      	mov	sl, r0
 8006072:	460c      	mov	r4, r1
 8006074:	4690      	mov	r8, r2
 8006076:	461f      	mov	r7, r3
 8006078:	d838      	bhi.n	80060ec <__ssputs_r+0x84>
 800607a:	898a      	ldrh	r2, [r1, #12]
 800607c:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8006080:	d032      	beq.n	80060e8 <__ssputs_r+0x80>
 8006082:	6825      	ldr	r5, [r4, #0]
 8006084:	6909      	ldr	r1, [r1, #16]
 8006086:	eba5 0901 	sub.w	r9, r5, r1
 800608a:	6965      	ldr	r5, [r4, #20]
 800608c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8006090:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8006094:	3301      	adds	r3, #1
 8006096:	444b      	add	r3, r9
 8006098:	106d      	asrs	r5, r5, #1
 800609a:	429d      	cmp	r5, r3
 800609c:	bf38      	it	cc
 800609e:	461d      	movcc	r5, r3
 80060a0:	0553      	lsls	r3, r2, #21
 80060a2:	d531      	bpl.n	8006108 <__ssputs_r+0xa0>
 80060a4:	4629      	mov	r1, r5
 80060a6:	f7ff ff49 	bl	8005f3c <_malloc_r>
 80060aa:	4606      	mov	r6, r0
 80060ac:	b950      	cbnz	r0, 80060c4 <__ssputs_r+0x5c>
 80060ae:	230c      	movs	r3, #12
 80060b0:	f8ca 3000 	str.w	r3, [sl]
 80060b4:	89a3      	ldrh	r3, [r4, #12]
 80060b6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80060ba:	81a3      	strh	r3, [r4, #12]
 80060bc:	f04f 30ff 	mov.w	r0, #4294967295
 80060c0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80060c4:	6921      	ldr	r1, [r4, #16]
 80060c6:	464a      	mov	r2, r9
 80060c8:	f7ff fed2 	bl	8005e70 <memcpy>
 80060cc:	89a3      	ldrh	r3, [r4, #12]
 80060ce:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80060d2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80060d6:	81a3      	strh	r3, [r4, #12]
 80060d8:	6126      	str	r6, [r4, #16]
 80060da:	6165      	str	r5, [r4, #20]
 80060dc:	444e      	add	r6, r9
 80060de:	eba5 0509 	sub.w	r5, r5, r9
 80060e2:	6026      	str	r6, [r4, #0]
 80060e4:	60a5      	str	r5, [r4, #8]
 80060e6:	463e      	mov	r6, r7
 80060e8:	42be      	cmp	r6, r7
 80060ea:	d900      	bls.n	80060ee <__ssputs_r+0x86>
 80060ec:	463e      	mov	r6, r7
 80060ee:	4632      	mov	r2, r6
 80060f0:	6820      	ldr	r0, [r4, #0]
 80060f2:	4641      	mov	r1, r8
 80060f4:	f000 faaa 	bl	800664c <memmove>
 80060f8:	68a3      	ldr	r3, [r4, #8]
 80060fa:	6822      	ldr	r2, [r4, #0]
 80060fc:	1b9b      	subs	r3, r3, r6
 80060fe:	4432      	add	r2, r6
 8006100:	60a3      	str	r3, [r4, #8]
 8006102:	6022      	str	r2, [r4, #0]
 8006104:	2000      	movs	r0, #0
 8006106:	e7db      	b.n	80060c0 <__ssputs_r+0x58>
 8006108:	462a      	mov	r2, r5
 800610a:	f000 fab9 	bl	8006680 <_realloc_r>
 800610e:	4606      	mov	r6, r0
 8006110:	2800      	cmp	r0, #0
 8006112:	d1e1      	bne.n	80060d8 <__ssputs_r+0x70>
 8006114:	6921      	ldr	r1, [r4, #16]
 8006116:	4650      	mov	r0, sl
 8006118:	f7ff fec0 	bl	8005e9c <_free_r>
 800611c:	e7c7      	b.n	80060ae <__ssputs_r+0x46>
	...

08006120 <_svfiprintf_r>:
 8006120:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006124:	4698      	mov	r8, r3
 8006126:	898b      	ldrh	r3, [r1, #12]
 8006128:	061b      	lsls	r3, r3, #24
 800612a:	b09d      	sub	sp, #116	; 0x74
 800612c:	4607      	mov	r7, r0
 800612e:	460d      	mov	r5, r1
 8006130:	4614      	mov	r4, r2
 8006132:	d50e      	bpl.n	8006152 <_svfiprintf_r+0x32>
 8006134:	690b      	ldr	r3, [r1, #16]
 8006136:	b963      	cbnz	r3, 8006152 <_svfiprintf_r+0x32>
 8006138:	2140      	movs	r1, #64	; 0x40
 800613a:	f7ff feff 	bl	8005f3c <_malloc_r>
 800613e:	6028      	str	r0, [r5, #0]
 8006140:	6128      	str	r0, [r5, #16]
 8006142:	b920      	cbnz	r0, 800614e <_svfiprintf_r+0x2e>
 8006144:	230c      	movs	r3, #12
 8006146:	603b      	str	r3, [r7, #0]
 8006148:	f04f 30ff 	mov.w	r0, #4294967295
 800614c:	e0d1      	b.n	80062f2 <_svfiprintf_r+0x1d2>
 800614e:	2340      	movs	r3, #64	; 0x40
 8006150:	616b      	str	r3, [r5, #20]
 8006152:	2300      	movs	r3, #0
 8006154:	9309      	str	r3, [sp, #36]	; 0x24
 8006156:	2320      	movs	r3, #32
 8006158:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800615c:	f8cd 800c 	str.w	r8, [sp, #12]
 8006160:	2330      	movs	r3, #48	; 0x30
 8006162:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 800630c <_svfiprintf_r+0x1ec>
 8006166:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800616a:	f04f 0901 	mov.w	r9, #1
 800616e:	4623      	mov	r3, r4
 8006170:	469a      	mov	sl, r3
 8006172:	f813 2b01 	ldrb.w	r2, [r3], #1
 8006176:	b10a      	cbz	r2, 800617c <_svfiprintf_r+0x5c>
 8006178:	2a25      	cmp	r2, #37	; 0x25
 800617a:	d1f9      	bne.n	8006170 <_svfiprintf_r+0x50>
 800617c:	ebba 0b04 	subs.w	fp, sl, r4
 8006180:	d00b      	beq.n	800619a <_svfiprintf_r+0x7a>
 8006182:	465b      	mov	r3, fp
 8006184:	4622      	mov	r2, r4
 8006186:	4629      	mov	r1, r5
 8006188:	4638      	mov	r0, r7
 800618a:	f7ff ff6d 	bl	8006068 <__ssputs_r>
 800618e:	3001      	adds	r0, #1
 8006190:	f000 80aa 	beq.w	80062e8 <_svfiprintf_r+0x1c8>
 8006194:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8006196:	445a      	add	r2, fp
 8006198:	9209      	str	r2, [sp, #36]	; 0x24
 800619a:	f89a 3000 	ldrb.w	r3, [sl]
 800619e:	2b00      	cmp	r3, #0
 80061a0:	f000 80a2 	beq.w	80062e8 <_svfiprintf_r+0x1c8>
 80061a4:	2300      	movs	r3, #0
 80061a6:	f04f 32ff 	mov.w	r2, #4294967295
 80061aa:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80061ae:	f10a 0a01 	add.w	sl, sl, #1
 80061b2:	9304      	str	r3, [sp, #16]
 80061b4:	9307      	str	r3, [sp, #28]
 80061b6:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80061ba:	931a      	str	r3, [sp, #104]	; 0x68
 80061bc:	4654      	mov	r4, sl
 80061be:	2205      	movs	r2, #5
 80061c0:	f814 1b01 	ldrb.w	r1, [r4], #1
 80061c4:	4851      	ldr	r0, [pc, #324]	; (800630c <_svfiprintf_r+0x1ec>)
 80061c6:	f7fa f80b 	bl	80001e0 <memchr>
 80061ca:	9a04      	ldr	r2, [sp, #16]
 80061cc:	b9d8      	cbnz	r0, 8006206 <_svfiprintf_r+0xe6>
 80061ce:	06d0      	lsls	r0, r2, #27
 80061d0:	bf44      	itt	mi
 80061d2:	2320      	movmi	r3, #32
 80061d4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80061d8:	0711      	lsls	r1, r2, #28
 80061da:	bf44      	itt	mi
 80061dc:	232b      	movmi	r3, #43	; 0x2b
 80061de:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80061e2:	f89a 3000 	ldrb.w	r3, [sl]
 80061e6:	2b2a      	cmp	r3, #42	; 0x2a
 80061e8:	d015      	beq.n	8006216 <_svfiprintf_r+0xf6>
 80061ea:	9a07      	ldr	r2, [sp, #28]
 80061ec:	4654      	mov	r4, sl
 80061ee:	2000      	movs	r0, #0
 80061f0:	f04f 0c0a 	mov.w	ip, #10
 80061f4:	4621      	mov	r1, r4
 80061f6:	f811 3b01 	ldrb.w	r3, [r1], #1
 80061fa:	3b30      	subs	r3, #48	; 0x30
 80061fc:	2b09      	cmp	r3, #9
 80061fe:	d94e      	bls.n	800629e <_svfiprintf_r+0x17e>
 8006200:	b1b0      	cbz	r0, 8006230 <_svfiprintf_r+0x110>
 8006202:	9207      	str	r2, [sp, #28]
 8006204:	e014      	b.n	8006230 <_svfiprintf_r+0x110>
 8006206:	eba0 0308 	sub.w	r3, r0, r8
 800620a:	fa09 f303 	lsl.w	r3, r9, r3
 800620e:	4313      	orrs	r3, r2
 8006210:	9304      	str	r3, [sp, #16]
 8006212:	46a2      	mov	sl, r4
 8006214:	e7d2      	b.n	80061bc <_svfiprintf_r+0x9c>
 8006216:	9b03      	ldr	r3, [sp, #12]
 8006218:	1d19      	adds	r1, r3, #4
 800621a:	681b      	ldr	r3, [r3, #0]
 800621c:	9103      	str	r1, [sp, #12]
 800621e:	2b00      	cmp	r3, #0
 8006220:	bfbb      	ittet	lt
 8006222:	425b      	neglt	r3, r3
 8006224:	f042 0202 	orrlt.w	r2, r2, #2
 8006228:	9307      	strge	r3, [sp, #28]
 800622a:	9307      	strlt	r3, [sp, #28]
 800622c:	bfb8      	it	lt
 800622e:	9204      	strlt	r2, [sp, #16]
 8006230:	7823      	ldrb	r3, [r4, #0]
 8006232:	2b2e      	cmp	r3, #46	; 0x2e
 8006234:	d10c      	bne.n	8006250 <_svfiprintf_r+0x130>
 8006236:	7863      	ldrb	r3, [r4, #1]
 8006238:	2b2a      	cmp	r3, #42	; 0x2a
 800623a:	d135      	bne.n	80062a8 <_svfiprintf_r+0x188>
 800623c:	9b03      	ldr	r3, [sp, #12]
 800623e:	1d1a      	adds	r2, r3, #4
 8006240:	681b      	ldr	r3, [r3, #0]
 8006242:	9203      	str	r2, [sp, #12]
 8006244:	2b00      	cmp	r3, #0
 8006246:	bfb8      	it	lt
 8006248:	f04f 33ff 	movlt.w	r3, #4294967295
 800624c:	3402      	adds	r4, #2
 800624e:	9305      	str	r3, [sp, #20]
 8006250:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800631c <_svfiprintf_r+0x1fc>
 8006254:	7821      	ldrb	r1, [r4, #0]
 8006256:	2203      	movs	r2, #3
 8006258:	4650      	mov	r0, sl
 800625a:	f7f9 ffc1 	bl	80001e0 <memchr>
 800625e:	b140      	cbz	r0, 8006272 <_svfiprintf_r+0x152>
 8006260:	2340      	movs	r3, #64	; 0x40
 8006262:	eba0 000a 	sub.w	r0, r0, sl
 8006266:	fa03 f000 	lsl.w	r0, r3, r0
 800626a:	9b04      	ldr	r3, [sp, #16]
 800626c:	4303      	orrs	r3, r0
 800626e:	3401      	adds	r4, #1
 8006270:	9304      	str	r3, [sp, #16]
 8006272:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006276:	4826      	ldr	r0, [pc, #152]	; (8006310 <_svfiprintf_r+0x1f0>)
 8006278:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800627c:	2206      	movs	r2, #6
 800627e:	f7f9 ffaf 	bl	80001e0 <memchr>
 8006282:	2800      	cmp	r0, #0
 8006284:	d038      	beq.n	80062f8 <_svfiprintf_r+0x1d8>
 8006286:	4b23      	ldr	r3, [pc, #140]	; (8006314 <_svfiprintf_r+0x1f4>)
 8006288:	bb1b      	cbnz	r3, 80062d2 <_svfiprintf_r+0x1b2>
 800628a:	9b03      	ldr	r3, [sp, #12]
 800628c:	3307      	adds	r3, #7
 800628e:	f023 0307 	bic.w	r3, r3, #7
 8006292:	3308      	adds	r3, #8
 8006294:	9303      	str	r3, [sp, #12]
 8006296:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006298:	4433      	add	r3, r6
 800629a:	9309      	str	r3, [sp, #36]	; 0x24
 800629c:	e767      	b.n	800616e <_svfiprintf_r+0x4e>
 800629e:	fb0c 3202 	mla	r2, ip, r2, r3
 80062a2:	460c      	mov	r4, r1
 80062a4:	2001      	movs	r0, #1
 80062a6:	e7a5      	b.n	80061f4 <_svfiprintf_r+0xd4>
 80062a8:	2300      	movs	r3, #0
 80062aa:	3401      	adds	r4, #1
 80062ac:	9305      	str	r3, [sp, #20]
 80062ae:	4619      	mov	r1, r3
 80062b0:	f04f 0c0a 	mov.w	ip, #10
 80062b4:	4620      	mov	r0, r4
 80062b6:	f810 2b01 	ldrb.w	r2, [r0], #1
 80062ba:	3a30      	subs	r2, #48	; 0x30
 80062bc:	2a09      	cmp	r2, #9
 80062be:	d903      	bls.n	80062c8 <_svfiprintf_r+0x1a8>
 80062c0:	2b00      	cmp	r3, #0
 80062c2:	d0c5      	beq.n	8006250 <_svfiprintf_r+0x130>
 80062c4:	9105      	str	r1, [sp, #20]
 80062c6:	e7c3      	b.n	8006250 <_svfiprintf_r+0x130>
 80062c8:	fb0c 2101 	mla	r1, ip, r1, r2
 80062cc:	4604      	mov	r4, r0
 80062ce:	2301      	movs	r3, #1
 80062d0:	e7f0      	b.n	80062b4 <_svfiprintf_r+0x194>
 80062d2:	ab03      	add	r3, sp, #12
 80062d4:	9300      	str	r3, [sp, #0]
 80062d6:	462a      	mov	r2, r5
 80062d8:	4b0f      	ldr	r3, [pc, #60]	; (8006318 <_svfiprintf_r+0x1f8>)
 80062da:	a904      	add	r1, sp, #16
 80062dc:	4638      	mov	r0, r7
 80062de:	f3af 8000 	nop.w
 80062e2:	1c42      	adds	r2, r0, #1
 80062e4:	4606      	mov	r6, r0
 80062e6:	d1d6      	bne.n	8006296 <_svfiprintf_r+0x176>
 80062e8:	89ab      	ldrh	r3, [r5, #12]
 80062ea:	065b      	lsls	r3, r3, #25
 80062ec:	f53f af2c 	bmi.w	8006148 <_svfiprintf_r+0x28>
 80062f0:	9809      	ldr	r0, [sp, #36]	; 0x24
 80062f2:	b01d      	add	sp, #116	; 0x74
 80062f4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80062f8:	ab03      	add	r3, sp, #12
 80062fa:	9300      	str	r3, [sp, #0]
 80062fc:	462a      	mov	r2, r5
 80062fe:	4b06      	ldr	r3, [pc, #24]	; (8006318 <_svfiprintf_r+0x1f8>)
 8006300:	a904      	add	r1, sp, #16
 8006302:	4638      	mov	r0, r7
 8006304:	f000 f87a 	bl	80063fc <_printf_i>
 8006308:	e7eb      	b.n	80062e2 <_svfiprintf_r+0x1c2>
 800630a:	bf00      	nop
 800630c:	08006826 	.word	0x08006826
 8006310:	08006830 	.word	0x08006830
 8006314:	00000000 	.word	0x00000000
 8006318:	08006069 	.word	0x08006069
 800631c:	0800682c 	.word	0x0800682c

08006320 <_printf_common>:
 8006320:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006324:	4616      	mov	r6, r2
 8006326:	4699      	mov	r9, r3
 8006328:	688a      	ldr	r2, [r1, #8]
 800632a:	690b      	ldr	r3, [r1, #16]
 800632c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8006330:	4293      	cmp	r3, r2
 8006332:	bfb8      	it	lt
 8006334:	4613      	movlt	r3, r2
 8006336:	6033      	str	r3, [r6, #0]
 8006338:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800633c:	4607      	mov	r7, r0
 800633e:	460c      	mov	r4, r1
 8006340:	b10a      	cbz	r2, 8006346 <_printf_common+0x26>
 8006342:	3301      	adds	r3, #1
 8006344:	6033      	str	r3, [r6, #0]
 8006346:	6823      	ldr	r3, [r4, #0]
 8006348:	0699      	lsls	r1, r3, #26
 800634a:	bf42      	ittt	mi
 800634c:	6833      	ldrmi	r3, [r6, #0]
 800634e:	3302      	addmi	r3, #2
 8006350:	6033      	strmi	r3, [r6, #0]
 8006352:	6825      	ldr	r5, [r4, #0]
 8006354:	f015 0506 	ands.w	r5, r5, #6
 8006358:	d106      	bne.n	8006368 <_printf_common+0x48>
 800635a:	f104 0a19 	add.w	sl, r4, #25
 800635e:	68e3      	ldr	r3, [r4, #12]
 8006360:	6832      	ldr	r2, [r6, #0]
 8006362:	1a9b      	subs	r3, r3, r2
 8006364:	42ab      	cmp	r3, r5
 8006366:	dc26      	bgt.n	80063b6 <_printf_common+0x96>
 8006368:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800636c:	1e13      	subs	r3, r2, #0
 800636e:	6822      	ldr	r2, [r4, #0]
 8006370:	bf18      	it	ne
 8006372:	2301      	movne	r3, #1
 8006374:	0692      	lsls	r2, r2, #26
 8006376:	d42b      	bmi.n	80063d0 <_printf_common+0xb0>
 8006378:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800637c:	4649      	mov	r1, r9
 800637e:	4638      	mov	r0, r7
 8006380:	47c0      	blx	r8
 8006382:	3001      	adds	r0, #1
 8006384:	d01e      	beq.n	80063c4 <_printf_common+0xa4>
 8006386:	6823      	ldr	r3, [r4, #0]
 8006388:	68e5      	ldr	r5, [r4, #12]
 800638a:	6832      	ldr	r2, [r6, #0]
 800638c:	f003 0306 	and.w	r3, r3, #6
 8006390:	2b04      	cmp	r3, #4
 8006392:	bf08      	it	eq
 8006394:	1aad      	subeq	r5, r5, r2
 8006396:	68a3      	ldr	r3, [r4, #8]
 8006398:	6922      	ldr	r2, [r4, #16]
 800639a:	bf0c      	ite	eq
 800639c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80063a0:	2500      	movne	r5, #0
 80063a2:	4293      	cmp	r3, r2
 80063a4:	bfc4      	itt	gt
 80063a6:	1a9b      	subgt	r3, r3, r2
 80063a8:	18ed      	addgt	r5, r5, r3
 80063aa:	2600      	movs	r6, #0
 80063ac:	341a      	adds	r4, #26
 80063ae:	42b5      	cmp	r5, r6
 80063b0:	d11a      	bne.n	80063e8 <_printf_common+0xc8>
 80063b2:	2000      	movs	r0, #0
 80063b4:	e008      	b.n	80063c8 <_printf_common+0xa8>
 80063b6:	2301      	movs	r3, #1
 80063b8:	4652      	mov	r2, sl
 80063ba:	4649      	mov	r1, r9
 80063bc:	4638      	mov	r0, r7
 80063be:	47c0      	blx	r8
 80063c0:	3001      	adds	r0, #1
 80063c2:	d103      	bne.n	80063cc <_printf_common+0xac>
 80063c4:	f04f 30ff 	mov.w	r0, #4294967295
 80063c8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80063cc:	3501      	adds	r5, #1
 80063ce:	e7c6      	b.n	800635e <_printf_common+0x3e>
 80063d0:	18e1      	adds	r1, r4, r3
 80063d2:	1c5a      	adds	r2, r3, #1
 80063d4:	2030      	movs	r0, #48	; 0x30
 80063d6:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80063da:	4422      	add	r2, r4
 80063dc:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80063e0:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80063e4:	3302      	adds	r3, #2
 80063e6:	e7c7      	b.n	8006378 <_printf_common+0x58>
 80063e8:	2301      	movs	r3, #1
 80063ea:	4622      	mov	r2, r4
 80063ec:	4649      	mov	r1, r9
 80063ee:	4638      	mov	r0, r7
 80063f0:	47c0      	blx	r8
 80063f2:	3001      	adds	r0, #1
 80063f4:	d0e6      	beq.n	80063c4 <_printf_common+0xa4>
 80063f6:	3601      	adds	r6, #1
 80063f8:	e7d9      	b.n	80063ae <_printf_common+0x8e>
	...

080063fc <_printf_i>:
 80063fc:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8006400:	460c      	mov	r4, r1
 8006402:	4691      	mov	r9, r2
 8006404:	7e27      	ldrb	r7, [r4, #24]
 8006406:	990c      	ldr	r1, [sp, #48]	; 0x30
 8006408:	2f78      	cmp	r7, #120	; 0x78
 800640a:	4680      	mov	r8, r0
 800640c:	469a      	mov	sl, r3
 800640e:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8006412:	d807      	bhi.n	8006424 <_printf_i+0x28>
 8006414:	2f62      	cmp	r7, #98	; 0x62
 8006416:	d80a      	bhi.n	800642e <_printf_i+0x32>
 8006418:	2f00      	cmp	r7, #0
 800641a:	f000 80d8 	beq.w	80065ce <_printf_i+0x1d2>
 800641e:	2f58      	cmp	r7, #88	; 0x58
 8006420:	f000 80a3 	beq.w	800656a <_printf_i+0x16e>
 8006424:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8006428:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800642c:	e03a      	b.n	80064a4 <_printf_i+0xa8>
 800642e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8006432:	2b15      	cmp	r3, #21
 8006434:	d8f6      	bhi.n	8006424 <_printf_i+0x28>
 8006436:	a001      	add	r0, pc, #4	; (adr r0, 800643c <_printf_i+0x40>)
 8006438:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 800643c:	08006495 	.word	0x08006495
 8006440:	080064a9 	.word	0x080064a9
 8006444:	08006425 	.word	0x08006425
 8006448:	08006425 	.word	0x08006425
 800644c:	08006425 	.word	0x08006425
 8006450:	08006425 	.word	0x08006425
 8006454:	080064a9 	.word	0x080064a9
 8006458:	08006425 	.word	0x08006425
 800645c:	08006425 	.word	0x08006425
 8006460:	08006425 	.word	0x08006425
 8006464:	08006425 	.word	0x08006425
 8006468:	080065b5 	.word	0x080065b5
 800646c:	080064d9 	.word	0x080064d9
 8006470:	08006597 	.word	0x08006597
 8006474:	08006425 	.word	0x08006425
 8006478:	08006425 	.word	0x08006425
 800647c:	080065d7 	.word	0x080065d7
 8006480:	08006425 	.word	0x08006425
 8006484:	080064d9 	.word	0x080064d9
 8006488:	08006425 	.word	0x08006425
 800648c:	08006425 	.word	0x08006425
 8006490:	0800659f 	.word	0x0800659f
 8006494:	680b      	ldr	r3, [r1, #0]
 8006496:	1d1a      	adds	r2, r3, #4
 8006498:	681b      	ldr	r3, [r3, #0]
 800649a:	600a      	str	r2, [r1, #0]
 800649c:	f104 0642 	add.w	r6, r4, #66	; 0x42
 80064a0:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80064a4:	2301      	movs	r3, #1
 80064a6:	e0a3      	b.n	80065f0 <_printf_i+0x1f4>
 80064a8:	6825      	ldr	r5, [r4, #0]
 80064aa:	6808      	ldr	r0, [r1, #0]
 80064ac:	062e      	lsls	r6, r5, #24
 80064ae:	f100 0304 	add.w	r3, r0, #4
 80064b2:	d50a      	bpl.n	80064ca <_printf_i+0xce>
 80064b4:	6805      	ldr	r5, [r0, #0]
 80064b6:	600b      	str	r3, [r1, #0]
 80064b8:	2d00      	cmp	r5, #0
 80064ba:	da03      	bge.n	80064c4 <_printf_i+0xc8>
 80064bc:	232d      	movs	r3, #45	; 0x2d
 80064be:	426d      	negs	r5, r5
 80064c0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80064c4:	485e      	ldr	r0, [pc, #376]	; (8006640 <_printf_i+0x244>)
 80064c6:	230a      	movs	r3, #10
 80064c8:	e019      	b.n	80064fe <_printf_i+0x102>
 80064ca:	f015 0f40 	tst.w	r5, #64	; 0x40
 80064ce:	6805      	ldr	r5, [r0, #0]
 80064d0:	600b      	str	r3, [r1, #0]
 80064d2:	bf18      	it	ne
 80064d4:	b22d      	sxthne	r5, r5
 80064d6:	e7ef      	b.n	80064b8 <_printf_i+0xbc>
 80064d8:	680b      	ldr	r3, [r1, #0]
 80064da:	6825      	ldr	r5, [r4, #0]
 80064dc:	1d18      	adds	r0, r3, #4
 80064de:	6008      	str	r0, [r1, #0]
 80064e0:	0628      	lsls	r0, r5, #24
 80064e2:	d501      	bpl.n	80064e8 <_printf_i+0xec>
 80064e4:	681d      	ldr	r5, [r3, #0]
 80064e6:	e002      	b.n	80064ee <_printf_i+0xf2>
 80064e8:	0669      	lsls	r1, r5, #25
 80064ea:	d5fb      	bpl.n	80064e4 <_printf_i+0xe8>
 80064ec:	881d      	ldrh	r5, [r3, #0]
 80064ee:	4854      	ldr	r0, [pc, #336]	; (8006640 <_printf_i+0x244>)
 80064f0:	2f6f      	cmp	r7, #111	; 0x6f
 80064f2:	bf0c      	ite	eq
 80064f4:	2308      	moveq	r3, #8
 80064f6:	230a      	movne	r3, #10
 80064f8:	2100      	movs	r1, #0
 80064fa:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80064fe:	6866      	ldr	r6, [r4, #4]
 8006500:	60a6      	str	r6, [r4, #8]
 8006502:	2e00      	cmp	r6, #0
 8006504:	bfa2      	ittt	ge
 8006506:	6821      	ldrge	r1, [r4, #0]
 8006508:	f021 0104 	bicge.w	r1, r1, #4
 800650c:	6021      	strge	r1, [r4, #0]
 800650e:	b90d      	cbnz	r5, 8006514 <_printf_i+0x118>
 8006510:	2e00      	cmp	r6, #0
 8006512:	d04d      	beq.n	80065b0 <_printf_i+0x1b4>
 8006514:	4616      	mov	r6, r2
 8006516:	fbb5 f1f3 	udiv	r1, r5, r3
 800651a:	fb03 5711 	mls	r7, r3, r1, r5
 800651e:	5dc7      	ldrb	r7, [r0, r7]
 8006520:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8006524:	462f      	mov	r7, r5
 8006526:	42bb      	cmp	r3, r7
 8006528:	460d      	mov	r5, r1
 800652a:	d9f4      	bls.n	8006516 <_printf_i+0x11a>
 800652c:	2b08      	cmp	r3, #8
 800652e:	d10b      	bne.n	8006548 <_printf_i+0x14c>
 8006530:	6823      	ldr	r3, [r4, #0]
 8006532:	07df      	lsls	r7, r3, #31
 8006534:	d508      	bpl.n	8006548 <_printf_i+0x14c>
 8006536:	6923      	ldr	r3, [r4, #16]
 8006538:	6861      	ldr	r1, [r4, #4]
 800653a:	4299      	cmp	r1, r3
 800653c:	bfde      	ittt	le
 800653e:	2330      	movle	r3, #48	; 0x30
 8006540:	f806 3c01 	strble.w	r3, [r6, #-1]
 8006544:	f106 36ff 	addle.w	r6, r6, #4294967295
 8006548:	1b92      	subs	r2, r2, r6
 800654a:	6122      	str	r2, [r4, #16]
 800654c:	f8cd a000 	str.w	sl, [sp]
 8006550:	464b      	mov	r3, r9
 8006552:	aa03      	add	r2, sp, #12
 8006554:	4621      	mov	r1, r4
 8006556:	4640      	mov	r0, r8
 8006558:	f7ff fee2 	bl	8006320 <_printf_common>
 800655c:	3001      	adds	r0, #1
 800655e:	d14c      	bne.n	80065fa <_printf_i+0x1fe>
 8006560:	f04f 30ff 	mov.w	r0, #4294967295
 8006564:	b004      	add	sp, #16
 8006566:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800656a:	4835      	ldr	r0, [pc, #212]	; (8006640 <_printf_i+0x244>)
 800656c:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8006570:	6823      	ldr	r3, [r4, #0]
 8006572:	680e      	ldr	r6, [r1, #0]
 8006574:	061f      	lsls	r7, r3, #24
 8006576:	f856 5b04 	ldr.w	r5, [r6], #4
 800657a:	600e      	str	r6, [r1, #0]
 800657c:	d514      	bpl.n	80065a8 <_printf_i+0x1ac>
 800657e:	07d9      	lsls	r1, r3, #31
 8006580:	bf44      	itt	mi
 8006582:	f043 0320 	orrmi.w	r3, r3, #32
 8006586:	6023      	strmi	r3, [r4, #0]
 8006588:	b91d      	cbnz	r5, 8006592 <_printf_i+0x196>
 800658a:	6823      	ldr	r3, [r4, #0]
 800658c:	f023 0320 	bic.w	r3, r3, #32
 8006590:	6023      	str	r3, [r4, #0]
 8006592:	2310      	movs	r3, #16
 8006594:	e7b0      	b.n	80064f8 <_printf_i+0xfc>
 8006596:	6823      	ldr	r3, [r4, #0]
 8006598:	f043 0320 	orr.w	r3, r3, #32
 800659c:	6023      	str	r3, [r4, #0]
 800659e:	2378      	movs	r3, #120	; 0x78
 80065a0:	4828      	ldr	r0, [pc, #160]	; (8006644 <_printf_i+0x248>)
 80065a2:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80065a6:	e7e3      	b.n	8006570 <_printf_i+0x174>
 80065a8:	065e      	lsls	r6, r3, #25
 80065aa:	bf48      	it	mi
 80065ac:	b2ad      	uxthmi	r5, r5
 80065ae:	e7e6      	b.n	800657e <_printf_i+0x182>
 80065b0:	4616      	mov	r6, r2
 80065b2:	e7bb      	b.n	800652c <_printf_i+0x130>
 80065b4:	680b      	ldr	r3, [r1, #0]
 80065b6:	6826      	ldr	r6, [r4, #0]
 80065b8:	6960      	ldr	r0, [r4, #20]
 80065ba:	1d1d      	adds	r5, r3, #4
 80065bc:	600d      	str	r5, [r1, #0]
 80065be:	0635      	lsls	r5, r6, #24
 80065c0:	681b      	ldr	r3, [r3, #0]
 80065c2:	d501      	bpl.n	80065c8 <_printf_i+0x1cc>
 80065c4:	6018      	str	r0, [r3, #0]
 80065c6:	e002      	b.n	80065ce <_printf_i+0x1d2>
 80065c8:	0671      	lsls	r1, r6, #25
 80065ca:	d5fb      	bpl.n	80065c4 <_printf_i+0x1c8>
 80065cc:	8018      	strh	r0, [r3, #0]
 80065ce:	2300      	movs	r3, #0
 80065d0:	6123      	str	r3, [r4, #16]
 80065d2:	4616      	mov	r6, r2
 80065d4:	e7ba      	b.n	800654c <_printf_i+0x150>
 80065d6:	680b      	ldr	r3, [r1, #0]
 80065d8:	1d1a      	adds	r2, r3, #4
 80065da:	600a      	str	r2, [r1, #0]
 80065dc:	681e      	ldr	r6, [r3, #0]
 80065de:	6862      	ldr	r2, [r4, #4]
 80065e0:	2100      	movs	r1, #0
 80065e2:	4630      	mov	r0, r6
 80065e4:	f7f9 fdfc 	bl	80001e0 <memchr>
 80065e8:	b108      	cbz	r0, 80065ee <_printf_i+0x1f2>
 80065ea:	1b80      	subs	r0, r0, r6
 80065ec:	6060      	str	r0, [r4, #4]
 80065ee:	6863      	ldr	r3, [r4, #4]
 80065f0:	6123      	str	r3, [r4, #16]
 80065f2:	2300      	movs	r3, #0
 80065f4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80065f8:	e7a8      	b.n	800654c <_printf_i+0x150>
 80065fa:	6923      	ldr	r3, [r4, #16]
 80065fc:	4632      	mov	r2, r6
 80065fe:	4649      	mov	r1, r9
 8006600:	4640      	mov	r0, r8
 8006602:	47d0      	blx	sl
 8006604:	3001      	adds	r0, #1
 8006606:	d0ab      	beq.n	8006560 <_printf_i+0x164>
 8006608:	6823      	ldr	r3, [r4, #0]
 800660a:	079b      	lsls	r3, r3, #30
 800660c:	d413      	bmi.n	8006636 <_printf_i+0x23a>
 800660e:	68e0      	ldr	r0, [r4, #12]
 8006610:	9b03      	ldr	r3, [sp, #12]
 8006612:	4298      	cmp	r0, r3
 8006614:	bfb8      	it	lt
 8006616:	4618      	movlt	r0, r3
 8006618:	e7a4      	b.n	8006564 <_printf_i+0x168>
 800661a:	2301      	movs	r3, #1
 800661c:	4632      	mov	r2, r6
 800661e:	4649      	mov	r1, r9
 8006620:	4640      	mov	r0, r8
 8006622:	47d0      	blx	sl
 8006624:	3001      	adds	r0, #1
 8006626:	d09b      	beq.n	8006560 <_printf_i+0x164>
 8006628:	3501      	adds	r5, #1
 800662a:	68e3      	ldr	r3, [r4, #12]
 800662c:	9903      	ldr	r1, [sp, #12]
 800662e:	1a5b      	subs	r3, r3, r1
 8006630:	42ab      	cmp	r3, r5
 8006632:	dcf2      	bgt.n	800661a <_printf_i+0x21e>
 8006634:	e7eb      	b.n	800660e <_printf_i+0x212>
 8006636:	2500      	movs	r5, #0
 8006638:	f104 0619 	add.w	r6, r4, #25
 800663c:	e7f5      	b.n	800662a <_printf_i+0x22e>
 800663e:	bf00      	nop
 8006640:	08006837 	.word	0x08006837
 8006644:	08006848 	.word	0x08006848

08006648 <__retarget_lock_acquire_recursive>:
 8006648:	4770      	bx	lr

0800664a <__retarget_lock_release_recursive>:
 800664a:	4770      	bx	lr

0800664c <memmove>:
 800664c:	4288      	cmp	r0, r1
 800664e:	b510      	push	{r4, lr}
 8006650:	eb01 0402 	add.w	r4, r1, r2
 8006654:	d902      	bls.n	800665c <memmove+0x10>
 8006656:	4284      	cmp	r4, r0
 8006658:	4623      	mov	r3, r4
 800665a:	d807      	bhi.n	800666c <memmove+0x20>
 800665c:	1e43      	subs	r3, r0, #1
 800665e:	42a1      	cmp	r1, r4
 8006660:	d008      	beq.n	8006674 <memmove+0x28>
 8006662:	f811 2b01 	ldrb.w	r2, [r1], #1
 8006666:	f803 2f01 	strb.w	r2, [r3, #1]!
 800666a:	e7f8      	b.n	800665e <memmove+0x12>
 800666c:	4402      	add	r2, r0
 800666e:	4601      	mov	r1, r0
 8006670:	428a      	cmp	r2, r1
 8006672:	d100      	bne.n	8006676 <memmove+0x2a>
 8006674:	bd10      	pop	{r4, pc}
 8006676:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800667a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800667e:	e7f7      	b.n	8006670 <memmove+0x24>

08006680 <_realloc_r>:
 8006680:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006682:	4607      	mov	r7, r0
 8006684:	4614      	mov	r4, r2
 8006686:	460e      	mov	r6, r1
 8006688:	b921      	cbnz	r1, 8006694 <_realloc_r+0x14>
 800668a:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800668e:	4611      	mov	r1, r2
 8006690:	f7ff bc54 	b.w	8005f3c <_malloc_r>
 8006694:	b922      	cbnz	r2, 80066a0 <_realloc_r+0x20>
 8006696:	f7ff fc01 	bl	8005e9c <_free_r>
 800669a:	4625      	mov	r5, r4
 800669c:	4628      	mov	r0, r5
 800669e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80066a0:	f000 f814 	bl	80066cc <_malloc_usable_size_r>
 80066a4:	42a0      	cmp	r0, r4
 80066a6:	d20f      	bcs.n	80066c8 <_realloc_r+0x48>
 80066a8:	4621      	mov	r1, r4
 80066aa:	4638      	mov	r0, r7
 80066ac:	f7ff fc46 	bl	8005f3c <_malloc_r>
 80066b0:	4605      	mov	r5, r0
 80066b2:	2800      	cmp	r0, #0
 80066b4:	d0f2      	beq.n	800669c <_realloc_r+0x1c>
 80066b6:	4631      	mov	r1, r6
 80066b8:	4622      	mov	r2, r4
 80066ba:	f7ff fbd9 	bl	8005e70 <memcpy>
 80066be:	4631      	mov	r1, r6
 80066c0:	4638      	mov	r0, r7
 80066c2:	f7ff fbeb 	bl	8005e9c <_free_r>
 80066c6:	e7e9      	b.n	800669c <_realloc_r+0x1c>
 80066c8:	4635      	mov	r5, r6
 80066ca:	e7e7      	b.n	800669c <_realloc_r+0x1c>

080066cc <_malloc_usable_size_r>:
 80066cc:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80066d0:	1f18      	subs	r0, r3, #4
 80066d2:	2b00      	cmp	r3, #0
 80066d4:	bfbc      	itt	lt
 80066d6:	580b      	ldrlt	r3, [r1, r0]
 80066d8:	18c0      	addlt	r0, r0, r3
 80066da:	4770      	bx	lr

080066dc <_init>:
 80066dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80066de:	bf00      	nop
 80066e0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80066e2:	bc08      	pop	{r3}
 80066e4:	469e      	mov	lr, r3
 80066e6:	4770      	bx	lr

080066e8 <_fini>:
 80066e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80066ea:	bf00      	nop
 80066ec:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80066ee:	bc08      	pop	{r3}
 80066f0:	469e      	mov	lr, r3
 80066f2:	4770      	bx	lr
